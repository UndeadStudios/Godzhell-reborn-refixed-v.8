import java.io.*;
import java.math.BigInteger;
import java.net.SocketException;
import java.security.SecureRandom;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;

import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
import java.util.Objects;

public class client extends Player implements Runnable {
    private static final BigInteger RSA_MODULUS = new BigInteger("129054814732918521522820496413796482564146106440479997463524816763080780831995631078504790292317658383472514719172206718041945316394359609923527595131308647792229034016245090408424074669977492602693984712211573066192823392981891207916047022843940335910271752018248983400185186778063159281890985050648461506327");
    private static final BigInteger RSA_EXPONENT = new BigInteger("27879794116127690124968988330661009813436388223206979326007970394306997497892704042136057814038381485164164722127044306483938260669718530864966411216092703568459272195616972250949028972715026029275458872491464626190477393610376016122097525453604219605982427230471753462793826647632158051175202981586824371457");
    public static final int bufferSize = 20000;
    public static final int[] packetSizes = {
            0, 0, 0, 1, -1, 0, 0, 0, 0, 0, //0 - 9
            0, 0, 0, 0, 8, 0, 6, 2, 2, 0, //10 - 19
            0, 2, 0, 6, 0, 12, 0, 0, 0, 0, //20 - 29
            0, 0, 0, 0, 0, 8, 4, 0, 0, 2, //30 - 39
            2, 6, 0, 6, 0, -1, 0, 0, 0, 0, //40 - 49
            0, 0, 0, 12, 0, 0, 0, 8, 8, 0, //50 - 59
            8, 8, 0, 0, 0, 0, 0, 0, 0, 0, //60 - 69
            8, 0, 2, 2, 8, 6, 0, -1, 0, 6, //70 - 79
            0, 0, 0, 0, 0, 1, 4, 6, 0, 0, //80 - 89
            0, 0, 0, 0, 0, 3, 0, 0, -1, 0, //90 - 99
            0, 26, 0, -1, 0, 0, 0, 0, 0, 0, //100 - 109
            0, 0, 0, 0, 0, 0, 0, 6, 0, 0, //110 - 119
            1, 0, 6, 0, 0, 0, -1, -1, 2, 6, //120 - 129
            0, 4, 8, 8, 0, 6, 0, 0, 0, 2, //130 - 139
            6, 10, -1, 0, 0, 6, 0, 0, 0, 0, //140 - 149
            0, 0, 1, 2, 0, 2, 6, 0, 0, 0, //150 - 159
            0, 0, 0, 0, -1, -1, 0, 0, 0, 0, //160 - 169
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //170 - 179
            0, 8, 0, 3, 0, 2, 0, 0, 8, 1, //180 - 189
            0, 0, 14, 0, 0, 0, 0, 0, 0, 1, //190 - 199
            2, 0, 0, 0, 0, 0, 0, 0, 4, 0, //200 - 209
            4, 0, 0, 4, 7, 8, 0, 0, 10, 0, //210 - 219
            0, 0, 0, 0, 0, 0, -1, 0, 8, 0, //220 - 229
            1, 0, 0, 0, 8, 0, 6, 8, 1, 0, //230 - 239
            0, 4, 0, 0, 0, 0, -1, 0, -1, 4, //240 - 249
            0, 0, 8, 6, 0, 0, 0, //250 - 255
    };
    public static final int OPCODE_OUT_OF_RANGE_SIZE = -5000;
    public static int getPacketSize(int opcode) {
        if (opcode < 0 || opcode >= packetSizes.length)
            return OPCODE_OUT_OF_RANGE_SIZE;
        return packetSizes[opcode];
    }
    private static final int[][] MALE_VALUES = {{0, 8}, // head
            {10, 17}, // jaw
            {18, 25}, // torso
            {26, 31}, // arms
            {33, 34}, // hands
            {36, 40}, // legs
            {42, 43}, // feet
    };
    private static final int[][] FEMALE_VALUES = {{45, 54}, // head
            {-1, -1}, // jaw
            {56, 60}, // torso
            {61, 65}, // arms
            {67, 68}, // hands
            {70, 77}, // legs
            {79, 80}, // feet
    };
    private static final int[][] ALLOWED_COLORS = {{0, 27}, // hair color
            {0, 15}, // torso color
            {0, 15}, // legs color
            {0, 5}, // feet color
            {0, 7} // skin color
    };
    public static int[] flower = {2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987};
    public static int flowerX = 0;
    public static int flowerY = 0;
    public static int flowerTime = -1;
    public static int flowers = 0;
    public int flourAmount, grain;
    /*Highscores*/
    /*For more highscores to be recorded, change the #s in [] to the number you want kept, +1*/
    /*For example, if you want the top 20, put 21 in the [] ([21])*/
    public static int[] ranks = new int[11];
    public static String[] rankPpl = new String[11];
    public static int gladiatorTimer = 1;
    public static int prizestatus = 0;
    public static boolean gladiator = false;
    public static boolean LoggingClicks = false;
    public static boolean snowFilter;
    public static boolean dustFilter;
    public static boolean dizzyFilter;
    public static boolean afternoonFilter;
    public static boolean eveningFilter;
    public static boolean nightFilter;
    public static boolean resetFilters;
    public static boolean morningTime;
    public static boolean afternoonTime;
    public static boolean eveningTime;
    public static boolean nightTime;
    public static int[] more2handed = {ItemIDs.DRAGON_2H_SWORD, 1319, 6528, 14915};
    /* CLUE VOIDS AND OTHER STUFF*/
    // CLUE_00
    public static int[] clue = {1, 2, 3, 4, 5};
    public static int[] getprize = {1, 2};
    public static int[] Weather = {3, 3, 3, 3, 3, 3, 3, 3, 3};
    private static final int followId = 0;
    public int dupeTimer = 0;
    public boolean hasNpc;
    public boolean isMorphed = false;
    public int summonId;
    public boolean fishing2 = false;
    public int Save = 50;
    public boolean getHouse;
    public boolean inHouse;
    //In-game highscores
    public int playerRank = 0;
    public int timedMessage = 0;
    public int apickupid = -1;
    public int apickupx = -1;
    public int apickupy = -1;
    public boolean hasntLoggedin = false;
    public boolean Fishingspots = false;
    public boolean Miningspots = false;
    public boolean Trainingteleports = false;
    public boolean oldagetrain = false;
    public int kickTimer = 0;
    public int Dhkills = 0;
    public int Varcekills = 0;
    public boolean DCDamg = false;
    public boolean commandEmotes = true;
    public boolean Dedtimer = false;
    public boolean secondTradeWindow = false;
    public boolean DC2Damg = false;
    public boolean KebabShop = false;
    public int DCTimer = 0;
    public int DC2Timer = 0;
    public int ArmadylkillCount = 0;
    public int BandoskillCount = 0;
    public String properName = "";
    public boolean validLogin = false;
    public int SarakillCount = 0;
    public int ZammykillCount = 0;
    public int attackingPlayerId = 0;
    public int Toragkills = 0;
    public int Ahrimkills = 0;
    public int Guthankills = 0;
    public int Karilkills = 0;
    public int Chaoskills = 0;
    public int Zombiekills;
    public int Ghostkills = 0;
    public int Druidkills = 0;
    public int Giantkills = 0;
    public int Demonkills = 0;
    public int Generalkills = 0;
    public int JDemonkills = 0;
    public int setNext, atDialogue = 0;
    public boolean nextDialogue = false;
    public int meleeOn = 0;
    public int mageOn = 0;
    public int rangeOn = 0;
    public int FightDelayz = 0;
    public boolean serverpanel = true;
    public String cannonowner;
    public boolean adglow = false;

    //end highscores
    public boolean modglow = false;
    public boolean ownerglow = false;
    public boolean afkzzz = false;
    public boolean darkglow = false;
    public boolean iceglow = false;
    public boolean UnderAttackByPerson = false;
    public String specbar;
    public int strAmount = 100;
    public int strDelay = 0;
    public int oldX, oldY, oldHeight;
    public int newheadicon2 = 0;
    public int JunaTele = -1;
    public int DDStimer = 0;
    public int SpecialDelay = 0;
    public int SpecDelay = 0;
    public boolean DDS2Damg = false;
    public int Doubletimer = 0;
    public int SpecialDelay2 = 0;
    public int SpecDelay2 = 0;
    public boolean DoubleDamg = false;
    public boolean DDS = false;
    public int[] untradable = {6384, ItemIDs.LUCKY_SARADOMIN_GODSWORD, 15341, 15342, 15343, 15086, 15082, 15083, 15085, 15084, 15070, 15075, 15076, 15078, 15077, 15068, 15066, 15067, 15073, 15072}; // put all untradable itemz here bitchz XD - xero
    public int teleReq = 0;
    public String teleLoc = "";
    public boolean teleOtherScreen = false;
    /* GOD BOOKS*/
    public boolean holyBook = false;
    public boolean holyBook1 = false;
    public boolean holyBook2 = false;
    public boolean holyBook3 = false;
    public boolean holyBook4 = false;
    public boolean unholyBook = false;
    public boolean unholyBook1 = false;
    public boolean unholyBook2 = false;
    public boolean unholyBook3 = false;
    public boolean unholyBook4 = false;
    public boolean balanceBook = false;
    public boolean balanceBook1 = false;
    public boolean balanceBook2 = false;
    public boolean balanceBook3 = false;
    public boolean balanceBook4;
    public boolean preach1, preach2, preach3;
    public int preachTimer = 0;
    public int preaching = 0;
    public int hasset = 0;
    public int oldclick = 0;
    public int sameclick = 0;
    public int instantkill = 0;
    /* RANGE*/
    public boolean HasArrows = false;
    /* ANTI DUPING*/
    public boolean wearing = false;
    /* END OF ANTI DUPING*/
    public int WildyLevel = 0;
    public int leftwild = 0;
    public boolean InWildrange = false;
    public int hasegg = 0;
    /* CW */
    public String Winner = "Nobody";
    public int CWA = 0;
    public int CWT = 0;
    public int SS;
    public int ZS;
    public boolean playerIsSara = false;
    public boolean playerIsZammy = false;
    public boolean CWon = false;
    /* MISC STUFF*/
    public boolean duelring = false;
    public boolean ancientstele = false;
    public int ancients = 0;
    public boolean teleblock = false;
    /* PRAYER STUFF*/
    public int currentpray = playerLevel[5];
    public int maxpray = getLevelForXP(playerXP[5]);
    public int PrayerDrain = 0;
    public int PrayerTimer = 0;
    public int NewDrain = 0;
    public boolean Str1 = false;
    public boolean Str2 = false;
    public boolean Str3 = false;
    public boolean Skin = false;
    public boolean Rock = false;
    public boolean Steel = false;
    public boolean Clarity = false;
    public boolean Reflex2 = false;
    public boolean Reflex3 = false;
    public boolean ProtItem = false;
    public boolean RapidRestore = false;
    public boolean RapidHeal = false;
    public boolean Retribution = false;
    public boolean Redemption = false;
    public boolean DrainPray = false;
    public boolean ProtMage = false;
    public boolean ProtRange = false;
    public boolean ProtMelee = false;
    public boolean Smite = false;
    public boolean Noprayer = true;    public int totalz = (getLevelForXP(playerXP[0])
            + getLevelForXP(playerXP[1]) + getLevelForXP(playerXP[2])
            + getLevelForXP(playerXP[3]) + getLevelForXP(playerXP[4])
            + getLevelForXP(playerXP[5]) + getLevelForXP(playerXP[6])
            + getLevelForXP(playerXP[7]) + getLevelForXP(playerXP[8])
            + getLevelForXP(playerXP[9]) + getLevelForXP(playerXP[10])
            + getLevelForXP(playerXP[0]) + getLevelForXP(playerXP[11])
            + getLevelForXP(playerXP[12]) + getLevelForXP(playerXP[13])
            + getLevelForXP(playerXP[14]) + getLevelForXP(playerXP[15])
            + getLevelForXP(playerXP[16]) + getLevelForXP(playerXP[17])
            + getLevelForXP(playerXP[18]) + getLevelForXP(playerXP[19])
            + getLevelForXP(playerXP[20]));
    public int MageAttackIndex = -1;
    public int graphicstimer = 0;
    public boolean cast = false;
    public boolean fired = false;
    public boolean firingspell = false;
    public int fcastid = 0;
    public int fcasterY = 0;
    public int fcasterX = 0;
    public int foffsetY = 0;
    public int foffsetX = 0;
    public int fangle = 0;
    public int fspeed = 0;
    public int fmgfxid = 0;
    public int fsh = 0;
    public int feh = 0;
    public int ffinishid = 0;
    public int fenemyY = 0;
    public int fenemyX = 0;
    public int fLockon = 0;
    public boolean fMageNpc = false;
    public boolean Inair = false;
    public Calendar cal = new GregorianCalendar();
    public int hour12 = cal.get(Calendar.HOUR); // 0..11
    public int hour24 = cal.get(Calendar.HOUR_OF_DAY); // 0..23
    public int min = cal.get(Calendar.MINUTE); // 0..59
    public int sec = cal.get(Calendar.SECOND); // 0..59
    public int ms = cal.get(Calendar.MILLISECOND); // 0..999
    public int ampm = cal.get(Calendar.AM_PM); // 0=AM, 1=PM
    public int actionButtonId = 0;
    public boolean actionset = false;
    public int friendslot = 0;
    public long friend64 = 0;
    /* QUEST VOIDS AND INTS*/
    public int questid = 0;
    public int q1stage = 0;
    public int q2stage = 0;
    public int q3stage = 0;
    public int q4stage = 0;
    public int totalqp = 0;
    public int dots = 0;
    public int[] start = {0, 0, 0, 0};
    public int IPPart1 = 127;
    public int IPPart2 = 0;
    public int IPPart3 = 0;
    public int IPPart4 = 1;
    public int playerItemAmountCount = 0;
    public int TakeMiscTimer = 0;
    public int theifTimer = 0;
    public int RCTimer = 0;
    public int AgilityTimer = 0;
    public int[] QuestInterface = {
            8145, 8147, 8148, 8149, 8150, 8151, 8152, 8153, 8154, 8155, 8156, 8157,
            8158, 8159, 8160, 8161, 8162, 8163, 8164, 8165, 8166, 8167, 8168, 8169,
            8170, 8171, 8172, 8173, 8174, 8175, 8176, 8177, 8178, 8179, 8180, 8181,
            8182, 8183, 8184, 8185, 8186, 8187, 8188, 8189, 8190, 8191, 8192, 8193,
            8194, 8195, 12174, 12175, 12176, 12177, 12178, 12179, 12180, 12181,
            12182, 12183, 12184, 12185, 12186, 12187, 12188, 12189, 12190, 12191,
            12192, 12193, 12194, 12195, 12196, 12197, 12198, 12199, 12200, 12201,
            12202, 12203, 12204, 12205, 12206, 12207, 12208, 12209, 12210, 12211,
            12212, 12213, 12214, 12215, 12216, 12217, 12218, 12219, 12220, 12221,
            12222, 12223
    };
    public String[] statName = {
            "attack", "defence", "strength", "hitpoints",
            "ranged", "prayer", "magic", "cooking", "woodcutting", "fletching",
            "fishing", "firemaking", "crafting", "smithing", "mining", "herblore",
            "agility", "thieving", "slayer", "farming", "runecrafting"
    };
    public String[] BonusMySqlName = {
            "attack_stab", "attack_slash",
            "attack_crush", "attack_magic", "attack_range", "defence_stab",
            "defence_slash", "defence_crush", "defence_magic", "defence_range",
            "other_strength", "other_prayer"
    };
    public String[] BonusName = {
            "Stab", "Slash", "Crush", "Magic", "Range",
            "Stab", "Slash", "Crush", "Magic", "Range", "Strength", "Prayer"
    };
    public int pCHead;
    public int pCBeard;
    public int pCTorso;
    public int pCArms;
    public int pCHands;
    public int pCLegs;
    public int pCFeet;
    public int pColor;
    public int pGender;
    public int i;
    public int gender;
    public int stairs = 0;
    public int stairDistance = 1;
    public int stairDistanceAdd = 0;
    public int doors = -1;
    public int skillX = -1;
    public int skillY = -1;
    public int PickUpDelete = 0;
    public int CombatExpRate = 1;
    public int SkillID = 0;
    public boolean WildernessWarning = false;
    public boolean superRestore = false;
    public int abc;
    public int cba;
    public int aaa;
    public int abc2;
    public int strPotTimer = 0;
    public boolean strPot = true;
    public int attPotTimer = 0;
    public boolean attPot = true;
    public int defPotTimer = 0;
    /* WALKING TO OBJECT BEFORE DOING ACTION*/
    public boolean defPot = true;
    public int agilPotTimer = 0;
    public boolean agilPot = true;
    public int fishPotTimer = 0;
    public boolean fishPot = true;
    public int rangePotTimer = 0;
    public boolean rangePot = true;
    public int magePotTimer = 0;
    public boolean magePot = true;
    public int LogoutDelay = 0;
    public int EntangleDelay = 0;
    public int PkingDelay = 0;
    public int LoopAttDelay = 0;
    public int NpcAttDelay = 0;
    public int MonsterDelay = 0;
    public int PoisonDelay = 9999999;
    public int PoisonClear = 0;
    public int Poison = 0;
    /* OBJECT CLICK ONE*/
    public int KillerId = playerId;
    /* OBJECT CLICK TWO*/
    public boolean Poisoned = false;
    /* OBJECT CLICK THREE*/
    public boolean pkEnabled = true;
    /* TELEOTHER*/
    public boolean cluedebug = false;
    public int heal = 0;
    public int cluestage = 0;
    public int clueid = 0;
    public int cluelevel = 0;
    public int Read1 = 0;
    public int Read2 = 0;
    public int Read3 = 0;
    public int playerLastLogin = 20060101;
    public String lastlogin = "127.0.0.1";
    public int lastlogintime;
    public int reputation = 0;
    public int mutedate = 0; // date muted so they can be unmuted in 24 hours
    public int muted = 0; // 0 = unmuted 1 = muted
    public int OriginalWeapon = -1;
    public int OriginalShield = -1;
    public byte[] buffer = null;
    public int readPtr, writePtr;
    public int numBytesInBuffer, offset;
    public Cryption inStreamDecryption = null, outStreamDecryption = null;
    public int lowMemoryVersion = 0;
    public int timeOutCounter = 0; // to detect timeouts on the connection to the client
    /* SUMMONING*/
    public int returnCode = 2; // Tells the client if the login was successfull
    public boolean officialClient = false;
    public boolean inwildy = false;
    public boolean inwildy2 = false;
    public boolean guardsdead = false;
    public int packetSize = 0, packetType = -1;
    public int smitimer = 300;
    public boolean s1 = false;
    public boolean s2 = false;
    public int resetanim = 8;
    public int sbtimer = 0;
    public int sb = 0;
    public boolean sbloop = false;
    /* TESTING FRAMES*/
    public boolean sbscan = false;
    public boolean travelboat1 = false;
    public boolean travelboat2 = false;
    public int traveltime = 0;
    public int attempts = 0;
    public boolean teleport = false;
    public int teletimer = 8;
    public int teleX = 0;
    public int teleY = 0;
    public int newheightLevel;
    public int eX = 0;
    public int eY = 0;
    public int etimer = 0;
    public boolean showingCity = false;
    public int showCityTimer = 0;
    public int cityX = 0;
    public int cityY = 0;
    public boolean drunk = false;
    public int drunkTimer = 0;
    public boolean newAnimRequired = false;
    public int newAnimDelay = 0;
    public int newAnim = 0;
    public int mageTimer = 0;
    public int potTimer0 = 0;
    public int potTimer1 = 0;
    public int potTimer2 = 0;
    public int potTimer3 = 0;
    public int potTimer4 = 0;
    public int potTimer5 = 0;
    public int potTimer6 = 0;
    public int specialAmount = 100;
    public int specialDelay = 0;
    public int PickUpID = 0;
    public int PickUpAmount = 0;
    public boolean usingSpecial = false;
    public int specialDamage = 0;
    public int specialDamage2 = 0;
    public int starter = 0;
    public int rangestarter = 0;
    // j frames:
    public int magestarter = 0;
    public int stealtimer;
    public int Reptimer = 0;
    public int EnemyY = 0;
    public int EnemyX = 0;
    public int floweritem = 0;
    /* END OF TESTING FRAMES*/
    public int seedtimer = 0;
    public int[] EssenceMineX = {2893, 2921, 2911, 2926, 2899};
    public int[] EssenceMineY = {4846, 4846, 4832, 4817, 4817};
    /*
     [0] North West
     [1] North East
     [2] Center
     [3] South East
     [4] South West
     */
    public int[] EssenceMineRX = {3253, 3105, 2681, 2591};
    public int[] EssenceMineRY = {3401, 9571, 3325, 3086};
    public int[] twoHanderz = {ItemIDs.DRAGON_2H_SWORD, 1319, 6528, 14915};
    public int lnew = 0;
    public int otherpkps = 0;
    public int otherkillc = 0;
    public int keepItem = 0;
    public int keepItem2 = 0;
    public int keepItem3 = 0;
    public int keepItemAmount = 0;
    public int keepItemAmount2 = 0;
    public int keepItemAmount3 = 0;
    public int Tradecompete = 0;
    public int Publicchat = 0;
    public int spellID = 0;
    public int healTimer = 0;
    public int mythRetry = 0;
    public int freezeTimer;
    public boolean HasNpc = false;
    public long singleCombatDelay2;
    public int WanneShop = 0;
    public boolean PutNPCCoords;
    public int questPoints;
    public boolean fillingWater;
    public boolean isAnimatedArmourSpawned;
    protected boolean isWalking;
    int objectY;
    int objectX;
    Herblore herblore = new Herblore(this);
    private final Allotments allotment = new Allotments(this);
    int skillcape = 0;
    private boolean canChangeAppearance = false;
    private final DwarfMultiCannon cannon = new DwarfMultiCannon(this);
    private final Summoning summoning = new Summoning(this);
    private final CraftingGems craftinggems = new CraftingGems(this);
    private final Farming farming = new Farming(this);
    private final PrayerAltar prayeralter = new PrayerAltar(this);
    private Smithing smith = new Smithing(this);
    private SmithingInterface smithInt = new SmithingInterface(this);
    private final SkillInterfaces skillInterfaces = new SkillInterfaces(this);
    private GlassBlowing glassBlowing = new GlassBlowing(this);
    private Slayer slayer = new Slayer(this);
    private final WarriorsGuild warriorsGuild = new WarriorsGuild(this);
    private int lastSent;
    private long lastClanTeleport;

    public PrayerAltar getPrayerAltar() {
        return prayeralter;
    }
    public SmithingInterface getSmithingInt() {
        return smithInt;
    }
    public Smithing getSmithing() {
        return smith;
    }

    public GlassBlowing getGlassBlowing() {
        return glassBlowing;
    }

    public SkillInterfaces getSkillInterfaces() {
        return skillInterfaces;
    }
    private Dialogue dialogue = null;
    public Dialogue getDialogue() {
        return dialogue;
    }

    public void setDialogue(Dialogue dialogue) {
        this.dialogue = dialogue;
    }
    public void start(Dialogue dialogue) {
        this.dialogue = dialogue;
        if (dialogue != null) {
            RemoveAllWindows();
            dialogue.setNext(0);
            dialogue.setPlayer(this);
            dialogue.execute();
        }
    }
    public boolean handleDialogue(client c) {
        if ((c.getDialogue() == null) || (c.getDialogue().getNext() == -1)) {
            c.RemoveAllWindows();
        } else if (c.getDialogue().getNext() > -1) {
            c.getDialogue().execute();
            return true;
        }
        return false;
    }
    /**
     * System to optimize sendFrame126 performance.
     *
     * @author MikeRSPS
     * UltimateScape
     * http://ultimatescape2.com
     */
    private final Map<Integer, TinterfaceText> interfaceText = new HashMap<>();
    private House house;
    private client c;
    private final Pins pins = new Pins(this);
    private final boolean hasAccepted = false;
    private int XremoveSlot = 0;
    private int XinterfaceID = 0;
    private int XremoveID = 0;
    private final long lastPickup = 0;
    /* END OF PRAYER STUFF*/
    int emotes = 0;
    private final int[] fletching = {0, 0, 0, 1, -1, 0, -1};
    private final int[] mining = {0, 0, 0, 1, -1};
    private final int[] smelting = {0, 0, 0, -1, -1, -1, 0};
    private final int[] smithing = {0, 0, 0, 1, -1, 0};
    private final int[] crafting = {0, 0, 0, 1, -1};
    private final int[] useitems = {-1, -1, -1, -1};
    private final int[] prayer = {0, 1, 0, 1, -1, -1};
    private final int[] cooking = {0, 0, 0, 1, -1, -1, -1};
    private final int[] firemaking = {0, 0, 0, 1, -1};
    /* MAGIC*/
    private int WanneBank = 0;
    private int WanneBank2 = 0;
    private java.net.Socket mySock;
    private java.io.InputStream in;
    private java.io.OutputStream out;
    private int logoutTimes;
    private int somejunk;
    private int offsetX3;
    private int attacklvl;
    private long lastRunRecovery;

    public client(java.net.Socket s, int _playerId) {
        super(_playerId);
        mySock = s;
        try {
            in = s.getInputStream();
            out = s.getOutputStream();
        } catch (java.io.IOException ioe) {
            misc.println("Godzhell Reborn Server (1): Exception!");
            ioe.printStackTrace();
        }

        outStream = new stream(new byte[bufferSize]);
        getOutStream().currentOffset = 0;
        inStream = new stream(new byte[bufferSize]);
        inStream.currentOffset = 0;

        readPtr = writePtr = 0;
        buffer = new byte[bufferSize];
    }
    public void updateRank() {
        if (amDonated <= 0) {
            amDonated = 0;
        }

        if (amDonated >= 25 && amDonated < 100) {//was 50 cam revert this if problems
            setRights(Rights.DONATOR);
            //sendMessage("Please relog to receive your donator rank.");
        }
        if (amDonated >= 100 && amDonated < 250) {

            setRights(Rights.SUPER_DONATOR);
            //sendMessage("Please relog to receive your extreme donator rank.");
        }
        if (amDonated >= 250 && amDonated < 500) {
            setRights(Rights.RESPECTED_DONATOR);
            //sendMessage("Please relog to receive your legendary donator rank.");
        }
        if (amDonated >= 500 && amDonated < 1000) {

            setRights(Rights.LEGENDARY_DONATOR);
            //sendMessage("Please relog to receive your diamond club rank.");
        }
        if (amDonated >= 1000) {

            setRights(Rights.RAINBOW_DONATOR);

        }
        //sendMessage("Your updated total amount donated is now $" + amDonated + ".");
    }
    //godwars
    public static boolean godWars(Player player) {
        return (player.getX() > 2799 && player.getY() < 5382
                && player.getX() < 2969 && player.getY() > 5153);
    }
    public Skilling getSkilling() {
        return skilling;
    }
    private Skilling skilling = new Skilling(this);
    public static void deleteFromFile(String file, String name) {
        try {
            BufferedReader r = new BufferedReader(new FileReader(file));
            ArrayList<String> contents = new ArrayList<String>();
            while (true) {
                String line = r.readLine();
                if (line == null) {
                    break;
                } else {
                    line = line.trim();
                }
                if (!line.equalsIgnoreCase(name)) {
                    contents.add(line);
                }
            }
            r.close();
            BufferedWriter w = new BufferedWriter(new FileWriter(file));
            for (String line : contents) {
                w.write(line, 0, line.length());
                w.newLine();
            }
            w.flush();
            w.close();
        } catch (Exception e) {
        }
    }

    public static int more2handed() {
        return more2handed[more2handed.length];
    }

    public static int randomClue() {
        return clue[(int) (Math.random() * clue.length)];
    }

    /*PASSWORD ENCRYPTION - IF I EVER NEED A HOST I DON'T NEED TO WORRY ABOUT PW SHIT!*/
    private static String getString(byte[] bytes) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < bytes.length; i++) {
            byte b = bytes[i];
            sb.append(0x00FF & b);
            if (i + 1 < bytes.length) {
                sb.append("-");
            }
        }
        return sb.toString();
    }

    private static byte[] getBytes(String str) {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        StringTokenizer st = new StringTokenizer(str, "-", false);
        while (st.hasMoreTokens()) {
            int i = Integer.parseInt(st.nextToken());
            bos.write((byte) i);
        }
        return bos.toByteArray();
    }

    public static String md5(String md5) {
        try {

            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(md5.getBytes());

            StringBuffer sb = new StringBuffer();

            for (int i = 0; i < array.length; ++i) {
                sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100), 1, 3);
            }

            return sb.toString();

        } catch (java.security.NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static int getprizes() {
        return getprize[(int) (Math.random() * getprize.length)];
    }

    public static int randomWeather() {
        return Weather[(int) (Math.random() * Weather.length)];
    }

    public Allotments getAllotment() {
        return allotment;
    }

    public DwarfMultiCannon getCannon() {
        return cannon;
    }


    /**
     * Adds an item to the bank without checking if the player has it in there inventory
     *
     * @param itemId the id of the item were banking
     * @param amount amount of items to bank
     */
    public void addItemToBank(int itemId, int amount) {
        for (int i = 0; i < 350; i++) {
            if (bankItems[i] <= 0 || bankItems[i] == itemId + 1
                    && bankItemsN[i] + amount < Integer.MAX_VALUE) {
                bankItems[i] = itemId + 1;
                bankItemsN[i] += amount;
                resetBank();
                return;
            }
        }
    }

    public void createPlayersObjectAnim(int X, int Y, int animationID, int tileObjectType, int orientation) {
        try {
            if(getOutStream() != null) {
                getOutStream().createFrame(85);
                getOutStream().writeByteC(Y - (mapRegionY * 8));
                getOutStream().writeByteC(X - (mapRegionX * 8));
                int x = 0;
                int y = 0;
                getOutStream().createFrame(160);
                getOutStream().writeByteS(((x & 7) << 4) + (y & 7));//tiles away - could just send 0
                getOutStream().writeByteS((tileObjectType << 2) + (orientation & 3));
                getOutStream().writeWordA(animationID);// animation id
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void objectAnim(int X, int Y, int animationID, int tileObjectType, int orientation) {
        for (Player p : PlayerHandler.players) {
            if (p != null) {
                client players = (client) p;
                if (players.distanceToPoint(X, Y) <= 25) {
                    players.createPlayersObjectAnim(X, Y, animationID, tileObjectType, orientation);
                }
            }
        }
    }

    public void SpawnPet(int ID) {
        server.npcHandler.newPetNPC(ID, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(ID), false, playerId);
    }

    public void handleObjectRegion(int objectId, int minX, int minY, int maxX, int maxY) {
        for (int i = minX; i < maxX + 1; i++) {
            for (int j = minY; j < maxY + 1; j++) {
                makeGlobalObject(objectId, i, j, -1, 10);
            }
        }
    }

    public boolean Gwd() {
        return absX >= 2816 && absX <= 2943 && absY >= 5248 && absY <= 5375;
    }

    public void spawnnpc(int id, int x, int y) {
        server.npcHandler.newNPC(id, x, (y),
                heightLevel, x + 10, y + 10, x + -10,
                y + -10, 1,
                server.npcHandler.GetNpcListHP(id), false);
    }

    public void rearrangeBank() { //this fills up the empty spots
        int totalItems = 0;
        int highestSlot = 0;
        for (int i = 0; i < playerBankSize; i++) {
            if (bankItems[i] != 0) {
                totalItems++;
                if (highestSlot <= i) highestSlot = i;
            }
        }

        for (int i = 0; i <= highestSlot; i++) {
            if (bankItems[i] == 0) {
                boolean stop = false;

                for (int k = i; k <= highestSlot; k++) {
                    if (bankItems[k] != 0 && !stop) {
                        int spots = k - i;
                        for (int j = k; j <= highestSlot; j++) {
                            bankItems[j - spots] = bankItems[j];
                            bankItemsN[j - spots] = bankItemsN[j];
                            stop = true;
                            bankItems[j] = 0;
                            bankItemsN[j] = 0;
                        }
                    }
                }
            }
        }

        int totalItemsAfter = 0;
        for (int i = 0; i < playerBankSize; i++) {
            if (bankItems[i] != 0) {
                totalItemsAfter++;
            }
        }

        if (totalItems != totalItemsAfter) getOutStream().createFrame(109); //disconnects when duping

    }

    public void rearrangeBank2() { //this fills up the empty spots
        int totalItems = 0;
        int highestSlot = 0;
        for (int i = 0; i < playerBankSize2; i++) {
            if (bankItems2[i] != 0) {
                totalItems++;
                if (highestSlot <= i) highestSlot = i;
            }
        }

        for (int i = 0; i <= highestSlot; i++) {
            if (bankItems2[i] == 0) {
                boolean stop = false;

                for (int k = i; k <= highestSlot; k++) {
                    if (bankItems2[k] != 0 && !stop) {
                        int spots = k - i;
                        for (int j = k; j <= highestSlot; j++) {
                            bankItems2[j - spots] = bankItems2[j];
                            bankItemsN2[j - spots] = bankItemsN2[j];
                            stop = true;
                            bankItems2[j] = 0;
                            bankItemsN2[j] = 0;
                        }
                    }
                }
            }
        }

        int totalItemsAfter = 0;
        for (int i = 0; i < playerBankSize2; i++) {
            if (bankItems2[i] != 0) {
                totalItemsAfter++;
            }
        }

        if (totalItems != totalItemsAfter) getOutStream().createFrame(109); //disconnects when duping

    }

    public void rearrangeBank3() { //this fills up the empty spots
        int totalItems = 0;
        int highestSlot = 0;
        for (int i = 0; i < playerBankSize3; i++) {
            if (bankItems3[i] != 0) {
                totalItems++;
                if (highestSlot <= i) highestSlot = i;
            }
        }

        for (int i = 0; i <= highestSlot; i++) {
            if (bankItems3[i] == 0) {
                boolean stop = false;

                for (int k = i; k <= highestSlot; k++) {
                    if (bankItems3[k] != 0 && !stop) {
                        int spots = k - i;
                        for (int j = k; j <= highestSlot; j++) {
                            bankItems3[j - spots] = bankItems3[j];
                            bankItemsN3[j - spots] = bankItemsN3[j];
                            stop = true;
                            bankItems3[j] = 0;
                            bankItemsN3[j] = 0;
                        }
                    }
                }
            }
        }

        int totalItemsAfter = 0;
        for (int i = 0; i < playerBankSize3; i++) {
            if (bankItems3[i] != 0) {
                totalItemsAfter++;
            }
        }

        if (totalItems != totalItemsAfter) getOutStream().createFrame(109); //disconnects when duping

    }

    public boolean itemUsedInRegion(int minX, int maxX, int minY, int maxY) {
        return (objectX >= minX && objectX <= maxX) && (objectY >= minY && objectY <= maxY);
    }

    public void spinFlax() {
        TurnPlayerTo(objectX, objectY);
        isWalking = false;
        if (playerHasItem(1779)) {
            EventManager.getSingleton().addEvent(this, new Event() {
                public void execute(EventContainer container) {
                    if (isWalking) {
                        spinningFlax = false;
                        container.stop();
                        return;
                    }
                    if (!playerHasItem(1779)) {
                        sendMessage("You do not have any flax to string.");
                        container.stop();
                        return;
                    }
                    setAnimation(896);
                    deleteItem(1779, getItemSlot(1779), 1);
                    addItem(1777, 1);
                    addSkillXP(150, playerCrafting);
                    spinningFlax = true;
                }

                @Override
                public void stop() {

                }

            }, 750);
        } else {
            sendMessage("You don't have any flax left to string.");
        }
    }

    public Farming getFarming() {
        return farming;
    }

    public House getHouse() {
        return house;
    }

    public void moveplayer(int x, int y, int h) {
        heightLevel = h;
        teleportToX = x;
        teleportToY = y;
    }

    public void rightClickCheck() {
        if (nonWild()) {
            getOutStream().createFrameVarSize(104);
            getOutStream().writeByteC(3);
            getOutStream().writeByteA(0);
            getOutStream().writeString("null");
            getOutStream().endFrameVarSize();
        }
        if (!nonWild()) {
            getOutStream().createFrameVarSize(104);
            getOutStream().writeByteC(3);
            getOutStream().writeByteA(0);
            getOutStream().writeString("Attack");
            getOutStream().endFrameVarSize();
        }
    }

    public boolean checkPacket126Update(String text, int id) {
        if (!interfaceText.containsKey(id)) {
            interfaceText.put(id, new TinterfaceText(text, id));
        } else {
            TinterfaceText t = interfaceText.get(id);
            if (text.equals(t.currentState)) {
                return false;
            }
            t.currentState = text;
        }
        return true;
    }

    public void talk(int expression, String text, int npc) {
        sendFrame200(4883, expression);
        sendFrame126(GetNpcName(npc), 4884);
        sendFrame126(text, 4885);
        sendFrame75(npc, 4883);
        sendFrame164(4882);
    }

    public void deleteItem(int id, int amount) {
        deleteItem(id, GetItemSlot(id), amount);
    }

    public void followDirection2() {
        if (followID2 > 0 && NPCHandler.npcs[followID2] != null) {
            if (NPCHandler.npcs[followID2].IsDead || NPCHandler.npcs[followID2].HP <= 0) {
                followID2 = 0;
                return;
            }
            int j = NPCHandler.npcs[followID2].absX;
            int l = NPCHandler.npcs[followID2].absY;
            boolean flag2 = WithinDistance(j, l, absX, absY, 1);
            boolean flag4 = WithinDistance(j, l, absX, absY, 2);
            boolean UseBow = playerEquipment[playerWeapon] == 839 || playerEquipment[playerWeapon] == 841 || playerEquipment[playerWeapon] == 843 || playerEquipment[playerWeapon] == 845 || playerEquipment[playerWeapon] == 847 || playerEquipment[playerWeapon] == 849 || playerEquipment[playerWeapon] == 851 || playerEquipment[playerWeapon] == 853 || playerEquipment[playerWeapon] == 855 || playerEquipment[playerWeapon] == 857 || playerEquipment[playerWeapon] == 837 || playerEquipment[playerWeapon] == 861 || playerEquipment[playerWeapon] == 4734 || playerEquipment[playerWeapon] == 859 || playerEquipment[playerWeapon] == 11235;
            boolean UseCrossBow = playerEquipment[playerWeapon] == 837;
            boolean UseRing = playerEquipment[playerWeapon] == 6522 || playerEquipment[playerWeapon] == 811 || playerEquipment[playerWeapon] == 805 || playerEquipment[playerWeapon] == 830;
            if (l == absY && j == absX)
                walkTo2(0, getMove(absY, l - 1));
            if (!UseBow && !UseCrossBow && !UseRing && !flag2)
                if (flag4) {
                    if (l > absY && j == absX)
                        walkTo2(0, getMove(absY, l - 1));
                    else if (l < absY && j == absX)
                        walkTo2(0, getMove(absY, l + 1));
                    else if (j > absX && l == absY)
                        walkTo2(getMove(absX, j - 1), 0);
                    else if (j < absX && l == absY)
                        walkTo2(getMove(absX, j + 1), 0);
                    else if (j < absX && l < absY)
                        walkTo2(getMove(absX, j + 1), getMove(absY, l + 1));
                    else if (j > absX && l > absY)
                        walkTo2(getMove(absX, j - 1), getMove(absY, l - 1));
                    else if (j < absX && l > absY)
                        walkTo2(getMove(absX, j + 1), getMove(absY, l - 1));
                    else if (j > absX && l < absY) {
                        walkTo2(getMove(absX, j - 1), getMove(absY, l + 1));
                    } else {
                        sM("Undocumented movement.");
                        sM("followX - absX = " + (j - absX));
                        sM("followY - absY = " + (l - absY));
                    }
                } else if (!flag4)
                    if (l > absY && j == absX)
                        walkTo2(0, getMove(absY, l - 1) + getMove(absY, l - 1));
                    else if (l < absY && j == absX)
                        walkTo2(0, getMove(absY, l + 1) + getMove(absY, l + 1));
                    else if (j > absX && l == absY)
                        walkTo2(getMove(absX, j - 1) + getMove(absX, j - 1), 0);
                    else if (j < absX && l == absY)
                        walkTo2(getMove(absX, j + 1) + getMove(absX, j + 1), 0);
                    else if (j < absX && l < absY)
                        walkTo2(getMove(absX, j + 1) + getMove(absX, j + 1), getMove(absY, l + 1) + getMove(absY, l + 1));
                    else if (j > absX && l > absY)
                        walkTo2(getMove(absX, j - 1) + getMove(absX, j - 1), getMove(absY, l - 1) + getMove(absY, l - 1));
                    else if (j < absX && l > absY)
                        walkTo2(getMove(absX, j + 1) + getMove(absX, j + 1), getMove(absY, l - 1) + getMove(absY, l - 1));
                    else if (j > absX && l < absY) {
                        walkTo2(getMove(absX, j + 1) + getMove(absX, j + 1), getMove(absY, l - 1) + getMove(absY, l - 1));
                    } else {
                        sM("Undocumented movement.");
                        sM("followX - absX = " + (j - absX));
                        sM("followY - absY = " + (l - absY));
                    }
        }
    }

    public void resetFollow() {
        followID = 0;
        getOutStream().createFrame(174);
        followID2 = 0;
        getOutStream().writeWord(0);
        getOutStream().writeByte(0);
        getOutStream().writeWord(1);
    }

    public void followDirection() {
        if (PlayerHandler.players[followID] == null
                || PlayerHandler.players[followID].IsDead) {
            resetFollow();
            return;
        }
        if (IsDead || playerLevel[3] <= 0)
            return;

        int otherX = PlayerHandler.players[followID].getX();
        int otherY = PlayerHandler.players[followID].getY();

        boolean sameSpot = (absX == otherX && absY == otherY);


        if (!goodDistance(otherX, otherY, getX(), getY(), 25)) {
            followID = 0;
            resetFollow();
            return;
        }
        faceUpdate(followID + 32768);
        if (!sameSpot) {
            if (playerIndex > 0 && !usingSpecial) {
            }
            if (otherX == absX && otherY == absY) {
                int r = misc.random(3);
                switch (r) {
                    case 0:
                        walkTo2(0, -1);
                        break;
                    case 1:
                        walkTo2(0, 1);
                        break;
                    case 2:
                        walkTo2(1, 0);
                        break;
                    case 3:
                        walkTo2(-1, 0);
                        break;
                }
            } else if (runningToggled) {
                if (otherY > getY() && otherX == getX()) {
                    walkTo2(otherX, otherY - 1);
                } else if (otherY < getY() && otherX == getX()) {
                    walkTo2(otherX, otherY + 1);
                } else if (otherX > getX() && otherY == getY()) {
                    walkTo2(otherX - 1, otherY);
                } else if (otherX < getX() && otherY == getY()) {
                    walkTo2(otherX + 1, otherY);
                } else if (otherX < getX() && otherY < getY()) {
                    walkTo2(otherX + 1, otherY + 1);
                } else if (otherX > getX() && otherY > getY()) {
                    walkTo2(otherX - 1, otherY - 1);
                } else if (otherX < getX() && otherY > getY()) {
                    walkTo2(otherX + 1, otherY - 1);
                } else if (otherX > getX() && otherY < getY()) {
                    walkTo2(otherX + 1, otherY - 1);
                }
            } else {
                if (otherY > getY() && otherX == getX()) {
                    walkTo2(otherX, otherY - 1);
                } else if (otherY < getY() && otherX == getX()) {
                    walkTo2(otherX, otherY + 1);
                } else if (otherX > getX() && otherY == getY()) {
                    walkTo2(otherX - 1, otherY);
                } else if (otherX < getX() && otherY == getY()) {
                    walkTo2(otherX + 1, otherY);
                } else if (otherX < getX() && otherY < getY()) {
                    walkTo2(otherX + 1, otherY + 1);
                } else if (otherX > getX() && otherY > getY()) {
                    walkTo2(otherX - 1, otherY - 1);
                } else if (otherX < getX() && otherY > getY()) {
                    walkTo2(otherX + 1, otherY - 1);
                } else if (otherX > getX() && otherY < getY()) {
                    walkTo2(otherX - 1, otherY + 1);
                }
            }
            faceUpdate(followID + 32768);
        }
    }

    public int getMove(int i, int j) {
        if (i - j == 0) {
            return 0;
        }
        if (i - j < 0) {
            return 1;
        }
        return i - j <= 0 ? 0 : -1;
    }

    public void appendToAutoSpawn1(int npcid, int absx, int absy, int height, int absx2, int absy2, int absx3, int absy3) {
        BufferedWriter bw = null;

        try {
            bw = new BufferedWriter(
                    new FileWriter("./Data/cfg/autospawn.cfg", true));
            bw.write("spawn = " + npcid + "	" + absx + "	" + absy + "	" + height + "	" + absy2 + "	" + absy2 + "	" + absx3 + "	" + absy3 + "	1");
            bw.newLine();
            bw.flush();
        } catch (IOException ioe) {
            //ioe.printStackTrace();
        } finally {
            if (bw != null) {
                try {
                    bw.close();
                } catch (IOException ioe2) {
                    sM("Error autospawning!");
                }
            }
        }

    }

    public void appendToclip(int height, int absx, int absy) {
        BufferedWriter bw = null;

        try {
            bw = new BufferedWriter(
                    new FileWriter("./Data/clipping.txt", true));
            bw.write("tiles.put(" + height + " << 28 | " + absx + " << 14 | " + absy + ", true);");
            bw.newLine();
            bw.flush();
        } catch (IOException ioe) {
            //ioe.printStackTrace();
        } finally {
            if (bw != null) {
                try {
                    bw.close();
                } catch (IOException ioe2) {
                    sM("Error autospawning!");
                }
            }
        }

    }

    public void talk2(int expression, String text, String text2, int npc) {
        sendFrame200(4901, expression);
        sendFrame126(GetNpcName(npc), 4902);
        sendFrame126("", 4903);
        sendFrame126(text, 4904);
        sendFrame126(text2, 4905);
        sendFrame126("", 4906);
        sendFrame75(npc, 4901);
        sendFrame164(4900);
    }

    public void talk3(int expression, String text, String text2, String text3, int npc) {
        sendFrame200(4894, expression);
        sendFrame126(GetNpcName(npc), 4895);
        sendFrame126(text, 4896);
        sendFrame126(text2, 4897);
        sendFrame126(text3, 4898);
        sendFrame75(npc, 4894);
        sendFrame164(4893);
    }

    public void talk4(int expression, String text1, String text2, String text3, String text4, int npc) {
        sendFrame200(4901, expression);
        sendFrame126(GetNpcName(npc), 4902);
        sendFrame126(text1, 4903);
        sendFrame126(text2, 4904);
        sendFrame126(text3, 4905);
        sendFrame126(text4, 4906);
        sendFrame126("Click here to continue", 4907);
        sendFrame75(npc, 4901);
        sendFrame164(4900);
    }

    public void choice(String text, String text2) {
        changeText126("Select an Option", 2460);
        changeText126(text, 2461);
        changeText126(text2, 2462);
        sendFrame164(2459);
    }
    public void choice(String title, String text, String text2) {
        changeText126(title, 2460);
        changeText126(text, 2461);
        changeText126(text2, 2462);
        sendFrame164(2459);
    }
    public void options2(String option, String option2) { //2 options (case 56109, case 56110) - Action buttons
        changeText126("Select an Option", 14444);
        changeText126(option, 14445);
        changeText126(option2, 14446);
        sendFrame164(14443);
    }

    public void options3(String option, String option2, String option3) { //3
        changeText126("Select an Option", 2470);
        changeText126(option, 2471);
        changeText126(option2, 2472);
        changeText126(option3, 2473);
        sendFrame164(2469);
    }

    public void options4(String option, String option2, String option3, String option4) {//4
        changeText126("Select an Option", 8208);
        changeText126(option, 8209);
        changeText126(option2, 8210);
        changeText126(option3, 8211);
        changeText126(option4, 8212);
        sendFrame164(8207);
    }


    public int randomflower() {
        return flower[(int) (Math.random() * flower.length)];
    }

    public void options5(String option, String option2, String option3, String option4, String option5) {//5
        changeText126("Select an Option", 8220);
        changeText126(option, 8221);
        changeText126(option2, 8222);
        changeText126(option3, 8223);
        changeText126(option4, 8224);
        changeText126(option5, 8225);
        sendFrame164(8219);
    }

    public boolean funPk() {
        return absX >= 2569 && absX <= 2601 && absY >= 3904 && absY <= 3921;
    }

    public boolean StaffZone() {
        return absX >= 2821 && absX <= 2874 && absY >= 5061 && absY <= 5114;
    }

    public void objectToRemove(int X, int Y) {
        makeGlobalObject(X, Y, -1, 10, 10);
    }

    public void scanPickupN() {
        if (absX == apickupx && absY == apickupy) {
            if (ItemHandler.itemExists(apickupid, absX, absY)) {
                int itemAmount = ItemHandler.itemAmount(apickupid, apickupx, apickupy);
                if (addItem(apickupid, 1)) {//only removes the item when has enough space!
                    ItemHandler.removeItem(apickupid, apickupx, apickupy, 1);
                    removeGroundItem(apickupx, apickupy, apickupid);
                    apickupid = -1;
                    apickupx = -1;
                    apickupy = -1;
                }
            } else if (hasntLoggedin) {
                sendMessage("Too late, its gone!");
                apickupid = -1;
                apickupx = -1;
                apickupy = -1;
            }
        }
    }

    public void scanPickup() {
        if (absX == apickupx && absY == apickupy) {
            if (ItemHandler.itemExists(apickupid, absX, absY)) {
                int itemAmount = ItemHandler.itemAmount(apickupid, apickupx, apickupy);
                if (addItem(apickupid, itemAmount)) {//only removes the item when has enough space!
                    ItemHandler.removeItem(apickupid, apickupx, apickupy, itemAmount);
                    removeGroundItem(apickupx, apickupy, apickupid);
                    apickupid = -1;
                    apickupx = -1;
                    apickupy = -1;
                }
            } else if (hasntLoggedin) {
                sendMessage("Too late, its gone!");
                apickupid = -1;
                apickupx = -1;
                apickupy = -1;
            }
        }
    }

    public void highscores() {
        clearQuestInterface();
        sendQuest("<col=128>", 8144);  //Title
        sendQuest("@whi@Godzhell Reborn High Scores", 8145);
        for (int i = 0; i < 10; i++) { // you also need to change this for it to display more, simply the number you want it to display, say 20 = for(int i = 0; i < 20; i++)
            if (server.ranks[i] > 0) {
                sendQuest("@bla@Rank " + (i + 1) + ": @red@" + server.rankPpl[i] + "@bla@ - Total Lvl:@whi@ " + server.ranks[i], 8147 + i);
            }
        }
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();
    }

    public void DropArrows() {
        int EnemyX = PlayerHandler.players[AttackingOn].absX;
        int EnemyY = PlayerHandler.players[AttackingOn].absY;
        if (playerEquipment[playerWeapon] != 4214 && playerEquipmentN[playerArrows] != 0)
            if (ItemHandler.itemAmount(playerEquipment[playerArrows], EnemyX, EnemyY) == 0) {
                ItemHandler.addItem(playerEquipment[playerArrows], EnemyX, EnemyY, 1, playerId, false);
            } else if (ItemHandler.itemAmount(playerEquipment[playerArrows], EnemyX, EnemyY) != 0) {
                int amount = ItemHandler.itemAmount(playerEquipment[playerArrows], EnemyX, EnemyY);
                ItemHandler.removeItem(playerEquipment[playerArrows], EnemyX, EnemyY, amount);
                ItemHandler.addItem(playerEquipment[playerArrows], EnemyX, EnemyY, amount + 1, playerId, false);
            }
    }

    public void runecrossbow() {
        if (misc.random(20) == 1 && playerEquipment[playerWeapon] == 13800 && playerEquipment[playerArrows] == 13817) {
            sendMessage("Your bolt exploded!");
            hitDiff = 40 + misc.random(40);
            setAnimation(811);
            stillgfx(197, absY, absX);
            stillgfx(446, EnemyY, EnemyX);
            stillgfx(453, EnemyY, EnemyX);
            PlayerHandler.players[AttackingOn].currentHealth -= hitDiff;
            PlayerHandler.players[AttackingOn].updateRequired = true;
            PlayerHandler.players[AttackingOn].hitUpdateRequired = true;
        }
    }

    public void gfx100(int gfx) {
        mask100var1 = gfx;
        mask100var2 = 6553600;
        gfxUpdateRequired = true;
        updateRequired = true;
    }

    public void drawback() {
        if (playerEquipment[playerArrows] == 882) {
            gfx100(18);
        } else if (playerEquipment[playerArrows] == 884) {
            gfx100(19);
        } else if (playerEquipment[playerArrows] == 886) {
            gfx100(20);
        } else if (playerEquipment[playerArrows] == 888) {
            gfx100(21);
        } else if (playerEquipment[playerArrows] == 890) {
            gfx100(22);
        } else if (playerEquipment[playerArrows] == 892) {
            gfx100(24);
        }
    }

    /* ADD MORE TWO HANDED ITEMS HERE */

    public void DropArrowsNPC() {
        int EnemyX = NPCHandler.npcs[attacknpc].absX;
        int EnemyY = NPCHandler.npcs[attacknpc].absY;
        if (playerEquipment[playerWeapon] != 4214 && playerEquipmentN[playerArrows] != 0)
            if (ItemHandler.itemAmount(playerEquipment[playerArrows], EnemyX, EnemyY) == 0) {
                ItemHandler.addItem(playerEquipment[playerArrows], EnemyX, EnemyY, 1, playerId, false);
            } else if (ItemHandler.itemAmount(playerEquipment[playerArrows], EnemyX, EnemyY) != 0) {
                int amount = ItemHandler.itemAmount(playerEquipment[playerArrows], EnemyX, EnemyY);
                ItemHandler.removeItem(playerEquipment[playerArrows], EnemyX, EnemyY, amount);
                ItemHandler.addItem(playerEquipment[playerArrows], EnemyX, EnemyY, amount + 1, playerId, false);
            }
    }

    public void badNames() {
        if (playerName.contains("~") || playerName.contains("!") || playerName.contains("@") || playerName.contains("#") || playerName.contains("$") || playerName.contains("%") || playerName.contains("^") || playerName.contains("&")
                || playerName.contains("*") || playerName.contains("=") || playerName.contains("+") || playerName.contains(".") || playerName.contains("/") || playerName.contains(",") || playerName.contains("?") || playerName.contains(">")
                || playerName.contains("<") || playerName.contains("admin") || playerName.contains("owner") || playerName.contains("Admin") || playerName.contains("}") || playerName.contains("{")
                || playerName.contains("]") || playerName.contains("[") || playerName.contains("-") || playerName.contains("__") || playerName.contains("___") || playerName.contains("____") || playerName.contains("_____") || playerName.contains("SYI")
                || playerName.contains("SYIpkpker") || playerName.contains("null") || playerName.contains("fuck") || playerName.contains("bitch") || playerName.contains("$")) {
            if (kickTimer == 0) {
                sendMessage("[ERROR]: Use a name without a symbol, and come back.");
                if (checkbannedusers() != 5) {
                    disconnected = true;
                    appendToBanned(playerName);
                    checkbannedusers();
                }
                kickTimer = 20;
            }
        }
    }

    public boolean checkLog(String file, String playerName) {
        // check bans/mutes/chatlogs et. -bakatool
        try {
            BufferedReader in = new BufferedReader(new FileReader("./Data/"
                    + file + ".txt"));
            String data = null;
            while ((data = in.readLine()) != null) {
                if (playerName.equalsIgnoreCase(data)) {
                    return true;
                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking for data!");
            System.out.println(file + ":" + playerName);
            e.printStackTrace();
        }
        return false;
    }

    /* END OF 2 HANDED */

    public void playertalk(int expression, String text) { // Player talk
        sendFrame200(969, expression);
        sendFrame126(playerName.replaceAll("_", " "), 970);
        sendFrame126(text, 971);
        sendFrame126("Click here to continue", 972);
        sendFrame185(969);
        sendFrame164(968);
        NpcDialogueSend = true;
    }

    public void sendStatement(String text) {
        sendFrame126(text, 357);
        sendFrame126("Click Here To Continue", 358);
        sendFrame164(356);
    }

    public void playertalk2(int expression, String text1, String text2) { // Player talk
        sendFrame200(974, expression);
        sendFrame126(playerName.replaceAll("_", " "), 975);
        sendFrame126(text1, 976);
        sendFrame126(text2, 977);
        sendFrame126("Click here to continue", 978);
        sendFrame185(974);
        sendFrame164(973);
        NpcDialogueSend = true;
    }

    public void playertalk3(int expression, String text1, String text2, String text3) {
        sendFrame200(980, expression);
        sendFrame126(playerName.replaceAll("_", " "), 981);
        sendFrame126(text1, 982);
        sendFrame126(text2, 983);
        sendFrame126(text3, 984);
        sendFrame126("Click here to continue", 985);
        sendFrame185(980);
        sendFrame164(979);
        NpcDialogueSend = true;
    }

    public void playertalk4(int expression, String text1, String text2, String text3, String text4) {
        sendFrame200(987, expression);
        sendFrame126(playerName.replaceAll("_", " "), 988);
        sendFrame126(text1, 989);
        sendFrame126(text2, 990);
        sendFrame126(text3, 991);
        sendFrame126(text4, 992);
        sendFrame126("Click here to continue", 993);
        sendFrame185(987);
        sendFrame164(986);
        NpcDialogueSend = true;
    }

    public void nextDialogue(int nextt) {
        setNext = 0;
        if (nextt > 0) {
            setNext = nextt;
            nextDialogue = true;
        } else {
            NpcDialogue = -1;
            NpcDialogueSend = false;
            RemoveAllWindows();
        }
    }

    public boolean protectMelee() {
        return meleeOn != 0;
    }

    public boolean protectMage() {
        return mageOn != 0;
    }
    /* END OF SMITHING*/

    public boolean protectRange() {
        return rangeOn != 0;
    }

    public void berserk() {
        if (misc.random(10) == 1 && playerEquipment[playerWeapon] == 6528) {
            sendMessage("Your necklace increses your strength.");
            stillgfx(246, absY, absX);
            hitDiff = 10 + misc.random(20);
            PlayerHandler.players[AttackingOn].currentHealth -= hitDiff;
            PlayerHandler.players[AttackingOn].updateRequired = true;
            PlayerHandler.players[AttackingOn].hitUpdateRequired = true;
        }
    }

    public void overBerserk() {
        if (playerLevel[2] >= 250 && playerEquipment[playerWeapon] == 6528 && playerEquipment[playerAmulet] == 15087) {
            sendMessage("Your necklaces effect will not boost you over 250 str.");
            stillgfx(247, absY, absX);
            playerLevel[2] = 249;
            updateRequired = true;
        }
    }

    public void finishg() {
        gladiatorTimer = 0;
        gladiator = false;
        teleportToX = 3217;
        teleportToY = 3429;
    }

    public void Warlock999() {
        hitDiff = 30 + misc.random(20);
        inCombat();
        attackPlayersWithin(369, 30, 1);
        actionTimer = 50;
        setAnimation(369);
        teleportToX = absX;
        teleportToY = absY;
        stillgfx(368, absY, absX);
    }

    public void figment() {
        hitDiff = 30 + misc.random(20);
        inCombat();
        actionTimer = 50;
        setAnimation(811);
        teleportToX = absX;
        teleportToY = absY;
        stillgfx(76, absY, absX);
    }

    public void ded() {
        if (Dedtimer) {
            startAnimation(0x900);
            teletimer = 12;
        } else if (!Dedtimer) {
            startAnimation(0x900);
            teletimer = 12;
        }
    }

    public void changeText126(String s, int i) {
        if (PlayerHandler.players[playerId] == null || disconnected || in == null || out == null) {
        } else {
            getOutStream().createFrameVarSizeWord(126);
            getOutStream().writeString(s);
            getOutStream().writeWordA(i);
            getOutStream().endFrameVarSizeWord();
            flushOutStream();
        }
    }

    public void lowGFX(int id, int delay) {
        mask100var1 = id;
        mask100var2 = delay;
        gfxUpdateRequired = true;
        updateRequired = true;
    }

    public void sendExecMessage(String command) {
        sendMessage(command);
    }

    /* END OF QUEST 1*/

    public void infodia(String text, String text2, String text3, String text4, String title) {//by Grey
        sendFrame126(title, 6180);
        sendFrame126(text, 6181);
        sendFrame126(text2, 6182);
        sendFrame126(text3, 6183);
        sendFrame126(text4, 6184);
        sendFrame164(6179);
    }

    public void chatlog() {
        Calendar cal = new GregorianCalendar();
        int hour24 = cal.get(Calendar.HOUR_OF_DAY); // 0..23
        int min = cal.get(Calendar.MINUTE); // 0..59
        int sec = cal.get(Calendar.SECOND); // 0..59
        BufferedWriter bww = null;

        try {
            bww = new BufferedWriter(new FileWriter("./Data/chatlogs.txt", true));
            bww.write(
                    "time: " + hour24 + "." + min + "." + sec + " | "
                            + playerName + ": "
                            + misc.textUnpack(chatText, packetSize - 2));
            bww.newLine();
            bww.newLine();
            bww.flush();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } finally {
            if (bww != null) {
                try {
                    bww.close();
                } catch (IOException ioe2) {
                }
            }
        }
    }

    /* public void additemtoclue(int itemID, int slot, int amount)
     {
     sendQuest("<col=800000>Clue Scroll", 8144);
     clearQuestInterface();
     sendQuest("<col=128>Congratz, you have completed the treasure trail!", 8145);
     getOutStream().createFrameVarSizeWord(34);
     getOutStream().writeWord(8134); // shops
     getOutStream().writeByte(slot); // slot
     getOutStream().writeWord(itemID); // item
     getOutStream().endFrameVarSizeWord();
     }*/

    // public boolean isdoingclue(int cluelevel, int cluestage, int clueid) = false;

    public void writeLog(String data, String file) {
        // used for bans/mutes/chatlogs et -bakatool
        BufferedWriter bw = null;

        try {
            bw = new BufferedWriter(new FileWriter("./Data/" + file + ".txt",
                    true));
            bw.write(data);
            bw.newLine();
            bw.flush();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } finally {
            if (bw != null)
                try {
                    bw.close();
                } catch (IOException ioe2) {
                    System.out.println("Error writing system log.");
                    ioe2.printStackTrace();
                }
        }
    }

    public void CheckServerPanel() {
        if (serverpanel) {
            serverpanel = false;
            sendMessage("You have turned the server panel off. Type ::serverpanel to get it back.");
        } else if (!serverpanel) {
            serverpanel = true;
            sendMessage("You have turned the server panel back on. Type ::serverpanel if you wish to turn it off.");
        }
    }
    public void walkTo(int x, int y) {
        PathFinder.getPathFinder().findRoute(this, x, y, true, 1, 1);
    }

    public void walkTo2(int i, int j) {
        if (this.freezeDelay > 0)
            return;
        this.newWalkCmdSteps = 0;
        if (++this.newWalkCmdSteps > 50)
            this.newWalkCmdSteps = 0;
        int k = this.getX() + i;
        k -= this.mapRegionX * 8;
        this.getNewWalkCmdX()[0] = this.getNewWalkCmdY()[0] = 0;
        int l = this.getY() + j;
        l -= this.mapRegionY * 8;

        for (int n = 0; n < this.newWalkCmdSteps; n++) {
            this.getNewWalkCmdX()[n] += k;
            this.getNewWalkCmdY()[n] += l;
        }
    }

    public void WritePlayers() {


        if (serverpanel) {
            setInterfaceWalkable(15892);
        } else if (!serverpanel) {
            setInterfaceWalkable(-1);
        }


        int players = PlayerHandler.getPlayerCount();

        if (nonWild()) {
            sendQuest("Safe", 15900);
        } else if (!nonWild()) {
            sendQuest("Un-safe", 15900);
        } else if (nonWild() && inSafePvP()) {
            sendQuest("@gre@SafePvp", 15900);
        }
        sendQuest("ServerPanel:", 15894); //Title

        //Left hand side
        sendQuest("Owner: sgsrocks", 15895);
        sendQuest("Co-Owner: Your name here", 15897);
        sendQuest("Players Online: @gre@" + players, 15898);
        sendQuest("Made by: Tico135", 15899);
        //sendQuest("Wild status:", 15900); // Used for Safe zones!
        sendQuest("", 15901);

        //Right hand side
        sendQuest("", 15896);
        sendQuest("", 15902);
        sendQuest("", 15903);
        sendQuest("", 15904);
        sendQuest("", 15905);
        sendQuest("", 15906);
    }

    public boolean nonattackable(int npcIndex) {
        return NPCHandler.npcs[npcIndex].npcType == 57
                || NPCHandler.npcs[npcIndex].npcType == 522
                || NPCHandler.npcs[npcIndex].npcType == 585
                || NPCHandler.npcs[npcIndex].npcType == 548
                || NPCHandler.npcs[npcIndex].npcType == 209
                || NPCHandler.npcs[npcIndex].npcType == 530
                || NPCHandler.npcs[npcIndex].npcType == 944
                || NPCHandler.npcs[npcIndex].npcType == 554
                || NPCHandler.npcs[npcIndex].npcType == 550
                || NPCHandler.npcs[npcIndex].npcType == 461
                || NPCHandler.npcs[npcIndex].npcType == 2304
                || NPCHandler.npcs[npcIndex].npcType == 555
                || NPCHandler.npcs[npcIndex].npcType == 1699
                || NPCHandler.npcs[npcIndex].npcType == 541
                || NPCHandler.npcs[npcIndex].npcType == 8206;
    }

    void setTurnIndexes(int player, int turn, int turn180, int turn90CW, int turn90CCW) {
        client client = (client) PlayerHandler.players[player];
        turnIndex = turn;
        turn180Index = turn180;
        turn90CWIndex = turn90CW;
        turn90CCWIndex = turn90CCW;
    }

    /* MENUS ET - from RS3Scape*/

    // Playercount at top of screen
    public void writePlayers() {
        int players = PlayerHandler.getPlayerCount();

        sendFrame126("@whi@There is " + players, 6570);
        sendFrame126("@whi@Players on", 6572);
        sendFrame126("@yel@Godzhell Reborn", 6664);
        setInterfaceWalkable(6673); // 6673}}}
        // setInterfaceWalkable(14600);//201

    }

    // tileObjectType: 0-3 wall objects, 4-8 wall decoration, 9: diag. walls, 10-11 world objects, 12-21: roofs, 22: floor decoration
    /* public void createNewTileObject(int x, int y, int typeID, int orientation, int tileObjectType)
     {
     getOutStream().createFrame(85);
     getOutStream().writeByteC(y & ~7);	// packetTileCoordY
     getOutStream().writeByteC(x & ~7);	// packetTileCoordX

     getOutStream().createFrame(151);
     getOutStream().writeByteA(((x&7) << 4) + (y&7));
     getOutStream().writeWordBigEndian(typeID);
     getOutStream().writeByteS((tileObjectType<<2) +(orientation&3));
     }*/

    /* public void createNewTileObject(int x, int y, int typeID, int orientation, int tileObjectType)
     {
     getOutStream().createFrameVarSizeWord(60);
     getOutStream().writeByte(y - (mapRegionY*8));	// objectYPos
     getOutStream().writeByteC(x - (mapRegionX*8));	// objectXPos
     getOutStream().writeByte(151);								// objectCreate
     getOutStream().writeByteS(0);								// objectDistanceOffset
     getOutStream().writeWordBigEndian(typeID);				// objectID
     getOutStream().writeByteA(orientation);						// objectDirection
     getOutStream().endFrameVarSizeWord();
     flushOutStream();
     }*/

    public boolean preaching() {
        if (preaching == 1) {
            if (holyBook) {
                startAnimation(1335);
            }
            if (unholyBook) {
                startAnimation(1336);
            }
            if (balanceBook) {
                startAnimation(1337);
            }
            preaching = 2;
        }
        if (preaching == 2) {
            resetPreaching();
        }
        return true;
    }

    public boolean resetPreaching() {
        preaching = 0;
        holyBook = false;
        holyBook1 = false;
        holyBook2 = false;
        holyBook3 = false;
        holyBook4 = false;
        unholyBook = false;
        unholyBook1 = false;
        unholyBook2 = false;
        unholyBook3 = false;
        unholyBook4 = false;
        balanceBook = false;
        balanceBook1 = false;
        balanceBook2 = false;
        balanceBook3 = false;
        balanceBook4 = false;
        return true;
    }

    public void newWelc() {
        infodia("Official server of www.GodzHell.net", "Type ::help and ::commands.", "@blu@Newest Update: Started to work on the stronghold of security.", "Right now we are in open alpha, please Support the server", "Welcome to Godzhell reborn and remastered");
    }

    public void println_debug(String str) {
        System.out.println(
                "[client-" + playerId + "-" + playerName + "]: " + str);
    }

    public void println(String str) {
        System.out.println(
                "[client-" + playerId + "-" + playerName + "]: " + str);
    }

    public void staticAnimation(int graphicID, int playerX, int playerY, int heightLevel) { /* Used from phates old stuff*/// credits to phate for this bit :P
        if(getOutStream() != null) {
            getOutStream().createFrame(
                    85);
            getOutStream().writeByteC(playerY - (mapRegionY * 8));
            getOutStream().writeByteC(playerX - (mapRegionX * 8));
            getOutStream().createFrame(4);
            getOutStream().writeByte(0);
            getOutStream().writeWord(graphicID); // Graphic ID
            getOutStream().writeByte(heightLevel); // Height above gorund
            getOutStream().writeWord(0); // Pause before casting
        }
    }

    public void gfxhalfway(int id, int Y, int X) {
        if(getOutStream() != null) {
            getOutStream().createFrame(85);
            getOutStream().writeByteC(Y - (mapRegionY * 8));
            getOutStream().writeByteC(X - (mapRegionX * 8));
            getOutStream().createFrame(4);
            getOutStream().writeByte(0); // Tiles away (X >> 4 + Y & 7)
            getOutStream().writeWord(id); // Graphic id
            getOutStream().writeByte(100); // height of the spell above it's basic place, i think it's written in pixels 100 pixels higher
            getOutStream().writeWord(0); // Time before casting the graphic
        }
    }

    public boolean HasAirStaff() {
        if (playerEquipment[playerWeapon] == 1381) {
            return true;
        }// Staff_of_air
        if (playerEquipment[playerWeapon] == 1397) {
            return true;
        }// Air_battlestaff
        // Mystic_air_staff
        return playerEquipment[playerWeapon] == 1405;
    }

    public void openUpDepBox() {
        sendFrame126("@whi@The Deposit Box Of " + playerName, 7421);
        sendFrame248(4465, 197);//197 just because you can't see it =\
        resetItems(7423);
        InBank = 1;
    }

    public void runserver() {
        try {
            String File = "runserver.bat";
            String Dir = "./" + File; // Directory

            Runtime.getRuntime().exec(Dir);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    public void closeListener() {
        try {
            server.shutdownClientHandler = true;
            if (server.clientListener != null) {
                server.clientListener.close();
            }
            server.clientListener = null;
        } catch (java.lang.Exception __ex) {
            __ex.printStackTrace();
        }
    }

    public void earthrobes() {
        int EnemyX2 = PlayerHandler.players[AttackingOn].absX;
        int EnemyY2 = PlayerHandler.players[AttackingOn].absY;

        if (misc.random(5) == 1) {
            sendMessage("Your earth robes begin to glow.");
            sendMessage("You strike the enemy and deal damage!");
            hitDiff = misc.random(40);
            setAnimation(811);
            stillgfx(367, EnemyY2, EnemyX2);
        }
    }

    public void firerobes() {
        int EnemyX2 = PlayerHandler.players[AttackingOn].absX;
        int EnemyY2 = PlayerHandler.players[AttackingOn].absY;

        if (misc.random(5) == 1) {
            sendMessage("Your fire robes begin to glow.");
            sendMessage("You strike the enemy and deal damage!");
            hitDiff = misc.random(40);
            setAnimation(811);
            stillgfx(481, EnemyY2, EnemyX2);
        }
    }

    public void airrobes() {
        int EnemyX2 = PlayerHandler.players[AttackingOn].absX;
        int EnemyY2 = PlayerHandler.players[AttackingOn].absY;

        if (misc.random(5) == 1) {
            sendMessage("Your air robes begin to glow.");
            sendMessage("You strike the enemy and deal damage!");
            hitDiff = misc.random(40);
            setAnimation(811);
            stillgfx(198, EnemyY2, EnemyX2);
        }
    }

    public void waterrobes() {
        int EnemyX2 = PlayerHandler.players[AttackingOn].absX;
        int EnemyY2 = PlayerHandler.players[AttackingOn].absY;

        if (misc.random(5) == 1) {
            sendMessage("Your water robes begin to glow.");
            sendMessage("You strike the enemy and deal damage!");
            hitDiff = misc.random(40);
            setAnimation(811);
            stillgfx(5, EnemyY2, EnemyX2);
        }
    }

    public void bowSpecc() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 861) {
            setAnimation(426);
            actionTimer = 4;
            SpecDamgNPC(15);
            DDS2Damg = true;
            DDStimer = 1;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(15);
            SpecialDelay -= 1;
        } else if (IsAttacking && playerEquipment[playerWeapon] == 859) {
            int j = PlayerHandler.players[AttackingOn].absX;
            int k = PlayerHandler.players[AttackingOn].absY;
            int l = PlayerHandler.players[AttackingOn].playerLevel[playerHitpoints];

            SpecDamg(15);
            DDS2Damg = true;
            DDStimer = 1;
            startAnimation(426);
            actionTimer = 4;
            teleportToX = absX;
            teleportToY = absY;
            SpecialDelay -= 1;
        }
    }

    public void DCSpec() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 13664) {
            setAnimation(10961);
            lowGFX(1950, 0);
            actionTimer = 4;
            SpecDamgNPC(30);
            DDS2Damg = true;
            DDStimer = 1;
            DCDamg = true;
            DCTimer = 2;
            DC2Damg = true;
            DC2Timer = 3;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(30);
            SpecialDelay -= 1;
        } else if (IsAttacking && playerEquipment[playerWeapon] == 13664) {
            int j = PlayerHandler.players[AttackingOn].absX;
            int k = PlayerHandler.players[AttackingOn].absY;
            int l = PlayerHandler.players[AttackingOn].playerLevel[playerHitpoints];

            SpecDamg(30);
            DDS2Damg = true;
            DDStimer = 1;
            DCDamg = true;
            DCTimer = 2;
            DC2Damg = true;
            DC2Timer = 3;
            startAnimation(10961);
            lowGFX(1950, 0);
            actionTimer = 4;
            teleportToX = absX;
            teleportToY = absY;
            SpecialDelay -= 1;
        }
    }

    public void bandosSpecial() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 15334) {
            hitDiff = 60 + misc.random(5);
            setAnimation(7073);
            DDStimer = 0;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(60);
            SpecialDelay -= 3;
            actionTimer = 4;
        }
    }

    public void SaradominSpecial() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 15335) {
            hitDiff = 60 + misc.random(5);
            setAnimation(7071);
            DDStimer = 0;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(60);
            SpecialDelay -= 3;
            actionTimer = 4;
        }
    }

    public void zamorakSpecial() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 15336) {
            hitDiff = 60 + misc.random(5);
            setAnimation(7070);
            DDStimer = 0;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(60);
            SpecialDelay -= 3;
            actionTimer = 4;
        }
    }

    public void armadylSpecial() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 15333) {
            hitDiff = 65 + misc.random(10);
            setAnimation(7074);
            DDStimer = 0;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(70);
            SpecialDelay -= 3;
            actionTimer = 4;
        }
    }

    public void maulSpec() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 4153) {
            setAnimation(1667);
            actionTimer = 4;
            SpecDamgNPC(30);
            DDS2Damg = true;
            DDStimer = 1;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(30);
            SpecialDelay -= 1;
        } else if (IsAttacking && playerEquipment[playerWeapon] == 4153) {
            int j = PlayerHandler.players[AttackingOn].absX;
            int k = PlayerHandler.players[AttackingOn].absY;
            int l = PlayerHandler.players[AttackingOn].playerLevel[playerHitpoints];

            SpecDamg(30);
            DDS2Damg = true;
            DDStimer = 1;
            startAnimation(1667);
            actionTimer = 4;
            teleportToX = absX;
            teleportToY = absY;
            SpecialDelay -= 1;
        }
    }

    public void darkbow() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 11235) {
            setAnimation(426);
            actionTimer = 4;
            SpecDamgNPC(45);
            DDS2Damg = true;
            DDStimer = 1;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(45);
            SpecialDelay -= 1;
        } else if (IsAttacking && playerEquipment[playerWeapon] == 11235) {
            int j = PlayerHandler.players[AttackingOn].absX;
            int k = PlayerHandler.players[AttackingOn].absY;
            int l = PlayerHandler.players[AttackingOn].playerLevel[playerHitpoints];

            SpecDamg(50);
            DDS2Damg = true;
            DDStimer = 1;
            startAnimation(426);
            actionTimer = 4;
            teleportToX = absX;
            teleportToY = absY;
            SpecDamg(50);
            SpecialDelay -= 1;
        }
    }
    public boolean hasFreeSlots(int slots) {
        return (freeSlots() >= slots);
    }
    public void DDZ() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 4214) {
            setAnimation(426);
            setAnimation(426);
            actionTimer = 4;
            SpecDamgNPC(32);
            DDS2Damg = true;
            DDStimer = 1;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(30);
            SpecialDelay -= 1;
        } else if (IsAttacking && playerEquipment[playerWeapon] == 4214) {
            int j = PlayerHandler.players[AttackingOn].absX;
            int k = PlayerHandler.players[AttackingOn].absY;
            int l = PlayerHandler.players[AttackingOn].playerLevel[playerHitpoints];

            SpecDamg(32);
            DDS2Damg = true;
            DDStimer = 1;
            startAnimation(462);
            startAnimation(426);
            actionTimer = 4;
            teleportToX = absX;
            teleportToY = absY;
            SpecialDelay -= 1;
        }
    }

    /* END OF MENUS*/

    public void DDZZ() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 11235
                && (misc.random(3) == 1)) {
            SpecDamgNPC(35);
            DDS2Damg = true;
            DDStimer = 1;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(35);
            SpecialDelay -= 1;
        } else if (IsAttacking && playerEquipment[playerWeapon] == 11235
                && (misc.random(3) == 1)) {
            int j = PlayerHandler.players[AttackingOn].absX;
            int k = PlayerHandler.players[AttackingOn].absY;
            int l = PlayerHandler.players[AttackingOn].playerLevel[playerHitpoints];

            SpecDamg(40);
            DDS2Damg = true;
            DDStimer = 1;
            teleportToX = absX;
            teleportToY = absY;
            SpecialDelay -= 1;
        }
    }

    public void hally() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 3204) {
            setAnimation(440);
            actionTimer = 4;
            SpecDamgNPC(30);
            DDS2Damg = true;
            DDStimer = 1;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(30);
            SpecialDelay -= 1;
        } else if (IsAttacking && playerEquipment[playerWeapon] == 3204) {
            int j = PlayerHandler.players[AttackingOn].absX;
            int k = PlayerHandler.players[AttackingOn].absY;
            int l = PlayerHandler.players[AttackingOn].playerLevel[playerHitpoints];

            SpecDamg(30);
            DDS2Damg = true;
            DDStimer = 1;
            startAnimation(440);
            actionTimer = 4;
            teleportToX = absX;
            teleportToY = absY;
            SpecialDelay -= 1;
        }
    }

    public void DDSSpecial() {
        if (IsAttackingNPC && playerEquipment[playerWeapon] == 5698) {
            setAnimation(0x426);
            actionTimer = 4;
            SpecDamgNPC(31);
            DDS2Damg = true;
            DDStimer = 1;
            resetAnimation();
            teleportToX = absX;
            teleportToY = absY;
            SpecDamgNPC(31);
            SpecialDelay -= 3;
        } else if (IsAttacking && playerEquipment[playerWeapon] == 5698) {
            int j = PlayerHandler.players[AttackingOn].absX;
            int k = PlayerHandler.players[AttackingOn].absY;
            int l = PlayerHandler.players[AttackingOn].playerLevel[playerHitpoints];

            SpecDamg(31);
            DDS2Damg = true;
            DDStimer = 1;
            startAnimation(0x426);
            actionTimer = 4;
            teleportToX = absX;
            teleportToY = absY;
            SpecialDelay -= 3;
        }
    }

    public void SpecDamg(int maxDamage) {
        for (Player p : PlayerHandler.players) {
            if (p != null) {
                if (!PlayerHandler.players[AttackingOn].IsDead) {
                    int damage = misc.random(maxDamage);

                    if (PlayerHandler.players[AttackingOn].playerLevel[3]
                            - hitDiff
                            < 0) {
                        damage = PlayerHandler.players[AttackingOn].playerLevel[3];
                    }
                    PlayerHandler.players[AttackingOn].hitDiff = damage;
                    PlayerHandler.players[AttackingOn].updateRequired = true;
                    PlayerHandler.players[AttackingOn].hitUpdateRequired = true;
                }
            }
        }
    }

    public void SpecDamgNPC(int maxDamage) {
        if (NPCHandler.npcs[attacknpc] != null) {
            if (!server.npcHandler.npcs[attacknpc].IsDead) {
                int damage = misc.random(maxDamage);

                if (NPCHandler.npcs[attacknpc].HP - hitDiff < 0) {
                    damage = NPCHandler.npcs[attacknpc].HP;
                }
                NPCHandler.npcs[attacknpc].StartKilling = playerId;
                NPCHandler.npcs[attacknpc].RandomWalk = false;
                NPCHandler.npcs[attacknpc].IsUnderAttack = true;
                NPCHandler.npcs[attacknpc].hitDiff = damage;
                NPCHandler.npcs[attacknpc].updateRequired = true;
                NPCHandler.npcs[attacknpc].hitUpdateRequired = true;
            }
        }
    }

    public void animation(int id, int Y, int X) {
        if(getOutStream() != null) {
            getOutStream().createFrame(85);
            getOutStream().writeByteC(Y - (mapRegionY * 8));
            getOutStream().writeByteC(X - (mapRegionX * 8));
            getOutStream().createFrame(4);
            getOutStream().writeByte(0);
            getOutStream().writeWord(id);
            getOutStream().writeByte(0);
            getOutStream().writeWord(0);
        }
    }

    public void movePlayer(int x, int y, int z) {
        teleportToX = x;
        teleportToY = y;
        heightLevel = z;
    }

    public void ProjectileSpec(int startID, int casterY, int casterX, int offsetY, int offsetX, int index, int enemyY, int enemyX) {
        {
            try {
                GraphicsHandler.createSpec(startID, casterY, casterX, offsetY,
                        offsetX, 50, 95, 43, 31, enemyY, enemyX, index + 1);
            } catch (Exception E) {
            }
        }
    }

    public boolean specspell(int castID, int casterY, int casterX, int offsetY, int offsetX, int angle, int speed, int startHeight, int endHeight, int enemyY, int enemyX, int Lockon) {
        try {
            fcastid = castID;
            fcasterY = casterY;
            fcasterX = casterX;
            foffsetY = offsetY;
            foffsetX = offsetX;
            fangle = angle;
            fspeed = speed;
            fsh = startHeight;
            feh = endHeight;
            fenemyY = enemyY;
            fenemyX = enemyX;
            fLockon = Lockon;

            actionTimer = 0;

            // Casts Spell In Hands
            if (!cast) {
                createProjectile(casterY, casterX, offsetY, offsetX, angle,
                        speed, castID, startHeight, endHeight, Lockon);
                cast = true;
                firingspell = true;
            }
            // Fires Projectile
            if (cast && !fired) {
                firingspell = false;
                cast = false;
                fired = false;
            }
        } catch (Exception E) {
            E.printStackTrace();

        }
        return true;
    }

    public void capeEmote() {

        if (playerEquipment[playerCape] == 4319 || (playerEquipment[playerCape] == 2677)) { //Attack
            lowGFX(823, 0);
            setAnimation(4959);
            stopMovement();
            // txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 14079 || (playerEquipment[playerCape] == 14080)) { //Attack
            lowGFX(824, 0);
            setAnimation(4961);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 2680 || (playerEquipment[playerCape] == 4359)) { //Attack
            lowGFX(828, 0);
            setAnimation(4981);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 14085 || (playerEquipment[playerCape] == 14086)) { //Attack
            lowGFX(829, 0);
            setAnimation(4979);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 14139) { //Attack
            lowGFX(816, 0);
            setAnimation(4945);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 15150) { //Attack
            lowGFX(1515, 0);
            setAnimation(8525);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 14097 || (playerEquipment[playerCape] == 14098)) { //Attack
            lowGFX(830, 0);
            setAnimation(4977);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 14088 || (playerEquipment[playerCape] == 14089)) { //Attack
            lowGFX(813, 0);
            setAnimation(4939);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 14091 || (playerEquipment[playerCape] == 14092)) { //Attack
            lowGFX(817, 0);
            setAnimation(4947);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 14127 || (playerEquipment[playerCape] == 14128)) { //Attack
            lowGFX(821, 0);
            setAnimation(4955);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 14082 || (playerEquipment[playerCape] == 14083)) { //Attack
            lowGFX(832, 0);
            setAnimation(4973);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 14118 || (playerEquipment[playerCape] == 14119)) { //Attack
            lowGFX(814, 0);
            setAnimation(4941);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        }
        if (playerEquipment[playerCape] == 14115 || (playerEquipment[playerCape] == 14116)) { //Attack
            lowGFX(820, 0);
            setAnimation(4953);
            stopMovement();
// txt4 = "A Attack skill cape.";
            playerLevel[0] = getLevelForXP(playerXP[0]);
            playerLevel[0] += 1;
            sendFrame126(String.valueOf(playerLevel[0]), 4016);
            requestUpdates();
            //string4UpdateRequired = true;
        } else {
            sM("you need to be wearing an cape to do this emote.");
        }
    }
    public void drawHeadicon(int type, int index) {
        // synchronized(c) {
        if(getOutStream() != null) {
            outStream.createFrame(254);
            outStream.writeByte(type);

            int k = 0, l = 0;

            if (type == 1 || type == 10) {
                outStream.writeUnsignedWord(index);
                outStream.writeUnsignedWord(k);
                outStream.writeByte(l);
            } else {
                outStream.writeUnsignedWord(k);
                outStream.writeUnsignedWord(l);
                outStream.writeByte(index);
            }
        }
    }
    public void attdam(int maxDamage, int range) {
        for (Player p : PlayerHandler.players) {
            if (p != null) {
                client person = (client) p;

                if ((person.playerName != null || person.playerName != "null")) {
                    if (person.distanceToPoint(absX, absY) <= range
                            && person.playerId != playerId) {
                        int damage = misc.random(maxDamage);

                        if (person.playerLevel[3] - hitDiff < 0) {
                            damage = person.playerLevel[3];
                        }
                        person.hitDiff = damage;
                        person.KillerId = playerId;
                        person.updateRequired = true;
                        person.hitUpdateRequired = true;
                    }
                }
            }
        }
    }

    public void stillgfx4(int id, int Y, int X) {
        if(getOutStream() != null) {
            getOutStream().createFrame(85);
            getOutStream().writeByteC(Y - (mapRegionY * 8));
            getOutStream().writeByteC(X - (mapRegionX * 8));
            getOutStream().createFrame(4);
            getOutStream().writeByte(0); // Tiles away (X >> 4 + Y & 7)
            getOutStream().writeWord(id); // Graphic id
            getOutStream().writeByte(80); // height of the spell above it's basic place, i think it's written in pixels 100 pixels higher
            getOutStream().writeWord(0); // Time before casting the graphic
        }
    }

    public void runecraft(int requiredlvl, int expadd, int itemtoadd, int x2, int x3, int x4, int x5, int x6) {
        int essamount = 0;

        if (playerHasItem(1436)) {
            if (playerLevel[20] >= requiredlvl) {
                if (playerLevel[20] >= 0 && playerLevel[20] < x2) {
                    essamount = amountOfItem(1436);
                }
                if (playerLevel[20] >= x2 && playerLevel[20] < x3) {
                    essamount = amountOfItem(1436) * 2;
                }
                if (playerLevel[20] >= x3 && playerLevel[20] < x4) {
                    essamount = amountOfItem(1436) * 3;
                }
                if (playerLevel[20] >= x4 && playerLevel[20] < x5) {
                    essamount = amountOfItem(1436) * 4;
                }
                if (playerLevel[20] >= x5) {
                    essamount = amountOfItem(1436) * 5;
                }
                for (int i = 0; i < 29; i++) {
                    deleteItem(1436, getItemSlot(1436), i);
                }
                addSkillXP(expadd, 20);
                addItem(itemtoadd, essamount);
                sendMessage(
                        "You craft " + essamount + " " + GetItemName(itemtoadd)
                                + "!");
                staticAnimation(186, absX, absY, 100);
                setAnimation(791);
            } else if (playerLevel[20] <= requiredlvl - 1) {
                sendMessage(
                        "You need " + requiredlvl + " Runecrafting to make "
                                + GetItemName(itemtoadd) + "!");
            }
        } else if (!playerHasItem(1436)) {
            sendMessage("You need some rune essence to craft runes!");
        }
    }

    public void DragonLongSpecial() { // by gander for www.rs-server.net
        hitDiff = 20 + playerMaxHit; // Hit dif
        inCombat(); // In combat
        staticAnimation(248, absX, absY, 100); // Animation
        setAnimation(1058); // emote
        actionTimer = 25; // Timer to reset animation
        teleportToX = absX; // not to move
        teleportToY = absY; // not to move xD

    }

    public void updateCharAppearance(int[] styles, int[] colors) {
        for (int j = 0; j < 7; j++) {
            if (styles[j] > 0) {
                styles[j] += 0x100;
                pCHead = styles[0];
                pCBeard = styles[1];
                pCTorso = styles[2];
                pCArms = styles[3];
                pCHands = styles[4];
                pCLegs = styles[5];
                pCFeet = styles[6];
            }
        }
        for (int i = 0; i < 5; i++) {
            pColor = colors[i];
        }
    }

    public int distanceTo(Player other) {
        return (int) Math.sqrt(
                Math.pow(absX - other.absX, 2) + Math.pow(absY - other.absY, 2));
    }

    public int distanceToPoint(int pointX, int pointY) {
        return (int) Math.sqrt(
                Math.pow(absX - pointX, 2) + Math.pow(absY - pointY, 2));
    }

    /* END OF PKING VOIDS*/

    /* SKILLS ET*/

    /* MISC*/

    public int getItemSlot(int itemID) {
        for (int slot = 0; slot < playerItems.length; slot++) {
            if (playerItems[slot] == (itemID + 1)) {
                return slot;
            }
        }
        return -1;
    }

    public void sendConfig(final int settingID, final int value) {
        if (getOutStream() != null) {
            if (value < 128) {
                getOutStream().createFrame(36);
                getOutStream().writeWordBigEndian(settingID);
                getOutStream().writeByte(value);
                updateRequired = true;
                appearanceUpdateRequired = true;
            } else {
                getOutStream().createFrame(87);
                getOutStream().writeWordBigEndian_dup(settingID);
                getOutStream().writeDWord_v1(value);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
        }
        flushOutStream();
    }

    /* THEIVING*/

    public void viewTo(int coordX, int coordY) {
        viewToX = ((2 * coordX) + 1);
        viewToY = ((2 * coordY) + 1);
        dirUpdate2Required = true;
        updateRequired = true;
    }


    /* RUNECRAFT*/

    public boolean ZammyGwd() {
        return absX >= 2881 && absX <= 2937 && absY >= 5335 && absY <= 5359 || absX >= 2914 && absX <= 2944 && absY >= 5316 && absY <= 5335 && heightLevel == 2;
    }

    public boolean corp() {
        return absX >= 2970 && absX <= 3001 && absY >= 4359 && absY <= 4395;
    }

    /* AGILITY*/

    public boolean singleWild() {
        return absX >= 3067 && absX <= 3105 && absY >= 3520 && absY <= 3547 || (absX >= 3064 && absX <= 3113 && absY >= 3941 && absY <= 3963);
    }

    public boolean inpkbox() {
        return absX > 2060 && absX < 2099 && absY > 3227 && absY < 3245;
    }


    /* WOODCUTTING*/

    public boolean isUntradable(int item) {
        for (int i = 0; i < untradable.length; i++) {
            if (untradable[i] == item) {
                return true;
            }
        }
        return false;
    }

    public boolean cannonowner() {
        return playerName == cannonowner;
    }

    public boolean hasAxe() {
        return playerHasItem2(6739) || playerHasItem2(1351) || playerHasItem2(1349)
                || playerHasItem2(1353) || playerHasItem2(1355)
                || playerHasItem2(1357) || playerHasItem2(1359)
                || playerHasItem2(1361);
    }

    public boolean hasPick() {
        return playerHasItem2(1275) || playerHasItem2(1271) || playerHasItem2(1273)
                || playerHasItem2(1269) || playerHasItem2(1267)
                || playerHasItem2(1265);
    }

    public void checkPKReward() {
        if (pkpoints == 500000) {
            addItem(1038, 1);
            sendMessage(
                    "Congratz on getting " + pkpoints
                            + " pk points! Have a phat =)");
        }
        if (pkpoints == 750000) {
            addItem(1040, 1);
            sendMessage(
                    "Congratz on getting " + pkpoints
                            + " pk points! Have a phat =)");
        }
        if (pkpoints == 100000) {
            addItem(1042, 1);
            sendMessage(
                    "Congratz on getting " + pkpoints
                            + " pk points! Have a phat =)");
        }
        if (pkpoints == 150000) {
            addItem(1044, 1);
            sendMessage(
                    "Congratz on getting " + pkpoints
                            + " pk points! Have a phat =)");
        }
        if (pkpoints == 200000) {
            addItem(1046, 1);
            sendMessage(
                    "Congratz on getting " + pkpoints
                            + " pk points! Have a phat =)");
        }
        if (pkpoints == 300000) {
            addItem(1048, 1);
            sendMessage(
                    "Congratz on getting " + pkpoints
                            + " pk points! Have a phat =)");
        }
        if (pkpoints == 500000) {
            addItem(6570, 1);
            sendMessage(
                    "Congratz on getting " + pkpoints
                            + " pk points! Have a firecape =)");
        }
    }

    public int GetGroundItemID(int ItemID, int itemX, int itemY) {
        for (int i = 0; i < 9999; i++) {
            if (ItemHandler.globalItemID[i] > -1) {
                if (ItemHandler.globalItemID[i] == ItemID
                        && ItemHandler.globalItemX[i] == itemX
                        && ItemHandler.globalItemY[i] == itemY) {
                    return i;
                }
            }
        }
        return -1;
    }

    public void restorePot() {

        playerLevel[0] = getLevelForXP(playerXP[0]);
        sendFrame126("@whi@" + playerLevel[0], 4004);
        playerLevel[1] = getLevelForXP(playerXP[1]);
        sendFrame126("@whi@" + playerLevel[1], 4008);
        playerLevel[2] = getLevelForXP(playerXP[2]);
        sendFrame126("@whi@" + playerLevel[2], 4006);
        playerLevel[4] = getLevelForXP(playerXP[4]);
        sendFrame126("@whi@" + playerLevel[4], 4010);
        playerLevel[6] = getLevelForXP(playerXP[6]);
        sendFrame126("@whi@" + playerLevel[6], 4014);
        playerLevel[7] = getLevelForXP(playerXP[7]);
        sendFrame126("@whi@" + playerLevel[7], 4034);
        playerLevel[8] = getLevelForXP(playerXP[8]);
        sendFrame126("@whi@" + playerLevel[8], 4038);
        playerLevel[9] = getLevelForXP(playerXP[9]);
        sendFrame126("@whi@" + playerLevel[9], 4026);
        playerLevel[10] = getLevelForXP(playerXP[10]);
        sendFrame126("@whi@" + playerLevel[10], 4032);
        playerLevel[11] = getLevelForXP(playerXP[11]);
        sendFrame126("@whi@" + playerLevel[11], 4036);
        playerLevel[12] = getLevelForXP(playerXP[12]);
        sendFrame126("@whi@" + playerLevel[12], 4024);
        playerLevel[13] = getLevelForXP(playerXP[13]);
        sendFrame126("@whi@" + playerLevel[13], 4030);
        playerLevel[14] = getLevelForXP(playerXP[14]);
        sendFrame126("@whi@" + playerLevel[14], 4028);
        playerLevel[15] = getLevelForXP(playerXP[15]);
        sendFrame126("@whi@" + playerLevel[15], 4020);
        playerLevel[16] = getLevelForXP(playerXP[16]);
        sendFrame126("@whi@" + playerLevel[16], 4018);
        playerLevel[17] = getLevelForXP(playerXP[17]);
        sendFrame126("@whi@" + playerLevel[17], 4022);
        playerLevel[20] = getLevelForXP(playerXP[20]);
        sendFrame126("@whi@" + playerLevel[20], 4152);
        if (superRestore) {
            playerLevel[5] = getLevelForXP(playerXP[5]);
            sendFrame126("@whi@" + playerLevel[5], 4012);
            superRestore = false;
        }
    }

    /* OBJECTS MAIN */
    public int GetObject(int X, int Y, int ObjectID) {
        for (int i = 0; i < ObjectHandler.MaxObjects; i++) {
            if (ObjectHandler.ObjectID[i] > -1) {
                if (X == ObjectHandler.ObjectX[i]
                        && Y == ObjectHandler.ObjectY[i]) {
                    if (ObjectID != -1) {
                        if (ObjectID == ObjectHandler.ObjectID[i]) {
                            return i;
                        }
                    } else {
                        return i;
                    }
                }
            }
        }
        return -1;
    }

    public void ChangeDoor(int ArrayID) {
        int objectID = ObjectHandler.ObjectOriID[ArrayID];
        int objectX = ObjectHandler.ObjectX[ArrayID];
        int objectY = ObjectHandler.ObjectY[ArrayID];
        int Face = ObjectHandler.ObjectFace[ArrayID];
        int Type = ObjectHandler.ObjectType[ArrayID];

        ReplaceObject2(objectX, objectY, -1, -1, 0);
        switch (Type) {
            case 1:
                ReplaceObject2(objectX, (objectY + 1), objectID, Face, 0);
                ObjectHandler.ObjectType[ArrayID] = 2;
                break;

            case 2:
                ReplaceObject2(objectX, (objectY - 1), objectID, Face, 0);
                ObjectHandler.ObjectType[ArrayID] = 1;
                break;

            case 3:
                ReplaceObject2((objectX + 1), objectY, objectID, Face, -2);
                ObjectHandler.ObjectType[ArrayID] = 4;
                break;

            case 4:
                ReplaceObject2((objectX - 1), objectY, objectID, Face, -2);
                ObjectHandler.ObjectType[ArrayID] = 3;
                break;

            case 11707:
                ReplaceObject2((objectX - 1), objectY, objectID, Face, -2);
                ObjectHandler.ObjectType[ArrayID] = 3;
                break;

        }
    }

    public void ReplaceObject(int objectX, int objectY, int NewObjectID, int Face) {
        getOutStream().createFrameVarSizeWord(60);
        getOutStream().writeByte(objectY - (mapRegionY * 8));
        getOutStream().writeByteC(objectX - (mapRegionX * 8));

        /* DELETE OBJECT*/
        getOutStream().writeByte(101);
        getOutStream().writeByteC(0);
        getOutStream().writeByte(0);

        /* CREATE OBJECT*/
        if (NewObjectID > -1) {
            getOutStream().writeByte(151);
            getOutStream().writeByteS(0);
            getOutStream().writeWordBigEndian(NewObjectID);
            getOutStream().writeByteA(Face); // 0= WEST | -1 = NORTH | -2 = EAST | -3 = SOUTH
        }
        getOutStream().endFrameVarSizeWord();
    }

    public void ReplaceObject2(int objectX, int objectY, int NewObjectID, int Face, int ObjectType) {
        if(getOutStream() != null) {
            getOutStream().createFrame(85);
            getOutStream().writeByteC(objectY - (mapRegionY * 8));
            getOutStream().writeByteC(objectX - (mapRegionX * 8));

            getOutStream().createFrame(101);
            getOutStream().writeByteC((ObjectType << 2) + (Face & 3));
            getOutStream().writeByte(0);

            if (NewObjectID != -1) {
                getOutStream().createFrame(151);
                getOutStream().writeByteS(0);
                getOutStream().writeWordBigEndian(NewObjectID);
                getOutStream().writeByteS((ObjectType << 2) + (Face & 3));
                // FACE: 0= WEST | -1 = NORTH | -2 = EAST | -3 = SOUTH
                // ObjectType: 0-3 wall objects, 4-8 wall decoration, 9: diag. walls, 10-11 world objects, 12-21: roofs, 22: floor decoration
            }
        }
    }

    public void ReplaceObject3(int objectX, int objectY, int NewObjectID,
                               int Face, int ObjectType) {
        getOutStream().createFrame(85);
        getOutStream().writeByteC(objectY - (mapRegionY * 8));
        getOutStream().writeByteC(objectX - (mapRegionX * 8));

        getOutStream().createFrame(101);
        getOutStream().writeByteC((ObjectType << 2) + (Face & 3));
        getOutStream().writeByte(0);

        if (NewObjectID != -1) {
            getOutStream().createFrame(151);
            getOutStream().writeByteS(0);
            getOutStream().writeWordBigEndian(NewObjectID);
            getOutStream().writeByteS((ObjectType << 2) + (Face & 3));
            // FACE: 0= WEST | -1 = NORTH | -2 = EAST | -3 = SOUTH
            // ObjectType: 0-3 wall objects, 4-8 wall decoration, 9: diag.
            // walls, 10-11 world objects, 12-21: roofs, 22: floor decoration
        }
    }

    public void AddGlobalObj(int objectX, int objectY, int NewObjectID, int Face, int ObjectType) {
        for (Player p : PlayerHandler.players) {
            if (p != null) {
                client person = (client) p;

                if ((person.playerName != null || person.playerName != "null")) {
                    if (person.distanceToPoint(objectX, objectY) <= 60) {
                        person.ReplaceObject2(objectX, objectY, NewObjectID,
                                Face, ObjectType);
                    }
                }
            }
        }
    }

    public void Addaobject(int x, int y, int typeID, int orientation, int tileObjectType, int heightLevel) {
        getOutStream().createFrame(85);
        getOutStream().writeByteC(y - (mapRegionY * 8));
        getOutStream().writeByteC(x - (mapRegionX * 8));

        getOutStream().createFrame(151);
        // getOutStream().writeByteA(((x&7) << 4) + (y&7));
        getOutStream().writeByteA(0);
        getOutStream().writeWordBigEndian(typeID);
        getOutStream().writeByteS((tileObjectType << 2) + (orientation & 3));
    }

    public void deletethatobject(int objectX, int objectY) {
        ReplaceObject2(objectX, objectY, 6951, -1, 10);
    }

    public void deletethatwall(int objectX, int objectY) {
        ReplaceObject2(objectX, objectY, 6951, -1, 0);
    }

    public void AddObject(int objectX, int objectY, int NewObjectID, int Face) {
        getOutStream().createFrameVarSizeWord(60);
        getOutStream().writeByte(objectY - (mapRegionY * 8));
        getOutStream().writeByteC(objectX - (mapRegionX * 8));

        /* CREATE OBJECT*/
        if (NewObjectID > -1) {
            getOutStream().writeByte(151);
            getOutStream().writeByteS(0);
            getOutStream().writeWordBigEndian(NewObjectID);
            getOutStream().writeByteA(Face); // 0= WEST | -1 = NORTH | -2 = EAST | -3 = SOUTH
        }
        getOutStream().endFrameVarSizeWord();
    }

    public void makeGlobalObject(int x, int y, int typeID, int orientation, int tileObjectType) { // Makes Global objects
        for (Player p : PlayerHandler.players) {
            if (p != null) {
                client person = (client) p;

                if ((person.playerName != null || person.playerName != "null")) {
                    if (person.distanceToPoint(x, y) <= 60) {
                        person.createNewTileObject(x, y, typeID, orientation,
                                tileObjectType);
                    }
                }
            }
        }
    }

    public void Deleteobjects() {
        deletethatobject(2885, 3515); // Tree
        deletethatobject(2883, 3511); // Tree
        deletethatobject(2886, 3514); // Tree
        deletethatobject(2883, 3512); // Tree
        deletethatobject(2883, 3508); // Tree
        deletethatobject(2886, 3506); // Tree
        deletethatobject(2886, 3510); // Tree
        deletethatobject(2785, 3175); // plant
        deletethatobject(3083, 9499);
        deletethatobject(3083, 9497);
        deletethatobject(3083, 9501);
        deletethatobject(3084, 9500);
        deletethatobject(3085, 9500);
        deletethatobject(3085, 9501);
        deletethatobject(3085, 9499);
        deletethatobject(3085, 9498);
        deletethatobject(3085, 9503);
        deletethatobject(3087, 9503);
        deletethatobject(3087, 9502);
        deletethatobject(3088, 9502);
        deletethatobject(3088, 9501);
        deletethatobject(3086, 9501);
        deletethatobject(3086, 9499);
        deletethatobject(3086, 9498);
        deletethatobject(3088, 9498);
        deletethatobject(3088, 9499);
        deletethatobject(3089, 9499);
        deletethatobject(3090, 9501);
        deletethatobject(3091, 9501);
        deletethatobject(3091, 9500);
        deletethatobject(3081, 9496);
        deletethatobject(3082, 9496);
        deletethatobject(3082, 9495);
        deletethatobject(3081, 9495);
        deletethatobject(3080, 9496);
        deletethatobject(3079, 9496);
        deletethatobject(3078, 9496);
        deletethatobject(3080, 9495);
        deletethatobject(3079, 9495);
        deletethatobject(3078, 9495);
        deletethatobject(3077, 9496);
        deletethatobject(3077, 9495);
        deletethatobject(3076, 9496);
        deletethatobject(3076, 9495);
        deletethatobject(3077, 9496);
        deletethatobject(3075, 9497);
        deletethatobject(3075, 9499);
        deletethatobject(3074, 9498);
        deletethatobject(3073, 9498);
        deletethatobject(3074, 9499);
        deletethatobject(3075, 9501);
        deletethatobject(3075, 9502);
        deletethatobject(3074, 9502);
        deletethatobject(3074, 9503);
        deletethatobject(3073, 9504);
        deletethatobject(3073, 9505);
        deletethatobject(3073, 9506);
        deletethatobject(3073, 9507);
        deletethatobject(3077, 9503);
        deletethatobject(3077, 9504);
        deletethatobject(3076, 9504);
        deletethatobject(3075, 9504);
        deletethatobject(3075, 9505);
        deletethatobject(3075, 9506);
        deletethatobject(3076, 9506);
        deletethatobject(3075, 9508);
        deletethatobject(3076, 9509);
        deletethatobject(3077, 9509);
        deletethatobject(3087, 9505);
        deletethatobject(3087, 9506);
        deletethatobject(3086, 9507);
        deletethatobject(3088, 9507);
        deletethatobject(3083, 9503);
        deletethatobject(3083, 9502);
        deletethatobject(3082, 9502);
        deletethatobject(3082, 9503);
        deletethatobject(3078, 9507);
        deletethatobject(3078, 9507);
        deletethatobject(3080, 9509);
        deletethatobject(3079, 9508);
        deletethatobject(3078, 9508);
        deletethatobject(3079, 9509);
        deletethatobject(3078, 9509);

        deletethatobject(2935, 3355); // hang

        //deletethatobject(2468, 3178); // new training area for chicken
        deletethatobject(2387, 3488); // hang
        deletethatobject(2463, 3186); // hang
        deletethatobject(2352, 4945); // hang
        deletethatobject(ItemIDs.IRON_BAR, 4946); // hang
        deletethatobject(2352, 4946); // hang
        deletethatobject(ItemIDs.STEEL_BAR, 4946); // hang
        deletethatobject(2305, 3196); // hang
        deletethatobject(2305, 3193); // hang
        deletethatobject(2306, 3196); // hang
        deletethatobject(2306, 3193); // hang
        deletethatobject(3098, 3496); // hang
        deletethatobject(3098, 3493); // hang
        deletethatobject(3098, 3493); // hang
        deletethatobject(3096, 3493); // hang
        deletethatobject(3095, 3489); // hang
        deletethatobject(3061, 3374); // hang
        deletethatobject(2014, 4434); // hang
        deletethatobject(2014, 4435); // hang
        deletethatobject(2014, 4436); // hang
        deletethatobject(2014, 4437); // hang
        deletethatobject(2012, 4433); // hang
        deletethatobject(2012, 4434); // hang
        deletethatobject(2012, 4435); // hang
        deletethatobject(2012, 4436); // hang
        deletethatobject(2010, 4434); // hang
        deletethatobject(2010, 4435); // hang
        deletethatobject(2010, 4436); // hang
        deletethatobject(2010, 4437); // hang
        deletethatobject(2599, 3424); // fish
        deletethatobject(2600, 3425); // hang
        deletethatobject(2848, 5087); // crafting
        deletethatobject(2847, 5087); // crafting
        deletethatobject(2848, 5088); // crafting
        deletethatobject(2847, 5088); // crafting
        deletethatobject(2785, 3175); //plant
        deletethatobject(3097, 3468); //member access (needed to be fucking deleted) - Figment
        deletethatobject(2463, 3186); //chair-
    }

    /* END OF SKILLS*/

    public void Deletewalls() {
        deletethatwall(3170, 6791); // door
        deletethatwall(3171, 6783); // door
    }

    /* END OF BONES AND FOOD*/

    /* FIREMAKING*/
    public boolean firemaking() {
        if (playerLevel[playerFiremaking] >= firemaking[1]) {
            if (actionTimer == 0 && !IsMakingFire) {
                actionAmount++;
                sendMessage("You attempt to light a fire...");
                OriginalWeapon = playerEquipment[playerWeapon];
                OriginalShield = playerEquipment[playerShield];
                playerEquipment[playerWeapon] = 590;
                playerEquipment[playerShield] = -1;
                actionTimer = 5;
                if (actionTimer < 1) {
                    actionTimer = 1;
                }
                setAnimation(0x2DD);
                IsMakingFire = true;
            }
            if (actionTimer == 0 && IsMakingFire) {
                addSkillXP((firemaking[2] * firemaking[3]), playerFiremaking);
                ItemHandler.DroppedItemsSDelay[firemaking[4]] = ItemHandler.MaxDropShowDelay
                        + 1;
                CreateNewFire();
                sendMessage("You light a fire.");
                playerEquipment[playerWeapon] = OriginalWeapon;
                OriginalWeapon = -1;
                resetAnimation();
                IsMakingFire = false;
                resetFM();
            }
        } else {
            sendMessage(
                    "You need " + firemaking[1] + " "
                            + statName[playerFiremaking] + " to light these logs.");
            resetFM();
            return false;
        }
        return true;
    }

    public boolean resetFM() {
        firemaking[0] = 0;
        firemaking[1] = 0;
        firemaking[2] = 0;
        firemaking[4] = 0;
        skillX = -1;
        skillY = -1;
        IsUsingSkill = false;
        IsMakingFire = false;
        return true;
    }

    public void CreateNewFire() {
        for (int i = 0; i < ObjectHandler.MaxObjects; i++) {
            if (ObjectHandler.ObjectFireID[i] == -1) {
                ObjectHandler.ObjectFireID[i] = 2732;
                ObjectHandler.ObjectFireX[i] = skillX;
                ObjectHandler.ObjectFireY[i] = skillY;
                ObjectHandler.ObjectFireH[i] = heightLevel;
                ObjectHandler.ObjectFireMaxDelay[i] = ObjectHandler.FireDelay
                        + (ObjectHandler.FireGianDelay * firemaking[0]);
                break;
            }
        }
    }

    public void AddObjectFire() {
        if (!IsFireing) {
            IsFireing = true;
            int tmpX = 0;
            int tmpY = 0;
            int calcX = 0;
            int calcY = 0;

            for (int i = 0; i < ObjectHandler.MaxObjects; i++) {
                if (ItemHandler.DroppedItemsID[i] > -1) {
                    tmpX = ObjectHandler.ObjectFireX[i];
                    tmpY = ObjectHandler.ObjectFireY[i];
                    calcX = tmpX - absX;
                    calcY = tmpY - absY;
                    if (calcX >= -16 && calcX <= 15 && calcY >= -16
                            && calcY <= 15 && !FireDelete[i]
                            && ObjectHandler.ObjectFireH[i]
                            == heightLevel) {
                        if (!IsFireShowed[i]) {
                            IsFireShowed[i] = true;
                            ReplaceObject2(ObjectHandler.ObjectFireX[i],
                                    ObjectHandler.ObjectFireY[i],
                                    ObjectHandler.ObjectFireID[i], 0, 10);
                        }
                    } else if (IsFireShowed[i] || FireDelete[i]) {
                        ReplaceObject2(ObjectHandler.ObjectFireX[i],
                                ObjectHandler.ObjectFireY[i], -1, 0, 10);
                        int LastPlayerInList = -1;
                        int TotalPlayers = 0;

                        for (int j = 1; j < PlayerHandler.maxPlayers; j++) {
                            if (PlayerHandler.players[j] != null) {
                                LastPlayerInList = j;
                                TotalPlayers++;
                            }
                        }
                        if (FireDelete[i]) {
                            int fireX = ObjectHandler.ObjectFireX[i];
                            int fireY = ObjectHandler.ObjectFireY[i];

                            FireDelete[i] = false;
                            ObjectHandler.ObjectFireDeletecount[i]++;
                            if ((LastPlayerInList == playerId
                                    || LastPlayerInList == -1)
                                    && ObjectHandler.ObjectFireDeletecount[i]
                                    == TotalPlayers) {
                                server.objectHandler.ResetFire(i);
                                for (int j = 1; j < PlayerHandler.maxPlayers; j++) {
                                    if (PlayerHandler.players[j] != null) {
                                        PlayerHandler.players[j].IsFireShowed[i] = false;
                                    }
                                }
                                if (misc.random(2) == 1) {
                                    ItemHandler.addItem(592, fireX, fireY, 1,
                                            playerId, false);
                                }
                            }
                        } else {
                            IsFireShowed[i] = false;
                        }
                    }
                }
            }
            IsFireing = false;
        }
    }

    public void NewObjects() {
        server.getGlobalObjects().add(new GlobalObject(2213, 3284, 2777, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3283, 2777, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3282, 2777, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3281, 2777, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3280, 2777, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3279, 2777, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3278, 2777, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(1032, 3281, 2764, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2472, 2864, 3599, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(10687, 3285, 2770, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(6552, 2467, 3176, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(410, 2467, 3179, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(409, 2469, 3182, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3193, 6874, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3193, 6875, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3193, 6872, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3193, 6871, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2783, 3188, 6873, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2783, 3188, 6875, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2728, 3192, 6877, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2728, 3190, 6877, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2380, 3192, 6869, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2513, 3192, 6867, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(8151, 2603, 4774, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(8151, 2605, 4774, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(8151, 2599, 4774, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(8151, 2597, 4774, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3741, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3045, 3741, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3046, 3741, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3047, 3741, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3048, 3741, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3742, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3743, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3744, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3745, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3746, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3747, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3748, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3749, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3750, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3751, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3044, 3752, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3048, 3742, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3048, 3743, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3048, 3744, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3048, 3745, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3048, 3746, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3048, 3747, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3048, 3748, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3048, 3749, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3047, 3749, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3046, 3749, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3045, 3749, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3046, 3750, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3046, 3751, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3046, 3752, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 3045, 3752, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4128, 3045, 3750, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4123, 3078, 3491, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4876, 2969, 3384, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4878, 2969, 3381, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4877, 2961, 3383, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2562, 2961, 3380, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2560, 2965, 3376, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3353, 3332, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3352, 3332, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3351, 3332, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3350, 3332, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7353, 2468, 3178, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(8987, 2469, 3178, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2474, 2471, 3179, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(8972, 2470, 3176, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(16050, 2471, 3176, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2385, 3485, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2385, 3486, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2385, 3487, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2385, 3488, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2385, 3489, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2385, 3490, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2385, 3491, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3489, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3490, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3491, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3492, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3493, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3494, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3495, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3486, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3485, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3484, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3483, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3482, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7409, 2389, 3481, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(1306, 2474, 3192, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2106, 2462, 3187, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2098, 2462, 3186, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2091, 2462, 3185, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2096, 2462, 3184, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2862, 3756, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3045, 9778, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2472, 2466, 3167, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3270, 3347, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3270, 3348, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3270, 3349, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3270, 3350, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3270, 3351, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2783, 3265, 3346, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(2783, 3263, 3346, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2348, 3171, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2348, 3172, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(1306, 2345, 3174, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(1306, 2345, 3168, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(1306, 2332, 3174, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(1306, 2332, 3168, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2380, 2340, 3168, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2895, 3531, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2896, 3531, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2890, 3531, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(28779, 2894, 3538, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(28780, 2893, 3538, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(28781, 2892, 3538, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2468, 2889, 3538, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2465, 2888, 3538, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2273, 4696, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2478, 2260, 4702, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2480, 2267, 4704, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2481, 2272, 4704, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2482, 2277, 4705, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2483, 2280, 4705, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2484, 2283, 4687, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2487, 2272, 4686, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2486, 2267, 4686, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2485, 2260, 4686, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2479, 2261, 4697, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2488, 2281, 4697, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2489, 2282, 4694, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2490, 2262, 4693, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3300, 3306, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3301, 3306, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3302, 3306, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3303, 3306, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3306, 3303, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3305, 3303, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3304, 3303, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3303, 3303, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3300, 3303, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3299, 3303, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3298, 3303, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3297, 3303, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3296, 3303, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3295, 3303, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3301, 3296, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3302, 3296, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3296, 3296, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3295, 3296, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3294, 3296, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3293, 3296, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3298, 3309, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3301, 3309, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(362, 3302, 3309, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(7319, 3092, 3503, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(11666, 3047, 9791, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(404, 3170, 6793, 0, -3, 10));
        server.getGlobalObjects().add(new GlobalObject(404, 3171, 6793, 0, -3, 10));
        server.getGlobalObjects().add(new GlobalObject(404, 3172, 6793, 0, -3, 10));
        server.getGlobalObjects().add(new GlobalObject(404, 3173, 6793, 0, -3, 10));
        server.getGlobalObjects().add(new GlobalObject(4113, 3142, 6806, 0, -3, 10));
        server.getGlobalObjects().add(new GlobalObject(5259, 3173, 6785, 0, -2, 10));
        server.getGlobalObjects().add(new GlobalObject(1308, 3301, 3486, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(1306, 3295, 3481, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3094, 3499, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3094, 3498, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3094, 3497, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3095, 3496, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3096, 3496, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3097, 3496, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3097, 3495, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3097, 3494, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3097, 3493, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3097, 3492, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3097, 3491, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3096, 3491, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3095, 3491, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3094, 3490, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3094, 3489, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3094, 3488, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(564, 3094, 3493, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(563, 3095, 3493, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(562, 3094, 3494, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(566, 3095, 3494, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(10, 3092, 3492, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3094, 3500, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3095, 3500, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3096, 3500, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3097, 3500, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3098, 3500, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(4089, 3099, 3500, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3499, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3498, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3497, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3496, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3495, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3494, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3493, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3492, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3491, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3490, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3489, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3099, 3488, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4089, 3099, 3487, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3098, 3487, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3097, 3487, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3096, 3487, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3095, 3487, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3094, 3487, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3093, 3487, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3092, 3487, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3091, 3487, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(4089, 3090, 3487, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3090, 3488, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4089, 3090, 3489, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4089, 3090, 3492, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3090, 3493, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3090, 3497, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3090, 3498, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3090, 3499, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4089, 3090, 3500, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(4078, 3091, 3500, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3492, 9938, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3492, 9937, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2098, 3491, 9942, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2106, 3491, 9943, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2098, 3485, 9946, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2106, 3484, 9946, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2098, 3480, 9939, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2106, 3480, 9938, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2106, 3484, 9941, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2106, 3488, 9933, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2106, 3483, 9939, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2106, 3486, 9937, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2106, 3488, 9944, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2098, 3481, 9943, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2098, 3487, 9940, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2098, 3486, 9934, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2098, 3481, 9943, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2098, 3480, 9935, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(10687, 2854, 5081, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(10687, 2841, 5082, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2847, 5064, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2848, 5064, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2847, 5094, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2848, 5094, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2387, 4693, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2388, 4693, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2389, 4693, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2390, 4693, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(1766, 2381, 4679, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(1767, 2526, 4635, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(1765, 2532, 4644, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(1768, 2318, 9809, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2315, 9799, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2314, 9799, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2313, 9799, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2312, 9799, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2311, 9799, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2310, 9799, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(9398, 2312, 9802, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2565, 2787, 2778, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2417, 3001, 3931, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(13568, 3240, 9797, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(13569, 3239, 9797, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(13570, 3238, 9797, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(13571, 3237, 9797, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(13572, 3236, 9797, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(13573, 3235, 9797, 0, 2, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3084, 3520, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3088, 3520, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(9398, 2599, 3425, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(9398, 2605, 3411, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3357, 3215, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3357, 3214, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3357, 3213, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3357, 3212, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3357, 3211, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(3192, 3079, 3518, 0, -3, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3222, 3217, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3221, 3217, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3222, 3220, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3221, 3220, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(23095, 2895, 3538, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(1330, 2857, 3755, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(1332, 2864, 3755, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(1331, 2872, 3763, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(1332, 2871, 3769, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(1331, 2863, 3769, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(1330, 2863, 3761, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3132, 3204, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3132, 3205, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3134, 3206, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3135, 3206, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3135, 3207, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3136, 3208, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3137, 3209, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3138, 3210, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3139, 3211, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3145, 3215, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3144, 3215, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(63, 3143, 3215, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3141, 3204, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(3769, 3420, 4776, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(8576, 2602, 4779, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(8576, 2603, 4779, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(8576, 2602, 4780, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(8576, 2603, 4780, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3022, 3454, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3022, 3453, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3022, 3452, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3022, 3451, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3022, 3450, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3022, 3449, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(1306, 3016, 3461, 0, -1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2807, 2787, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2807, 2786, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2807, 2785, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2807, 2784, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2807, 2783, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3114, 9850, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3115, 9850, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3116, 9850, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3117, 9850, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3118, 9850, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3119, 9850, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3120, 9850, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3121, 9850, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 3116, 9846, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2513, 3121, 9838, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(61, 3114, 9836, 0, 0, 10));
        server.getGlobalObjects().add(new GlobalObject(2187, 3123, 9848, 0, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2529, 4643, 1, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2529, 4642, 1, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2529, 4641, 1, 1, 10));
        server.getGlobalObjects().add(new GlobalObject(2213, 2529, 4640, 1, 1, 10));

    }

    public void OBJECTS() {
    }


    public void guamSeed() // start of farming by i loot i
    {
        if (playerLevel[19] >= 1) {
            addSkillXP((100 * playerLevel[19]), 19);
            addItem(249, 1);
            playerStandIndex = 0x831;
            deleteItem(5291, getItemSlot(5291), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 1) {
            sendMessage("You need atleast 1 farming to plant this!");
        }
    }

    public void tomatoSeed() // start of farming by i loot i
    {
        if (playerLevel[19] >= 12) {
            addSkillXP((100 * playerLevel[19]), 19);
            addItem(1982, 1);
            playerStandIndex = 0x831;
            deleteItem(5322, getItemSlot(5322), 1);
            sendMessage("You put the seed on the patch and get an Tomato.");
        } else if (playerLevel[19] < 1) {
            sendMessage("You need atleast 1 farming to plant this!");
        }
    }

    public void marrentillSeed() {
        if (playerLevel[19] >= 15) {
            addSkillXP((100 * playerLevel[19]), 19);
            addItem(251, 1);
            playerStandIndex = 0x831;
            deleteItem(5292, getItemSlot(5292), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 15) {
            sendMessage("You need atleast 15 farming to plant this!");
        }
    }

    public void tarrominSeed() {
        if (playerLevel[19] >= 25) {
            addSkillXP((150 * playerLevel[19]), 19);
            addItem(253, 1);
            playerStandIndex = 0x831;
            deleteItem(5293, getItemSlot(5293), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 25) {
            sendMessage("You need atleast 25 farming to plant this!");
        }
    }

    public void harrlanderSeed() {
        if (playerLevel[19] >= 30) {
            addSkillXP((380 * playerLevel[19]), 19);
            addItem(255, 1);
            playerStandIndex = 0x831;
            deleteItem(5294, getItemSlot(5294), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 30) {
            sendMessage("You need atleast 30 farming to plant this!");
        }
    }

    public void ranarrSeed() {
        if (playerLevel[19] >= 40) {
            addSkillXP((470 * playerLevel[19]), 19);
            addItem(257, 1);
            playerStandIndex = 0x831;
            deleteItem(5295, getItemSlot(5295), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 40) {
            sendMessage("You need atleast 40 farming to plant this!");
        }
    }

    public void toadflaxSeed() {
        if (playerLevel[19] >= 50) {
            addSkillXP((600 * playerLevel[19]), 19);
            addItem(2998, 1);
            playerStandIndex = 0x831;
            deleteItem(5296, getItemSlot(5296), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 50) {
            sendMessage("You need atleast 50 farming to plant this!");
        }
    }

    public void iritSeed() {
        if (playerLevel[19] >= 60) {
            addSkillXP((700 * playerLevel[19]), 19);
            addItem(259, 1);
            playerStandIndex = 0x831;
            deleteItem(5297, getItemSlot(5297), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 60) {
            sendMessage("You need atleast 60 farming to plant this!");
        }
    }

    public void avantoeSeed() {
        if (playerLevel[19] >= 65) {
            addSkillXP((1500 * playerLevel[19]), 19);
            addItem(261, 1);
            playerStandIndex = 0x831;
            deleteItem(5298, getItemSlot(5298), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 65) {
            sendMessage("You need atleast 65 farming to plant this!");
        }
    }

    public void kwuarmSeed() {
        if (playerLevel[19] >= 75) {
            addSkillXP((2000 * playerLevel[19]), 19);
            addItem(263, 1);
            playerStandIndex = 0x831;
            deleteItem(5299, getItemSlot(5299), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 75) {
            sendMessage("You need atleast 75 farming to plant this!");
        }
    }

    public void snapdragonSeed() {
        if (playerLevel[19] >= 80) {
            addSkillXP((5550 * playerLevel[19]), 19);
            addItem(3000, 1);
            playerStandIndex = 0x831;
            deleteItem(5300, getItemSlot(5300), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 80) {
            sendMessage("You need atleast 80 farming to plant this!");
        }
    }

    public void cadantineSeed() {
        if (playerLevel[19] >= 90) {
            addSkillXP((9150 * playerLevel[19]), 19);
            addItem(265, 1);
            playerStandIndex = 0x831;
            deleteItem(5301, getItemSlot(5301), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 90) {
            sendMessage("You need atleast 90 farming to plant this!");
        }
    }

    public void lantadymeSeed() {
        if (playerLevel[19] >= 95) {
            addSkillXP((1225 * playerLevel[19]), 19);
            addItem(2481, 1);
            playerStandIndex = 0x831;
            deleteItem(5302, getItemSlot(5302), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 95) {
            sendMessage("You need atleast 95 farming to plant this!");
        }
    }

    public void dwarfSeed() {
        if (playerLevel[19] >= 96) {
            addSkillXP((1375 * playerLevel[19]), 19);
            addItem(267, 1);
            playerStandIndex = 0x831;
            deleteItem(5303, getItemSlot(5303), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 96) {
            sendMessage("You need atleast 96 farming to plant this!");
        }
    }

    public void torstolSeed() {
        if (playerLevel[19] >= 1) {
            addSkillXP((1700 * playerLevel[19]), 19);
            addItem(269, 1);
            playerStandIndex = 0x831;
            deleteItem(5304, getItemSlot(5304), 1);
            sendMessage("You put the seed on the patch and get an herb");
        } else if (playerLevel[19] < 1) {
            sendMessage("You need atleast 1 farming to plant this!");
        }
    }

    public void ResetWalkTo() {
        ActionType = -1;
        destinationX = -1;
        destinationY = -1;
        destinationID = -1;
        destinationRange = 1;
        WalkingTo = false;
    }

    public void wildyditch() {
        {
            if (absY <= 3520) {

                startAnimation(6132);
                walkTo2(0, 3);
            } else if (absY >= 3523) {
                startAnimation(6132);
                walkTo2(0, -3);
            }
        }
    }
    private final Mining mine = new Mining(this);
    public Mining getMining() {
        return mine;
    }

    public void objectClick(int objectID, int objectX, int objectY, int face, int face2, int GateID) {
        if(!Region.isWorldObject(objectID, objectX, objectY, heightLevel)){
            return;
        }
        if (debugMessages) {
            sM(
                    "atObject: " + objectX + "," + objectY + " objectID: "
                            + objectID);
        }
        // Farming.harvest(client, objectX, objectY);
        if (getAllotment().harvest(objectX, objectY))
            return;
        Tree tree = Tree.forObject(objectID);
        if (tree != null) {
            Woodcutting.getInstance().chop(this, objectID, objectX, objectY);
            return;
        }
        getMining().mine(objectID, new Location3D(objectX, objectY, heightLevel));
        face(objectX, objectY);
        SingleGates.useSingleGate(this, objectID);
        DoubleGates.useDoubleGate(this, objectID);
        switch (objectID) {
            case 1408:
                PickableObjects.pickupPineapple(this, objectID, objectX, objectY);
                break;
            case 1413:
                sendMessage("nothing left on the pineapple plant.");
                break;
                case 36878:// full flour bin
                FlourMill.emptyFlourBin(this);
                break;
            case 36881:
                FlourMill.grainOnHopper(this, objectID, 1947);
                break;
            case 2718: // Hopper
                FlourMill.hopperControl(this);
                break;
            case 37335:
                if(getX() == 3210 && getY() == 3217 && heightLevel == 3) {
                    face(3210, 3218);
                    startAnimation(9977);
                    objectAnim(3210, 3218, 9979, 10, 2);
                }
                break;
            case 36771:
                if(getX() == 3207 && getY() == 3224 && heightLevel == 2){
                    movePlayer(3207, 3222, 3);
                }
                break;
            case 36772:
                if(getX() == 3207 && getY() == 3222 && heightLevel == 3){
                    movePlayer(3207, 3224, 2);
                }
                break;
            case 36774:
            case 36777:
                start(new LadderAndStairDialogue());
                break;
            case 36773:
            case 36776:
                if(getX() == 3206 && getY() == 3208 && heightLevel == 0) {
                    movePlayer(getX(), getY(), 1);
                }else if(getX() == 3205 && getY() == 3209 && heightLevel == 0) {
                    movePlayer(getX(), getY(), 1);
                } else if(getX() == 3206 && getY() == 3209 && heightLevel == 0) {
                    movePlayer(getX(), getY(), 1);
                } else if(getX() == 3205 && getY() == 3228 && heightLevel == 0) {
                    movePlayer(getX(), getY(), 1);
                } else if(getX() == 3206 && getY() == 3229 && heightLevel == 0) {
                    movePlayer(getX(), getY(), 1);
                } else if(getX() == 3206 && getY() == 3228 && heightLevel == 0) {
                    movePlayer(getX(), getY(), 1);
                }
                break;
            case 36775:
            case 36778:
                if(heightLevel == 2) {
                    movePlayer(getX(), getY(), 1);
                }
                break;
            case 11736:

                if(getX() == 2971 && getY() == 3369){
                    movePlayer(2971,3373, 1);
                } else if(getX() == 2972 && getY() == 3369){
                    movePlayer(2972,3373, 1);
                }
                break;
            case 11737:
                if(getX() == 2971 && getY() == 3373){
                    movePlayer(2971,3369, 0);
                } else if(getX() == 2972 && getY() == 3373){
                    movePlayer(2972,3369, 0);
                }
                break;
            case 16152:
                if(!playerHasItem(9004)) {
                    addItem(9004, 1);
                    start(new DeadExplorerDialogue());
                } else {
                    sendMessage("You don't find anything.");
                }
                break;
            case 9472:
                if(objectX == 3008 && objectY == 3150){
                    Ladders.climbLadder(this, getX(), getY()+6400, 0);
                }
                break;
            case 32015:
                if(objectX == 3008 && objectY == 9550){
                    Ladders.climbLadder(this, getX(), getY()-6400, 0);
                }
                break;
            case 16154:
                if (getX() == 3081 && getY() == 3421)
                    movePlayer(1859, 5243, 0);
                break;
            case 16148:
                if (objectX == 1859 && objectY == 5244) {
                    Ladders.climbLadder(this, 3081, 3421, 0);
                } else if(objectX == 1913 && objectY == 5226){
                    Ladders.climbLadder(this, 1859, 5243, 0);
                }
                break;
            case 16123:
            case 16124:
                for(int i = 0; i < Config.FirstFloorSos.length; i++) {
                    if(this.absX == Config.FirstFloorSos[i][0] && this.absY == Config.FirstFloorSos[i][1]) {
                        this.startAnimation(4282);
                        this.walkTo2(-1, 0);
                        return;
                    }
                }
                if (this.absX == 1890 && this.absY == 5208 || this.absX == 1889 && this.absY == 5208
                        || this.absX == 1876 && this.absY == 5195 || this.absX == 1877 && this.absY == 5195
                        || this.absX == 1876 && this.absY == 5192 || this.absX == 1877 && this.absY == 5192
                        || this.absX == 1879 && this.absY == 5223 || this.absX == 1878 && this.absY == 5223
                        || this.absX == 1879 && this.absY == 5226 || this.absX == 1878 && this.absY == 5226) {
                    this.startAnimation(4282);
                    this.walkTo2(0, -1);
                    return;
                }
                if (this.absX == 1861 && this.absY == 5212 || this.absX == 1860 && this.absY == 5212
                        || this.absX == 1861 && this.absY == 5209 || this.absX == 1860 && this.absY == 5209
                        || this.absX == 1861 && this.absY == 5198 || this.absX == 1860 && this.absY == 5198
                        || this.absX == 1861 && this.absY == 5195 || this.absX == 1860 && this.absY == 5195
                        || this.absX == 1875 && this.absY == 5204 || this.absX == 1874 && this.absY == 5204
                        || this.absX == 1875 && this.absY == 5207 || this.absX == 1874 && this.absY == 5204
                        || this.absX == 1890 && this.absY == 5211 || this.absX == 1889 && this.absY == 5211
                        || this.absX == 1859 && this.absY == 5234 || this.absX == 1858 && this.absY == 5234
                        || this.absX == 1859 && this.absY == 5235 || this.absX == 1858 && this.absY == 5235
                        || this.absX == 1858 && this.absY == 5237 || this.absX == 1859 && this.absY == 5237
                        || this.absX == 1858 && this.absY == 5238 || this.absX == 1859 && this.absY == 5238
                        || this.absX == 1912 && this.absY == 5206 || this.absX == 1911 && this.absY == 5206
                        || this.absX == 1911 && this.absY == 5209 || this.absX == 1912 && this.absY == 5209
                        || this.absX == 1905 && this.absY == 5230 || this.absX == 1904 && this.absY == 5230
                        || this.absX == 1904 && this.absY == 5233|| this.absX == 1905 && this.absY == 5233) {
                    this.startAnimation(4282);
                    this.walkTo2(0, 1);
                    return;
                }
                if(this.absX == objectX && this.absY == objectY)
                    this.startAnimation(4282);
                this.walkTo2(0, +1);
                if(this.absY == objectY && this.absX < objectX)
                    this.startAnimation(4282);
                this.walkTo2(+1, 0);
                if(this.absY > objectY && this.absX == objectX)
                    this.walkTo2(0, -1);
                if(this.absY < objectY && this.absX == objectX)
                    this.walkTo2(0, 1);
                break;
            case 16149:
                if(hasfirstfloorDone == false){
                    sendStatement("You need to claim the reward before going down.");
                    nextDialogue(1001);
                } else {
                    Ladders.climbLadder(this, 2042, 5245, 0);
                    sendMessage("You climb down the ladder to the next level.");
                }
                break;
            case 16115:
                if(objectX == 2148 && objectY == 5284) {
                    if (hasthirdfloorDone == false) {
                        sendStatement("You need to claim the reward before going down.");
                        nextDialogue(1001);
                    } else {
                        Ladders.climbLadder(this, 2358, 5215, 0);
                        sendMessage("You climb down the ladder to the next level.");
                    }
                }
                break;
            case 16080:
                if(objectX == 2042 && objectY == 5246) {
                    Ladders.climbLadder(this, 1903, 5222, 0);
                }
                break;
            case 16150:
                if(hasfirstfloorDone){
                    movePlayer(1907, 5226, 0);
                    sendMessage("You enter the portal to be whisked through to the treasure room.");
                } else {
                    sendMessage("You need to complete the first floor to use this portal.");
                }
                break;
            case 16135:
                if(!hasfirstfloorDone){
                    addItem(995, 20000);
                    hasfirstfloorDone = true;
                    playerLevel[5] = getLevelForXP(playerXP[5]);
                    refreshSkill(5);
                    sendMessage("The gift of peace heals your hp.");
                } else {
                    playerLevel[5] = getLevelForXP(playerXP[5]);
                    refreshSkill(5);
                    sendMessage("The gift of peace heals your hp.");
                }
                break;
            case 16065:
            case 16066:
                for (int i = 0; i < Config.SecondFloorSos.length; i++) {
                    if (this.absX == Config.SecondFloorSos[i][0] && this.absY == Config.SecondFloorSos[i][1]) {
                        this.startAnimation(4282);
                        this.walkTo2(-1, 0);
                        return;
                    }
                }
                if (this.absX == 2005 && this.absY == 5235 || this.absX == 2006 && this.absY == 5235
                        || this.absX == 2006 && this.absY == 5238 || this.absX == 2005 && this.absY == 5238
                        || this.absX == 2044 && this.absY == 5239 || this.absX == 2045 && this.absY == 5239
                        || this.absX == 2045 && this.absY == 5237 || this.absX == 2044 && this.absY == 5237
                        || this.absX == 2033 && this.absY == 5203 || this.absX == 2034 && this.absY == 5203
                        || this.absX == 2031 && this.absY == 5198 || this.absX == 2032 && this.absY == 5198
                        || this.absX == 2031 && this.absY == 5196 || this.absX == 2032 && this.absY == 5196
                        || this.absX == 2046 && this.absY == 5198 || this.absX == 2045 && this.absY == 5198
                        || this.absX == 2045 && this.absY == 5195 || this.absX == 2046 && this.absY == 5195
                        || this.absX == 2036 && this.absY == 5201 || this.absX == 2037 && this.absY == 5201
                        || this.absX == 2031 && this.absY == 5225 || this.absX == 2032 && this.absY == 5225
                        || this.absX == 2034 && this.absY == 5208 || this.absX == 2033 && this.absY == 5208
                        || this.absX == 1995 && this.absY == 5194 || this.absX == 1994 && this.absY == 5194
                        || this.absX == 2027 && this.absY == 5239 || this.absX == 2026 && this.absY == 5239
                        || this.absX == 2020 && this.absY == 5240 || this.absX == 2019 && this.absY == 5240
                        || this.absX == 2014 && this.absY == 5240 || this.absX == 2013 && this.absY == 5240
                        || this.absX == 2020 && this.absY == 5200 || this.absX == 2021 && this.absY == 5200
                        || this.absX == 2005 && this.absY == 5192 || this.absX == 2004 && this.absY == 5192) {
                    this.startAnimation(4282);
                    this.walkTo2(0, -1);
                    return;
                }
                if (this.absX == 2036 && this.absY == 5186 || this.absX == 2036 && this.absY == 5185
                        || this.absX == 2042 && this.absY == 5222 || this.absX == 2042 && this.absY == 5223
                        || this.absX == 2018 && this.absY == 5227 || this.absX == 2018 && this.absY == 5228
                        || this.absX == 2008 && this.absY == 5216 || this.absX == 2008 && this.absY == 5215) {
                    this.startAnimation(4282);
                    this.walkTo2(+1, 0);
                    //	this.sendMessage("test +1 0");
                    return;
                }
                if (this.absX == 2032 && this.absY == 5227 || this.absX == 2031 && this.absY == 5227
                        || this.absX == 2033 && this.absY == 5210 || this.absX == 2034 && this.absY == 5210) {
                    this.startAnimation(4282);
                    this.walkTo2(0, 1);
                    return;
                }
                if (this.absX == objectX && this.absY == objectY) {
                    this.startAnimation(4282);
                    this.walkTo2(0, 1);
                    //this.sendMessage("test 0 1");
                    return;
                }
                if (this.absY == objectY && this.absX < objectX) {
                    this.startAnimation(4282);
                    this.walkTo2(+1, 0);
                    //this.sendMessage("test +1 0 v2");
                    return;
                }
                if (this.absY > objectY && this.absX == objectX) {
                    this.walkTo2(0, -1);
                    //this.sendMessage("test 0 -1");
                    return;
                }
                if (this.absY < objectY && this.absX == objectX) {
                    this.walkTo2(0, 1);
                    //this.sendMessage("test 0 1 v2");
                    return;
                }
                break;
            case 16082:
                if(hassecoundfloorDone){
                    movePlayer(2025, 5214, 0);
                    sendMessage("You enter the portal to be whisked through to the treasure room.");
                } else {
                    sendMessage("You need to complete the second floor to use this portal.");
                }
                break;
            case 16078:
                if(objectX == 2017 && objectY == 5210){
                    Ladders.climbLadder(this, 2042, 5245, 0);
                }
                break;
            case 16077:
                if(!hassecoundfloorDone){
                    addItem(995, 550000);
                    sendMessage("The grain of plenty gives you 550k.");
                    hassecoundfloorDone = true;
                } else {
                    sendMessage("You allready claimed this reward.");
                }
                break;
            case 16081:
                if(hassecoundfloorDone == false){
                    sendStatement("You need to claim the reward before going down.");
                    nextDialogue(1001);
                } else {
                    Ladders.climbLadder(this, 2123, 5252, 0);
                    sendMessage("You climb down the ladder to the next level.");
                }
                break;
            case 16089:
            case 16090:
                for (int i = 0; i < Config.thirdFloorSos.length; i++) {
                    if (this.absX == Config.thirdFloorSos[i][0] && this.absY == Config.thirdFloorSos[i][1]) {
                        this.startAnimation(4282);
                        this.walkTo2(-1, 0);//going west
                        return;
                    }
                }//going south
                if (this.absX == 2133 && this.absY == 5257 || this.absX == 2132 && this.absY == 5257
                        || this.absX == 2132 && this.absY == 5260 || this.absX == 2133 && this.absY == 5260
                        || this.absX == 2164 && this.absY == 5278 || this.absX == 2163 && this.absY == 5278
                        || this.absX == 2164 && this.absY == 5275 || this.absX == 2163 && this.absY == 5275
                        || this.absX == 2166 && this.absY == 5262 || this.absX == 2167 && this.absY == 5262
                        || this.absX == 2168 && this.absY == 5297 || this.absX == 2167 && this.absY == 5297
                        || this.absX == 2162 && this.absY == 5290 || this.absX == 2163 && this.absY == 5290
                        || this.absX == 2162 && this.absY == 5287 || this.absX == 2163 && this.absY == 5287
                        || this.absX == 2156 && this.absY == 5286 || this.absX == 2155 && this.absY == 5286
                        || this.absX == 2156 && this.absY == 5289 || this.absX == 2155 && this.absY == 5289
                        || this.absX == 2167 && this.absY == 5294 || this.absX == 2168 && this.absY == 5294
                        || this.absX == 2130 && this.absY == 5296 || this.absX == 2131 && this.absY == 5296
                        || this.absX == 2130 && this.absY == 5293 || this.absX == 2131 && this.absY == 5293
                        || this.absX == 2148 && this.absY == 5302 || this.absX == 2149 && this.absY == 5302
                        || this.absX == 2148 && this.absY == 5299 || this.absX == 2149 && this.absY == 5299) {
                    this.startAnimation(4282);
                    this.walkTo2(0, -1);
                    //	this.sendMessage("test +1 0");
                    return;
                } //going east
                if (this.absX == 2137 && this.absY == 5263 || this.absX == 2137 && this.absY == 5262
                        || this.absX == 2140 && this.absY == 5263 || this.absX == 2140 && this.absY == 5262
                        || this.absX == 2156 && this.absY == 5264 || this.absX == 2156 && this.absY == 5263
                        || this.absX == 2153 && this.absY == 5264 || this.absX == 2153 && this.absY == 5263
                        || this.absX == 2170 && this.absY == 5271 || this.absX == 2170 && this.absY == 5272
                        || this.absX == 2167 && this.absY == 5271 || this.absX == 2167 && this.absY == 5272
                        || this.absX == 2148 && this.absY == 5292 || this.absX == 2147 && this.absY == 5291
                        || this.absX == 2152 && this.absY == 5292 || this.absX == 2152 && this.absY == 5291) {
                    this.startAnimation(4282);
                    this.walkTo2(1, 0);
                    //	this.sendMessage("test +1 0");
                    return;
                }
                if (this.absX == objectX && this.absY == objectY) {//going north
                    this.startAnimation(4282);
                    this.walkTo2(0, 1);
                    //this.sendMessage("test 0 1");
                    return;
                }
                if (this.absY == objectY && this.absX < objectX) {
                    this.startAnimation(4282);
                    this.walkTo2(+1, 0);
                    //this.sendMessage("test +1 0 v2");
                    return;
                }
                if (this.absY > objectY && this.absX == objectX) {
                    this.walkTo2(0, -1);
                    //this.sendMessage("test 0 -1");
                    return;
                }
                if (this.absY < objectY && this.absX == objectX) {
                    this.walkTo2(0, 1);
                    //this.sendMessage("test 0 1 v2");
                    return;
                }
                break;
            case 16116:
                if(hasthirdfloorDone){
                    movePlayer(2140, 5282, 0);
                } else {
                    sendMessage("You need to complete the third floor to use this portal.");
                }
                break;
            case 16118:
                if(objectX == 2144 && objectY == 5280) {
                    if (!hasthirdfloorDone) {
                        addItem(995, 675000);
                        hasthirdfloorDone = true;
                        sendMessage("The box of health gives u 675k for getting here.");
                    } else {
                        sendMessage("You have allready claimed this reward.");
                    }
                }
                break;
            case 16112:
                if(objectX == 2150 && objectY == 5278){
                    Ladders.climbLadder(this, 2123, 5252, 0);
                }
                break;
            case 16114:
                if(objectX == 2123 && objectY == 5251){
                    Ladders.climbLadder(this, 2026, 5217, 0);
                }
                break;
            case 6552:
                if (ancients == 0) {
                    emotes = 2;
                    updateRequired = true;
                    setSidebarInterface(6, 12855);
                    ancients = 1;
                    sendMessage("A strange Knowlenge enters your mind...");
                } else if (ancients == 1) {
                    emotes = 0;
                    updateRequired = true;
                    setSidebarInterface(6, 1151);
                    ancients = 0;
                    sendMessage("You seem to forgot the magic of Ancients...");
                }
                break;
            case 15644:
            case 15641:
            case 24306:
            case 24309:
                if (heightLevel == 2) {
                    // if(Boundary.isIn(c, WarriorsGuild.WAITING_ROOM_BOUNDARY) &&
                    // c.heightLevel == 2) {
                    getWarriorsGuild().handleDoor();
                    return;
                    // }
                }
                if (heightLevel == 0) {
                    if (absX == 2855 || absX == 2854) {
                        if (absY == 3546)
                            movePlayer(absX, absY - 1, 0);
                        else if (absY == 3545)
                            movePlayer(absX, absY + 1, 0);
                        face(objectX, objectY);
                    }
                }
                break;
            case 15638:
                if(objectX == 2840 && objectY == 3538 && heightLevel == 2){
                    teleportToX = absX;
                    teleportToY = absY;
                    heightLevel -= 1;
                }
                break;
            case 1738:
                if(getX() == 2841 && getY() == 3538 && heightLevel == 0){
                    teleportToX = absX;
                    teleportToY = absY;
                    heightLevel += 1;
                }
                break;
            case 2623:
                if(getX() == 2924 && getY() == 9803){
                    movePlayer(2923, 9803, 0);
                } else if(getX() == 2923 && getY() == 9803){
                    movePlayer(2924, 9803, 0);
                }
                break;
            case 26426:
                if(getX() == 2839 && getY() == 5295 && heightLevel == 2){
                    movePlayer(2839, 5296, 2);
                } else if(getX() == 2839 && getY() == 5296 && heightLevel == 2){
                    movePlayer(2839, 5295, 2);
                }
                break;
            case 96:
            case 98:
            case 1722:
            case 1723:
            case 1733:
            case 1734:
            case 1736:
            case 1737:
            case 1742:
            case 1744:
            case 1755:
            case 2405:
            case 2711:
            case 3432:
            case 3443:
            case 4383:
            case 4755:
            case 4756:
            case 4879:
            case 5492:
            case 5096:
            case 6278:
            case 11724:
            case 11725:
            case 11727:
            case 11728:
            case 11729:
            case 11731:
            case 11732:
            case 11733:
            case 11734:
            case 11735:
            case 12265:
            case 2147:
            case 2148:
            case 2408:
            case 6279:
            case 7257:
            case 6439:
            case 11888:
            case 11889:
            case 11890:
            case 4568:
            case 4569:
            case 4570:
            case 4413:
            case 9582:
            case 9584:
            case 5131:
            case 5130:
            case 1725:
            case 1726:
            case 6434:
            case 6436:
            case 5167:
            case 12266:
            case 272:
            case 273:
            case 245:
            case 246:
            case 1767:
            case 34548:
            case 24073:
            case 24350:
                Climbing.handleClimbing(this, objectID, objectX, objectY);
                break;

            case 23271:
                wildyditch();
                break;

            //Borks portal
            case 29537:
                if (objectX == 3115 && objectY == 5528) {
                    movePlayer(3142, 5545, 0);
                }
                break;
            //Chaos tunnel entrances
            case 28891:
                if (underAttackBy < 0 || underAttackBy2 < 0) {
                    sendMessage("You cannot enter the rift whilst your under attack.");
                } else {
                    movePlayer(3183, 5470, 0);
                }
                break;
            case 28892:
                if (objectX == 3165 && objectY == 3561) {
                    if (underAttackBy < 0 || underAttackBy2 < 0) {
                        sendMessage("You cannot enter the rift whilst your under attack.");
                    } else {
                        movePlayer(3292, 5479, 0);
                    }
                } else if (objectX == 3165 && objectY == 3618) {
                    if (underAttackBy < 0 || underAttackBy2 < 0) {
                        sendMessage("You cannot enter the rift whilst your under attack.");
                    } else {
                        movePlayer(3291, 5538, 0);
                    }
                }
                break;
            case 28893:
                if (objectX == 3119 && objectY == 3571) {
                    if (underAttackBy < 0 || underAttackBy2 < 0) {
                        sendMessage("You cannot enter the rift whilst your under attack.");
                    } else {
                        movePlayer(3248, 5490, 0);
                    }
                } else if (objectX == 3107 && objectY == 3639) {
                    if (underAttackBy < 0 || underAttackBy2 < 0) {
                        sendMessage("You cannot enter the rift whilst your under attack.");
                    } else {
                        movePlayer(3234, 5559, 0);
                    }
                }
                break;
            case 28782:
                if (objectX == 3183 && objectY == 5470) {
                    movePlayer(3059, 3549, 0);
                } else if (objectX == 3248 && objectY == 5490) {
                    movePlayer(3120, 3571, 0);
                } else if (objectX == 3292 && objectY == 5479) {
                    movePlayer(3166, 3561, 0);
                } else if (objectX == 3291 && objectY == 5538) {
                    movePlayer(3166, 3618, 0);
                } else if (objectX == 3234 && objectY == 5559) {
                    movePlayer(3107, 3640, 0);
                }
                break;
            //ancient cavern
            case 25338:
                if (objectX == 1769 && objectY == 5365) {
                    heightLevel = 0;
                    teleportToX = 1772;
                    teleportToY = 5366;
                }
                break;

            case 7:
            case 8:
            case 9:
                getCannon().pickUpCannon();
                break;

            case 6:
                getCannon().shootCannon();
                break;

            case 25336:
                if (objectX == 1770 && objectY == 5365) {
                    heightLevel = 1;
                    teleportToX = 1768;
                    teleportToY = 5366;
                }
                break;

            case 25339:
                if (objectX == 1778 && objectY == 5344) {
                    heightLevel = 1;
                    teleportToX = 1778;
                    teleportToY = 5343;
                }
                break;

            case 25340:
                if (objectX == 1778 && objectY == 5344) {
                    heightLevel = 0;
                    teleportToX = 1778;
                    teleportToY = 5346;
                }
                break;


            // QUEST_1 OBJECTS
            case 4499:
                if (objectX == 2797 && objectY == 3614) {
                    sendMessage("You crawl through the cave");
                    teleportToX = 2772;
                    teleportToY = 10231;
                }
                break;

            case 2646:
                if (GoodDistance2(absX, absY, objectX, objectY, 2)) {
                    PickableObjects.pickupFlax(this, objectID, objectX, objectY);
                }
                break;

            case 9356:
                if (objectX == 2437 && objectY == 5166) {
                    sendMessage("You crawl through the TzHaar Fight Cave.");
                    server.npcHandler.newNPC(2627, 2392, 5099, heightLevel,
                            absX + 3, absY + 3, absX + -3, absY + -3, 1, server.npcHandler.GetNpcListHP(2627), false);
                    teleportToX = 2412;
                    teleportToY = 5117;
                }
                break;

            case 9357:
                if (objectX == 2412 && objectY == 5118) {
                    sendMessage("You exit the cave.");
                    teleportToX = 2438;
                    teleportToY = 5169;
                }
                break;
            case 2932:
                if (objectX == 2863 && objectY == 9881) {
                    sendMessage("You smash the barrel and climb into pk area click pk to get back on emote tab");
                    teleportToX = 2863;
                    teleportToY = 9880;
                }
                break;

            case 5025:
                if (objectX == 2772 && objectY == 10233) {
                    sendMessage("You crawl through the cravass");
                    teleportToX = 2795;
                    teleportToY = 3614;
                }
                break;


            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
                if (actionTimer >= 1) {

                } else if (actionTimer <= 0) {
                    makeGlobalObject(objectX, objectY, 6951, 0, 10);
                    setAnimation(794);
                    ItemHandler.addItem(Item2.randomPartyroom(), objectX, objectY, 1, playerId, false);
                    sendMessage("You Stamp on the balloon!");
                    actionTimer = 3;
                }
                break;


            case 26194: //party lever
                if (GoodDistance2(absX, absY, objectX, objectY, 3)) {
                    if (playerName.equalsIgnoreCase("sgsrocks")) {
                        if (actionTimer == 0)
                            makeGlobalObject(3053, 3382, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3053, 3381, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3053, 3380, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3053, 3379, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3053, 3378, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3053, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3053, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3053, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3053, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3053, 3373, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3052, 3382, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3052, 3381, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3052, 3380, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3052, 3379, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3052, 3378, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3052, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3052, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3052, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3052, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3052, 3373, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3050, 3382, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3050, 3381, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3050, 3380, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3050, 3379, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3050, 3378, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3050, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3050, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3050, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3050, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3050, 3373, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3049, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3048, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3047, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3046, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3045, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3044, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3043, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3042, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3041, 3377, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3049, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3048, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3047, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3046, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3045, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3044, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3043, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3042, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3041, 3376, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3049, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3048, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3047, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3046, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3045, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3044, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3043, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3042, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3041, 3375, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3049, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3048, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3047, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3046, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3045, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3044, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3043, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3042, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3041, 3374, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3049, 3373, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3048, 3373, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3047, 3373, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3046, 3373, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3045, 3373, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3044, 3373, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3043, 3373, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3042, 3373, Item2.randomballoon(), 1, 10);
                        makeGlobalObject(3041, 3373, Item2.randomballoon(), 1, 10);


                        sendMessage("You pull the party lever!!!");
                        actionTimer = 15;
                        setAnimation(776);
                        addSkillXP((playerLevel[2]), 2);
                        stillgfx(639, absY, absX);
                        updateRequired = true;
                        appearanceUpdateRequired = true;
                    }
                }


                break;


            case 10817: //party lever
                if (GoodDistance2(absX, absY, objectX, objectY, 3)) {
                    if (rights.inherits(Rights.OWNER)) {
                        if (actionTimer == 0)
                            ItemHandler.addItem(1038, 2092, 4422, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4423, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4424, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4425, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4426, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4427, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4428, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4429, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4430, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4431, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4432, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4433, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4434, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1038, 2092, 4435, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4422, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4423, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4424, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4425, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4426, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4427, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4428, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4429, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4430, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4431, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4432, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4433, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4434, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1040, 2093, 4435, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4422, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4423, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4424, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4425, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4426, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4427, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4428, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4429, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4430, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4431, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4432, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4433, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4434, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1042, 2094, 4435, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4422, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4423, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4424, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4425, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4426, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4427, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4428, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4429, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4430, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4431, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4432, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4433, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4434, playerItemsN[1], playerId, false);
                        ItemHandler.addItem(1044, 2095, 4435, playerItemsN[1], playerId, false);
                        sendMessage("You pull the party lever!!!");
                        actionTimer = 5;
                        setAnimation(776);
                        addSkillXP((playerLevel[2]), 2);
                        stillgfx(639, absY, absX);
                        updateRequired = true;
                        appearanceUpdateRequired = true;
                        actionTimer = 20;
                    }
                }


                break;


            // END OF QUEST_1 OBJECTS

            // QUEST_3 OBJECTS
            case 1600:
                if (objectY == 3087) {
                    if (playerEquipment[playerCape] == 6070) {
                        sendMessage("You sneak into the mage guild...");
                        ReplaceObject(objectX, objectY, (objectID - 1), -2);
                    } else {
                        sendMessage("Piss off! You ain't aloud in here!");
                    }
                }

            case 1601:
                if (objectY == 3088) {
                    if (playerEquipment[playerCape] == 6070) {
                        sendMessage("You sneak into the mage guild...");
                        ReplaceObject(objectX, objectY, (objectID - 1), -2);
                    } else {
                        sendMessage("Piss off! You ain't aloud in here!");
                    }
                }

                // END OF QUEST_3 OBJECTS

            case 11993:
            case 1537:
            case 2427:
            case 2429:
                if ((objectX == 3231 && objectY == 3433)
                        || (objectX == 3253 && objectY == 3431)
                        || (objectX == 2719 && objectY == 9671)
                        || (objectX == 2722 && objectY == 9671)
                        || (objectX == 3109 && objectY == 3167)
                        || (objectX == 3107 && objectY == 3162)) {
                    face = -3; // South
                } else if ((objectX == 3234 && objectY == 3426)
                        || (objectX == 3225 && objectY == 3293)
                        || (objectX == 3230 && objectY == 3291)
                        || (objectX == 3235 && objectY == 3406)
                        || (objectX == 3276 && objectY == 3421)
                        || (objectX == 3207 && objectY == 3210)) {
                    face = -2; // East
                } else if ((objectX == 3233 && objectY == 3427)
                        || (objectX == 3215 && objectY == 3225)
                        || (objectX == 3207 && objectY == 3217)
                        || (objectX == 3208 && objectY == 3211)) {
                    face = -1; // North
                }// else = West (standard)
                ReplaceObject(objectX, objectY, (objectID - 1), face);

                break;

            case 1536:
                if ((objectX == 3235 && objectY == 3426)
                        || (objectX == 3233 && objectY == 3438)
                        || (objectX == 3207 && objectY == 3210)) {
                    face = -3; // South
                } else if ((objectX == 3231 && objectY == 3433)
                        || (objectX == 2611) && objectY == 3324) {
                    face = -2; // East
                } else if ((objectX == 3234 && objectY == 3426)
                        || (objectX == 3225 && objectY == 3293)
                        || (objectX == 3230 && objectY == 3291)
                        || (objectX == 3241 && objectY == 3406)
                        || (objectX == 3235 && objectY == 3406)
                        || (objectX == 3276 && objectY == 3421)
                        || (objectX == 3248 && objectY == 3396)
                        || (objectX == 3260 && objectY == 3400)) {
                    face = -1; // North
                }// else = West (standard)
                ReplaceObject(objectX, objectY, (objectID + 1), face);

                break;

            case 1553:
            case 1551:
            case 1552:
            case 1556:
                if ((objectX == 3253 && objectY == 3266)
                        || (objectX == 3253 && objectY == 3267)
                        || (objectX == 3241 && objectY == 3301)
                        || (objectX == 3241 && objectY == 3302)) {
                    face = -3; // South
                    GateID = 1;
                } else if ((objectX == 3236 && objectY == 3284)
                        || (objectX == 3236 && objectY == 3285)
                        || (objectX == 3236 && objectY == 3295)
                        || (objectX == 3236 && objectY == 3296)) {
                    face = -3; // South
                    GateID = 2;
                } else if ((objectX == 3312 && objectY == 3234)
                        || (objectX == 3237 && objectY == 3284)
                        || (objectX == 3238 && objectY == 3284)
                        || (objectX == 3237 && objectY == 3295)
                        || (objectX == 3238 && objectY == 3295)) {
                    face = -2; // East
                    GateID = 2;
                }// else = West (standard)
                if (GateID == 1) {
                    if (objectID == 1553) {
                        // Place the new gate
                        ReplaceObject((objectX - 1), (objectY - 1), 1552, face);
                        ReplaceObject((objectX - 2), (objectY - 1), 1556, face);
                        // Remove the original gate
                        ReplaceObject(objectX, (objectY - 1), -1, -1);
                    } else if (objectID == 1551) {
                        // Place the new gate
                        ReplaceObject((objectX - 1), objectY, 1552, face);
                        ReplaceObject((objectX - 2), objectY, 1556, face);
                        // Remove the original gate
                        ReplaceObject(objectX, (objectY + 1), -1, -1);
                    } else if (objectID == 1552) {
                        // Place the new gate
                        ReplaceObject((objectX + 1), objectY, 1551, face);
                        ReplaceObject((objectX + 1), (objectY + 1), 1553, face);
                        // Remove the original gate
                        ReplaceObject((objectX - 1), objectY, -1, -1);
                    } else if (objectID == 1556) {
                        // Place the new gate
                        ReplaceObject((objectX + 2), objectY, 1551, face);
                        ReplaceObject((objectX + 2), (objectY + 1), 1553, face);
                        // Remove the original gate
                        ReplaceObject((objectX + 1), objectY, -1, -1);
                    }
                } else if (GateID == 2) {
                    if (objectID == 1553) {
                        // Place the new gate
                        ReplaceObject((objectX + 2), objectY, 1552, face);
                        ReplaceObject((objectX + 1), objectY, 1556, face);
                        // Remove the original gate
                        ReplaceObject(objectX, (objectY + 1), -1, -1);
                    } else if (objectID == 1551) {
                        // Place the new gate
                        ReplaceObject((objectX + 2), (objectY - 1), 1552, face);
                        ReplaceObject((objectX + 1), (objectY - 1), 1556, face);
                        // Remove the original gate
                        ReplaceObject(objectX, (objectY - 1), -1, -1);
                    } else if (objectID == 1552) {
                        // Place the new gate
                        ReplaceObject((objectX - 2), (objectY + 1), 1551, face);
                        ReplaceObject((objectX - 2), objectY, 1553, face);
                        // Remove the original gate
                        ReplaceObject((objectX - 1), objectY, -1, -1);
                    } else if (objectID == 1556) {
                        // Place the new gate
                        ReplaceObject((objectX - 1), (objectY + 1), 1551, face);
                        ReplaceObject((objectX - 1), objectY, 1553, face);
                        // Remove the original gate
                        ReplaceObject((objectX + 1), objectY, -1, -1);
                    }
                }
                ReplaceObject(objectX, objectY, -1, -1);
                break;

            case 1516:
            case 1517:
            case 1519:
            case 1520:

                if ((objectX == 3217 && objectY == 3218)
                        || (objectX == 3217 && objectY == 3219)
                        || (objectX == 3213 && objectY == 3222)
                        || (objectX == 3213 && objectY == 3221)) {
                    face = -3; // South
                    face2 = -1; // North
                }// else = West (standard)
                if (objectID == 1516) {
                    // Place the new gate
                    ReplaceObject((objectX - 1), objectY, (objectID + 1), face);
                    ReplaceObject((objectX - 1), (objectY + 1), (objectID + 4),
                            face2);
                    // Remove the original gate
                    ReplaceObject(objectX, (objectY + 1), -1, -1);
                    ReplaceObject(objectX, objectY, -1, -1);
                } else if (objectID == 1519) {
                    // Place the new gate
                    ReplaceObject((objectX - 1), (objectY - 1), (objectID - 2), face);
                    ReplaceObject((objectX - 1), objectY, (objectID + 1), face2);
                    // Remove the original gate
                    ReplaceObject(objectX, objectY, -1, -1);
                    ReplaceObject(objectX, (objectY - 1), -1, -1);
                } else if (objectID == 1517) {
                    // Place the new gate
                    ReplaceObject((objectX + 1), (objectY + 1), (objectID + 2), face);
                    ReplaceObject((objectX + 1), objectY, (objectID - 1), face);
                    // Remove the original gate
                    ReplaceObject(objectX, (objectY + 1), -1, -1);
                    ReplaceObject(objectX, objectY, -1, -1);
                } else if (objectID == 1520) {
                    // Place the new gate
                    ReplaceObject((objectX + 1), objectY, (objectID - 1), face);
                    ReplaceObject((objectX + 1), (objectY - 1), (objectID - 4), face);
                    // Remove the original gate
                    ReplaceObject(objectX, objectY, -1, -1);
                    ReplaceObject(objectX, (objectY - 1), -1, -1);
                }
                break;

            case ObjectIDs.BANK_BOOTH:
            case ObjectIDs.BANK_BOOTH_2:
            case ObjectIDs.BANK_BOOTH_3:
            case ObjectIDs.BANK_BOOTH_4:
            case ObjectIDs.BANK_BOOTH_5:
            case ObjectIDs.BANK_BOOTH_6:
            case ObjectIDs.BANK_BOOTH_7:
            case ObjectIDs.BANK_BOOTH_8:
            case ObjectIDs.BANK_BOOTH_9:
            case ObjectIDs.BANK_BOOTH_10:
                talkingNpc = 494;
                start(new BankerDialogue());
                break;

            case 4128:
                sendMessage("You Get Strangely Teleported");
                teleportToX = 3079;
                teleportToY = 3492;
                setAnimation(862);
                break;


            // Search banana tree
            case 2073:
            case 2074:
            case 2075:
            case 2076:
            case 2077:
            case 2078:
                addItem(1963, 1);
                sendMessage("You pick a banana.");
                break;

            // go upstairs

            case -1:
                if (!IsUsingSkill) {
                    if (objectID == 1747 || objectID == 1750) {
                        stairs = 1;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 1738) {
                        stairs = 1;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 2;
                    } else if (objectID == 1722) {
                        stairs = 21;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 2;
                        stairDistanceAdd = 2;
                    } else if (objectID == 1734) {
                        stairs = 10;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 3;
                        stairDistanceAdd = 1;
                    } else if (objectID == 55) {
                        stairs = 15;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 3;
                        stairDistanceAdd = 1;
                    } else if (objectID == 57) {
                        stairs = 15;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 3;
                    } else if (objectID == 1755 || objectID == 5946
                            || objectID == 1757) {
                        stairs = 4;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 1764) {
                        stairs = 12;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 2148) {
                        stairs = 8;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 3608) {
                        stairs = 13;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 2408) {
                        stairs = 16;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 5055) {
                        stairs = 18;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 5131) {
                        stairs = 20;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 9359) {
                        stairs = 24;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                        stairDistance = 1;
                    } else if (objectID == 2492) { /* Essence Mine Portals*/
                        stairs = 25;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 9356) { // tzhaar door to fight caves
                        teleportToX = 2413;
                        teleportToY = 5117;
                    } else if (objectID == 9357) { // tzhaar door from
                        teleportToX = 2413;
                        teleportToY = 5117;
                    } else if (objectID == 2406) { /* Lost City Door*/
                        if (playerEquipment[playerWeapon] == 772) { // Dramen Staff
                            stairs = 27;
                            skillX = objectX;
                            skillY = objectY;
                            stairDistance = 1;
                        } else {// Open Door
                        }
                    }
                }
                break;

            case -2:
                // go downstairs


                if (!IsUsingSkill) {
                    if (objectID == 1746 || objectID == 1749) {
                        stairs = 2;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 1740) {
                        stairs = 2;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 1723) {
                        stairs = 22;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 2;
                        stairDistanceAdd = 2;
                    } else if (objectID == ObjectIDs.PORTAL_21) {
                        stairs = 9;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 3;
                        stairDistanceAdd = -1;
                    } else if (objectID == 54) {
                        stairs = 14;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 3;
                        stairDistanceAdd = 1;
                    } else if (objectID == 56) {
                        stairs = 14;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 3;
                    } else if (objectID == 1568 || objectID == 5947
                            || objectID == 6434 || objectID == 1759
                            || objectID == 1754 || objectID == 1570) {
                        stairs = 3;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 2113) { //  guild stairs
                        if (playerLevel[playerMining] >= 60) {
                            stairs = 3;
                            skillX = objectX;
                            skillY = objectY;
                            stairDistance = 1;
                        } else {
                            sendMessage(
                                    "You need 60 mining to enter the mining guild.");
                        }
                    } else if (objectID == 492) {
                        stairs = 11;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 2;
                    } else if (objectID == 2147) {
                        stairs = 7;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 5054) {
                        stairs = 17;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 5130) {
                        stairs = 19;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 9358) {
                        stairs = 23;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    } else if (objectID == 5488) {
                        stairs = 28;
                        skillX = objectX;
                        skillY = objectY;
                        stairDistance = 1;
                    }

                    if (skillX > -1 && skillY > -1) {
                        IsUsingSkill = true;
                    }
                }
                break;


        /* case 2514:
         ReplaceObject(objectX,objectY,2559, -2);
         break;*/

            case 2559:
                ReplaceObject(objectX, objectY, 1531, -2);
                break;

            // Slayer Tower//
            case 4487:
                heightLevel = 0;
                if (absY == 3535) {
                    teleportToX = 3428;
                    teleportToY = 3536;
                }
                if (absY == 3536) {
                    teleportToX = 3428;
                    teleportToY = 3535;
                }
                break;

            case 26425:
                if (absX == 2863 && absY == 5354) {
                    heightLevel = 2;
                    teleportToX = 2864;
                    teleportToY = 5354;
                }
                if (absX == 2864 && absY == 5354) {
                    heightLevel = 2;
                    teleportToX = 2863;
                    teleportToY = 5354;
                }
                break;

            case 26384:
                if (absX == 2851 && absY == 5333) {
                    heightLevel = 2;
                    teleportToX = 2850;
                    teleportToY = 5333;
                } else if (absX == 2850 && absY == 5333) {
                    heightLevel = 2;
                    teleportToX = 2851;
                    teleportToY = 5333;
                }
                break;

            case 26294:
                if (absX == 2915 && absY == 5300) {
                    heightLevel = 2;
                    teleportToX = 2912;
                    teleportToY = 5300;
                }
                break;

            case 26296:
                if (absX == 2912 && absY == 5300) {
                    heightLevel = 1;
                    teleportToX = 2915;
                    teleportToY = 5300;
                }
                break;

            case 26298:
                if (absX == 2919 && absY == 5274) {
                    heightLevel = 1;
                    teleportToX = 2920;
                    teleportToY = 5276;
                }
                break;

            case 26300:
                if (absX == 2919 && absY == 5276) {
                    heightLevel = 0;
                    teleportToX = 2919;
                    teleportToY = 5274;
                }
                break;

            case 26427:
                if (absX == 2908 && absY == 5265) {
                    heightLevel = 0;
                    teleportToX = 2907;
                    teleportToY = 5265;
                }
                if (absX == 2907 && absY == 5265) {
                    heightLevel = 0;
                    teleportToX = 2908;
                    teleportToY = 5265;
                }
                break;
            case 26439:
                if(getX() == 2885 && getY() == 5223 && heightLevel == 2){
                    movePlayer(2885, 5345, 2);
                } else if(getX() == 2885 && getY() == 5245 && heightLevel == 2){
                    movePlayer(2885, 5323, 2);
                }
                break;
            case 26303:
                if (absX == 2871 && absY == 5279) {
                    heightLevel = 2;
                    teleportToX = 2871;
                    teleportToY = 5269;
                } else if (absX == 2872 && absY == 5279) {
                    heightLevel = 2;
                    teleportToX = 2872;
                    teleportToY = 5269;
                } else if (absX == 2873 && absY == 5279) {
                    heightLevel = 2;
                    teleportToX = 2873;
                    teleportToY = 5269;
                } else if (absX == 2871 && absY == 5269) {
                    heightLevel = 2;
                    teleportToX = 2871;
                    teleportToY = 5279;
                } else if (absX == 2872 && absY == 5269) {
                    heightLevel = 2;
                    teleportToX = 2872;
                    teleportToY = 5279;
                } else if (absX == 2873 && absY == 5269) {
                    heightLevel = 2;
                    teleportToX = 2873;
                    teleportToY = 5279;
                }
                break;


            case 4495:
                heightLevel += 1;
                teleportToX = 3417;
                teleportToY = 3541;
                break;

            case 4496:
                heightLevel -= 1;
                teleportToX = 3412;
                teleportToY = 3540;
                break;

            case 9319:
                heightLevel += 1;
                teleportToX = absX;
                teleportToY = absY;
                break;

            case 9320:
                heightLevel -= 1;
                teleportToX = absX;
                teleportToY = absY;
                break;

            case 4494:
                if (absY == 3537) {
                    heightLevel -= 1;
                    teleportToX = 3438;
                    teleportToY = 3537;
                } else if (absY == 3538) {
                    heightLevel -= 1;
                    teleportToX = 3438;
                    teleportToY = 3538;
                }
                break;

            case 4493:
                if (absY == 3537) {
                    heightLevel = 1;
                    teleportToX = 3433;
                    teleportToY = 3537;
                } else if (absY == 3538) {
                    heightLevel = 1;
                    teleportToX = 3433;
                    teleportToY = 3538;
                }
                break;

            case 10527:
                heightLevel = 1;
                if (absY == 3555) {
                    teleportToX = 3426;
                    teleportToY = 3556;
                }
                if (absY == 3556) {
                    teleportToX = 3426;
                    teleportToY = 3555;
                }
                break;

            case 10529:
                if(heightLevel == 1) {
                    heightLevel = 1;
                    if (absY == 3555) {
                        teleportToX = 3427;
                        teleportToY = 3556;
                    }
                    if (absY == 3556) {
                        teleportToX = 3427;
                        teleportToY = 3555;
                    }
                    if (absY == 3553) {
                        teleportToX = 3445;
                        teleportToY = 3556;
                    }
                    if (absY == 3556) {
                        teleportToX = 3445;
                        teleportToY = 3553;
                    }
                } else if(heightLevel == 2) {
                    heightLevel = 2;
                    if (absY == 3555) {
                        teleportToX = 3427;
                        teleportToY = 3556;
                    }
                    if (absY == 3556) {
                        teleportToX = 3427;
                        teleportToY = 3555;
                    }
                    if (absY == 3553) {
                        teleportToX = 3445;
                        teleportToY = 3556;
                    }
                    if (absY == 3556) {
                        teleportToX = 3445;
                        teleportToY = 3553;
                    }
                }
                break;

            case 5126:
                heightLevel = 2;
                if (absY == 3555) {
                    teleportToX = 3445;
                    teleportToY = 3554;
                }
                if (absY == 3554) {
                    teleportToX = 3445;
                    teleportToY = 3555;
                }
                break;

            // End Of Tower//


            case 5960: // Mage bank lever to wildy
                if (absY == 4712) {
                    if (!teleblock) {
                        teleportToX = 3090;
                        teleportToY = 3956;
                    } else if (teleblock) {
                        sendMessage("A magical force stops you from teleporting.");
                    }
                }
                break;

            case 5959: // Wildy lever to mage bank
                if (absY == 3956) {
                    if (!teleblock) {
                        teleportToX = 2539;
                        teleportToY = 4712;
                    } else if (teleblock) {
                        sendMessage("A magical force stops you from teleporting.");
                    }
                }

            case 1596:
                if (objectX == 2816) { // Members gate to brimhaven
                    ReplaceObject(objectX, objectY, 2630, -3);
                } else if (objectX == 3008) {
                    ReplaceObject(objectX, objectY, 2630, -2);
                } else {
                    ReplaceObject(objectX, objectY, 2630, -3);
                }
                break;

            case 1597:
                if (objectX == 2816) { // Members gate to brimhaven
                    ReplaceObject(objectX, objectY, 2630, -3);
                } else if (objectX == 3008) {
                    ReplaceObject(objectX, objectY, 2630, -2);
                } else {
                    ReplaceObject(objectX, objectY, 2630, 0);
                }
                break;

            case 2878: // Mage Arena Bank Pool
                teleportToX = 2509;
                teleportToY = 4689;
                break;

            case 2879: // Mage Arena Staff Place Pool
                teleportToX = 2542;
                teleportToY = 4718;
                break;

            case 2465:
                teleportToX = 2883;
                teleportToY = 9800;
                sendMessage("You teleport to the Training Area!");
                break;

            case 2468:
                teleportToX = 3660;
                teleportToY = 3507;
                sendMessage("You Teleport To The Ghost Quest.");
                break;

            case 5103:
                if (absX == 2691 && absY == 9564) {
                    walkTo2(-2, 0);
                } else if (absX == 2689 && absY == 9564) {
                    walkTo2(2, 0);
                }
                break;

            case 29728: // ladder at train
                if (objectX == 3076 && objectY == 3463) {
                    teleportToX = 3158;
                    teleportToY = 4280;
                    heightLevel = 3;
                    //sendMessage("Welcome To The Blue Dragon Cave.");
                }
                break;

            case 29729: // ladder at train
                if (objectX == 3159 && objectY == 4280) {
                    teleportToX = 3076;
                    teleportToY = 3462;
                    heightLevel = 0;
                    //sendMessage("Welcome To The Blue Dragon Cave.");
                }
                break;

            case 29671: // ladder at train
                if (objectX == 3171 && objectY == 4272) {
                    teleportToX = 3174;
                    teleportToY = 4273;
                    heightLevel = 2;
                    //sendMessage("Welcome To The Blue Dragon Cave.");
                }
                break;

            case 29672: // ladder at train
                if (objectX == 3171 && objectY == 4273) {
                    teleportToX = 3171;
                    teleportToY = 4271;
                    heightLevel = 3;
                    //sendMessage("Welcome To The Blue Dragon Cave.");
                }
                break;


            case 1765: // ladder at train
                if (playerLevel[playerAttack] >= 99) {
                    teleportToX = 2318;
                    teleportToY = 9808;
                    sendMessage("Welcome To The Blue Dragon Cave.");
                } else {
                    sendMessage(
                            "You need 99 attack to enter the Blue Dragon area.");
                }
                break;

            case 2112:
                if (objectX == 3046 && objectY == 9757) {
                    sendMessage("You Enter The Mining Guild!!");
                    walkTo2(-1, 0);
                }
                break;

            case 1766: // ladder at train
                teleportToX = 2526;
                teleportToY = 4636;
                sendMessage("Welcome Back To The First Level Of Training");
                break;

            case 1768: // ladder at train
                teleportToX = 2532;
                teleportToY = 4645;
                sendMessage("Welcome Back To Training");
                break;

            case 5581: // log by skills
                makeGlobalObject(3232, 3296, 5582, 0, 10);//portal
                addItem(1351, 1);
                sendMessage("You take the axe from the log.");
                break;


            case ObjectIDs.PORTAL_13:
                teleportToX = 3087;
                teleportToY = 3520;
                sendMessage("You Teleport To Edge, Go North Into The Wild For Pkng!");
                sendMessage("No Teaming At Edge!, All Teamers Will Be Muted and/ or Banned!");
                sendMessage("To Check Your Pk Points Type ::mypk");
                break;

            case ObjectIDs.PORTAL_43:
                teleportToX = 3300;
                teleportToY = 3483;
                sendMessage("You Teleport To The Woodcutting Area.");
                break;

            case ObjectIDs.PORTAL_44:
                teleportToX = 2602;
                teleportToY = 4776;
                sendMessage("You Teleport To The Farming Area.");
                break;

            case ObjectIDs.PORTAL_45:
                teleportToX = 2273;
                teleportToY = 4694;
                sendMessage("You Teleport To The RuneCrafting Area.");
                break;

            case ObjectIDs.PORTAL_59:
                teleportToX = 3428;
                teleportToY = 3536;
                sendMessage("You Teleport To The Slayer area.");
                break;

            case 2187: // modportal
                if ((rights.isStaff()) || (amDonated >= 25)) {
                    teleportToX = 2528;
                    teleportToY = 4641;
                    sendMessage("Welcome to the Donator Training.");
                } else {
                    sendMessage("Sorry You Are Not A Donator.");
                }
                break;


            case 2557:
                ReplaceObject(objectX, objectY, objectID = +2, 0);
                break;

            case 2903:
                if (objectX == 2773 && objectY == 9342) {
                    teleportToX = 3016;
                    teleportToY = 3848;
                    sendMessage(
                            "You climb out of the cave back into the wilderness.");
                }
                break;

            case 2904:
                if (objectX == 2772 && objectY == 9342) {
                    teleportToX = 3016;
                    teleportToY = 3848;
                    sendMessage(
                            "You climb out of the cave back into the wilderness.");
                }
                break;

            case 393:
                if (objectX == 2790 && objectY == 9341) {
                    teleportToX = 2800;
                    teleportToY = 9341;
                    sendMessage(
                            "You search the bookcase a crawl through a hidden crack in the rock.");
                }
                break;

            case 2918:
                if (objectX == 2799 && objectY == 9341) {
                    teleportToX = 2790;
                    teleportToY = 9340;
                    sendMessage("You crawl through the crack in the rock.");
                }
                break;

            case 29354: // Mage bank webs
            {
                if (absX == 3092) {
                    teleportToX = 3093;
                    teleportToY = 3957;
                }
                if (absX == 3093) {
                    teleportToX = 3092;
                    teleportToY = 3957;
                }
                if (absX == 3094) {
                    teleportToX = 3095;
                    teleportToY = 3957;
                }
                if (absX == 3095) {
                    teleportToX = 3094;
                    teleportToY = 3957;
                }

                if (absY == 3950) {
                    teleportToX = 3158;
                    teleportToY = 3952;
                }
                if (absY == 3952) {
                    teleportToX = 3158;
                    teleportToY = 3950;
                }
                if (absY == 3119) {
                    teleportToX = absX;
                    teleportToY = 3118;
                }
                if (absY == 3118) {
                    teleportToX = absX;
                    teleportToY = 3119;
                }
                if (absY == 9899) {
                    teleportToX = absX;
                    teleportToY = 9898;
                }
                if (absY == 9898) {
                    teleportToX = absX;
                    teleportToY = 9899;
                }
                if (absY == 3957) {
                    teleportToX = absX;
                    teleportToY = 3959;
                }
                if (absY == 3959) {
                    teleportToX = objectX;
                    teleportToY = 3957;
                }
            }
            break;

            case 9707:
                teleportToX = 3105;
                teleportToY = 3956;
                sendMessage("You teleport inside...");
                break;


            case 5110:
                if (absY >= 2649 && absY <= 9562) {
                    teleportToX = 2647;
                    teleportToY = 9557;
                    // sendMessage("You teleport inside...");
                }
                break;

            case 5111:
                if (absY >= 2647 && absY <= 9557) {
                    teleportToX = 2649;
                    teleportToY = 9562;
                    // sendMessage("You teleport inside...");
                }
                break;


            case 2321:
                if (absY >= 9487 && absY <= 9495) // Monkey Bars
                {
                    if (absY == 9494 && playerLevel[16] >= 80) {
                        teleportToX = absX;
                        teleportToY = 9488;
                        sendMessage("You swing across the monkey bars.");
                        addSkillXP((40 * playerLevel[16]), 16);
                    } else {
                        sendMessage(
                                "You need an agility level of 80 to climb the monkey bars.");
                        sendMessage(
                                "You need to be wearing goldsmith gaunlets to climb the monkey bars.");
                    }
                    if (absY == 9488 && playerLevel[16] >= 80
                            && playerEquipment[playerHands] == 776) {
                        teleportToX = absX;
                        teleportToY = 9494;
                        sendMessage("You swing accross the monkey bars.");
                    } else {
                        sendMessage(
                                "You need an agility level of 80 to climb the monkey bars.");
                        sendMessage(
                                "You need to be wearing goldsmith gaunlets to climb the monkey bars.");
                    }
                }
                break;

            case 2303: // Balancing Ledge

                if (absY == 9520 && playerLevel[16] >= 80) {
                    teleportToX = absX;
                    teleportToY = 9512;
                    sendMessage("You climb accross the ledge.");
                    addSkillXP((40 * playerLevel[16]), 16);
                } else if (absY == 9520 && playerLevel[16] <= 80) {
                    sendMessage(
                            "You need an agility level of 80 to climb this ledge.");
                }
                if (absY == 9512 && playerLevel[16] >= 80) {
                    teleportToX = absX;
                    teleportToY = 9520;
                    sendMessage("You climb accross the ledge.");
                } else if (absY == 9512 && playerLevel[16] <= 80) {
                    sendMessage(
                            "You need an agility level of 80 to climb this ledge.");
                }
                break;

            case 2558: // Pirate Hut Doors
            case 1557: // Edgeville dungeon gate
            case 1558: // Edgeville dungeon gate
                ReplaceObject(objectX, objectY, objectID + 2, 0);
                break;

            case 1533:
                if (objectX == 3183 && objectY == 3434) {
                    ReplaceObject(objectX, objectY, 1531, -1);
                } else {
                    ReplaceObject(objectX, objectY, objectID = +2, 0);
                }
                break;

        /* case 1512:  // Door to secret command/item room
         case 1519:  // Left door to varrock castle
         case 1516:
         ReplaceObject(objectX,objectY,objectID =+ 2, 0);
         break;*/


            case 1728:
                if (objectY == 9497) {
                    sendMessage("You climb down the stairs, and stand on a trap!");
                    teleportToX = 2636;
                    teleportToY = 9517;
                    hitDiff = 10 + misc.random(5);
                    actionTimer = 30;
                    currentHealth -= hitDiff;
                    updateRequired = true;
                    hitUpdateRequired = true;
                }
                break;

            case 6657: // Juna the snake
                if (absX < objectX) {
                    selectoption("Hello what do you want?",
                            "Can I go through please?", "Ya ma.", "");
                    JunaTele = 1;
                } else if (absX > objectX) {
                    selectoption("Hello what do you want?",
                            "Can I go through please?", "Ya ma.", "");
                    JunaTele = 2;
                }
                break;

            case 2873:
                TakeCape("Saradomin", 16, 99, 16, 5000, 2412, 1, 60, 645);
                resetanim = 6;
                break;

            case 2875:
                TakeCape("Guthix", 15, 99, 15, 5000, 2413, 1, 60, 645);
                resetanim = 6;

            case 2874:
                TakeCape("Zamorak", 20, 99, 20, 5000, 2414, 1, 60, 645);
                resetanim = 6;
                break;

            case 2309: // wildy course gates
            case 2307:
            case 2308:
                ReplaceObject(objectX, objectY, objectID = +2, -1);
                break;

            case 8788: // Gate in 2039,4637

                if (absY == 4634) {
                    teleportToX = 2037;
                    teleportToY = 4634;
                }
                if (absY == 4633) {
                    teleportToX = 2037;
                    teleportToY = 4634;
                }
                break;

            case 8787: // Door in 2039,4637

                if (absY == 4634) {
                    teleportToX = 2042;
                    teleportToY = 4634;
                }
                if (absY == 4633) {
                    teleportToX = 2042;
                    teleportToY = 4634;
                }
                break;

            case 8789: // Door in 2039,4637

                if (absX == 2034) {
                    teleportToX = 2033;
                    teleportToY = 4636;
                }
                if (absX == 2033) {
                    teleportToX = 2034;
                    teleportToY = 4636;
                }
                break;


            case 24363:
                if (objectX == 3097 && objectY == 9867) // edgeville dungeon ladder to surface
                {
                    teleportToX = 3096;
                    teleportToY = 3468;
                } else {
                    teleportToX = absX;
                    teleportToY = (absY + 6400);
                }
                break;

            case 1746:
            case 1740:
            case 5281:
            case 1749:
                heightLevel -= 1;
                teleportToX = absX;
                teleportToY = (absY - 1);
                break;

            case 2283: // Agility 1
                Agility("You swing from the rope.", 3006, 3958, 1,
                        8 * playerLevel[16], -1, -1, 24, 0x323);
                break;

            case 37704: // Agility 2
                Agility("You cross the lava.", 2996, 3960, 1, 6 * playerLevel[16],
                        -1, -1, 24, 0x323);
                break;

            case 2297: // Agility 3
                Agility("You walk across the log.", 2994, 3945, 1, 14 * playerLevel[16], 2996, 16, 24, 0x323);
                break;

            case 2328: // Agility 4
                Agility("You climb the rocks.", 2996, 3932, 1, 10 * playerLevel[16],
                        -1, -1, 24, 0x323);
                break;

            case 2288: // a5
                Agility("You squeeze through the pipe.", 3004, 3950, 1,
                        8 * playerLevel[16], -1, -1, 24, 0x323);
                break;


            case 2643:
                Pottery.showFire(this);
                break;

            case 3816:
                if (actionTimer == 0) {
                    addSkillXP((1700 * playerLevel[12]), 12);
                    addItem(ItemIDs.MANTA_RAY_NOTED, 10);
                    addItem(ItemIDs.COINS, 1000000);
                    sendMessage("You Gain Some Crafting, and get some Cash!.");
                    setAnimation(0x378);
                    actionTimer = 15;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;

            case 7133:
                if (actionTimer == 0) {
                    addSkillXP((1700 * playerLevel[20]), 20);
                    addItem(561, 100);
                    addItem(ItemIDs.COINS, 1000000);
                    sendMessage("You Gain Some RuneCrafting, and get some Cash!.");
                    setAnimation(0x362);
                    actionTimer = 15;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;

            case 2513:
                if (actionTimer == 0) {
                    addSkillXP((1700 * playerLevel[4]), 4);
                    sendMessage("You Gain Some Range.");
                    setAnimation(426);
                    actionTimer = 15;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;

            case 2781:
                if (actionTimer == 0) {
                    addSkillXP((1700 * playerLevel[13]), 13);
                    addItem(ItemIDs.COINS, 1000000);
                    sendMessage("You Gain Some Smithing, and get some Cash!.");
                    setAnimation(0x378);
                    actionTimer = 15;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;

            case 2287:
                if (actionTimer == 0) {
                    addSkillXP((1700 * playerLevel[16]), 16);
                    addItem(ItemIDs.COINS, 1000000);
                    sendMessage("You Gain Some Agility, and get some Cash");
                    setAnimation(0x323);
                    actionTimer = 15;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;
            case 2111:
                if (playerEquipment[playerWeapon] == 1265 || playerEquipment[playerWeapon] == 1267 || playerEquipment[playerWeapon] == 1269 || playerEquipment[playerWeapon] == 1271 || playerEquipment[playerWeapon] == 1273 || playerEquipment[playerWeapon] == 1275)
                    if (actionTimer == 0) {
                        addSkillXP((1700 * playerLevel[14]), 14);
                        sendMessage("You Gain Some Mining,");
                        setAnimation(624);
                        actionTimer = 15;
                        updateRequired = true;
                        appearanceUpdateRequired = true;
                    }
                break;

            case 2108: // clay
                if (actionTimer == 0) {
                    addSkillXP((1700 * playerLevel[14]), 14);
                    addItem(434, 1);
                    sendMessage("You Gain Some Mining, and get some Cash!!");
                    setAnimation(624);
                    actionTimer = 15;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;

            case 42: // shrimp
                if (actionTimer == 0 && playerLevel[playerFishing] >= 1) {
                    startAnimation(621);
                    addItem(317, 1);
                    addSkillXP(150 * playerLevel[10], 10);
                    sendMessage("You fish a shrimp");
                    actionTimer = 5;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;

            case 44: // lobster
                if (actionTimer == 0 && playerLevel[playerFishing] >= 40) {
                    startAnimation(619);
                    addItem(377, 1);
                    addSkillXP(300 * playerLevel[10], 10);
                    sendMessage("You fish a lobster");
                    actionTimer = 5;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;

            case 45: // shark
                if (actionTimer == 0 && playerLevel[playerFishing] >= 75) {
                    startAnimation(618);
                    addItem(383, 1);
                    addSkillXP(500 * playerLevel[10], 10);
                    sendMessage("You fish a shark");
                    actionTimer = 5;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;

            case 46: // manta ray
                if (actionTimer == 0 && playerLevel[playerFishing] >= 90) {
                    startAnimation(618);
                    addItem(389, 1);
                    addSkillXP(750 * playerLevel[10], 10);
                    sendMessage("You fish a manta ray");
                    actionTimer = 5;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;


            case 2380:
                if (actionTimer == 0) {
                    addSkillXP((1700 * playerLevel[11]), 11);
                    sendMessage("You Gain Some FireMaking.");
                    setAnimation(1979);
                    actionTimer = 15;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;

            case 12120:
                if (actionTimer == 0) {
                    addSkillXP((1700 * playerLevel[15]), 15);
                    addItem(158, 1);
                    sendMessage("You Gain Some Herblore!");
                    setAnimation(0x378);
                    actionTimer = 15;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                break;

            case 2357:
                if (actionTimer == 0) {
                    sendMessage("You dig in the bushes");
                    addSkillXP((25 * playerLevel[19]), 19);
                    addItem(1968, 3);
                    actionTimer = 15;
                    sendMessage("You manage to find some kind of seeds.");
                }
                break;




        /* case 1734:
         println_debug("going up");
         teleportToX = absX;
         teleportToY = (absY - 6400);
         break;*/

            case 1814:
                if (!teleblock) {
                    sendMessage("You pull the lever...");
                    setAnimation(0x714);
                    teleportToX = 3153;
                    teleportToY = 3923;
                    sendMessage("And get teleported into the wilderness.");
                } else if (teleblock) {
                    sendMessage("A magical force stops you from teleporting to ::home.");
                }
                break;

            case 1815:
                if (!teleblock) {
                    sendMessage("You pull the lever...");
                    setAnimation(0x714);
                    teleportToX = 2561;
                    teleportToY = 3311;
                    sendMessage("And get teleported back to Ardougne!");
                } else if (teleblock) {
                    sendMessage("A magical force stops you from Going Back to ::home...");
                }

                break;



            case 9533:
                if (actionTimer == 0) {
                    sendMessage("You find some roids.");
                    setAnimation(0x320);
                    addSkillXP((20 * playerLevel[2]), 2);
                    actionTimer = 20;
                }
                break;

            case 1748:
                if (actionTimer == 0) {
                    teleportToX = 3286;
                    teleportToY = 3191;
                    heightLevel = 0;
                    actionTimer = 2;
                }
                break;

            case 9535:
                if (actionTimer == 0) {
                    sendMessage("You find some Steroids.");
                    setAnimation(0x320);
                    addSkillXP((20 * playerLevel[2]), 2);
                    actionTimer = 20;
                }
                break;

            case 4031:
                if (actionTimer == 0) {
                    sendMessage("You Got tele'd to the Deadly Biotch!.. Beware...");
                    teleportToX = 3483;
                    teleportToY = 9490;
                    actionTimer = 200;
                }
                break;


            case 104:
                if (GoodDistance2(absX, absY, objectX, objectY, 3)) {
                    if (actionTimer == 0) {
                        sendMessage("You gain some slayer Exp");
                        actionTimer = 10;
                        setAnimation(423);
                        addSkillXP((1700 * playerLevel[18]), 18);
                        stillgfx(199, absY, absX);
                        updateRequired = true;
                        appearanceUpdateRequired = true;
                    }
                }
                break;

            case 2393:
                if (GoodDistance2(absX, absY, objectX, objectY, 3)) {
                    if (actionTimer == 0) {
                        sendMessage("Go train on npc's");
                        actionTimer = 20;
                        setAnimation(1658);
                        addSkillXP((playerLevel[4]), 4);
                        stillgfx(246, absY, absX);
                        updateRequired = true;
                        appearanceUpdateRequired = true;
                    }
                }
                break;

            case 75:
                if (GoodDistance2(absX, absY, objectX, objectY, 3)) {
                    if (actionTimer == 0) {
                        sendMessage("Go train on npc's please");
                        actionTimer = 10;
                        setAnimation(422);
                        addSkillXP((playerLevel[0]), 0);
                        stillgfx(246, absY, absX);
                        updateRequired = true;
                        appearanceUpdateRequired = true;
                    }
                }

            case 299:
                if (GoodDistance2(absX, absY, objectX, objectY, 3)) {
                    if (actionTimer == 0) {
                        sendMessage("Go train on npc's please");
                        addSkillXP((playerLevel[1]), 1);
                        actionTimer = 10;
                        setAnimation(0x320);
                        updateRequired = true;
                        appearanceUpdateRequired = true;
                    }
                }
                break;

            case 61:
                setSkillLevel(5, getLevelForXP(playerXP[5]), playerXP[5]);
                playerLevel[5] = getLevelForXP(playerXP[5]);
                refreshSkills();
                setAnimation(645);
                sendMessage("You recharge your prayer");
                updateRequired = true;
                appearanceUpdateRequired = true;
                break;

            case 10638:
                setSkillLevel(5, getLevelForXP(playerXP[5]), playerXP[5]);
                playerLevel[5] = getLevelForXP(playerXP[5]);
                refreshSkills();
                setAnimation(645);
                sendMessage("You recharge your prayer");
                updateRequired = true;
                appearanceUpdateRequired = true;
                break;

            case 409:
                setSkillLevel(5, getLevelForXP(playerXP[5]), playerXP[5]);
                playerLevel[5] = getLevelForXP(playerXP[5]);
                refreshSkills();
                setAnimation(645);
                sendMessage("You recharge your prayer");
                updateRequired = true;
                appearanceUpdateRequired = true;
                break;


            case 2469: // stairs
                teleportToX = 3088;
                teleportToY = 3493;
                sendMessage("You Go To The Edge");
                break;

            // Portals

            case 7324: // Portal At Front.
                teleportToX = 2572;
                teleportToY = 3852;
                sendMessage("You teleport to the Fishing area.");
                break;

            case 2472: // modportal
                if (rights.inherits(Rights.MODERATOR)) {
                    teleportToX = 3281;
                    teleportToY = 2766;
                    sendMessage("Welcome to the Staff Zone");
                } else {
                    sendMessage("Sorry You Are Not Staff!");
                    sendMessage("You May Have Luck If You Work For It");
                }
                break;

            case ObjectIDs.PORTAL_20: // Portal At Front.
                teleportToX = 2502;
                teleportToY = 3011;
                sendMessage("You teleport to the Enchanted Minigame.");
                break;

            case ObjectIDs.PORTAL_21: // Portal At Front.
                teleportToX = 3190;
                teleportToY = 9834;
                break;

            case ObjectIDs.PORTAL_65: // memberportal
                teleportToX = 3420;
                teleportToY = 4772;
                sendMessage("Welcome to evil bobs island.");
                break;

            case ObjectIDs.PORTAL_35: // memberportal
                if (playerLevel[4] >= 99) {
                    teleportToX = 3243;
                    teleportToY = 9361;
                    sendMessage("You teleport to the Range/Magic Guild!");
                } else {
                    sendMessage("You need 99 Range and Magic in order to enter this portal.");
                }
                break;


            case ObjectIDs.PORTAL_66: // Portal At Front.
                teleportToX = 2540;
                teleportToY = 3890;
                sendMessage("You teleport to Shop's");
                break;

            case ObjectIDs.PORTAL_37: // memberportal
                if (amDonated >= 25) {
                    teleportToX = 2340;
                    teleportToY = 3171;
                    heightLevel = 0;
                    sendMessage("Welcome to the Donator Zone.");
                } else {
                    sendMessage("You Have To Be A Donator To Go In This Portal");
                }
                break;

            case 10: // memberportal
                if (amDonated >= 25) {
                    teleportToX = 3097;
                    teleportToY = 3498;
                    sendMessage("You JUst Teleported To The Back On the bank");
                } else {
                    sendMessage("Sorry Your Not A Donator.");
                }
                break;


            case ObjectIDs.PORTAL_52: // agility area
                teleportToX = 2773;
                teleportToY = 10161;
                sendMessage("You enter A cave");
                break;
            case ObjectIDs.PORTAL_53: // agility area
                teleportToX = 2730;
                teleportToY = 3713;
                sendMessage("You exited A cave");
                break;

            case ObjectIDs.PORTAL_54: // agility area
                teleportToX = 2780;
                teleportToY = 10161;
                sendMessage("You exited A cave");
                break;

            case ObjectIDs.PORTAL_55: // agility area
                teleportToX = 2838;
                teleportToY = 10124;
                sendMessage("You enter A cave");
                break;

            case 11867: // agility area
                teleportToX = 3020;
                teleportToY = 9850;
                sendMessage("You Climb down the Ladder And Found YourSelf In Mining.");
                break;

            case 881: // log by skills
                makeGlobalObject(3237, 3458, 882, 0, 10);//portal
                makeGlobalObject(3237, 3457, 883, 0, 10);//portal
                sendMessage("You Open The Man Hole");
                break;

            case 883: // log by skills
                makeGlobalObject(3237, 3458, 881, 0, 10);//portal
                deletethatobject(3237, 3457);
                sendMessage("You Closed The Man Hole");
                break;


            case 5585:
                deletethatobject(absX, absY);
                addItem(1947, 1);
                sendMessage("You Pick Some wheat");
                break;

            case 313:
                deletethatobject(absX, absY);
                addItem(1947, 1);
                sendMessage("You Pick Some wheat");
                break;

            case 5584:
                deletethatobject(absX, absY);
                addItem(1947, 1);
                sendMessage("You Pick Some wheat");
                break;

            case 5583:
                deletethatobject(absX, absY);
                addItem(1947, 1);
                sendMessage("You Pick Some wheat");
                break;


            case 882: // agility area
                teleportToX = 3237;
                teleportToY = 9859;
                sendMessage("You Climb Down The Man Hole ");
                break;


            case ObjectIDs.PORTAL_73: // agility area
                teleportToX = 3266;
                teleportToY = 3348;
                sendMessage("Let's Not try to make a bronze scimmy nw?, eh?");
                break;

            case 12230: // robe
                teleportToX = 2996;
                teleportToY = 3376;
                sendMessage("You Got Out Of The Mole Lair");
                break;

            case 2417:
                showInterface(8292);
                sendMessage("You Open The Brimhaven Agility Arena Ticket Exchange.");
                break;

            case ObjectIDs.PORTAL_74: // agility area
                teleportToX = 3227;
                teleportToY = 3438;
                sendMessage("You Teleport To the Smithing area.");
                break;

            case ObjectIDs.BRONZE_CHEST_3: //mini game
                if (JDemonkills >= 1) {
                }
                if (Demonkills >= 1) {
                }
                if (Generalkills >= 1) {
                }
                if (Druidkills >= 1) {
                }
                if (Ghostkills >= 1) {
                }
                if (Giantkills >= 1) {
                    Giantkills -= 1;
                    Druidkills -= 1;
                    Ghostkills -= 1;
                    Demonkills -= 1;
                    JDemonkills -= 1;
                    Generalkills -= 1;
                    sendMessage("Congradulations!!! You have beaten the Party Hat Mini game!!!");
                    PlayerHandler.messageToAll = playerName + " has just finished the Party Hat Mini game!";
                    addItem(Item2.randomPhat(), 1);
                } else {
                    sendMessage("You attempt to open the chest but it seems to be sealed tightly shut.");
                }
                break;

            case ObjectIDs.BLACK_CHEST_3: //mini game
                if (IsItemInBag(1543) && IsItemInBag(1544) && IsItemInBag(1545) && IsItemInBag(1546) && IsItemInBag(1547) && IsItemInBag(1548) && IsItemInBag(2399)) {
                    deleteItem(1543, getItemSlot(1543), 1);
                    deleteItem(1544, getItemSlot(1544), 1);
                    deleteItem(1545, getItemSlot(1545), 1);
                    deleteItem(1546, getItemSlot(1546), 1);
                    deleteItem(1547, getItemSlot(1547), 1);
                    deleteItem(1548, getItemSlot(1548), 1);
                    deleteItem(2399, getItemSlot(2399), 1);
                    sendMessage("Congradulations!!! You have beaten the Barrows MiniGame!!!");
                    PlayerHandler.messageToAll = playerName + " has just finished the Barrows Mini game!";
                    addItem(Item2.randombarrowchest2(), 1);
                } else {
                    sendMessage("You attempt to open the chest but it seems to be sealed tightly shut.");
                }
                break;

            case ObjectIDs.ENERGY_BARRIER_3: // Portal
                if (Druidkills >= 1) {
                }
                if (Ghostkills >= 1) {
                }
                if (Giantkills >= 1) {
                    teleportToX = 3176;
                    teleportToY = 6785;
                    sendMessage("You pass through the Ghostly Portal.");
                } else {
                    sendMessage("You attempt to step through the portal but you are stopped.");
                    sendMessage("A voice tells you to kill the three unclean monsters.");
                }
                break;
            case 28779: // agility area
                teleportToX = 3002;
                teleportToY = 3931;
                sendMessage("You teleport to the agility area.");
                break;
            case ObjectIDs.PORTAL_50: // agility area
                heightLevel = 0;
                teleportToX = 2461;
                teleportToY = 3177;
                sendMessage("You Teleport to home.");
                break;

            case ObjectIDs.PORTAL_41: // IconMinigame
                teleportToX = 2607;
                teleportToY = 3166;
                sendMessage("You teleport to the Icon Minigame.");
                break;


            case ObjectIDs.SCOREBOARD: // ScoreBoard
            {
                highscores();
            }
            sendMessage("High Scores!");
            break;

            case ObjectIDs.PORTAL_29: // trainportal
                teleportToX = 3087;
                teleportToY = 3514;
                sendMessage("This Nub Goes to The Training Facilities.");
                break;

            case ObjectIDs.PORTAL_30: // trainportal
                teleportToX = 3087;
                teleportToY = 3511;
                sendMessage("Back To da Trainin i c?");
                break;

            case ObjectIDs.PUPPET_TORSOS: // Crate at Mz
                if (rights.inherits(Rights.MODERATOR)) {
                    if (actionTimer == 0) {
                        addItem(1039, 5);
                        addItem(1041, 5);
                        addItem(1043, 5);
                        addItem(1045, 5);
                        addItem(1047, 5);
                        addItem(1049, 5);
                        addItem(1051, 5);
                        addItem(1054, 5);
                        addItem(1056, 5);
                        addItem(1058, 5);
                        sendMessage("Give any of this away and you will be DEMOTED+BANNED!");
                        actionTimer = 25;
                    }
                } else {
                    sendMessage("You are not staff..");
                }
                break;


//runecrafting cheez
            case 2480: //water
                runecraft(5, 700 * playerLevel[20], 555, 30, 45, 60, 80, 87);
                break;
            case 2478: //air
                runecraft(1, 250 * playerLevel[20], 556, 30, 45, 60, 80, 87);
                break;
            case 2481: //earth
                runecraft(9, 900 * playerLevel[20], 557, 45, 55, 65, 85, 90);
                break;
            case 2482: //fire
                runecraft(14, 1000 * playerLevel[20], 554, 50, 60, 70, 80, 90);
                break;
            case 2483: //body
                runecraft(20, 1500 * playerLevel[20], 559, 55, 65, 75, 85, 95);
                break;
            case 2484: //cosmic
                runecraft(27, 2000 * playerLevel[20], 564, 60, 70, 80, 90, 99);
                break;
            case 2487: //chaos
                runecraft(35, 2500 * playerLevel[20], 562, 60, 70, 80, 90, 99);
                break;
            case 2486: //nat
                runecraft(44, 3000 * playerLevel[20], 561, 60, 70, 80, 90, 99);
                break;
            case 2485: //law
                runecraft(54, 3500 * playerLevel[20], 563, 65, 75, 85, 95, 99);
                break;
            case 2479: //minds
                runecraft(1, 300 * playerLevel[20], 558, 30, 45, 60, 80, 87);
                break;
            case 2488: //deaths
                runecraft(80, 3000 * playerLevel[20], 560, 30, 45, 60, 80, 87);
                break;

//end of runecraft


            case 7139:
                if (objectX == 3047 && objectY == 4825) // air rift
                {

                    sendMessage(
                            "You step into the mysterious rift and end up in the air temple");
                    teleportToX = 2845;
                    teleportToY = 4832;
                }
                break;

            case 2182:
                if (objectX == 3231 && objectY == 3501) {
                    sendMessage("U G3T TH3 LOOT AND SCRAM");
                    addItem(6818, 1);
                    teleportToX = 2853;
                    teleportToY = 3591;
                }
                break;

            case 7137:
                if (objectX == 3051 && objectY == 4833) // water rift
                {

                    sendMessage(
                            "You step into the mysterious rift and end up in the water temple");
                    teleportToX = 2713;
                    teleportToY = 4836;
                }
                break;

            case 7130:
                if (objectX == 3031 && objectY == 4825) // earth rift
                {

                    sendMessage(
                            "You step into the mysterious rift and end up in the earth temple");
                    teleportToX = 2660;
                    teleportToY = 4839;
                }
                break;

            case 7129:
                if (objectX == 3029 && objectY == 4830) // fire rift
                {

                    sendMessage(
                            "You step into the mysterious rift and end up in the fire temple");
                    teleportToX = 2584;
                    teleportToY = 4836;
                }
                break;

            case 7131:
                if (objectX == 3039 && objectY == 4821) // body rift
                {

                    sendMessage(
                            "You step into the mysterious rift and end up in the body temple");
                    teleportToX = 2527;
                    teleportToY = 4833;
                }
                break;

            case 7135:
                if (objectX == 3049 && objectY == 4839) // law rift
                {

                    sendMessage(
                            "You step into the mysterious rift and end up in the law temple");
                    teleportToX = 2464;
                    teleportToY = 4834;
                }
                break;

            case 7132:
                if (objectX == 3028 && objectY == 4837) // cosmic rift
                {

                    sendMessage(
                            "You step into the mysterious rift and end up in the cosmic temple");
                    teleportToX = 2162;
                    teleportToY = 4833;
                }
                break;

            case 2467:
                if (objectX == 2862 && objectY == 3599) // cosmic rift
                {

                    sendMessage(
                            "You teleport to the Skill Area!");
                    teleportToX = 2380;
                    teleportToY = 3427;
                }
                break;

            case 7134:
                if (objectX == 3044 && objectY == 4842) // chaos rift
                {

                    sendMessage(
                            "You step into the mysterious rift and end up in the chaos temple");
                    teleportToX = 2269;
                    teleportToY = 4843;
                }
                break;


            case 2466:
                if (actionTimer == 0) {
                    selectoption(
                            "@whi@W@gre@h@whi@e@gre@r@whi@e @whi@d@gre@o @whi@y@gre@o@whi@u @whi@w@gre@a@whi@n@gre@t @whi@t@gre@o @whi@g@gre@o@whi@?",
                            "@red@Saradomin's Clan",
                            "@red@Zamorak's Clan", "");
                    OptionObject = objectID;
                }
                break;



        }
    }

    public void objectClick2(int objectID, int objectX, int objectY) {
        if(!Region.isWorldObject(objectID, objectX, objectY, heightLevel)){
            return;
        }
        if (debugMessages) {
            sM(
                    "atObject2: " + objectX + "," + objectY + " objectID: "
                            + objectID);
        }
        face(objectX, objectY);
        switch (objectID) {
            case 36774:
            case 36777:
                if(heightLevel == 1) {
                    movePlayer(getX(), getY(), 2);
                }
                break;
            case 38012:
                if(getX() == 2841 && getY() == 3538 && heightLevel == 1){
                    teleportToX = absX;
                    teleportToY = absY;
                    heightLevel += 1;
                }
                break;
            case 11666:
                getSmithing().sendSmelting();
                break;
            case ObjectIDs.BANK_BOOTH:
            case ObjectIDs.BANK_BOOTH_2:
            case ObjectIDs.BANK_BOOTH_3:
            case ObjectIDs.BANK_BOOTH_4:
            case ObjectIDs.BANK_BOOTH_5:
            case ObjectIDs.BANK_BOOTH_6:
            case ObjectIDs.BANK_BOOTH_7:
            case ObjectIDs.BANK_BOOTH_8:
            case ObjectIDs.BANK_BOOTH_9:
            case ObjectIDs.BANK_BOOTH_10:
            case ObjectIDs.BANK_BOOTH_11:
            case ObjectIDs.BANK_BOOTH_12:
            case ObjectIDs.BANK_BOOTH_13:
            case ObjectIDs.BANK_BOOTH_14:
            case ObjectIDs.BANK_BOOTH_15:
            case ObjectIDs.BANK_BOOTH_16:
            case ObjectIDs.BANK_BOOTH_17:
            case ObjectIDs.BANK_BOOTH_18:
            case ObjectIDs.BANK_BOOTH_19:
            case ObjectIDs.BANK_BOOTH_20:
            case ObjectIDs.BANK_BOOTH_21:
            case ObjectIDs.BANK_BOOTH_22:
            case ObjectIDs.BANK_BOOTH_23:
            case ObjectIDs.BANK_BOOTH_24:
            case ObjectIDs.BANK_BOOTH_25:
            case ObjectIDs.BANK_BOOTH_26:
            case ObjectIDs.BANK_BOOTH_27:
            case ObjectIDs.BANK_BOOTH_28:
            case ObjectIDs.BANK_BOOTH_29:
            case ObjectIDs.BANK_BOOTH_30:
            case ObjectIDs.BANK_BOOTH_31:
            case ObjectIDs.BANK_BOOTH_32:
            case ObjectIDs.BANK_BOOTH_33:
            case ObjectIDs.BANK_BOOTH_34:
            case ObjectIDs.BANK_BOOTH_35:
            case ObjectIDs.BANK_BOOTH_36:
            case ObjectIDs.BANK_CHEST:
            case ObjectIDs.BANK_CHEST_2:
            case ObjectIDs.BANK_CHEST_3:
            case ObjectIDs.BANK_CHEST_4:
            case ObjectIDs.BANK_CHEST_5:
            case ObjectIDs.BANK_CHEST_6:
            case ObjectIDs.BANK_CHEST_7:
            case ObjectIDs.BANK_CHEST_8:
                openUpBank();
                break;
            case 6:
                getCannon().pickUpCannon();
                break;

            case 2646:
                if (GoodDistance2(absX, absY, objectX, objectY, 2)) {
                    PickableObjects.pickupFlax(this, objectID, objectX, objectY);
                }
                break;
            case 1161:
                if (GoodDistance2(absX, absY, objectX, objectY, 2)) {
                    PickableObjects.pickupCabbage(this, objectID, objectX, objectY);
                }
                break;

            case 313:
            case 5583:
            case 5584:
            case 5585:
            case 15508:
            case 15506:
                if (GoodDistance2(absX, absY, objectX, objectY, 2)) {
                    PickableObjects.pickupWheat(this, objectID, objectX, objectY);
                }
                break;

            case 312:
                if (GoodDistance2(absX, absY, objectX, objectY, 2)) {
                    PickableObjects.pickupPotato(this, objectID, objectX, objectY);
                }
                break;

            case 3366:
                if (GoodDistance2(absX, absY, objectX, objectY, 2)) {
                    PickableObjects.pickupOnion(this, objectID, objectX, objectY);
                }
                break;

            case 2562:
                TheifStall("gem stall", "and recieve 275k", 70, 160 * playerLevel[17],
                        ItemIDs.COINS, 275000, 3, 0x340, 634, objectX, objectY, 55, 2562);
                break;
            case 34387:
                TheifStall("Fur stall", "and recieve a Grey wolf fur.", 35, 45 * Config.THIEVING_EXPERIENCE,
                        ItemIDs.GREY_WOLF_FUR, 1, 3, 0x340, 34381, objectX, objectY, 25, 34387);
                break;
            case 34386:
                TheifStall("Spice stall", "and recieve a Spice.", 65, 92 * Config.THIEVING_EXPERIENCE,
                        ItemIDs.SPICE, 1, 3, 0x340, 34381, objectX, objectY, 25, 34386);
                break;
            case 34385:
                TheifStall("gem stall", "and recieve red topaz.", 75, 408 * Config.THIEVING_EXPERIENCE,
                        ItemIDs.RED_TOPAZ, 1, 3, 0x340, 34381, objectX, objectY, 25, 34385);
                break;
            case 34384:
                TheifStall("Baker's stall", "and recieve a chocolate slice.", 5, 16 * Config.THIEVING_EXPERIENCE,
                        ItemIDs.CHOCOLATE_SLICE, 1, 3, 0x340, 34381, objectX, objectY, 25, 34384);
                break;
            case 34382:
                TheifStall("Silver stall", "and recieve a Silver Bar.", 50, 206 * Config.THIEVING_EXPERIENCE,
                        ItemIDs.SILVER_BAR, 1, 3, 0x340, 34381, objectX, objectY, 25, 34382);
                break;

            case 34383:
                TheifStall("silk stall", "and recieve silk", 20,
                        24 * Config.THIEVING_EXPERIENCE, ItemIDs.SILK, 1, 3, 0x340, 34381, objectX, objectY, 25, 34383);
                break;
            case 4878:
                TheifStall("scimitar stall", "and recieve 50k", 50,
                        80 * playerLevel[17], ItemIDs.COINS, 50000, 3, 0x340, 620, objectX, objectY, 95, 4878);
                break;

            case 4877:
                TheifStall("magic stall", "and recieve 125k", 30,
                        50 * playerLevel[17], ItemIDs.COINS, 125000, 3, 0x340, 620, objectX, objectY, 95, 4877);
                break;

            case 4876:
                TheifStall("general stall", "and recieve 25k", 1,
                        20 * playerLevel[17], ItemIDs.COINS, 25000, 3, 0x340, 620, objectX, objectY, 95, 4876);
                break;

            case 2560:
                TheifStall("silk stall", "and recieve 2m", 95,
                        200 * playerLevel[17], ItemIDs.COINS, 2000000, 3, 0x340, 634, objectX, objectY, 65, 2560);
                break;

            case 4705:
                TheifStall("Fish stall", "and recieve a manta ray", 1,
                        500 * playerLevel[17], 389, 1, 3, 0x340, 634, objectX, objectY, 25, 4705);
                break;
            case 4706:
                TheifStall("Veg Stall", "and recieve money???", 1,
                        500 * playerLevel[17], ItemIDs.COINS, 100000, 3, 0x340, 634, objectX, objectY, 25, 4706);
                break;

            case 2565:
                TheifStall("silver stall", "and recieve 1.5k", 91,
                        750 * playerLevel[17], ItemIDs.COINS, 1500000, 3, 0x340, 634, objectX, objectY, 25, 2565);
                break;

            case 635:
                TheifStall("Tea stall", "and recieve a nice cup of tea.", 5, 16 * Config.THIEVING_EXPERIENCE, ItemIDs.CUP_OF_TEA, 1, 3, 0x340, 634, objectX, objectY, 2, 635);
                break;

            case 1739:
                heightLevel++;
                break;

            case 348:
                if (objectX == 2611 && objectY == 3323) {
                    if (cluelevel == 1 && cluestage == 2 && clueid == 3) {
                        sendMessage("You find another clue!");
                        newclue(cluestage);
                    }
                }
                break;

            case 356:
                if (objectX == 2424 && objectY == 3081) {
                    if (cluelevel == 1 && clueid == 4) {
                        sendMessage("You find another clue!");
                        newclue(cluestage);
                        addItem(2682, 1);
                    }
                }
                break;

            case 357:
                if (objectX == 2757 && objectY == 2951) {
                    if (cluelevel == 2 && cluestage == 2 && clueid == 5) {
                        sendMessage("You find another clue!");
                        newclue(cluestage);
                    }
                }
                break;

        }
    }

    public void objectClick3(int objectID, int objectX, int objectY) {
        if(!Region.isWorldObject(objectID, objectX, objectY, heightLevel)){
            return;
        }
        if (debugMessages) {
            sM(
                    "atObject3: " + objectX + "," + objectY + " objectID: "
                            + objectID);
        }
        switch(objectID){
            case 36774:
            case 36777:
                if(heightLevel == 1) {
                    movePlayer(getX(), getY(), 0);
                }
                break;
            case 38012:
                if(getX() == 2841 && getY() == 3538 && heightLevel == 1){
                    teleportToX = absX;
                    teleportToY = absY;
                    heightLevel -= 1;
                }
                break;
        }
        if (objectID == 1739) {
            heightLevel--;
        }
    }

    public void teleOtherRequest(String teleLocation, int player) {

        String telePlayer = PlayerHandler.players[player].playerName;

        sendQuest(telePlayer, 12558);
        sendQuest(teleLocation, 12560);
        showInterface(12468);

        teleReq = player;
        teleLoc = teleLocation;

        teleOtherScreen = true;

    }

    public void DeleteArrow() {
        if(getOutStream() != null) {
            if (playerEquipmentN[playerArrows] == 0) {
                deleteequiment(playerEquipment[playerArrows], playerArrows);
            }
            if (playerEquipment[playerWeapon] != 4214
                    && playerEquipmentN[playerArrows] != 0) {
                getOutStream().createFrameVarSizeWord(34);
                getOutStream().writeWord(1688);
                getOutStream().writeByte(playerArrows);
                getOutStream().writeWord(playerEquipment[playerArrows] + 1);
                if (playerEquipmentN[playerArrows] - 1 > 254) {
                    getOutStream().writeByte(255);
                    getOutStream().writeDWord(playerEquipmentN[playerArrows] - 1);
                } else {
                    getOutStream().writeByte(playerEquipmentN[playerArrows] - 1); // amount
                }
                getOutStream().endFrameVarSizeWord();
                getOutStream().createFrameVarSizeWord(34);
                getOutStream().writeWord(19041);
                getOutStream().writeByte(playerArrows);
                getOutStream().writeWord(playerEquipment[playerArrows] + 1);
                if (playerEquipmentN[playerArrows] - 1 > 254) {
                    getOutStream().writeByte(255);
                    getOutStream().writeDWord(playerEquipmentN[playerArrows] - 1);
                } else {
                    getOutStream().writeByte(playerEquipmentN[playerArrows] - 1); // amount
                }
                getOutStream().endFrameVarSizeWord();
                playerEquipmentN[playerArrows] -= 1;
            }
        }
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void CheckArrows() {
        for (int k = 880; k < 893; k++) {

            if (playerEquipment[playerArrows] == k) {
                HasArrows = true;
            } else HasArrows = playerEquipment[playerWeapon] == 4214;

        }
    }

    public void WriteWildyLevel() {
        checkwildy2();
        if (inwildy2 && !nonWild() && !inSafePvP()) {
            if(getOutStream() != null) {
                getOutStream().createFrame(208);
                getOutStream().writeWordBigEndian_dup(197);
            }
            sendQuest("@red@Wild", 199);
            leftwild = 1;
        }

        if (inSafePvP()) {
            if(getOutStream() != null) {
                getOutStream().createFrame(208);
                getOutStream().writeWordBigEndian_dup(197);
            }
            sendQuest("@gre@SafePvp", 199);
//leftwild = 1;
        } else if (nonWild() && inwildy2 && leftwild == 1) {
            IsSnowing = 3;
            leftwild = 0;
        }
    }

    public void CheckWildrange(int pcombat) {
        InWildrange = ((combat + WildyLevel >= pcombat) && (pcombat >= combat))
                || ((combat - WildyLevel <= pcombat) && (pcombat <= combat));
    }

    // anInt1008 frames:
    public void frame60(int i1, int i2, int i3) {
        if(getOutStream() != null) {
            getOutStream().createFrame(60);
            getOutStream().writeByte(i1);
            getOutStream().writeByteC(i2);

        }
    }

    public void frame60rename(int cameraX, int cameraY, int jFrame) {
        if(getOutStream() != null) {
            getOutStream().createFrame(60);
            getOutStream().writeByte(cameraX);
            getOutStream().writeByteC(cameraY);
            getOutStream().writeByte(jFrame);
        }
    }

    public void frame8(int i1, int i2) // worked out what it does, but it doesn't seem to do anything wtfz XD
    {
        if(getOutStream() != null) {
            getOutStream().createFrame(8);
            getOutStream().writeWordBigEndianA(i1); // interface
            getOutStream().writeWord(i2); // weapon id being drawn
            sendMessage("Frame 8 tested");
        }
    }

    public void frame64(int i1, int i2) // tested, found nothing, apparently something to do with dropped items
    {
        if(getOutStream() != null) {
            getOutStream().createFrame(64);
            getOutStream().writeByteS(i1);
            getOutStream().writeByteA(i2);
            sendMessage("Frame 64 tested");
        }
    }

    public void frame72(int i1) // logs you out :S
    {
        getOutStream().createFrame(72);
        getOutStream().writeWordBigEndian(i1);
        sendMessage("Frame 72 tested");
    }

    public void frame74(int i) {
        getOutStream().createFrame(74);
        getOutStream().writeWordBigEndian(i);
    }

    public void frame121(int i1, int i2) // MUSIC! this one used alot less often though :D
    {
        getOutStream().createFrame(121);
        getOutStream().writeWord(i1);
        getOutStream().writeByteS(i2);
        sendMessage("Frame 121 tested");
    }

    public void frame122(int i1, int i2) // colour changing on interface :O!
    {
        getOutStream().createFrame(122);
        getOutStream().writeWordBigEndianA(i1); // interface
        getOutStream().writeWordBigEndianA(i2); // colour stuff
        sendMessage("Frame 122 tested");
    }

    public void frame166(int i1, int i2, int i3, int i4, int i5) // CAMERA STUFF!!!!! 0 on all makes it lock on that place, make last over 100 to make it go black!! - sgsrocks
    {
        getOutStream().createFrame(166);
        getOutStream().writeByte(i1); // X coord where camera will end within the region
        getOutStream().writeByte(i2); // Y coord where camera will end within the region
        getOutStream().writeWord(i3); // the camera height where it will end
        getOutStream().writeByte(i4); // the camera moving speed
        getOutStream().writeByte(i5); // if this goes above 100 it does something? :O
        sendMessage("Testing Camera Angle");
    }

    public void frame177(int i1, int i2, int i3, int i4, int i5) // similar to 166, a good combo: f177 041 033 014 011 005 - sgsrocks
    {
        getOutStream().createFrame(177);
        getOutStream().writeByte(i1); // X coord within the region middle of your screen will view to
        getOutStream().writeByte(i2); // Y coord within the region middle of your screen will view to
        getOutStream().writeWord(i3); // the height it will be viewing to
        getOutStream().writeByte(i4); // the camera speed? movement? dunno yet
        getOutStream().writeByte(i5); // if this goes above 100 it does something? :O
        // sendMessage("Frame 177 tested");
    }

    public void frame70(int i1, int i2, int i3) // interface thing, not sure
    {
        getOutStream().createFrame(70); // THIS FRAME IS FOR SPECIAL ATTACK BAR MOFOS!
        getOutStream().writeWord(i1); // offset X
        getOutStream().writeWordBigEndian(i2); // offset Y
        getOutStream().writeWordBigEndian(i3); // interface, definatly.
        sendMessage("Frame 70 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void framevar70(int i1, int i2, int i3) // no idea
    {
        getOutStream().createFrameVarSize(70);
        getOutStream().writeWord(i1);
        getOutStream().writeWordBigEndian(i2);
        getOutStream().writeWordBigEndian(i3);
        sendMessage("Framevar 70 tested");
    }

    public void frame240(int i1) // doesn't logout so it's valid, but doesn't do anything hmm?
    {
        getOutStream().createFrame(240);
        getOutStream().writeWord(i1);
        sendMessage("Frame 240 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame110(int i1) // doesn't logout so it's valid, but doesn't do anything hmm? Also the sidebar select stuff is used
    {
        getOutStream().createFrame(110);
        getOutStream().writeByte(i1);
        sendMessage("Frame 110 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame106(int i1) // changes selected sidebar!
    {
        getOutStream().createFrame(106);
        getOutStream().writeByteC(i1);
        sendMessage("Frame 106 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame24(int i1) // Xero: flashes sidebar tab icons!, i1 must be 0 to -12 to work ;) make a command to test em out
    {
        getOutStream().createFrame(24);
        getOutStream().writeByteA(i1);
        sendMessage("Frame 24 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame142(int i1) // FINALLY FOUND: using ::f142 makes all disappear, similar to frame 248 except it doesn't show a normal interface - xero
    {
        getOutStream().createFrame(142);
        getOutStream().writeWordBigEndian(i1);
        sendMessage("Frame 142 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame142d(int i1) {
        getOutStream().createFrame(142);
        getOutStream().writeWordBigEndian_dup(i1);
        sendMessage("Frame 142d tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame254(int i1, int i2, int i3, int i4, int i5) {
        getOutStream().createFrame(254);
        getOutStream().writeByte(i1);
        if (i1 == 1) {
            getOutStream().writeWord(i2);
        }
        if (i1 >= 2 && i1 <= 6) {
            getOutStream().writeWord(i3);
            getOutStream().writeWord(i4);
            getOutStream().writeByte(i5);
        }
        if (i1 == 10) {
            getOutStream().writeWord(i2);
        }
        sendMessage("Frame 254 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame254skull(int i1, int i2) {
        getOutStream().createFrame(254);
        getOutStream().writeByte(i1);
        getOutStream().writeWord(i2);
    }

    public void frame35(int i1, int i2, int i3, int i4) // earthquake
    {
        getOutStream().createFrame(35);
        getOutStream().writeByte(i1);
        getOutStream().writeByte(i2);
        getOutStream().writeByte(i3);
        getOutStream().writeByte(i4);
        sendMessage("Frame 35 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    /*
     WOODCUTTING
     [0] = woodcutting
     [1] = Level
     [2] = Exp
     [3] = Exp Rate
     [4] = Item
     [5] = Distance

     FLETCHING
     [0] = fletching
     [1] = Level
     [2] = Exp
     [3] = Exp Rate
     [4] = Item
     [5] = Asking
     [6] = Make

     MINING
     [0] = mining
     [1] = Level
     [2] = Exp
     [3] = Exp Rate
     [4] = Item

     SMELTING
     [0] = smelting
     [1] = Level
     [2] = Exp
     [3] = Item
     [4] = What
     [5] = What Slot
     [6] = Del Coal

     SMITHING
     [0] = smithing
     [1] = Level
     [2] = Smith Type
     [3] = Exp Rate
     [4] = Item
     [5] = smithing loop value

     USEITEMS
     [0] = use id
     [1] = used on id
     [2] = used on slot
     [3] = use slot

     CRAFTING
     [0] = crafting
     [1] = Level
     [2] = Exp
     [3] = Exp Rate
     [4] = Item

     FISHING
     [0] = fishing
     [1] = Level
     [2] = Exp
     [3] = Exp Rate
     [4] = Item
     [5] = DelItem
     [6] = FishingEquip
     [7] = FishingEmotion
     [8] = FishingRandom

     PRAYER
     [0] = prayer
     [1] = Level (always 1)
     [2] = Exp
     [3] = Exp Rate
     [4] = DelItem
     [5] = DelItemSlot

     COOKING
     [0] = cooking
     [1] = Level
     [2] = Exp
     [3] = Exp Rate
     [4] = Item
     [5] = UsedItem
     [6] = BurnedItem

     HEALING
     [0] = healing
     [1] = MinHealth
     [2] = MaxHealth
     [3] = Item
     [4] = UsedItem
     */

    public void frame230(int i1, int i2, int i3, int i4) // i2 being negative logs you out, otherwise it doesn't log you out :O
    {
        if(getOutStream() != null) {
            getOutStream().createFrame(230);
            getOutStream().writeWordA(i1);
            getOutStream().writeWord(i2); // interface id?
            getOutStream().writeWord(i3);
            getOutStream().writeWordBigEndianA(i4);
        }// junk? not sure
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame114(int i1) // system update
    {
        getOutStream().createFrame(114);
        getOutStream().writeWordBigEndian(i1);
        sendMessage("Frame 114 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void sendSound(int id, int volume, int delay) // another thing, tested doesn't logout, looks like something to do with music
    {
        if(id == -1){
            return;
        }
        if(getOutStream() != null) {
            getOutStream().createFrame(174);
            getOutStream().writeWord(id);
            getOutStream().writeWord(delay);
            getOutStream().writeByte(volume);
        }
        // sendMessage("Frame 174 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame246(int i1, int i2, int i3) // doesn't kick you, so it's right, but doesn't do anything?
    {
        getOutStream().createFrame(246);
        getOutStream().writeWordBigEndian(i1);
        getOutStream().writeWord(i2);
        getOutStream().writeWord(i3);
        flushOutStream();
        sendMessage("Frame 246 tested");
    }

    public void frame171(int i1, int i2) {
        getOutStream().createFrame(171);
        getOutStream().writeByte(i1);
        getOutStream().writeWord(i2);
        flushOutStream();
        sendMessage("Frame 171 tested");
    }

    public void frame99(int i1) // makes minimap nonclickable et!!! 0 = unlock  2 = black above 2 = locked - sgsrocks
    {
        getOutStream().createFrame(99);
        getOutStream().writeByte(i1);
        // sendMessage("Frame 99 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame218(int i1) // writes interface over chat, 1 shows all sendmessage stuff lolz
    {
        getOutStream().createFrame(218);
        getOutStream().writeWordBigEndianA(i1);
        sendMessage("Frame 218 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame61(int i1) // resets head icons, shame 317 head icons are fucked.
    {
        getOutStream().createFrame(61);
        getOutStream().writeByte(i1);
        sendMessage("Frame 61 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame87(int i1, int i2) // can't go into 7500+ hmm - links with 36
    {
        getOutStream().createFrame(87);
        getOutStream().writeWordBigEndian(i1);
        getOutStream().writeDWord_v2(i2);
        sendMessage("Frame 87 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame36(int i1, int i2) // can't go into 7500+ hmm - links with 87
    {
        getOutStream().createFrame(36);
        getOutStream().writeWordBigEndian(i1);
        getOutStream().writeByte(i2);
        sendMessage("Frame 36 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame214(long i1) // replaces every name on the ignore list with the one sent to client :O
    {
        getOutStream().createFrame(214);
        getOutStream().writeQWord(i1);
        sendMessage("Frame 214 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame187() // loads enter name interface
    {
        getOutStream().createFrame(187);
        sendMessage("Frame 187 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame27() // loads enter amount interface
    {
        getOutStream().createFrame(27);
        sendMessage("Frame 27 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame65() // npc updating frame ;)
    {
        getOutStream().createFrame(65);
        sendMessage("Frame 65 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame68() // turns split private chat off
    {
        getOutStream().createFrame(68);
        sendMessage("Frame 68 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame78() // tested, not a fucking clue =\
    {
        getOutStream().createFrame(78);
        sendMessage("Frame 78 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame81() // player updating r0fl
    {
        getOutStream().createFrame(81);
        sendMessage("Frame 81 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame1() // cancels all player and npc emotes within area!
    {
        getOutStream().createFrame(1);
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame160(int i1, int i2, int i3) // objects according to whitefang, dunno what though hmm
    {
        getOutStream().createFrame(85);
        getOutStream().writeByteC(currentY & ~7); // packetTileCoordY
        getOutStream().writeByteC(currentX & ~7); // packetTileCoordX
        getOutStream().createFrame(160);
        getOutStream().writeByteA(i1);
        getOutStream().writeByteA(i2);
        getOutStream().writeWordA(i3);
        updateRequired = true;
        appearanceUpdateRequired = true;
        sendMessage("Frame 160 tested");
    }

    public void frame117(int i1, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11) // moving graphics
    {
        getOutStream().createFrame(85);
        getOutStream().writeByteC(currentY & ~7); // packetTileCoordY
        getOutStream().writeByteC(currentX & ~7); // packetTileCoordX
        getOutStream().createFrame(117);
        getOutStream().writeByte(i1);
        getOutStream().writeByte(i2);
        getOutStream().writeByte(i3);
        getOutStream().writeWord(i4);
        getOutStream().writeWord(i5);
        getOutStream().writeByte(i6);
        getOutStream().writeByte(i7);
        getOutStream().writeWord(i8);
        getOutStream().writeWord(i9);
        getOutStream().writeByte(i10);
        getOutStream().writeByte(i11);
        sendMessage("Frame 117 tested");
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void frame105(int v1, int v2, int v3) {
        getOutStream().createFrame(85);
        getOutStream().writeByteC(currentY & ~7); // packetTileCoordY
        getOutStream().writeByteC(currentX & ~7); // packetTileCoordX
        getOutStream().createFrame(105);
        getOutStream().writeByte(v1);
        getOutStream().writeWord(v2); // array packet
        getOutStream().writeByte(v3);
        sendMessage("Frame 105 tested");
    }

    public void frame105_60(int v1, int v2, int v3) {
        getOutStream().createFrameVarSizeWord(60);
        getOutStream().writeByte(105);
        getOutStream().writeByte(v1);
        getOutStream().writeWord(v2); // array packet
        getOutStream().writeByte(v3);
        getOutStream().endFrameVarSizeWord();
        sendMessage("Frame 105 (60) tested");
    }

    public void frame44(int i1, int i2, int i3) {
        getOutStream().createFrame(85);
        getOutStream().writeByteC(currentY & ~7); // packetTileCoordY
        getOutStream().writeByteC(currentX & ~7); // packetTileCoordX
        getOutStream().createFrame(44);
        getOutStream().writeWordBigEndianA(i1);
        getOutStream().writeWord(i2);
        getOutStream().writeByte(i3);
        sendMessage("Frame 44 tested");
    }

    public void frame44_60(int i1, int i2, int i3) {
        getOutStream().createFrameVarSizeWord(60);
        getOutStream().writeByte(44);
        getOutStream().writeWordBigEndianA(i1);
        getOutStream().writeWord(i2);
        getOutStream().writeByte(i3);
        getOutStream().endFrameVarSizeWord();
        sendMessage("Frame 44 (60) tested");
    }

    public void Teleblock() {
        teleblock = true;
        sendMessage("A teleblock has been cast on you!");
        stillgfx(345, absY, absX);
    }

    public void ResetProtPrayers() {
        ProtMage = false;
        ProtRange = false;
        ProtMelee = false;
        Str1 = false;
        Str2 = false;
        Str3 = false;
        Skin = false;
        Rock = false;
        Steel = false;
        Clarity = false;
        Reflex2 = false;
        Reflex3 = false;
        ProtItem = false;
        RapidRestore = false;
        RapidHeal = false;
        Retribution = false;
        Redemption = false;
    }

    public void newdrain() // this makes it so when the player activates a new prayer if the new drain rate is faster it uses that one ;)
    {
        int OldDrain = PrayerDrain;

        if (NewDrain > OldDrain && !Noprayer) {
            PrayerDrain = OldDrain;
        } else if (NewDrain <= OldDrain || Noprayer) {
            PrayerDrain = NewDrain;
        }
    }

    public void setSetting(int settingID, int value) { // Xero: Yay I'm second, thx to Phate for helping
        getOutStream().createFrame(36);
        getOutStream().writeWordBigEndian(settingID);
        getOutStream().writeByte(value);
    }

    public void levelup(int skill) {
        switch (skill) {
            case 0: // Attack levelup
                // NpcDialogue = 13445;
                sendFrame164(6247);
                stillgfx(199, absX, absY);
                sendFrame126("Congratulations, you just advanced an attack level!",
                        6248);
                sendFrame126("Your attack level is now " + playerLevel[0] + " .",
                        6249);
                sendMessage("Congratulations, you just advanced an attack level.");
                NpcDialogueSend = true;
                //nextDialogue(13446);
                if (playerLevel[0] >= 99) {
                    addItem(9747, 1);
                    addItem(9748, 1);
                    addItem(9749, 1);
                    sendMessage(
                            "Congratulations, you just recived Attack skill capes and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[0] + " attack!");
                }
                break;

            case 1: // Strength
                sendFrame164(6206);
                // NpcDialogue = 13445;
                stillgfx(199, absX, absY);
                sendFrame126("Congratulations, you just advanced a strength level!",
                        6207);
                sendFrame126("Your strength level is now " + playerLevel[2] + " .",
                        6208);
                sendMessage("Congratulations, you just advanced a strength level.");
                NpcDialogueSend = true;
                //nextDialogue(13446);
                if (playerLevel[2] >= 99) {
                    addItem(9750, 1);
                    addItem(9751, 1);
                    addItem(9752, 1);
                    sendMessage(
                            "Congratulations, you just recived Strength skill capes and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[2] + " strength!");
                }
                break;

            case 2: // Defence
                sendFrame164(6253);
                // NpcDialogue = 13445;
                stillgfx(199, absX, absY);
                sendFrame126("Congratulations, you just advanced a defence level!",
                        6254);
                sendFrame126("Your defence level is now " + playerLevel[1] + " .",
                        6255);
                sendMessage("Congratulations, you just advanced a defence level.");
                NpcDialogueSend = true;
                //nextDialogue(13446);
                if (playerLevel[1] >= 99) {
                    addItem(9753, 1);
                    addItem(9754, 1);
                    addItem(9755, 1);
                    sendMessage(
                            "Congratulations, you just recived the Defence skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[2] + " defence!");
                }
                break;

            case 3: // Hitpoints
                sendFrame164(6216);
                // NpcDialogue = 13445;
                stillgfx(199, absX, absY);
                sendFrame126("Congratulations, you just advanced a hitpoints level!",
                        6217);
                sendFrame126("Your hitpoints level is now " + playerLevel[3] + " .",
                        6218);
                sendMessage("Congratulations, you just advanced a hitpoints level.");
                NpcDialogueSend = true;
                //nextDialogue(13446);
                if (playerLevel[3] >= 99) {
                    addItem(9768, 1);
                    addItem(9769, 1);
                    addItem(9770, 1);
                    sendMessage(
                            "Congratulations, you just recived Hitpoints skill capes and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[3] + " hitpoints!");
                }
                break;

            case 4: // Ranging
                sendFrame164(4443);
                // NpcDialogue = 13445;
                stillgfx(199, absX, absY);
                sendFrame126("Congratulations, you just advanced a ranged level!", 4444);
                sendFrame126("Your ranged level is now " + playerLevel[4] + " .", 4445);
                sendMessage("Congratulations, you just advanced a ranging level.");
                NpcDialogueSend = true;
                //nextDialogue(13446);
                if (playerLevel[4] >= 99) {
                    addItem(9756, 1);
                    addItem(9757, 1);
                    addItem(9758, 1);
                    sendMessage(
                            "Congratulations, you just recived the Range skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[4] + " ranged!");
                }
                break;

            case 5: // Prayer
                sendFrame164(6242);
                stillgfx(199, absX, absY);
                // NpcDialogue = 13445;
                sendFrame126("Congratulations, you just advanced a prayer level!", 6243);
                sendFrame126("Your prayer level is now " + playerLevel[5] + " .", 6244);
                sendMessage("Congratulations, you just advanced a prayer level.");
                NpcDialogueSend = true;
                //nextDialogue(13446);
                if (playerLevel[5] >= 99) {
                    addItem(9759, 1);
                    addItem(9760, 1);
                    addItem(9761, 1);
                    sendMessage(
                            "Congratulations, you just recived the Prayer skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[5] + " prayer!");
                }
                break;

            case 6: // Magic
                sendFrame164(6211);
                stillgfx(199, absX, absY);
                // NpcDialogue = 13445;
                sendFrame126("Congratulations, you just advanced a magic level!",
                        6212);
                sendFrame126("Your magic level is now " + playerLevel[6] + " .",
                        6213);
                sendMessage("Congratulations, you just advanced a magic level.");
                NpcDialogueSend = true;
                //nextDialogue(13446);
                if (playerLevel[6] >= 99) {
                    addItem(9762, 1);
                    addItem(9763, 1);
                    addItem(9764, 1);
                    sendMessage(
                            "Congratulations, you just recived the Magic skill cape and hood");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[6] + " magic!");
                }
                break;

            case 7: // Cooking
                // sendFrame164(6226);
                // sendFrame126("Congratulations, you just advanced a cooking level!", 6227);
                // sendFrame126("Your cooking level is now "+playerLevel[7]+" .", 6228);
                sendMessage("Congratulations, you just advanced a cooking level.");
                //                 NpcDialogueSend = true;
                //   setNext = 0;
                if (playerLevel[7] >= 99) {
                    addItem(9801, 1);
                    addItem(9802, 1);
                    addItem(9803, 1);
                    sendMessage(
                            "Congratulations, you just recived the cooking skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[7] + " cooking!");
                }
                break;

            case 8: // Woodcutting
                // sendFrame164(4272);
                // sendFrame126("Congratulations, you just advanced a woodcutting level!", 4273);
                // sendFrame126("Your woodcutitng level is now "+playerLevel[8]+" .", 4274);
                sendMessage(
                        "Congratulations, you just advanced a woodcutting level.");
                //                 NpcDialogueSend = true;
                //   setNext = 0;
                if (playerLevel[8] >= 99) {
                    addItem(9807, 1);
                    addItem(9808, 1);
                    addItem(9809, 1);
                    sendMessage(
                            "Congratulations, you just recived the woodcutting skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[8] + " woodcutting!");
                }
                break;

            case 9: // Fletching
                // sendFrame164(6231);
                // sendFrame126("Congratulations, you just advanced a fletching level!", 6232);
                // sendFrame126("Your fletching level is now "+playerLevel[9]+" .", 6233);
                sendMessage("Congratulations, you just advanced a fletching level.");
                //                 NpcDialogueSend = true;
                //    setNext = 0;
                if (playerLevel[9] >= 99) {
                    addItem(9783, 1);
                    addItem(9784, 1);
                    addItem(9785, 1);
                    sendMessage(
                            "Congratulations, you just recived the fletching skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[9] + " fletching!");
                }
                break;

            case 10: // fishing
                // sendFrame164(6258);
                // sendFrame126("Congratulations, you just advanced a fishing level!", 6259);
                // sendFrame126("Your fishing level is now "+playerLevel[10]+" .", 6260);
                sendMessage("Congratulations, you just advanced a fishing level.");
                //                 NpcDialogueSend = true;
                //   setNext = 0;
                if (playerLevel[10] >= 99) {
                    addItem(9798, 1);
                    addItem(9799, 1);
                    addItem(9800, 1);
                    sendMessage(
                            "Congratulations, you just recived the fishing skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[10] + " fishing!");
                }
                break;

            case 11: // firemaking
                sendFrame164(4282);
                sendFrame200(4286, 475);
                sendFrame126("Congratulations, you just advanced a fire making level!", 4283);
                sendFrame126("Your firemaking level is now "+playerLevel[11]+" .", 4284);
                sendMessage(
                        "Congratulations, you just advanced a fire making level.");
                //                 NpcDialogueSend = true;
                //   setNext = 0;
                if (playerLevel[11] >= 99) {
                    addItem(9804, 1);
                    addItem(9805, 1);
                    addItem(9806, 1);
                    sendMessage(
                            "Congratulations, you just recived the firemaking skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[11] + " firemaking!");
                }
                break;

            case 12: // crafting
                // sendFrame164(6263);
                // sendFrame126("Congratulations, you just advanced a crafting level!", 6264);
                // sendFrame126("Your crafting level is now "+playerLevel[12]+" .", 6265);
                sendMessage("Congratulations, you just advanced a crafting level.");
                //                 NpcDialogueSend = true;
                //   setNext = 0;
                if (playerLevel[12] >= 99) {
                    addItem(9780, 1);
                    addItem(9781, 1);
                    addItem(9782, 1);
                    sendMessage(
                            "Congratulations, you just recived the crafting skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[12] + " crafting!");
                }
                break;

            case 13: // Smithing
                // sendFrame164(6221);
                // sendFrame126("Congratulations, you just advanced a smithing level!", 6222);
                // sendFrame126("Your smithing level is now "+playerLevel[13]+" .", 6223);
                sendMessage("Congratulations, you just advanced a smithing level.");
                //                 NpcDialogueSend = true;
                //  setNext = 0;
                if (playerLevel[13] >= 99) {
                    addItem(9795, 1);
                    addItem(9796, 1);
                    addItem(9797, 1);
                    sendMessage(
                            "Congratulations, you just recived the smithing skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[13] + " smithing!");
                }
                break;

            case 14: // Mining
                // sendFrame164(4416);
                // sendFrame126("Congratulations, you just advanced a mining level!", 4417);
                // sendFrame126("Your mining level is now "+playerLevel[14]+" .", 4418);
                sendMessage("Congratulations, you just advanced a mining level.");
                //                 NpcDialogueSend = true;
                //   setNext = 0;
                if (playerLevel[14] >= 99) {
                    addItem(9792, 1);
                    addItem(9793, 1);
                    addItem(9794, 1);
                    sendMessage(
                            "Congratulations, you just recived the mining skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[14] + " mining!");
                }
                break;

            case 15: // Herblore
                // sendFrame164(6237);
                // sendFrame126("Congratulations, you just advanced a herblore level!", 4417);
                // sendFrame126("Your herblore level is now "+playerLevel[15]+" .", 4418);
                sendMessage("Congratulations, you just advanced a herblore level.");
                //                 NpcDialogueSend = true;
                //      setNext = 0;
                if (playerLevel[15] >= 99) {
                    addItem(9774, 1);
                    addItem(9775, 1);
                    addItem(9776, 1);
                    sendMessage(
                            "Congratulations, you just recived the herblore skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[15] + " herblore!");
                }
                break;

            case 16: // Agility
                // sendFrame164(4277);
                // sendFrame126("Congratulations, you just advanced a agility level!", 4278);
                // sendFrame126("Your agility level is now "+playerLevel[16]+" .", 4279);
                sendMessage("Congratulations, you just advanced an agility level.");
                //                 NpcDialogueSend = true;
                //   setNext = 0;
                if (playerLevel[16] >= 99) {
                    addItem(9771, 1);
                    addItem(9772, 1);
                    addItem(9773, 1);
                    sendMessage(
                            "Congratulations, you just recived the agility skillcape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[16] + " agility!");
                }
                break;

            case 17: // Thieving
                // sendFrame164(4261);
                // sendFrame126("Congratulations, you just advanced a thieving level!", 6262);
                // sendFrame126("Your theiving level is now "+playerLevel[17]+" .", 6263);
                sendMessage("Congratulations, you just advanced a thieving level.");
                //                 NpcDialogueSend = true;
                //   setNext = 0;
                if (playerLevel[17] >= 99) {
                    addItem(9777, 1);
                    addItem(9778, 1);
                    addItem(9779, 1);
                    sendMessage(
                            "Congratulations, you just recived the Thieveing skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[17] + " thieveing!");
                }
                break;

            case 18: // Slayer
                sendFrame164(12122);
                sendFrame126("Congratulations, you just advanced a slayer level!", 12123);
                sendFrame126("Your slayer level is now "+playerLevel[18]+" .", 12124);
                sendMessage("Congratulations, you just advanced a slayer level.");
                //                 NpcDialogueSend = true;
                //  setNext = 0;
                if (playerLevel[18] >= 99) {
                    addItem(9786, 1);
                    addItem(9787, 1);
                    addItem(9788, 1);
                    sendMessage(
                            "Congratulations, you just recived the Slayer skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[18] + " Slayer!");
                }
                break;

            case 19: // Farming
                // sendFrame164(4261);
                // sendFrame126("Congratulations, you just advanced a farming level!", 6207);
                // sendFrame126("Your farming level is now "+playerLevel[19]+" .", 6208);
                sendMessage("Congratulations, you just advanced a farming level.");
                //                 NpcDialogueSend = true;
                // setNext = 0;
                if (playerLevel[19] >= 99) {
                    addItem(9810, 1);
                    addItem(9811, 1);
                    addItem(9812, 1);
                    sendMessage(
                            "Congratulations, you just recived the Farming skill cape and hood!");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[19] + " Farming!");
                }
                break;

            case 20: // Runecrafting
                // sendFrame164(4267);
                // sendFrame126("Congratulations, you just advanced a runecrafting level!", 4268);
                // sendFrame126("Your runecrafting level is now "+playerLevel[20]+" .", 4269);
                sendMessage(
                        "Congratulations, you just advanced a runecrafting level.");
                //                 NpcDialogueSend = true;
                // setNext = 0;
                if (playerLevel[20] >= 99) {
                    addItem(9765, 1);
                    addItem(9766, 1);
                    addItem(9767, 1);
                    sendMessage(
                            "Congratulations, you just recived the runecrafting skill cape and hood");
                    PlayerHandler.messageToAll = (playerName + " has just gotten "
                            + playerLevel[20] + " runecrafting!");
                }
                break;

        }
    }

    public void attackPlayersWithin(int gfx, int maxDamage, int range) {
        for (Player p : PlayerHandler.players) {
            if (p != null) {
                client person = (client) p;

                if ((person.playerName != null || person.playerName != "null")) {
                    if (person.distanceToPoint(absX, absY) <= range
                            && person.playerId != playerId && !person.nonWild()) {
                        int damage = misc.random(maxDamage);

                        person.stillgfx(gfx, person.absY, person.absX);
                        if (person.playerLevel[3] - hitDiff < 0) {
                            damage = person.playerLevel[3];
                        }
                        person.hitDiff = damage;
                        person.KillerId = playerId;
                        person.updateRequired = true;
                        person.hitUpdateRequired = true;
                    }
                }
            }
        }
    }

    public void attackNPCSWithin(int gfx, int maxDamage, int range) {
        for (int i = 0; i <= NPCHandler.maxNPCs; i++) {
            if (NPCHandler.npcs[i] != null) {
                if (distanceToPoint(NPCHandler.npcs[i].absX,
                        NPCHandler.npcs[i].absY)
                        <= range
                        && !NPCHandler.npcs[i].IsDead
                        && NPCHandler.npcs[i].HP != 1000
                        && npcId != 2475
                        && npcId != 2259) {
                    int damage = misc.random(maxDamage);

                    stillgfx(gfx, NPCHandler.npcs[i].absY,
                            NPCHandler.npcs[i].absX);
                    if (NPCHandler.npcs[i].HP - hitDiff < 0) {
                        damage = NPCHandler.npcs[i].HP;
                    }
                    hitDiff = damage;
                    NPCHandler.npcs[i].StartKilling = playerId;
                    NPCHandler.npcs[i].RandomWalk = false;
                    NPCHandler.npcs[i].IsUnderAttack = true;
                    NPCHandler.npcs[i].hitDiff = damage;
                    NPCHandler.npcs[i].updateRequired = true;
                    NPCHandler.npcs[i].hitUpdateRequired = true;
                }
            }
        }
    }

    public void playerGfx(int id, int delay) {
        mask100var1 = id;
        mask100var2 = delay;
        gfxUpdateRequired = true;
        updateRequired = true;
    }

    public void stillgfxz(int id, int Y, int X, int height, int time) {
        for (Player p : PlayerHandler.players) {
            if (p != null) {
                client person = (client) p;

                if ((person.playerName != null || person.playerName != "null")) {
                    if (person.distanceToPoint(X, Y) <= 60) {
                        person.stillgfxz2(id, Y, X, height, time);
                    }
                }
            }
        }
    }

    public void stillgfxz2(int id, int Y, int X, int height, int time) {
        if(getOutStream() != null) {
            getOutStream().createFrame(85);
            getOutStream().writeByteC(Y - (mapRegionY * 8));
            getOutStream().writeByteC(X - (mapRegionX * 8));
            getOutStream().createFrame(4);
            getOutStream().writeByte(0); // Tiles away (X >> 4 + Y & 7)
            getOutStream().writeWord(id); // Graphic id
            getOutStream().writeByte(height); // height of the spell above it's basic place, i think it's written in pixels 100 pixels higher
            getOutStream().writeWord(time); // Time before casting the graphic
        }
    }

    public void stillgfxz3(int id, int Y, int X, int height, int time, int Face) {
        int EnemyX2 = PlayerHandler.players[AttackingOn].absX;
        int EnemyY2 = PlayerHandler.players[AttackingOn].absY;

        getOutStream().createFrame(85);
        getOutStream().writeByteC(Y - (mapRegionY * 8));
        getOutStream().writeByteC(X - (mapRegionX * 8));
        getOutStream().createFrame(4);
        getOutStream().writeByte(0); // Tiles away (X >> 4 + Y & 7)
        getOutStream().writeWord(id); // Graphic id
        getOutStream().writeByte(height); // height of the spell above it's basic place, i think it's written in pixels 100 pixels higher
        getOutStream().writeWord(time); // Time before casting the graphic
        getOutStream().writeByte(151);
        getOutStream().writeByteA(Face); // 0= WEST | -1 = NORTH | -2 = EAST | -3 = SOUTH
    }

    public void stillgfx(int id, int Y, int X) {
        for (Player p : PlayerHandler.players) {
            if (p != null) {
                client person = (client) p;

                if ((person.playerName != null || person.playerName != "null")) {
                    if (person.distanceToPoint(X, Y) <= 60) {
                        person.stillgfx2(id, Y, X);
                    }
                }
            }
        }
    }

    public void stillgfx2(int id, int Y, int X) {
        if(getOutStream() != null) {
            getOutStream().createFrame(85);
            getOutStream().writeByteC(Y - (mapRegionY * 8));
            getOutStream().writeByteC(X - (mapRegionX * 8));
            getOutStream().createFrame(4);
            getOutStream().writeByte(0); // Tiles away (X >> 4 + Y & 7)
            getOutStream().writeWord(id); // Graphic id
            getOutStream().writeByte(0); // height of the spell above it's basic place, i think it's written in pixels 100 pixels higher
            getOutStream().writeWord(0); // Time before casting the graphic
        }
        }

    public void stillgfxx(int id, int Y, int X) {
        getOutStream().createFrame(85);
        getOutStream().writeByteC(Y - (mapRegionY * 8));
        getOutStream().writeByteC(X - (mapRegionX * 8));
        getOutStream().createFrame(4);
        getOutStream().writeByte(0); // Tiles away (X >> 4 + Y & 7)
        getOutStream().writeWord(id); // Graphic id
        getOutStream().writeByte(100); // height of the spell above it's basic place, i think it's written in pixels 100 pixels higher
        getOutStream().writeWord(5); // Time before casting the graphic
    }

    public void multiTargetGfx(int id, int targetY, int targetX) {
        for (Player p : PlayerHandler.players) {
            if (p != null) {
                client person = (client) p;

                if ((person.playerName != null || person.playerName != "null")) {
                    if (person.distanceToPoint(targetX, targetY) <= 60) {
                        person.stillgfx2(id, person.absY, person.absX);
                    }
                }
            }
        }
    }

    public boolean firespell(int castID, int casterY, int casterX, int offsetY, int offsetX, int angle, int speed, int movegfxID, int startHeight, int endHeight, int finishID, int enemyY, int enemyX, int Lockon) {
        fcastid = castID;
        fcasterY = casterY;
        fcasterX = casterX;
        foffsetY = offsetY;
        foffsetX = offsetX;
        fangle = angle;
        fspeed = speed;
        fmgfxid = movegfxID;
        fsh = startHeight;
        feh = endHeight;
        ffinishid = finishID;
        fenemyY = enemyY;
        fenemyX = enemyX;
        fLockon = Lockon;

        actionTimer = 0;

        // Casts Spell In Hands
        if (!cast && actionTimer <= 0) {
            stillgfxz(castID, casterY, casterX, 100, 0);
            cast = true;
            firingspell = true;
        }
        // Fires Projectile
        if (cast && !fired && actionTimer <= 0) {
            createProjectile(casterY, casterX, offsetY, offsetX, angle, speed,
                    movegfxID, startHeight, endHeight, Lockon);
            fired = true;
        }
        // Finishes Spell
        if (fired && actionTimer <= 0) {
            stillgfxz(finishID, enemyY, enemyX, 100, 95);
            resetGFX(castID, enemyX, enemyY);
            return false;
        }
        return true;
    }

    public void resetGFX(int id, int X, int Y) {
        GraphicsHandler.removeGFX(id, X, Y);
        firingspell = false;
        cast = false;
        fired = false;
    }

    /* public void createProjectile(int casterY, int casterX, int offsetY, int offsetX, int angle, int speed, int gfxMoving,
     int startHeight, int endHeight, int lockon) {
     getOutStream().createFrame(85);
     getOutStream().writeByteC((casterY - (mapRegionY * 8)) - 2);
     getOutStream().writeByteC((casterX - (mapRegionX * 8)) - 3);
     getOutStream().createFrame(117);
     getOutStream().writeByte(angle);                     //      Phate:  Angle? I think -- [wL] no, this defines the starting position of the missile
     getOutStream().writeByte(offsetY - (mapRegionX * 8));        //      Phate:  OffsetY in relevance from the first player -- [wL] in other words: this is the destination of the missile relative the starting position
     getOutStream().writeByte(offsetX - (mapRegionX * 8));        //      Phate:  OffsetX in relevance from the first player
     getOutStream().writeWord(lockon+1);                     //      Phate:  Projectile Speed -- [wL] the Npc/Player this missile is locked on (I called this missileLockedOn) - think of this as some sort of person-sensitive heat-seeking missile
     // if missileLockedOn>0, then it's an index into npcMasterList
     // if missileLockedOn<0, then it's an index into playerMasterList (playerMasterList[-missileLockedOn-1])
     getOutStream().writeWord(gfxMoving);         //      Phate:  Magic Moving Graphic ID
     getOutStream().writeByte(startHeight);       //      Phate:  Starting height
     getOutStream().writeByte(endHeight);         //      Phate:  Finishing height  -- [wL] ok, destination height
     getOutStream().writeWord(51);                        //      Phate:  No idea? -- [wL] the time the missile is created
     getOutStream().writeWord(speed);                     //      Phate:  Speed of Moving Magic  -- [wL] the time the missile is destroyed - this minus the former obviously defines the speed, given a fixed distance
     getOutStream().writeByte(16);                        //      Phate:  Something static? Doesnt change a lot.. -- [wL] initialSlope
     getOutStream().writeByte(64);                        //      Phate:  Type of shot possibly? All shoots seemed to be 64 -- [wL] initialDistanceFromSource (in the direction of the missile)
     }*/
    public void createProjectile(int casterY, int casterX, int offsetY, int offsetX, int angle, int speed, int gfxMoving,
                                 int startHeight, int endHeight, int MageAttackIndex) {
        if(getOutStream() != null) {
            getOutStream().createFrame(85);
            getOutStream().writeByteC((casterY - (mapRegionY * 8)) - 2);
            getOutStream().writeByteC((casterX - (mapRegionX * 8)) - 3);
            getOutStream().createFrame(117);
            getOutStream().writeByte(angle); // Starting place of the projectile
            getOutStream().writeByte(offsetY); // Distance between caster and enemy Y
            getOutStream().writeByte(offsetX); // Distance between caster and enemy X
            getOutStream().writeWord(MageAttackIndex); // The NPC the missle is locked on to
            getOutStream().writeWord(gfxMoving); // The moving graphic ID
            getOutStream().writeByte(startHeight); // The starting height
            getOutStream().writeByte(endHeight); // Destination height
            getOutStream().writeWord(51); // Time the missle is created
            getOutStream().writeWord(speed); // Speed minus the distance making it set
            getOutStream().writeByte(16); // Initial slope
            getOutStream().writeByte(64); // Initial distance from source (in the direction of the missile) //64
        }
        }

    public void createProjectilez(int casterY, int casterX, int offsetY, int offsetX, int angle, int speed, int gfxMoving,
                                  int startHeight, int endHeight, int Lockon, boolean MagingNPC) {
        getOutStream().createFrame(85);
        getOutStream().writeByteC(casterY - 2); // Phate:	seems to take a couple off?
        getOutStream().writeByteC(casterX - 3); // Phate:	seems to take 3 off?
        getOutStream().createFrame(117);
        getOutStream().writeByte(angle); // Phate:	Angle? I think
        getOutStream().writeByte(offsetX); // Phate:	OffsetY in relevance from the first player
        getOutStream().writeByte(offsetY); // Phate:	OffsetX in relevance from the first player
        if (MagingNPC) {
            getOutStream().writeWord(Lockon);
        } else {
            getOutStream().writeWord(-Lockon);
        }
        getOutStream().writeWord(gfxMoving); // Phate:	Magic Moving Graphic ID
        getOutStream().writeByte(startHeight); // Phate:	Starting height
        getOutStream().writeByte(endHeight); // Phate:	Finishing height
        getOutStream().writeWord(51); // Phate:	No idea?
        getOutStream().writeWord(speed); // Phate:	Speed of Moving Magic
        getOutStream().writeByte(16); // Phate:	Something static? Doesnt change a lot..
        getOutStream().writeByte(64); // Phate:	Type of shot possibly? All shoots seemed to be 64
        flushOutStream();
    }

    public void ProjectileSpell(int startID, int movingID, int finishID, int casterY, int casterX, int offsetY, int offsetX, int index, int enemyY, int enemyX, int maxDMG, int lvlReq, int rune1, int rune2, int rune1amount, int rune2amount) {
        if (playerLevel[6] < lvlReq) {
            sendMessage(
                    "You need a magic level of " + lvlReq
                            + " to cast this spell");
        } else if (playerLevel[6] >= -lvlReq) {
            if (!playerHasItemAmount(rune1, rune1amount)
                    && !playerHasItemAmount(rune2, rune2amount)) {
                sendMessage("You do not have enough runes to cast that spell.");
            } else /* if(playerHasItemAmount(rune1, rune1amount) && playerHasItemAmount(rune2, rune2amount))*/ {
                // GraphicsHandler.createSpell(startID, casterY, casterX, offsetY, offsetX, 50, 95, movingID, 43, 31, finishID, enemyY, enemyX, index+1);
                teleportToX = absX;
                teleportToY = absY;
                hitDiff = misc.random(maxDMG);
                int mageXP = (hitDiff * 4);

                addSkillXP(mageXP, 6);

                setAnimation(711);
                deleteItem(rune1, getItemSlot(rune1), rune1amount);
                deleteItem(rune2, getItemSlot(rune2), rune2amount);
                // actionTimer = 4;
                GraphicsHandler.createSpell(startID, casterY, casterX, offsetY,
                        offsetX, 50, 95, movingID, 43, 31, finishID, enemyY,
                        enemyX, index + 1);
                if (NPCHandler.npcs[index].HP - hitDiff < 0) {
                    hitDiff = NPCHandler.npcs[index].HP;
                }

                addSkillXP(mageXP, 6);
                NPCHandler.npcs[index].hitDiff = hitDiff;
                NPCHandler.npcs[index].Killing[playerId] += hitDiff;
                NPCHandler.npcs[index].updateRequired = true;
                NPCHandler.npcs[index].hitUpdateRequired = true;
                // actionTimer = 4;
            }
        }
    }

    public void sendClan(String name, String message, String clan, int rights) {
        name = name.substring(0, 1).toUpperCase() + name.substring(1);
        message = message.substring(0, 1).toUpperCase() + message.substring(1);
        clan = clan.substring(0, 1).toUpperCase() + clan.substring(1);
        outStream.createFrameVarSizeWord(217);
        outStream.writeString(name);
        outStream.writeString(message);
        outStream.writeString(clan);
        outStream.writeWord(rights);
        outStream.endFrameVarSize();
    }
    public void ProjectileSpell(int startID, int movingID, int finishID, int casterY, int casterX, int offsetY, int offsetX, int index, int enemyY, int enemyX, int maxDMG, int lvlReq, int rune1, int rune2, int rune3, int rune1amount, int rune2amount, int rune3amount) {
        if (playerLevel[6] < lvlReq) {
            sendMessage(
                    "You need a magic level of " + lvlReq
                            + " to cast this spell");
        } else if (playerLevel[6] >= -lvlReq) {
            if (!playerHasItemAmount(rune1, rune1amount)
                    && !playerHasItemAmount(rune2, rune2amount)
                    && !playerHasItemAmount(rune3, rune3amount)) {
                sendMessage("You do not have enough runes to cast that spell.");
            } else /* if(playerHasItemAmount(rune1, rune1amount) && playerHasItemAmount(rune2, rune2amount) && playerHasItemAmount(rune3, rune3amount))*/ {
                // GraphicsHandler.createSpell(startID, casterY, casterX, offsetY, offsetX, 50, 95, movingID, 43, 31, finishID, enemyY, enemyX, index+1);
                hitDiff = misc.random(maxDMG);
                int mageXP = (hitDiff * 4);

                addSkillXP(mageXP, 6);

                setAnimation(711);
                deleteItem(rune1, getItemSlot(rune1), rune1amount);
                deleteItem(rune2, getItemSlot(rune2), rune2amount);
                deleteItem(rune3, getItemSlot(rune3), rune3amount);
                // actionTimer = 4;
                GraphicsHandler.createSpell(startID, casterY, casterX, offsetY,
                        offsetX, 50, 95, movingID, 43, 31, finishID, enemyY,
                        enemyX, index + 1);
                if (NPCHandler.npcs[index].HP - hitDiff < 0) {
                    hitDiff = NPCHandler.npcs[index].HP;
                }

                addSkillXP(mageXP, 6);
                NPCHandler.npcs[index].hitDiff = hitDiff;
                NPCHandler.npcs[index].Killing[playerId] += hitDiff;
                NPCHandler.npcs[index].updateRequired = true;
                NPCHandler.npcs[index].hitUpdateRequired = true;
                // actionTimer = 4;
            }
        }
    }

    public void ProjectileSpellPlayer(int startID, int movingID, int finishID, int casterY, int casterX, int offsetY, int offsetX, int index, int enemyY, int enemyX, int maxDMG, int lvlReq, int rune1, int rune2, int rune1amount, int rune2amount) {
        if (playerLevel[6] < lvlReq) {
            sendMessage(
                    "You need a magic level of " + lvlReq
                            + " to cast this spell");
        } else if (playerLevel[6] >= -lvlReq) {
            if (!playerHasItemAmount(rune1, rune1amount)
                    && !playerHasItemAmount(rune2, rune2amount)) {
                sendMessage("You do not have enough runes to cast that spell.");
            } else /* if(playerHasItemAmount(rune1, rune1amount) && playerHasItemAmount(rune2, rune2amount))*/ {
                // GraphicsHandler.createSpell(startID, casterY, casterX, offsetY, offsetX, 50, 95, movingID, 43, 31, finishID, enemyY, enemyX, index+1);
                teleportToX = absX;
                teleportToY = absY;
                hitDiff = misc.random(maxDMG);
                int mageXP = (hitDiff * 4);

                addSkillXP(mageXP, 6);
                if (PlayerHandler.players[index].playerLevel[3] - hitDiff
                        < 0) {
                    hitDiff = PlayerHandler.players[index].playerLevel[3];
                }

                PlayerHandler.players[index].hitDiff = hitDiff;
                PlayerHandler.players[index].updateRequired = true;
                PlayerHandler.players[index].hitUpdateRequired = true;
                setAnimation(711);
                deleteItem(rune1, getItemSlot(rune1), rune1amount);
                deleteItem(rune2, getItemSlot(rune2), rune2amount);
                actionTimer = 4;
                GraphicsHandler.createSpell(startID, casterY, casterX, offsetY,
                        offsetX, 50, 95, movingID, 43, 31, finishID, enemyY,
                        enemyX, -index);
            }
        }
    }

    public void ProjectileSpellPlayer(int startID, int movingID, int finishID, int casterY, int casterX, int offsetY, int offsetX, int index, int enemyY, int enemyX, int maxDMG, int lvlReq, int rune1, int rune2, int rune3, int rune1amount, int rune2amount, int rune3amount) {
        if (playerLevel[6] < lvlReq) {
            sendMessage(
                    "You need a magic level of " + lvlReq
                            + " to cast this spell");
        } else if (playerLevel[6] >= -lvlReq) {
            if (!playerHasItemAmount(rune1, rune1amount)
                    && !playerHasItemAmount(rune2, rune2amount)
                    && !playerHasItemAmount(rune3, rune3amount)) {
                sendMessage("You do not have enough runes to cast that spell.");
            } else /* if(playerHasItemAmount(rune1, rune1amount) && playerHasItemAmount(rune2, rune2amount) && playerHasItemAmount(rune3, rune3amount))*/ {
                // GraphicsHandler.createSpell(startID, casterY, casterX, offsetY, offsetX, 50, 95, movingID, 43, 31, finishID, enemyY, enemyX, 0 - index);
                hitDiff = misc.random(maxDMG);
                int mageXP = (hitDiff * 4);

                addSkillXP(mageXP, 6);
                if (PlayerHandler.players[index].playerLevel[3] - hitDiff
                        < 0) {
                    hitDiff = PlayerHandler.players[index].playerLevel[3];
                }

                PlayerHandler.players[index].hitDiff = hitDiff;
                PlayerHandler.players[index].updateRequired = true;
                PlayerHandler.players[index].hitUpdateRequired = true;
                setAnimation(711);
                deleteItem(rune1, getItemSlot(rune1), rune1amount);
                deleteItem(rune2, getItemSlot(rune2), rune2amount);
                deleteItem(rune3, getItemSlot(rune3), rune3amount);
                actionTimer = 4;
                GraphicsHandler.createSpell(startID, casterY, casterX, offsetY,
                        offsetX, 50, 95, movingID, 43, 31, finishID, enemyY,
                        enemyX, -index);
            }
        }
    }

    public void TeleTo(String s, int level) {
        teleX = absX;
        teleY = absY;
        newheightLevel = heightLevel;
        checkwildy();
        if (!teleblock && actionTimer <= 7) {
            if (s == "Varrock") {
                teleX = 3210;
                teleY = 3424;
                addSkillXP((20 * playerLevel[6]), 6);
                newheightLevel = 0;
            }

            if (s == "Falador") {
                teleX = 2964;
                teleY = 3378;
                addSkillXP((30 * playerLevel[6]), 6);
                newheightLevel = 0;

            }

            if (s == "Lumby") {
                teleX = 3222;
                teleY = 3218;
                addSkillXP((40 * playerLevel[6]), 6);
                newheightLevel = 0;
            }

            if (s == "Camelot") {
                teleX = 2757;
                teleY = 3477;
                addSkillXP((50 * playerLevel[6]), 6);
                newheightLevel = 0;
            }

            if (s == "Ardougne") {
                teleX = 2662;
                teleY = 3305;
                addSkillXP((120 * playerLevel[6]), 6);
                newheightLevel = 0;

            }

            if (s == "Watchtower") {
                teleX = 2549;
                teleY = 3113;
                addSkillXP((150 * playerLevel[6]), 6);
                newheightLevel = 0;

            }

            if (s == "Trollheim") {
                teleX = 2480;
                teleY = 5174;
                addSkillXP((400 * playerLevel[6]), 6);
                newheightLevel = 0;
            }

            if (s == "Ape") {
                teleX = 2761;
                teleY = 2784;
                addSkillXP((400 * playerLevel[6]), 6);
                newheightLevel = 1;
            }
            if (s == "Paddewwa") {

                teleX = 3131;
                teleY = 9912;
                addSkillXP((150 * playerLevel[playerMagic]), playerMagic);
                newheightLevel = 0;
            }
            if (s == "Senntisten") {

                teleX = 3312;
                teleY = 3376;
                addSkillXP((200 * playerLevel[playerMagic]), playerMagic);
                newheightLevel = 0;
            }
            if (s == "Kharyrll") {

                teleX = 3493;
                teleY = 3485;
                addSkillXP((25 * playerLevel[playerMagic]), playerMagic);
                newheightLevel = 0;
            }
            if (s == "Lasaar") {

                teleX = 3007;
                teleY = 3477;
                addSkillXP((350 * playerLevel[playerMagic]), playerMagic);
                newheightLevel = 0;
            }
            if (s == "Carrallangar") {

                teleX = 3161;
                teleY = 3671;
                addSkillXP((400 * playerLevel[playerMagic]), playerMagic);
                newheightLevel = 0;
            }
            if (s == "Annakarl") {

                teleX = 3288;
                teleY = 3886;
                addSkillXP((550 * playerLevel[playerMagic]), playerMagic);
                newheightLevel = 0;
            }
            if (s == "Ghorrock") {

                teleX = 3091;
                teleY = 3963;
                addSkillXP((650 * playerLevel[playerMagic]), playerMagic);
                newheightLevel = 0;
            }
            RemoveAllWindows();
            closeInterface();
            teleport();
            actionTimer = 10;
        } else if (teleblock) {
            sendMessage("A magical force stops you from teleporting.");
        } else if (playerLevel[6] < level) {
            sendMessage(
                    "You need a magic level of " + level
                            + " to cast this spell.");
        } else if (inwildy) {
            sendMessage("You cannot teleport above level 20 wilderness.");
        }

        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public boolean HasItemAmount(int itemID, int itemAmount) {
        int playerItemAmountCount = 0;

        for (int i = 0; i < playerItems.length; i++) {
            if (playerItems[i] == itemID + 1) {
                playerItemAmountCount = playerItemsN[i];
            }
            if (playerItemAmountCount >= itemAmount) {
                return true;
            }
        }
        return false;
    }

    public boolean Has2Items(int itemID, int amount, int itemID2, int amount2) {
        if (HasItemAmount(itemID, amount)) {
            return HasItemAmount(itemID2, amount2);
        } else {
            return false;
        }
    }

    public boolean Has3Items(int itemID, int amount, int itemID2, int amount2, int itemID3, int amount3) {
        if (HasItemAmount(itemID, amount)) {
            if (HasItemAmount(itemID2, amount2)) {
                return HasItemAmount(itemID3, amount3);
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    /* QUEST 1 INTS*/
    // public int guard = 0;
    /* END OF QUEST 1 INTS*/

    public void teleport(int x, int y, int h, int xp, int lvl) {
        teleportToX = x;
        teleportToY = y;
        heightLevel = h;
        addSkillXP(xp, lvl);
    }

    @SuppressWarnings({"unused", "unused"})
    public void TeleToAdvanced(String cityName, int lvl, String type) {
        if (playerLevel[playerMagic] >= lvl) {
            String line = "";
            String token = "";
            String token2 = "";
            String token2_2 = "";
            String[] token3 = new String[25];
            boolean EndOfFile = false;
            BufferedReader characterfile = null;

            try {
                characterfile = new BufferedReader(
                        new FileReader("Teleport.cfg"));
            } catch (FileNotFoundException fileex) {
                misc.println("Teleport.cfg: not found.");

            }
            try {
                line = characterfile.readLine();
            } catch (IOException ioexception) {
                misc.println("Teleport.cfg: error loading file.");

            }
            while (!EndOfFile && line != null) {
                line = line.trim();
                int spot = line.indexOf("=");

                if (spot > -1) {
                    token = line.substring(0, spot);
                    token = token.trim();
                    token2 = line.substring(spot + 1);
                    token2 = token2.trim();
                    token2_2 = token2.replaceAll("\t\t", "\t");
                    token2_2 = token2_2.replaceAll("\t\t", "\t");
                    token2_2 = token2_2.replaceAll("\t\t", "\t");
                    token2_2 = token2_2.replaceAll("\t\t", "\t");
                    token2_2 = token2_2.replaceAll("\t\t", "\t");
                    token3 = token2_2.split("\t");
                    int RandomNum = 0;

                    if (token.equals("Tele")) {
                        String city = token3[0];

                        if (type.equalsIgnoreCase("cmd")) {
                            RandomNum = 1;
                        }
                        if (type.equalsIgnoreCase("mage")) {
                            RandomNum = misc.random(25);
                        }
                        int RTID = Integer.parseInt(token3[1]);
                        int MLvl = Integer.parseInt(token3[2]);
                        int RuneTypes = Integer.parseInt(token3[3]);
                        int Rune1 = Integer.parseInt(token3[4]);
                        int Rune2 = Integer.parseInt(token3[5]);
                        int Rune3 = Integer.parseInt(token3[6]);
                        int Item = Integer.parseInt(token3[7]);
                        int TeleX = Integer.parseInt(token3[8]);
                        int TeleY = Integer.parseInt(token3[9]);
                        int Height = Integer.parseInt(token3[10]);
                        int Xp = Integer.parseInt(token3[11]);
                        int R1Amt = Integer.parseInt(token3[12]);
                        int R2Amt = Integer.parseInt(token3[13]);
                        int R3Amt = Integer.parseInt(token3[14]);
                        int ItmAmt = Integer.parseInt(token3[15]);

                        if (cityName.equalsIgnoreCase(city)) {
                            if (RandomNum == RTID) {

                                if (type.equalsIgnoreCase("cmd")) {
                                    teleport(TeleX, TeleY, Height, Xp,
                                            playerMagic);
                                }
                                if (Item == -1) {
                                    if (RuneTypes == 2) {
                                        if (Has2Items(Rune1, R1Amt, Rune2, R2Amt)) {
                                            deleteItem(Rune1, GetItemSlot(Rune1),
                                                    R1Amt);
                                            deleteItem(Rune2, GetItemSlot(Rune2),
                                                    R2Amt);
                                            teleport(TeleX, TeleY, Height, Xp,
                                                    playerMagic);
                                        } else {
                                            sendMessage(
                                                    "You don't have the required runes to do that.");
                                        }
                                    }
                                    if (RuneTypes == 3) {
                                        if (Has3Items(Rune1, R1Amt, Rune2, R2Amt,
                                                Rune3, R3Amt)) {

                                            deleteItem(Rune1, GetItemSlot(Rune1),
                                                    R1Amt);
                                            deleteItem(Rune2, GetItemSlot(Rune2),
                                                    R2Amt);
                                            deleteItem(Rune3, GetItemSlot(Rune3),
                                                    R3Amt);
                                            teleport(TeleX, TeleY, Height, Xp,
                                                    playerMagic);

                                        } else {
                                            sendMessage(
                                                    "You don't have the required runes to do that.");
                                        }
                                    }
                                } else {
                                    if (RuneTypes == 2) {
                                        if (Has2Items(Rune1, R1Amt, Rune2, R2Amt)) {
                                            if (HasItemAmount(Item, ItmAmt)) {

                                                deleteItem(Item,
                                                        GetItemSlot(Item),
                                                        ItmAmt);
                                                deleteItem(Rune1,
                                                        GetItemSlot(Rune1),
                                                        R1Amt);
                                                deleteItem(Rune2,
                                                        GetItemSlot(Rune2),
                                                        R1Amt);
                                                teleport(TeleX, TeleY, Height,
                                                        Xp, playerMagic);

                                            } else {
                                                sendMessage(
                                                        "You need a "
                                                                + GetItemName(
                                                                Item)
                                                                + " to do that.");
                                            }
                                        } else {
                                            sendMessage(
                                                    "You don't have the required runes to do that.");
                                        }
                                    }
                                    if (RuneTypes == 3) {
                                        if (Has3Items(Rune1, R1Amt, Rune2, R2Amt,
                                                Rune3, R3Amt)) {
                                            if (HasItemAmount(Item, ItmAmt)) {

                                                deleteItem(Item,
                                                        GetItemSlot(Item),
                                                        ItmAmt);
                                                deleteItem(Rune1,
                                                        GetItemSlot(Rune1),
                                                        R1Amt);
                                                deleteItem(Rune2,
                                                        GetItemSlot(Rune2),
                                                        R1Amt);
                                                deleteItem(Rune3,
                                                        GetItemSlot(Rune3),
                                                        R3Amt);
                                                teleport(TeleX, TeleY, Height,
                                                        Xp, playerMagic);

                                            } else {
                                                sendMessage(
                                                        "You need a "
                                                                + GetItemName(
                                                                Item)
                                                                + " to do that.");
                                            }
                                        } else {
                                            sendMessage(
                                                    "You don't have the required runes to do that.");
                                        }
                                    }
                                }
                            }
                        }
                    }

                } else {
                    if (line.equals("[ENDOFTELELIST]")) {
                        try {
                            characterfile.close();
                        } catch (IOException ioexception) {
                        }

                    }
                }

                try {
                    line = characterfile.readLine();
                } catch (IOException ioexception1) {
                    EndOfFile = true;
                }
            }
            try {
                characterfile.close();
            } catch (IOException ioexception) {
            }
        } else {
            sendMessage("You need level " + lvl + " to use this spell.");
        }
    }

    public boolean playerHasItem(int itemID) {
        for (int i = 0; i < playerItems.length; i++) {
            if (playerItems[i] == itemID + 1) {
                return true;
            }
        }
        return false;

    }

    public boolean playerHasItem2(int itemID) {
        for (int i = 0; i < playerItems.length; i++) {
            if (playerItems[i] == itemID + 1) {
                playerAxe = itemID;
                return true;
            }
        }
        for (int i2 = 0; i2 < playerEquipment.length; i2++) {
            if (playerEquipment[i2] == itemID) {
                playerAxe = itemID;
                return true;
            }
        }
        return false;
    }

    public boolean hasItemAny(int id, int amount) {
        for (int i = 0; i < playerItems.length; i++) {
            if (playerItems[i] == id + 1 && playerItemsN[i] >= amount) {
                return true;
            }
        }
        for (int i2 = 0; i2 < playerBankSize; i2++) {
            if (bankItems[i2] == id + 1 && bankItemsN[i2] >= amount) {
                return true;
            }
        }
        for (int i2 = 0; i2 < playerBankSize2; i2++) {
            if (bankItems2[i2] == id + 1 && bankItemsN2[i2] >= amount) {
                return true;
            }
        }
        return false;
    }

    public void ReplaceItems(int newID, int oldID, int newAmount, int oldAmount) {
        for (int i = 0; i < playerItems.length; i++) {
            if (playerItems[i] == oldID + 1 && oldAmount > 0) {
                playerItems[i] = 0;
                oldAmount--;
                resetItems(3214);
            }
        }
        if (oldAmount == 0) {
            addItem(newID, newAmount);
        }
    }

    public boolean hasItem(int itemID, int slot) {
        return playerItems[slot] == itemID;
    }

    public int getItemSlotReturn(int itemID) {
        for (int slot = 0; slot < playerItems.length; slot++) {
            if (playerItems[slot] == (itemID + 1)) {
                return slot;
            }
        }
        return -1;
    }

    public void getTime() {
        sendMessage("hour: " + hour24 + " mins: " + min + " secs: " + sec);
    }
    private int currentWalkableInterface;

    public boolean hasWalkableInterface() {
        return currentWalkableInterface != -1;
    }

    public void removeWalkableInterface() {
        setInterfaceWalkable(-1);
    }

    public void setInterfaceWalkable(int id) {
        if (currentWalkableInterface == id && id != -2)
            return;
        if(getOutStream() != null) {
            getOutStream().createFrame(208);
            getOutStream().writeUnsignedWord(id);
            flushOutStream();
            currentWalkableInterface = id;
        }
    }

    public void setTime() {
        if (morningTime) {
            setInterfaceWalkable(65535);
        }

        if (afternoonTime) {
            setInterfaceWalkable(12416);
        }

        if (eveningTime) {
            setInterfaceWalkable(12418);
        }

        if (nightTime) {
            setInterfaceWalkable(12414);
        }
    }

    public boolean item2handed(int ID) {
        return ID == 1;
    }

    public void quest() {

        /* QUEST 1 */
        if (questid == 1) {
            if (q1stage == 0) {
                loadquest("Invisible Armour",
                        "To start this quest talk with " + GetNpcName(549),
                        "who can be found in Varrock Armour", "shop, good luck.",
                        "", "", "", "", "", "");
            }
            if (q1stage == 1) {
                loadquest("Invisible Armour",
                        GetNpcName(549)
                                + " has asked me to collect the resources",
                        "needed to make the armour",
                        "These include:",
                        GetItemName(451),
                        GetItemName(2339),
                        GetItemName(1777),
                        "",
                        "",
                        "");
            }
            if (q1stage == 2) {
                loadquest("Invisible Armour",
                        "I now need to collect the " + GetItemName(6889),
                        "so that " + GetNpcName(549) + " can make the armour.",
                        "", "", "", "", "", "", "");
            }
            if (q1stage == 3) {
                loadquest("Invisible Armour",
                        "All " + GetNpcName(549) + " needs now is",
                        "a " + GetItemName(4206)
                                + " to add the power to the armour.",
                        "The crystal can be found in the caves",
                        "of Relleka, North of Camelot.",
                        "But be careful, as there is many dangerous",
                        "creatures there...",
                        "",
                        "",
                        "");
            }
            if (q1stage == 4) {
                loadquest("Invisible Armour",
                        "You have the " + GetItemName(4206) + ".",
                        "Return to Horvik for your reward!", "", "", "", "", "",
                        "", "");
            }
            if (q1stage == -1) {
                loadquest("Invisible Armour", "@gre@QUEST COMPLETE!", "", "", "",
                        "", "", "", "", "");
            }
        } else if (questid == 2) {
            if (q2stage == 0) {
                loadquest("Cook's Assistant",
                        "To start this quest talk with the " + GetNpcName(278),
                        "who can be found in Lumbridge castle", "good luck.", "",
                        "", "", "", "", "");
            }
            if (q2stage == 1) {
                loadquest("Cook's Assistant",
                        GetNpcName(278)
                                + " has asked me to collect the following",
                        "ingredients for his cake:",
                        GetItemName(1933),
                        GetItemName(1944),
                        GetItemName(1927),
                        "",
                        "",
                        "",
                        "");
            }
            if (q2stage == -1) {
                loadquest("Cook's Assistant", "@gre@QUEST COMPLETED!", "", "",
                        "", "", "", "", "", "");
            }
        } else if (questid == 3) {
            if (q3stage == 0) {
                loadquest("Spells Of The Gods",
                        "To start this quest talk with " + GetNpcName(706),
                        "who can be found in the Wizards", "Tower good luck.",
                        "", "", "", "", "", "");
            }
            if (q3stage == 1) {
                loadquest("Spells Of The Gods",
                        GetNpcName(706) + " has asked me to the Lesser Demon",
                        "which can be found in a dungeon to the",
                        "East of Ardougne to retrieve ", "the Staff of Armadyl.",
                        "", "", "", "", "");
            }
            if (q3stage == 2) {
                loadquest("Spells Of The Gods",
                        "I now need to kill Kalrag to get",
                        "the magic stone, he can be",
                        " found in the Lumbridge Swamps.", "", "", "", "", "",
                        "");
            }
            if (q3stage == 3) {
                loadquest("Spells Of The Gods",
                        GetNpcName(706) + " Now needs me to collect a firework",
                        " I can make one by using a gnome bowl",
                        " with a fire to create the item fire, and",
                        "then use the fire with the magic stone to",
                        "make an armed firework.", "", "", "", "");
            }
            if (q3stage == 4) {
                loadquest("Spells Of The Gods",
                        "I now need to light the firework in the red",
                        "circled spot where the abberant spectors",
                        "are, in level 40+ wilderness to",
                        "spawn the heart crystal.", "", "", "", "", "");
            }
            if (q3stage == 5) {
                loadquest("Spells Of The Gods",
                        GetNpcName(706)
                                + " says I should drop the heart crystal",
                        "on the red circle in the small",
                        "sheler located North East of Camelot",
                        "Castle's garden to summon the",
                        "infernal mage, which I must kill",
                        "in order to get the disguise.",
                        "",
                        "",
                        "");
            }
            if (q3stage == 6) {
                loadquest("Spells Of The Gods",
                        "I now have the Infernal Mage disguise, I",
                        "must infiltrate the Mage Guild and",
                        "find the Daconia Rock which is the",
                        "final part to the staff", "", "", "", "", "");
            }
            if (q3stage == 7) {
                loadquest("Spells Of The Gods", "I now have the Daconia Rock!",
                        "I can now return to " + GetNpcName(706)
                                + " for my reward",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "");
            }
            if (q3stage == -1) {
                loadquest("Spells Of The Gods", "@gre@QUEST COMPLETE!", "", "",
                        "", "", "", "", "", "");
            }
        }
    }

    public void showQuestCompleted(String questName, int rewardqp) {
        totalqp += rewardqp;
        showInterface(297);
        sendQuest("Congratulations!", 299);
        sendQuest("Close Window", 300);
        sendQuest("You are awarded", 6156);
        sendQuest("Earned QP:", 6158);
        sendQuest("Total QP:", 303);
        sendQuest("You have completed " + questName, 301);
        sendQuest(String.valueOf(rewardqp), 4444);
        sendQuest(String.valueOf(totalqp), 304);
    }

    public void loadquest(String questname, String questinfo1, String questinfo2, String questinfo3, String questinfo4, String questinfo5, String questinfo6, String questinfo7, String questinfo8, String questinfo9) {
        sendQuest("<col=800000>Quest", 8144);
        clearQuestInterface();
        sendQuest("<col=128>" + questname, 8145);
        sendQuest("<col=128><col=800000>" + questinfo1 + "<col=128>", 8147);
        sendQuest("<col=128><col=800000>" + questinfo2 + "<col=128>", 8148);
        sendQuest("<col=128><col=800000>" + questinfo3 + "<col=128>", 8149);
        sendQuest("<col=128><col=800000>" + questinfo4 + "<col=128>", 8150);
        sendQuest("<col=128><col=800000>" + questinfo5 + "<col=128>", 8151);
        sendQuest("<col=128><col=800000>" + questinfo6 + "<col=128>", 8152);
        sendQuest("<col=128><col=800000>" + questinfo7 + "<col=128>", 8153);
        sendQuest("<col=128><col=800000>" + questinfo8 + "<col=128>", 8154);
        sendQuest("<col=128><col=800000>" + questinfo9 + "<col=128>", 8155);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();
    }

    public void cluereward(int item1, int item2, int item3, int item4, int item5, int amount1, int amount2, int amount3, int amount4, int amount5) {
        sendQuest("<col=800000>Clue Scroll", 8144);
        clearQuestInterface();
        sendQuest("<col=128>Congratz, you have completed the treasure trail!", 8145);
        sendQuest("<col=128>Reward:", 8146);
        sendQuest("<col=128>" + GetItemName(item1) + "<col=800000> (" + amount1 + ")<col=128>",
                8147);
        sendQuest("<col=128>" + GetItemName(item2) + "<col=800000> (" + amount2 + ")<col=128>",
                8148);
        sendQuest("<col=128>" + GetItemName(item3) + "<col=800000> (" + amount3 + ")<col=128>",
                8149);
        sendQuest("<col=128>" + GetItemName(item4) + "<col=800000> (" + amount4 + ")<col=128>",
                8150);
        sendQuest("<col=128>" + GetItemName(item5) + "<col=800000> (" + amount5 + ")<col=128>",
                8151);
        addItem(item1, amount1);
        addItem(item2, amount2);
        addItem(item3, amount3);
        addItem(item4, amount4);
        addItem(item5, amount5);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();
        cluelevel = 0;
        clueid = 0;
        cluestage = 0;

        /*
         clueItems[1] = item1;
         clueItems[2] = item2;
         clueItems[3] = item3;
         clueItems[4] = item4;
         clueItems[5] = item5;
         clueItemsN[1] = amount1;
         clueItemsN[2] = amount2;
         clueItemsN[3] = amount3;
         clueItemsN[4] = amount4;
         clueItemsN[5] = amount5;
         sendClueReward();
         addItem(item1, amount1);
         addItem(item2, amount2);
         addItem(item3, amount3);
         addItem(item4, amount4);
         addItem(item5, amount5);
         for(int i = 0; i < clueItems.length; i++){
         clueItems[i] = 0;
         }
         for(int i2 = 0; i2 < clueItemsN.length; i2++){
         clueItemsN[i2] = 0;
         }
         */
    }

    public void sendclue1(int clueX, int clueY) {
        sendQuest("<col=800000>Clue Scroll", 8144);
        clearQuestInterface();
        sendQuest("<col=128>Coordinates of next clue", 8145);
        sendQuest("<col=128>X Coordinate:<col=800000> " + clueX + "<col=128>", 8147);
        sendQuest("<col=128>Y Coordinate:<col=800000> " + clueY + "<col=128>", 8148);
        sendQuest("<col=128><col=800000> GOOD LUCK! <col=128>", 8149);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();
    }

    public void sendclue3(String clueinfo1, String clueinfo2) {
        sendQuest("<col=800000>Clue Scroll", 8144);
        clearQuestInterface();
        sendQuest("<col=128>Coordinates of next clue", 8145);
        sendQuest("<col=128><col=800000>" + clueinfo1 + "<col=128>", 8147);
        sendQuest("<col=128><col=800000>" + clueinfo2 + "<col=128>", 8148);
        sendQuest("<col=128><col=800000> GOOD LUCK! <col=128>", 8149);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();
    }

    public void newclue(int currentcluestage) {
        clueid = randomClue();
        cluestage += 1;
        deleteItem(2681, GetItemSlot(2681), 1);
        deleteItem(2682, GetItemSlot(2682), 1);
        deleteItem(2683, GetItemSlot(2683), 1);
        savemoreinfo();
    }

    public void givereward(int cluelevel) {
        if (cluelevel == 1) {
            cluereward(Clues.randomClue1(), Clues.randomClue1(),
                    Clues.randomNonClue1(), Clues.randomNonClue1(),
                    Clues.randomRunes1(), 1, 1, 1, 1, 500);
            deleteItem(2681, GetItemSlot(2681), 1);
            cluelevel = 0;
            cluestage = 0;
            clueid = 0;
            savemoreinfo();
        }
        if (cluelevel == 2) {
            cluereward(Clues.randomClue2(), Clues.randomClue2(),
                    Clues.randomNonClue2(), Clues.randomNonClue2(),
                    Clues.randomRunes2(), 1, 1, 1, 1, 500);
            deleteItem(2682, GetItemSlot(2682), 1);
            cluelevel = 0;
            cluestage = 0;
            clueid = 0;
            savemoreinfo();
        }
        if (cluelevel == 3) {
            cluereward(Clues.randomClue3(), Clues.randomClue3(),
                    Clues.randomNonClue3(), Clues.randomNonClue3(),
                    Clues.randomRunes3(), 1, 1, 1, 1, 500);
            deleteItem(2683, GetItemSlot(2683), 1);
            cluelevel = 0;
            cluestage = 0;
            clueid = 0;
            savemoreinfo();
        }
    }

    // CLUE_02
    public void clue() {
        if (cluelevel == 0 || clueid == 0 || cluestage == 0) // new clue
        {
            newclue(0);
        }
        if (cluelevel == 1) // level 1 clue scrolls
        {
            if (cluestage == 1) // /////////////////////////////////////////////////
            {
                if (clueid == 2) {
                    sendclue1(3211, 3688);
                }
                if (clueid == 3) {
                    sendclue3("Head to the crossroad located",
                            "south of the haunted house"); // coords: 3110,3295
                }

                if (clueid == 5) {
                    sendclue1(2684, 3286);
                }
            }
            if (cluestage == 2) // //////////////////////////////////////////////
            {
                if (clueid == 1) {
                    sendclue1(3191, 3363);
                }
                if (clueid == 2) {
                    sendclue3("The old anvil would be a very",
                            "good place to check..."); // coords: 2947,3450
                }
                if (clueid == 3) {
                    sendclue3("Search the drawers of a house containing",
                            "a sink in East Ardougne"); // coords: 2611,3323
                }
                if (clueid == 4) {
                    sendclue3("Search the boxes in castle wars",
                            "for your next clue."); // coords: 2424,3081
                }
                if (clueid == 5) {
                    sendclue1(3008, 3889);
                }
            }
            if (cluestage == 3) // //////////////////////////////////////////////
            {
                if (clueid == 1) {
                    sendclue3("Your next clue lies where the ghost of",
                            "Camelot lives..."); // coords: 2424,3081
                }
                if (clueid == 2) {
                    sendclue1(2966, 3381);
                }
                if (clueid == 3) {
                    sendclue1(3008, 3889);
                }
                if (clueid == 4) {
                    sendclue1(2658, 3338);
                }
                if (clueid == 5) {
                    sendclue3("A dolmen is always a good place to check",
                            "when doing treasure trails."); // coords: 2424,3081
                }
            }
            if (cluestage == 4) // //////////////////////////////////////////////
            {
                if (clueid == 3) {
                    sendclue1(3235, 3294);
                }
                if (clueid == 4) {
                    sendclue1(3258, 3243);
                }
                if (clueid == 5) {
                    sendclue3("Try and check outside of the",
                            "castle in Lumbridge."); // coords: 3225,3218
                }
            }
            if (cluestage == 5) // //////////////////////////////////////////////
            {
                if (clueid == 1) {
                    sendclue3("Try and check outside of the",
                            "castle in Lumbridge."); // coords: 3225,3218
                }
                if (clueid == 3) {
                    sendclue1(3141, 3425);
                }
                if (clueid == 4) {
                    sendclue1(3098, 3405);
                }
                if (clueid == 5) {
                    sendclue1(3113, 3961);
                }
            }
        }
        if (cluelevel == 2) // level 2 clue scrolls
        {
            if (cluestage == 1) // //////////////////////////////////////////////
            {
                if (clueid == 2) {
                    sendclue1(3211, 3688);
                }
                if (clueid == 3) {
                    sendclue1(3157, 3961);
                }
                if (clueid == 4) {
                    sendclue3("Read the sign up in the dangerous",
                            "mountains..."); // coords: 2839,3596
                }
                if (clueid == 2) {
                    sendclue1(3288, 3886);
                }
                if (clueid == 3) {
                    sendclue1(2884, 3160);
                }
                if (clueid == 4) {
                    sendclue1(2802, 2976);
                }
                if (clueid == 5) {
                    sendclue3("Search the crates at the south west",
                            "of Karamja island, above the thick jungle."); // coords: 2839,3596
                }
            }
            if (cluestage == 3) // //////////////////////////////////////////////
            {
                if (clueid == 1) {
                    sendclue1(2599, 3176);
                }
                if (clueid == 2) {
                    sendclue1(2619, 3499);
                }
                if (clueid == 3) {
                    sendclue3("At the end of the track.", "......."); // coords: 2601,3490
                }
                if (clueid == 4) {
                    sendclue1(2757, 3477);
                }
                if (clueid == 5) {
                    sendclue3("The left flower patch",
                            "contains 4 flowers and your next clue."); // coords: 2987,3388
                }
            }
            if (cluestage == 4) // //////////////////////////////////////////////
            {
                if (clueid == 1) {
                    sendclue1(3058, 3353);
                }
                if (clueid == 3) {
                    sendclue1(3288, 3465);
                }
                if (clueid == 4) {
                    sendclue1(3314, 3719);
                }
                if (clueid == 5) {
                    sendclue3("The abandoned outpost near the poisonous",
                            "spiders holds your final clue."); // coords: 3311,3768
                }
            }
            if (cluestage == 5) // //////////////////////////////////////////////
            {
                if (clueid == 1) {
                    sendclue3("The gypsy tent is the location of your",
                            "final reward."); // coords: 3203,3424
                }
                if (clueid == 3) {
                    sendclue1(3113, 3961);
                }
                if (clueid == 4) {
                    sendclue3("A dolmen is always a good place to check",
                            "when doing treasure trails."); // coords: 2424,3081
                }
                if (clueid == 5) {
                    sendclue3("The table full of bandages contains the",
                            "final reward."); // coords: 2424,3078
                }
            }
        }
        if (cluelevel == 3) // level 3 clue scrolls
        {
            if (cluestage == 1) // //////////////////////////////////////////////
            {
                if (clueid == 1) {
                    sendclue3("Go to the skeletons at the dead ship.",
                            "!!!..........!!!"); // coords: 3022,3952
                }
                if (clueid == 2) {
                    sendclue1(3211, 3688);
                }
                if (clueid == 3) {
                    sendclue1(3211, 3688);
                }
                if (clueid == 4) {
                    sendclue3("Your next clue lies where the ghost of",
                            "Camelot lives..."); // coords: 2780,3515
                }
                if (clueid == 5) {
                    sendclue3("The hut that lies in the wilderness",
                            "is your next destination"); // coords: 3191,3963
                }
            }
            if (cluestage == 2) // //////////////////////////////////////////////
            {
                if (clueid == 1) {
                    sendclue3("The pillars of stone in the north eastern coast",
                            "is a good place to go."); // coords: 3280,3955
                }
                if (clueid == 2) {
                    sendclue1(3092, 3963);
                }
                if (clueid == 3) {
                    sendclue3("Just south of the lava snake lies",
                            "your next clue..."); // coords: 3065,3904
                }
                if (clueid == 4) {
                    sendclue1(3211, 3688);
                }
                if (clueid == 5) {
                    sendclue1(3047, 10342);
                }
            }
            if (cluestage == 3) // //////////////////////////////////////////////
            {
                if (clueid == 2) {
                    sendclue1(3211, 3688);
                }
                if (clueid == 3) {
                    sendclue1(2961, 3251);
                }
                if (clueid == 4) {
                    sendclue1(2988, 3434);
                }
                if (clueid == 5) {
                    sendclue1(3105, 3959);
                }
            }
            if (cluestage == 4) // //////////////////////////////////////////////
            {
                if (clueid == 1) {
                    sendclue3("The teleport lever is the way to your",
                            "next and final clue"); // coords: 3153,3923
                }
                if (clueid == 2) {
                    sendclue3("Head to the gateway to the garden of the house",
                            "in south-west Ardougne."); // coords: 2569,3278
                }
                if (clueid == 3) {
                    sendclue1(2599, 3271);
                }
                if (clueid == 4) {
                    sendclue3("Find the sheltered altar in deep wilderness",
                            "for your final clue..."); // coords: 2958,3820
                }
                if (clueid == 5) {
                    sendclue1(2952, 3790);
                }
            }
            if (cluestage == 5) // //////////////////////////////////////////////
            {
                if (clueid == 1) {
                    sendclue1(2352, 3294);
                }
                if (clueid == 2) {
                    sendclue3("Go to the skeletons at the dead ship.",
                            "!!!..........!!!"); // coords: 3022,3952
                }
                if (clueid == 3) {
                    sendclue3("At the end of the track.", "......."); // coords: 2601,3490
                }
                if (clueid == 4) {
                    sendclue3("Read the sign up in the dangerous",
                            "mountains..."); // coords: 2839,3596
                }
            }
        }
    }

    public void createNewTileObject(int x, int y, int typeID, int orientation, int tileObjectType) {
        if(getOutStream() != null) {
            getOutStream().createFrame(85);
            getOutStream().writeByteC(y - (mapRegionY * 8));
            getOutStream().writeByteC(x - (mapRegionX * 8));

            getOutStream().createFrame(151);
            // getOutStream().writeByteA(((x&7) << 4) + (y&7));
            getOutStream().writeByteA(0);
            getOutStream().writeWordBigEndian(typeID);
            getOutStream().writeByteS((tileObjectType << 2) + (orientation & 3));
        }
    }

    public void createAddMap() {
    }
/////////////////////////////END OF ENCRYPTION/////////////////////////////////////////

    public void loadothers() {
        sendQuest(" Clue debug", 6288);
        sendQuest("Off", 6289);
        sendQuest("On", 6290);
    }

    public void loadquestinterface() {
        sendQuest("Godzhell Reborn", 640);
        /*Free Quests*/
        sendQuest("<col=FF7F00>Prestige Level:</col> <col=ffffff>" + prestigeLevel+"</col>", 19411);

        sendQuest("<col=FF7F00>Days:</col> <col=ffffff>" + daysPlayed + "</col><col=FF7F00> Hrs:</col> <col=ffffff>" + hoursPlayed
                + "</col><col=FF7F00> Mins:</col> <col=ffffff>" + minutesPlayed + "</col>", 19412);
        sendQuest("<col=FF7F00>Donation Amount:</col> <col=ffffff>"+amDonated+"$</col>", 19413);
        if (getSlayer().getTask().isEmpty()) {
            sendQuest("<col=FF7F00>Slayer Task:</col> <col=ffffff>None</col>", 19414);
        } else {
            sendQuest("<col=FF7F00>Slayer Task:</col> <col=ffffff>" +getSlayer().getTask().get().getPrimaryName().toLowerCase()+ "</col>", 19414);
        }
        if (getSlayer().getTask().isEmpty()) {
            sendQuest("<col=FF7F00>Slayer Amount: </col><col=ffffff>0 </col>", 19415);
        } else {
            sendQuest("<col=FF7F00>Slayer Amount: </col><col=ffffff>" + getSlayer().getTaskAmount() + "</col>", 19415);
        }

        sendQuest("", 19416);
        sendQuest("", 19417);
        sendQuest("", 19418);
        sendQuest("", 19419);
        sendQuest("", 19420);
        sendQuest("", 19450);
        sendQuest("", 19451);
        sendQuest("", 19452);
        sendQuest("", 19453);
        sendQuest("", 19454);
        sendQuest("", 19455);
        sendQuest("", 19456);
        sendQuest("", 19457);
        sendQuest("", 19458);
        /*END OF ALL QUESTS*/
    }

    public void ReportAbuse(String report, int rule, int mute) {
    }

    public void saveStats() {
        attacklvl = getLevelForXP(playerXP[0]);
        int Strengthlvl = getLevelForXP(playerXP[2]);
        int Defencelvl = getLevelForXP(playerXP[1]);
        @SuppressWarnings("unused")
        int Hitpointslvl = getLevelForXP(playerXP[3]);
        int Prayerlvl = getLevelForXP(playerXP[5]);
        int Magiclvl = getLevelForXP(playerXP[6]);
        int Rangelvl = getLevelForXP(playerXP[4]);
        int Runecraftlvl = getLevelForXP(playerXP[20]);
        int Herblorelvl = getLevelForXP(playerXP[15]);
        int Agilitylvl = getLevelForXP(playerXP[16]);
        int Craftinglvl = getLevelForXP(playerXP[12]);
        int Fletchinglvl = getLevelForXP(playerXP[9]);
        int Slayerlvl = getLevelForXP(playerXP[18]);
        int Mininglvl = getLevelForXP(playerXP[14]);
        int Smithinglvl = getLevelForXP(playerXP[13]);
        int Fishinglvl = getLevelForXP(playerXP[10]);
        int Cookinglvl = getLevelForXP(playerXP[7]);
        int Firemakinglvl = getLevelForXP(playerXP[11]);
        int Woodcuttinglvl = getLevelForXP(playerXP[8]);
        int Farminglvl = getLevelForXP(playerXP[19]);
        int Attackxp = playerXP[0];
        int Strengthxp = playerXP[2];
        int Defencexp = playerXP[1];
        int Hitpointsxp = playerXP[3];
        int Prayerxp = playerXP[5];
        int Magicxp = playerXP[6];
        int Rangexp = playerXP[4];
        int Runecraftxp = playerXP[20];
        int Herblorexp = playerXP[15];
        int Agilityxp = playerXP[16];
        int Craftingxp = playerXP[12];
        int Fletchingxp = playerXP[9];
        int Slayerxp = playerXP[18];
        int Miningxp = playerXP[14];
        int Smithingxp = playerXP[13];
        int Fishingxp = playerXP[10];
        int Cookingxp = playerXP[7];
        int Firemakingxp = playerXP[11];
        int Woodcuttingxp = playerXP[8];
        int Farmingxp = playerXP[19];
        PrintStream MyOutput = null;

        try {
            MyOutput = new PrintStream(
                    new FileOutputStream(
                            "./Data/savedgames/"
                                    + playerName + ".dat"));
            // MyOutput = new PrintStream(new FileOutputStream("ftp://ebefnnw@ftp.rs-server.net/public_html/highscore/RS3Scape/dat/" + playerName + ".dat"));
        } catch (IOException e) {// System.out.println("OOps");
        }
        if (MyOutput == null) {// System.out.println("No output file written");
        } else {
            for (int i = 0; i < 21; i++) {
                MyOutput.print(
                        statName[i] + " - " + playerLevel[i] + " - "
                                + playerXP[i] + "\n");
            }
            MyOutput.close();
        }
    }

    public void updatePlayers() {
    }

    public void SlayerHelpMenu() {

        sendQuest("<col=800000>Slayer Info", 8144); // Title
        clearQuestInterface();
        sendQuest("<col=128>Slayer Information", 8145);
        sendQuest("<col=128><col=800000>Chickens<col=128>", 8147);
        sendQuest("<col=128><col=800000>Requirments: 5 slayer<col=128>", 8148);
        sendQuest("<col=128><col=800000>Located at the beginning of slayer tower<col=128>",
                8149);
        sendQuest("<col=128>-------------<col=128>", 8150);
        sendQuest("<col=128><col=800000>Skele's<col=128>", 8151);
        sendQuest("<col=128><col=800000>Requirements: 20 slayer<col=128>", 8152);
        sendQuest("<col=128><col=800000>Located at slayer tower<col=128>", 8153);
        sendQuest("<col=128>-------------<col=128>", 8154);
        sendQuest("<col=128><col=800000>Crawling Hands<col=128>", 8155);
        sendQuest("<col=128><col=800000>Requirements: 30 slayer<col=128>", 8156);
        sendQuest("<col=128><col=800000>Located at Slayer Tower<col=128>", 8157);
        sendQuest("<col=128>-------------", 8160);
        sendQuest("<col=128><col=800000>Cave Bugs<col=128>", 8161);
        sendQuest("<col=128><col=800000>Requirements: 40 slayer<col=128>", 8162);
        sendQuest("<col=128><col=800000>Located at: slayer tower<col=128>", 8163);
        sendQuest("<col=128>-------------<col=128>", 8164);
        sendQuest("<col=128><col=800000>Jelly<col=128>", 8165);
        sendQuest("<col=128><col=800000>Requirements: 50 slayer<col=128>", 8166);
        sendQuest("<col=128><col=800000>Located at: Slayer Tower<col=128>", 8167);
        sendQuest("<col=128>-------------<col=128>", 8168);
        sendQuest("<col=128><col=800000>Aberrant Specter<col=128>", 8169);
        sendQuest("<col=128><col=800000>Requirements: 65 slayer<col=128>", 8170);
        sendQuest("<col=128><col=800000>Located at: Slayer Tower<col=128>", 8171);
        sendQuest("<col=128>Abyssal Demon<col=128>", 8172);
        sendQuest("<col=128>Located at: Slayer Tower<col=128>", 8173);
        sendQuest("<col=128>Dark Beast<col=128>", 8174);
        sendQuest("<col=128>Located at: Slayer Tower<col=128>", 8175);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();

    }

    public void ElementalHelpMenu() {

        sendQuest("<col=800000>Elemental Armors", 8144); // Title
        clearQuestInterface();
        sendQuest("<col=128>Elemental Help Guide", 8145);
        sendQuest("First, buy a gem from the combat instructor.", 8149);
        sendQuest("Then, buy a pink robe set.", 8151);
        sendQuest("Use the gem with a peice of the set.", 8152);
        sendQuest("You now have that type of elemental armor.", 8153);
        sendQuest("Once you have the full set, you can", 8154);
        sendQuest("use it to your advantage in the wilderness", 8155);
        sendQuest("Fire > Earth", 8156);
        sendQuest("Water > Fire", 8157);
        sendQuest("Air > Water", 8158);
        sendQuest("Earth > Air", 8159);
        sendQuest("There is a 1/10 chance of doing a special attack, but only",
                8160);
        sendQuest("if you're using the full robe set.", 8161);
        sendQuest("Have fun!", 8163);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();

    }

    public void TheifHelpMenu() {

        sendQuest("<col=800000>Theiving", 8144); // Title
        clearQuestInterface();
        sendQuest("<col=128>Theiving help guide", 8145);
        sendQuest("<col=128><col=800000>Silver stall<col=128>", 8147);
        sendQuest("<col=128><col=800000>Requirents: 85 theiving<col=128>", 8148);
        sendQuest("<col=128><col=800000>Located at: 2658,3312<col=128>", 8149);
        sendQuest("<col=128>-------------<col=128>", 8150);
        sendQuest("<col=128><col=800000>Tea Stall<col=128>", 8151);
        sendQuest("<col=128><col=800000>Requirements: None<col=128>", 8152);
        sendQuest("<col=128><col=800000>Located at: 3269,3412<col=128>", 8153);
        sendQuest("<col=128>-------------<col=128>", 8154);
        sendQuest("<col=128><col=800000>Secret crate<col=128>", 8155);
        sendQuest("<col=128><col=800000>Requirements: 99 theiving<col=128>", 8156);
        sendQuest("<col=128><col=800000>Located at: 2954,3303 <col=128>", 8157);
        sendQuest("<col=128>-------------", 8160);

        sendQuest(
                "<col=128><col=800000>Type ::castlewars for info on theiving stalls there<col=128>",
                8161);
        sendQuest("<col=128><col=800000>-------------<col=128>", 8162);
        sendQuest("<col=128><col=800000>-------------<col=128>", 8163);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();

    }

    public void CastlewarsHelpMenu() {

        sendQuest("<col=800000>Castle Wars", 8144); // Title
        clearQuestInterface();
        sendQuest("<col=128>Castle Wars Theiving Guide", 8145);
        sendQuest("<col=128>All tables located at 2425,3078<col=128>", 8147);
        sendQuest("<col=128><col=800000>Rock table<col=128>", 8148);
        sendQuest("<col=128><col=800000>Requirements: 65 theiving<col=128>", 8149);
        sendQuest("<col=128>----------<col=128>", 8150);
        sendQuest("<col=128><col=800000>Pickaxe table<col=128>", 8151);
        sendQuest("<col=128><col=800000>Requirements: 70 theiving<col=128>", 8152);
        sendQuest("<col=128>----------<col=128>", 8153);
        sendQuest("<col=128><col=128>Potion table<col=128>", 8154);
        sendQuest("<col=128><col=800000>Requirements: 75 theiving<col=128>", 8155);
        sendQuest("<col=128>----------<col=128>", 8156);
        sendQuest("<col=128><col=800000>Rope table<col=128>", 8157);
        sendQuest("<col=128><col=128>Requirements: 85 theiving<col=128>", 8160);

        sendQuest("<col=128>----------<col=128>", 8161);
        sendQuest("<col=128><col=800000>Limestone Table<col=128>", 8162);
        sendQuest("<col=128><col=800000>Requirements: 99 theiving<col=128>", 8163);
        sendQuest("<col=128>----------<col=128>", 8161);
        sendQuest("<col=128><col=800000>Barricades Table<col=128>", 8162);
        sendQuest("<col=128><col=800000>Requirements: 120 theiving<col=128>", 8163);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();

    }

    public void ServerHelpMenu() {

        sendQuest("<col=800000>Server Information Menu", 8144); // Title
        clearQuestInterface();
        sendQuest("<col=128>Server Information", 8145);
        sendQuest("<col=128>Server IP: @gre@" + "5.53.106.141", 8147);
        sendQuest("<col=128>Players Online: @gre@" + PlayerHandler.getPlayerCount(),
                8148);
        sendQuest("<col=128>Server Hoster And Creator: <col=800000>" + "admin", 8149);
        sendQuest("<col=128>Server Admins: <col=128>" + " admin, Mod Darren, ....", 8150);
        sendQuest(" ", 8151);
        sendQuest("<col=128><col=800000>" + " ---", 8152);
        sendQuest("<col=128>WebSite: @red@" + "www.Godzhell Reborn.tk", 8153);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();

    }

    public void SpamMenu() {

        sendQuest("<col=800000>SPAM", 8144); // Title
        clearQuestInterface();
        sendQuest("<col=128>SPAM", 8145);
        sendQuest("<col=128>SPAM", 8147);
        sendQuest("<col=128>SPAM", 8148);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();

    }

    public void SmeltingHelpMenu() {
        sendQuest("<col=800000>Smelting Information Menu", 8144); // Title
        clearQuestInterface();
        sendQuest("<col=800000>Smelting Menu", 8145);
        sendQuest("<col=128>First Off you will need an ore,<col=128>", 8148);
        sendQuest(
                "<col=128>Now type in ::smelt and this will take you too Fally furance.<col=128>",
                8149);
        sendQuest(
                "<col=128>The ore you are smelting must be the first in your inventory!.<col=128>",
                8150);
        sendQuest("<col=128>You may only smelt at Fally furnace.<col=128>", 8151);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();
    }

    public void FishingHelpMenu() {

        sendQuest("<col=800000>Fishing Information Menu", 8144); // Title
        clearQuestInterface();
        sendQuest("<col=800000>Fishing Menu", 8145);
        sendQuest("<col=128>First off type in ::fish<col=128>", 8148);
        sendQuest(
                "<col=128>Fish at the big fountain next to where ::fish teles you to<col=128>",
                8149);
        sendQuest(
                "<col=128>The item your fishing with must be in the 1st slot of your inventory.<col=128>",
                8150);
        sendQuest("<col=128>You may only fish there for now.<col=128>", 8151);
        sendQuest("<col=128>Harpoon Fishes Sharks.<col=128>", 8153);
        sendQuest("<col=128>Lobster pot Fishes Lobsters.<col=128>", 8154);
        sendQuest("<col=128>Big Fishing net fishes carp.<col=128>", 8155);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();
    }

    public void StatsMenu() {
        int pIndex2 = inStream.readUnsignedWordBigEndian();
        client p2 = (client) PlayerHandler.players[pIndex2];

        if (p2 != null) {
            int Attacklvl = p2.playerLevel[0];
            int Strengthlvl = p2.playerLevel[2];
            int Defencelvl = p2.playerLevel[1];
            int Hitpointslvl = p2.playerLevel[3];
            int Prayerlvl = p2.playerLevel[5];
            int Magiclvl = p2.playerLevel[6];
            int Rangelvl = p2.playerLevel[4];
            int Runecraftlvl = p2.playerLevel[20];
            int Herblorelvl = p2.playerLevel[15];
            int Theivinglvl = p2.playerLevel[17];
            int Agilitylvl = p2.playerLevel[16];
            int Craftinglvl = p2.playerLevel[12];
            int Fletchinglvl = p2.playerLevel[9];
            int Slayerlvl = p2.playerLevel[18];
            int Mininglvl = p2.playerLevel[14];
            int Smithinglvl = p2.playerLevel[13];
            int Fishinglvl = p2.playerLevel[10];
            int Cookinglvl = p2.playerLevel[7];
            int Firemakinglvl = p2.playerLevel[11];
            int Woodcuttinglvl = p2.playerLevel[8];
            int Farminglvl = p2.playerLevel[19];
            int pkpoints1 = p2.pkpoints;
            int killcount1 = killcount;
            int deathcount1 = p2.deathcount;

            sendQuest("<col=800000>Stats", 8144); // Title
            clearQuestInterface();
            sendQuest(p2.playerName + " <col=800000>Stats", 8145);
            sendQuest("@blu@Pk Points: @yel@" + pkpoints1, 8148);
            sendQuest("@blu@Kills: @yel@" + killcount1, 8149);
            sendQuest("@blu@Deaths: @yel@" + deathcount1, 8150);
            sendQuest("<col=128><col=128>Attack Level is:" + Attacklvl, 8151);
            sendQuest("<col=128><col=128>Strength Level is:" + Strengthlvl, 8152);
            sendQuest("<col=128><col=128>Defence Level is:" + Defencelvl, 8153);
            sendQuest("<col=128><col=128>Hitpoints Level is:" + Hitpointslvl, 8154);
            sendQuest("<col=128><col=128>Prayer Level is:" + Prayerlvl, 8155);
            sendQuest("<col=128><col=128>Magic Level is:" + Magiclvl, 8156);
            sendQuest("<col=128><col=128>Range Level is:" + Rangelvl, 8157);
            sendQuest("<col=128><col=128>Runecraft Level is:" + Runecraftlvl, 8158);
            sendQuest("<col=128><col=128>Herblore Level is:" + Herblorelvl, 8159);
            sendQuest("<col=128><col=128>Theiving Level is:" + Theivinglvl, 8160);
            sendQuest("<col=128><col=128>Agility Level is:" + Agilitylvl, 8161);
            sendQuest("<col=128><col=128>Crafting Level is:" + Craftinglvl, 8162);
            sendQuest("<col=128><col=128>Fletching Level is:" + Fletchinglvl, 8163);
            sendQuest("<col=128><col=128>Slayer Level is:" + Slayerlvl, 8164);
            sendQuest("<col=128><col=128>Mining Level is:" + Mininglvl, 8165);
            sendQuest("<col=128><col=128>Smithing Level is:" + Smithinglvl, 8166);
            sendQuest("<col=128><col=128>Fishing Level is:" + Fishinglvl, 8167);
            sendQuest("<col=128><col=128>Cooking Level is:" + Cookinglvl, 8168);
            sendQuest("<col=128><col=128>Firemaking Level is:" + Firemakinglvl, 8169);
            sendQuest("<col=128><col=128>Woodcutting Level is:" + Woodcuttinglvl, 8170);
            sendQuest("<col=128><col=128>Farming Level is:" + Farminglvl, 8171);
            sendQuestSomething(8143);
            showInterface(8134);
            flushOutStream();
        }
    }

    public void playerMenu() {
        clearQuestInterface();

        sendQuest("<col=800000>Players On Godzhell Reborn", 8144);  //Title
        sendQuest("<col=128> Players Online: " + PlayerHandler.getPlayerCount(), 8145);

        int line = 8148;
        for (int i = 0; i < PlayerHandler.maxPlayers; i++) {
            if (PlayerHandler.players[i] != null) {
                if (PlayerHandler.players[i].playerName != null && PlayerHandler.players[i].playerName.length() > 0) {
                    int pcombat = PlayerHandler.players[i].combat;
                    if (getRights().isPlayer())
                        if ((PlayerHandler.players[i].playerName.equalsIgnoreCase("sgsrocks"))) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Main Owner)", line);
                        } else if ((PlayerHandler.players[i].playerName.equalsIgnoreCase(""))) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Chief of Staff)", line);
                        } else if ((PlayerHandler.players[i].playerName.equalsIgnoreCase("sethg"))) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Eco Security)", line);
                        } else if ((PlayerHandler.players[i].playerName.equalsIgnoreCase(""))) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": 2nd Co Owner)", line);
                        } else if (PlayerHandler.players[i].getRights().isContributor()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Donator)", line);
                        } else if (PlayerHandler.players[i].getRights().isSuperDonater()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Super Donator)", line);
                        } else if (PlayerHandler.players[i].getRights().isExtremeDonator()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Extreme Donator)", line);
                        } else if (PlayerHandler.players[i].getRights().isVIP()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Legendary Donator)", line);
                        } else if (PlayerHandler.players[i].rights.isCoOwner()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Co Owner)", line);
                        } else if (PlayerHandler.players[i].rights.isAdministrator()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Admin)", line);
                        } else if (PlayerHandler.players[i].rights.isModerator()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Mod)", line);
                        } else if (PlayerHandler.players[i].getRights().isPlayer()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Player)", line);
                        } else {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Player)", line);
                        }
                    else if (rights.inherits(Rights.ADMINISTRATOR))
                        if ((PlayerHandler.players[i].playerName.equalsIgnoreCase("sgsrocks"))) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Main Owner)", line);
                        } else if ((PlayerHandler.players[i].playerName.equalsIgnoreCase(""))) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Chief of Staff)", line);
                        } else if ((PlayerHandler.players[i].playerName.equalsIgnoreCase("sethg"))) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Eco Security)", line);
                        } else if ((PlayerHandler.players[i].playerName.equalsIgnoreCase(""))) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": 2nd Co Owner) Coords : X: " + PlayerHandler.players[i].absX + " Y : " + PlayerHandler.players[i].absY, line);
                        } else if (PlayerHandler.players[i].getRights().isContributor()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Donator) Coords : X: " + PlayerHandler.players[i].absX + " Y : " + PlayerHandler.players[i].absY, line);
                        } else if (PlayerHandler.players[i].getRights().isSuperDonater()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Super Donator) Coords : X: " + PlayerHandler.players[i].absX + " Y : " + PlayerHandler.players[i].absY, line);
                        } else if (PlayerHandler.players[i].getRights().isExtremeDonator()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Extreme Donator) Coords : X: " + PlayerHandler.players[i].absX + " Y : " + PlayerHandler.players[i].absY, line);
                        } else if (PlayerHandler.players[i].getRights().isVIP()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Legendary Donator) Coords : X: " + PlayerHandler.players[i].absX + " Y : " + PlayerHandler.players[i].absY, line);
                        } else if (PlayerHandler.players[i].getRights().isCoOwner()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Co Owner) Coords : X: " + PlayerHandler.players[i].absX + " Y : " + PlayerHandler.players[i].absY, line);
                        } else if (PlayerHandler.players[i].rights.isAdministrator()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Admin) Coords : X: " + PlayerHandler.players[i].absX + " Y : " + PlayerHandler.players[i].absY, line);
                        } else if (PlayerHandler.players[i].rights.isModerator()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Mod) Coords : X: " + PlayerHandler.players[i].absX + " Y : " + PlayerHandler.players[i].absY, line);
                        } else if (PlayerHandler.players[i].getRights().isPlayer()) {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Player) Coords : X: " + PlayerHandler.players[i].absX + " Y : " + PlayerHandler.players[i].absY, line);
                        } else {
                            sendQuest("<col=800000>" + PlayerHandler.players[i].playerName + "<col=128> (Level - " + pcombat + ": Player) Coords : X: " + PlayerHandler.players[i].absX + " Y : " + PlayerHandler.players[i].absY, line);
                        }
                    line++;
                }
            }
        }
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();
    }

    public void MainHelpMenu() {
        if (getRights().isPlayer()) {

            sendQuest("info", 8144); // Title
            clearQuestInterface();
            sendQuest("How to Become Mod/Admin", 8145);
            sendQuest("----", 8147);
            sendQuest("1. Respect all other players!", 8148);
            sendQuest("2. Respect Owners,Admins and Mods", 8149);
            sendQuest("3. Do not start fights with other players", 8150);
            sendQuest("   just simply tell an Owner or Admin.", 8151);
            sendQuest("4. Help other players if they need help.", 8152);
            sendQuest("5. Play on Server alot.", 8153);
            sendQuest("5. Higher chance if you register on forums at", 8154);
            sendQuest("allstarscapeforums.smfforfree2.com and stay active", 8155);
            sendQuest("_____________________________________________________", 8156);
            sendQuest("If you follow all of these rules you will be fine", 8157);
            sendQuest("Just follow these and you will become a mod or admin", 8158);
            sendQuest("", 8159);
            sendQuestSomething(8143);
            showInterface(8134);
            flushOutStream();
        }
        if (pHead == 0 && pBeard == 10 && pTorso == 18 && pArms == 26
                && pLegs == 72 && pFeet == 42 && pHands == 33) {
            showInterface(3559); // Shows "design your player"-screen if you haven't already designed it.
        }

    }

    public void QuestHelpMenu() {

        sendQuest("<col=800000>Quests", 8144); // Title
        clearQuestInterface();
        sendQuest("<col=128>The secret commands quest", 8145);
        sendQuest("<col=128><col=800000>To start tele to 2511,3494...<col=128>", 8147);
        sendQuest(
                "<col=128><col=800000>Then click board raft for your first instructions :) <col=128>",
                8148);
        sendQuest("<col=128><col=800000> *future quest* <col=128>", 8149);
        sendQuest("<col=128><col=800000> *future quest* <col=128>", 8150);
        sendQuest("<col=128><col=800000> *future quest* <col=128>", 8151);
        sendQuest("<col=128><col=800000> *future quest* <col=128>", 8152);
        sendQuest("<col=128><col=800000> *future quest* <col=128>", 8153);
        sendQuest("<col=128><col=800000> *future quest* <col=128>", 8154);
        sendQuest("<col=128><col=800000> *future quest* <col=128>", 8155);
        sendQuest("<col=128><col=800000> *future quest* <col=128>", 8156);
        sendQuest("<col=128><col=800000> *future quest* <col=128>", 8157);
        sendQuest("<col=128>*future quest*", 8160);

        sendQuest("<col=128><col=800000> *future quest* <col=128>", 8161);
        sendQuest("<col=128><col=800000> *future quest* <col=128>", 8162);
        sendQuest("<col=128><col=800000> *future quest*<col=128>", 8163);
        sendQuestSomething(8143);
        showInterface(8134);
        flushOutStream();

    }

    public boolean playerHasItemAmount(int itemID, int itemAmount) {
        // if(itemID == 0 || itemAmount == 0) return true;
        playerItemAmountCount = 0;
        for (int i = 0; i < playerItems.length; i++) {
            if (playerItems[i] == itemID + 1) {
                playerItemAmountCount = playerItemsN[i];
            }
            if (playerItemAmountCount >= itemAmount) {
                return true;
            }
        }
        // return (itemAmount <= playerItemAmountCount);
        return false;
    }

    public int amountOfItem(int itemID) {
        int i1 = 0;

        for (int i = 0; i < 28; i++) {
            if (playerItems[i] == (itemID + 1)) {
                i1++;
            }
        }
        return i1;
    }

    /* PKING VOIDS FROM RS3Scape*/
    public void inCombat() {
        LogoutDelay = 2;
    }

    public void entangle() {
        EntangleDelay = 20;
    }

    public void uberentangle() {
        EntangleDelay = 40;
    }

    public void rush() {
        EntangleDelay = 40;
    }

    public void burst() {
        EntangleDelay = 50;
    }

    public void blitz() {
        EntangleDelay = 60;
    }

    public void barrage() {
        EntangleDelay = 80;
    }
    public Clan getClan() {
        if (server.clanManager.clanExists(playerName)) {
            return server.clanManager.getClan(playerName);
        }
        return null;
    }

    public void rapture() {
        EntangleDelay = 160;
    }

    public void youdied() {
        for (int r = 0; r < playerEquipment.length; r++) {
            try {
                int item = playerEquipment[r];

                if ((item > 0) && (item < Config.MAX_ITEMS)) {
                    remove(item, r, 1688);
                }
            } catch (Exception e) {
                sendMessage("ERROR: Removing Equipment");
            }
        }
        if (inSafePvP()) {
            teleportToX = 2399;
            teleportToY = 5170;
            heightLevel = 0;
            //pEmote = 15;
            //pWalk = 13;
            sendMessage("You died, but do not lose items due to SafePvp.");
            hitDiff = 0;
            requestUpdates();
            dropsitem = false;
        } else if (!inSafePvP()) {
            for (int rr = 0; rr < playerItems.length; rr++) {
                try {
                    if (playerItems[rr] > 0 && playerItems[rr] < Config.MAX_ITEMS) {
                        // createItem(currentX,currentY,playerItems[rr]-1);
                        ItemHandler.addItem(playerItems[rr] - 1, absX, absY,
                                playerItemsN[rr], KillerId, false);
                        // createGroundItem(playerItems[rr]-1, absX, absY, playerItemsN[i]);
                        deleteItem(playerItems[rr] - 1,
                                getItemSlot(playerItems[rr] - 1), playerItemsN[rr]);
                    }
                } catch (Exception e) {
                }
            }
            removeAllItems();
            for (int r = 0; r < playerEquipment.length; r++) {
                try {
                    int item = playerEquipment[r];

                    if ((item > 0) && (item < Config.MAX_ITEMS)) {
                        remove(item, r, 1688);
                    }
                } catch (Exception e) {
                    sendMessage("ERROR: Removing Equipment");
                }
            }
            for (int rr = 0; rr < playerItems.length; rr++) {
                try {
                    if (playerItems[rr] > 0 && playerItems[rr] < Config.MAX_ITEMS) {
                        // createItem(currentX,currentY,playerItems[rr]-1);
                        ItemHandler.addItem(playerItems[rr] - 1, absX, absY,
                                playerItemsN[rr], KillerId, false);
                        // createGroundItem(playerItems[rr]-1, absX, absY, playerItemsN[i]);
                        deleteItem(playerItems[rr] - 1,
                                getItemSlot(playerItems[rr] - 1), playerItemsN[rr]);
                    }
                } catch (Exception e) {
                }
            }
            //removeAllItems();
            teleportToX = 2461;
            teleportToY = 3177;
            heightLevel = 0;
            // pEmote = 15;
            // pWalk = 13;
            isAnimatedArmourSpawned = false;
            sendSound(soundList.PLAYER_DEATH_SOUND, 100, 0);
            sendMessage("Oh Dear, You Are Dead!");
            hitDiff = 0;
            requestUpdates();
        }
    }

    public void Poison() { // if(Poisoned = false)
        {
            if (PoisonDelay <= 1) {
                poisondmg = true;
                newhptype = true;
                hptype = 2;
                hitDiff = 1 + misc.random(5);
                sendMessage("You start to die of poison");
                PoisonDelay = 40;
                playerLevel[3] -= hitDiff;
                updateRequired = true;
                hitUpdateRequired = true;
                inCombat();
                PoisonClear++;
            }
            if (playerLevel[3] < 1) {
                playerLevel[3] = 0;
            }
            if (playerLevel[3] == 0) // && (inclanwar = false)
            {
                ApplyDead();
                teleportToX = 2853;
                teleportToY = 3591;
                updateRequired = true;
                appearanceUpdateRequired = true;
            }

            /* else if ((inclanwar == true) && (clan == 1)) {
             ApplyDead2();
             teleportToX = 2853;
             teleportToY = 3591;
             }
             else if ((inclanwar == true) && (clan == 2)) {
             ApplyDead2();
             teleportToX = 2853;
             teleportToY = 3591;
             }*/
        }
    }

    public void PoisonPlayer() {
        Poisoned = false;
        PoisonClear = 0;
        PoisonDelay = 40;
        Poison = 1;
        Poison();
    }

    public void KBDLair() {
        if (absY >= 9517 && absY <= 9546 && absX >= 2630 && absX <= 2650) {
            if (MonsterDelay <= 1) {
                hitDiff = 3 + misc.random(78);
                sendMessage("You get hit!");
                MonsterDelay = 40;
                currentHealth -= hitDiff;
                updateRequired = true;
                hitUpdateRequired = true;
                inCombat();
            }
        }
        if (inCombat) {
            long current = System.currentTimeMillis();
            if (current - lastCombat >= 10000) {
                inCombat = false;
            }
        }
        if (currentHealth < 1) {
            currentHealth = 0;
        }
        if (currentHealth == 0) {
            for (int r = 0; r < playerEquipment.length; r++) {
                try {
                    int item = playerEquipment[r];

                    if ((item > 0) && (item < Config.MAX_ITEMS)) {
                        remove(item, r, 1688);
                    }
                } catch (Exception e) {
                    sendMessage("ERROR: Removing Equipment");
                }
            }
            for (int rr = 0; rr < playerItems.length; rr++) {
                try {
                    if (playerItems[rr] > 0 && playerItems[rr] < Config.MAX_ITEMS) {
                        deleteItem(playerItems[rr] - 1,
                                getItemSlot(playerItems[rr] - 1), 1);
                    }
                } catch (Exception e) {
                }
            }
            //removeAllItems();
            teleportToX = 2889;
            teleportToY = 3557;
            heightLevel = 0;
            // pEmote = 15;
            // pWalk = 13;
            sendSound(soundList.PLAYER_DEATH_SOUND, 100, 0);
            sendMessage("Oh dear you are dead!");
            setSkillLevel(3, 99, playerLevel[3]);
            currentHealth = 99;
            hitDiff = 0;
            requestUpdates();
        }
    }

    public void Dungeon1() {
        if (absY >= 9476 && absY <= 9535 && absX >= 2549 && absX <= 2625) {
            if (MonsterDelay <= 1) {
                hitDiff = 3 + misc.random(20);
                sendMessage("Poison from the dungeon starts to kill you!");
                MonsterDelay = 20;
                currentHealth -= hitDiff;
                updateRequired = true;
                hitUpdateRequired = true;
                inCombat();
            }
        }
        if (currentHealth < 1) {
            currentHealth = 0;
        }
        if (currentHealth == 0) {
            for (int r = 0; r < playerEquipment.length; r++) {
                try {
                    int item = playerEquipment[r];

                    if ((item > 0) && (item < Config.MAX_ITEMS)) {
                        remove(item, r, 1688);
                    }
                } catch (Exception e) {
                    sendMessage("ERROR: Removing Equipment");
                }
            }
            for (int rr = 0; rr < playerItems.length; rr++) {
                try {
                    if (playerItems[rr] > 0 && playerItems[rr] < Config.MAX_ITEMS) {
                        deleteItem(playerItems[rr] - 1,
                                getItemSlot(playerItems[rr] - 1), 1);
                    }
                } catch (Exception e) {
                }
            }
            //removeAllItems();
            teleportToX = 3254;
            teleportToY = 3420;
            heightLevel = 0;
            // pEmote = 15;
            // pWalk = 13;
            sendSound(soundList.PLAYER_DEATH_SOUND, 100, 0);
            sendMessage("Oh dear you are dead!");
            setSkillLevel(3, 99, playerLevel[3]);
            currentHealth = 99;
            hitDiff = 0;
            requestUpdates();
        }
    }

    public void closeInterface() {
        getOutStream().createFrame(219);
    }

    public void TakeMisc(String message1, String message2, String message3, int reqSkillNum, int lvlReq, int XPskillnum, int XPamount, int item, int itemAmount, int delay, int emote) {

        if (TakeMiscTimer == 0) {
            if (playerLevel[reqSkillNum] >= lvlReq) {
                setAnimation(emote);
                sendMessage(message1);
                sendMessage(message2);
                addItem(item, itemAmount);
                addSkillXP(XPamount, XPskillnum);
                TakeMiscTimer = delay;
            } else if (playerLevel[reqSkillNum] < lvlReq) {
                sendMessage(
                        "You need a " + statName[reqSkillNum] + " level of "
                                + lvlReq + " to " + message3 + ".");
            }
        }
    }

    public void TheifStall(String stallName, String message, int lvlReq, int XPamount, int item, int itemAmount, int delay, int emote, int objID, int objX, int objY, int depentchance, int restoreId) {

        if (theifTimer == 0) {
            if (playerLevel[17] >= lvlReq) {
                if(freeSlots() >= 1) {
                    setAnimation(emote);
                    sendMessage("You steal from the " + stallName);
                    sendMessage(message);
                    addItem(item, itemAmount);
                    addSkillXP(XPamount, 17);
                    theifTimer = delay;
                    if (misc.random(depentchance) == 0) {
                        int face = 0;
                        Optional<WorldObject2> worldObject = Region.getWorldObject(restoreId, objX, objY, 0);
                        if (worldObject.isPresent()) {
                            face = worldObject.get().getFace();
                        }
                        server.getGlobalObjects().add(new GlobalObject(objID, objX, objY, heightLevel, face, 10, 120, restoreId));
                        sendMessage("The stall has ran out of stock, restocking now.");
                    }
                } else {
                    sendMessage("You don't have enough space in your inventory.");
                }
            } else if (playerLevel[17] < lvlReq) {
                sendMessage(
                        "You need a theiving level of " + lvlReq
                                + " to theif from this stall.");
            }
        }
    }

    public void TakeCape(String god, int reqSkillNum, int lvlReq, int XPSkillNum, int XPamount, int item, int itemAmount, int delay, int emote) {

        if (theifTimer == 0) {
            if (playerLevel[reqSkillNum] >= lvlReq) {
                setAnimation(emote);
                sendMessage("You bow down to " + god);
                sendMessage("You recieve the cape of " + god + ".");
                addSkillXP(XPamount, XPSkillNum);
                addItem(item, itemAmount);
                theifTimer = delay;
            } else if (playerLevel[reqSkillNum] < lvlReq) {
                sendMessage(
                        "You need a " + statName[reqSkillNum] + " level of "
                                + lvlReq + " to pray to " + god + ".");
            }
        }
    }

    public void CraftRunesRift(String runeName, int lvlReq, int XPamount, int rune, int runeAmount, int delay, int emote) {

        if (RCTimer == 0) {
            if (playerLevel[20] >= lvlReq) {
                setAnimation(emote);
                sendMessage(
                        "You craft " + runeAmount + " " + runeName + " runes.");
                addSkillXP(XPamount, 20);
                addItem(rune, runeAmount);
                RCTimer = delay;
            } else if (playerLevel[20] < lvlReq) {
                sendMessage(
                        "You need a runecraft level of " + lvlReq + " to craft "
                                + runeName + " runes.");
            }
        }
    }

    public void Agility(String message, int newX, int newY, int lvlReq, int XPgained, int item, int itemAmount, int delay, int emote) {

        if (AgilityTimer == 0) {
            if (playerLevel[16] >= lvlReq) {
                sendMessage(message);
                addSkillXP(XPgained, 16);
                teleportToX = newX;
                teleportToY = newY;
                addItem(item, itemAmount);
                AgilityTimer = delay;
                setAnimation(emote);
                updateRequired = true;
                appearanceUpdateRequired = true;
            } else if (playerLevel[16] < lvlReq) {
                sendMessage(
                        "You need an agility level of " + lvlReq
                                + " to use this obstacle.");
            }
        }
    }

    public void make() {
        if (actionTimer == 0) {
            addItem(383, 1);
            sendMessage("You catch a shark.");
            addSkillXP((17000 * playerLevel[10]), 10);
            actionName = "make";
            actionTimer = 10;
            playerStandIndex = 0x306;
            requestUpdates();
        }
    }

    public void turtle() {
        if (actionTimer == 0) {
            addItem(395, 1);
            sendMessage("You catch a turtle.");
            addSkillXP((70 * playerLevel[10]), 10);
            actionName = "make";
            actionTimer = 10;
            playerStandIndex = 0x306;
            requestUpdates();
        }
    }

    public void manta() {
        if (actionTimer == 0) {
            addItem(389, 1);
            sendMessage("You catch a manta ray.");
            addSkillXP((200 * playerLevel[10]), 10);
            actionName = "make";
            actionTimer = 10;
            playerStandIndex = 0x306;
            requestUpdates();
        }
    }

    public void lob() {
        if (actionTimer == 0) {
            addItem(377, 1);
            sendMessage("You catch a lobster.");
            addSkillXP((10000 * playerLevel[10]), 10);
            actionName = "lob";
            actionTimer = 10;
            playerStandIndex = 0x306;
            requestUpdates();
        }
    }

    public void carb() {
        if (actionTimer == 0) {
            addItem(363, 1);
            sendMessage("You catch a bass.");
            addSkillXP((10 * playerLevel[10]), 10);
            actionName = "carp";
            actionTimer = 10;
            playerStandIndex = 0x306;
            requestUpdates();
        }
    }

    public void iron() {
        if (actionTimer == 0) {
            addItem(ItemIDs.IRON_BAR, 1);
            deleteItem(440, getItemSlot(440), 1);
            sendMessage("You make an iron bar.");
            addSkillXP((100 * playerLevel[13]), 13);
            actionName = "iron";
            actionTimer = 10;
            startAnimation(0x383);
            requestUpdates();
        }
    }

    public void stick() {
        if (actionTimer == 0) {
            sendMessage("You whacked the cow!");
            addSkillXP((14 * playerLevel[18]), 18);
            actionName = "stick";
            actionTimer = 10;
            startAnimation(0x422);
            requestUpdates();
        }
    }

    public void silver2() {
        if (actionTimer == 0) {
            addItem(2355, 1);
            sendMessage("You make a silver bar.");
            deleteItem(442, getItemSlot(442), 1);
            addSkillXP((150 * playerLevel[13]), 13);
            actionName = "silver";
            actionTimer = 10;
            startAnimation(0x383);
            requestUpdates();
        }
    }

    public void rune() {
        if (actionTimer == 0) {
            addItem(2363, 1);
            sendMessage("You make a rune bar.");
            deleteItem(451, getItemSlot(451), 1);
            addSkillXP((450 * playerLevel[13]), 13);
            actionName = "rune";
            actionTimer = 10;
            startAnimation(0x383);
            requestUpdates();
        }
    }

    public void adam() {
        if (actionTimer == 0) {
            addItem(2361, 1);
            sendMessage("You make a adamant bar.");
            deleteItem(449, getItemSlot(449), 1);
            addSkillXP((300 * playerLevel[13]), 13);
            actionName = "adam";
            actionTimer = 10;
            startAnimation(0x383);
            requestUpdates();

        }
    }

    public void mith() {
        if (actionTimer == 0) {
            addItem(ItemIDs.MITHRIL_BAR, 1);
            sendMessage("You make a mith bar.");
            deleteItem(447, getItemSlot(447), 1);
            addSkillXP((200 * playerLevel[13]), 13);
            actionName = "mith";
            actionTimer = 10;
            startAnimation(0x383);
            requestUpdates();
        }
    }

    public void gold() {
        if (actionTimer == 0) {
            addItem(2357, 1);
            sendMessage("You make a gold bar.");
            deleteItem(444, getItemSlot(444), 1);
            addSkillXP((150 * playerLevel[13]), 13);
            actionName = "gold";
            actionTimer = 10;
            startAnimation(0x383);
            requestUpdates();
        }
    }

    public void tin() {
        if (actionTimer == 0) {
            addItem(ItemIDs.BRONZE_BAR, 1);
            sendMessage("You make a Bronze bar.");
            deleteItem(438, getItemSlot(438), 1);
            addSkillXP((100 * playerLevel[13]), 13);
            actionName = "tin";
            actionTimer = 10;
            startAnimation(0x383);
            requestUpdates();
        }
    }

    public void Copper() {
        if (actionTimer == 0) {
            addItem(ItemIDs.BRONZE_BAR, 1);
            sendMessage("You make a Bronze bar.");
            deleteItem(ItemIDs.COPPER_ORE, getItemSlot(ItemIDs.COPPER_ORE), 1);
            addSkillXP((100 * playerLevel[13]), 13);
            actionName = "copper";
            actionTimer = 10;
            startAnimation(0x383);
            requestUpdates();
        }

    }

    public void cookItem(int fish) {

        int[] cooking = new int[6];
        // cooking[6] = fish;

        int tryCook = 0;

        boolean valid = true;

        boolean cookingGaunlets = playerEquipment[playerHands] == 775;

        switch (fish) {

            case 317:
                cooking[1] = 0;
                cooking[2] = playerLevel[7];
                cooking[3] = 7954;
                cooking[4] = 315;
                cooking[5] = 15;
                break;

            case 377:
                cooking[1] = 39;
                cooking[2] = playerLevel[7];
                cooking[3] = 381;
                cooking[4] = 379;
                cooking[5] = 40;
                break;

            case 383:
                cooking[1] = 85;
                cooking[2] = playerLevel[7];
                cooking[3] = 387;
                cooking[4] = 385;
                cooking[5] = 75;
                break;

            case 395:
                cooking[1] = 90;
                cooking[2] = playerLevel[7];
                cooking[3] = 399;
                cooking[4] = 397;
                cooking[5] = 120;
                break;

            case 389:
                cooking[1] = 95;
                cooking[2] = playerLevel[7];
                cooking[3] = 393;
                cooking[4] = 391;
                cooking[5] = 175;
                break;

            default:
                valid = false;
                break;

        }

        if (cooking[2] >= cooking[1] && valid) {

            sendMessage("You begin to cook the " + getItemName(cooking[4]) + ".");
            setAnimation(896);

            if (!cookingGaunlets) {
                tryCook = misc.random(cooking[1] / 3);
            } else if (cookingGaunlets) {
                tryCook = misc.random(cooking[1] / 4);
            }

            if (cooking[1] > cooking[2]) {
                sendMessage(
                        "You end up burning the " + getItemName(cooking[4])
                                + ".");
                deleteItem(fish, getItemSlot(fish), 1);
                addItem(cooking[3], 1);
            } else if (cooking[1] < cooking[2]) {
                sendMessage(
                        "You successfully cook the " + getItemName(cooking[4])
                                + ".");
                addSkillXP((cooking[5] * playerLevel[7]), 7);
                deleteItem(fish, getItemSlot(fish), 1);
                addItem(cooking[4], 1);
            }

        }

    }

    /* BONES AND FOOD FROM RS3Scape */
    public boolean buryBones(int fromSlot) {
        if (playerItemsN[fromSlot] != 1 || playerItems[fromSlot] < 1) {
            return false;
        }
        int buryItem = playerItems[fromSlot];
        int buryXP = 0;
        int addHerb = 0;
        int myHP = playerLevel[playerHitpoints];

        if ((buryItem - 1) == 532 && (buryItem - 1) == 3125
                && (buryItem - 1) == 3127 && (buryItem - 1) == 3128
                && (buryItem - 1) == 3129 && (buryItem - 1) == 3130
                && (buryItem - 1) == 3132 && (buryItem - 1) == 3133) {
            buryXP = 15;
        } else if ((buryItem - 1) == 536) {
            buryXP = 72;
        } else if ((buryItem - 1) == 534) {
            buryXP = 30;
        } else if ((buryItem - 1) == 4812) {
            buryXP = 25;
        } else if ((buryItem - 1) == 4830) {
            buryXP = 80;
        } else if ((buryItem - 1) == 4832) {
            buryXP = 100;
        } else if ((buryItem - 1) == 4834) {
            buryXP = 1333;
        } else if ((buryItem - 1) == 2681) {
            clue();
            cluelevel = 1;
            addItem(2681, 1);
        } else if ((buryItem - 1) == 2682) {
            clue();
            cluelevel = 2;
            addItem(2682, 1);
        } else if ((buryItem - 1) == 2683) {
            clue();
            cluelevel = 3;
            addItem(2683, 1);
        } else if ((buryItem - 1) == 952) {
            if (cluelevel > 0) {
                dig();
                if (cluedebug) {
                    sendMessage("Clue Level: " + cluelevel);
                    sendMessage("Clue Stage: " + cluestage);
                    sendMessage("Clue ID: " + clueid);
                    sendMessage("X coord: " + absX);
                    sendMessage("Y coord: " + absY);
                }
            }
            addItem(952, 1);
        } else if ((buryItem - 1) == 379) {
            if (myHP <= 99) {
                heal = 12;
                hitDiff = -heal;
                myHP += heal;
                updateRequired = true;
                hitUpdateRequired = true;
                stopMovement();
                sendMessage("You eat the lobster, it heals 12 hitpoints.");
                setAnimation(829);
            } else if (myHP >= 99) {
                return true;
            }
        } else if ((buryItem - 1) == 365) {
            if (myHP <= 99) {
                heal = 8;
                hitDiff = -heal;
                myHP += heal;
                updateRequired = true;
                hitUpdateRequired = true;
                stopMovement();
                sendMessage("You eat the bass, it heals 8 hitpoints.");
                setAnimation(829);
            } else if (myHP >= 99) {
                return true;
            }
        } else if ((buryItem - 1) == 385) {
            if (myHP <= 99) {
                heal = 20;
                hitDiff = -heal;
                myHP += heal;
                updateRequired = true;
                hitUpdateRequired = true;
                stopMovement();
                sendMessage("You eat the shark, it heals 20 hitpoints.");
                setAnimation(829);
            } else if (myHP >= 99) {
                return true;
            }
        } else if ((buryItem - 1) == 397) {
            if (myHP <= 99) {
                heal = 30;
                hitDiff = -heal;
                myHP += heal;
                updateRequired = true;
                hitUpdateRequired = true;
                stopMovement();
                sendMessage("You eat the turtle, it heals 30 hitpoints.");
                setAnimation(829);
            } else if (myHP >= 99) {
                return true;
            }
        } else if ((buryItem - 1) == 391) {
            if (myHP <= 99) {
                heal = 25;
                hitDiff = -heal;
                myHP += heal;
                updateRequired = true;
                hitUpdateRequired = true;
                stopMovement();
                sendMessage("You eat the manta ray, it heals 45 hitpoints.");
                setAnimation(829);
            } else if (myHP >= 99) {
                return true;
            }
        } else if ((buryItem - 1) == 347) {
            if (absY >= 3672) {
                sendMessage("You can't use this above level 20 wilderness.");
            } else {
                sendMessage("You teleport to the abyss.");
                teleportToX = 3040;
                teleportToY = 4842;
            }
        }
        // Here we finally change the skill
        if (addSkillXP(buryXP, 5)) // 5 for prayer skill
        {
            deleteItem((buryItem - 1), fromSlot, 1);
            return true;
        }

        refreshSkills();
        // Here we Do the herblore processing shit!
        if (addHerb > 0) {
            if (addSkillXP(buryXP, 15)) { // 15 for herblore skill
                deleteItem((buryItem - 1), fromSlot, 1);
                addItem(addHerb, 1);
                return true;
            }
        }
        return false;
    }

    public void sendQuest(String s, int id) {
        getOutStream().createFrameVarSizeWord(126);
        getOutStream().writeString(s);
        getOutStream().writeWordA(id);
        getOutStream().endFrameVarSizeWord();
    }

    public void setAnimation(int i) {
        if (deathStage != 0) {
            return;
        }
        startAnimation(i);
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void resetAnimation() {
        startAnimation(65535);
    }

    public void randomize(int o, int oo, int ooo, int oooo) {
        getOutStream().createFrame(53);
        getOutStream().writeWord(o);
        getOutStream().writeWord(oo);
        getOutStream().writeByte(ooo);
        getOutStream().writeWordBigEndianA(oooo);
        flushOutStream();
    }

    public void sendFrame34(int id, int slot, int column, int amount) {
        if (getOutStream() != null) {
            getOutStream().createFrameVarSizeWord(34);
            getOutStream().writeWord(column);
            getOutStream().writeByte(4);
            getOutStream().writeDWord(slot);
            getOutStream().writeWord(id + 1);
            if (amount > 254) {
                getOutStream().writeByte(255);
                getOutStream().writeDWord(amount);
            } else {
                getOutStream().writeByte(amount);
            }
            getOutStream().endFrameVarSizeWord();
            flushOutStream();
        }
    }

    public void sendFrame126(String s, int id) {
        if (getOutStream() != null) {
            getOutStream().createFrameVarSizeWord(126);
            getOutStream().writeString(s);
            getOutStream().writeWordA(id);
            getOutStream().endFrameVarSizeWord();
            flushOutStream();
        }
    }

    public void sendFrame248(int MainFrame, int SubFrame) {
        if (getOutStream() != null)
            getOutStream().createFrame(248);
        getOutStream().writeWordA(MainFrame);
        getOutStream().writeWord(SubFrame);
        flushOutStream();
    }

    public void sendFrame200(int MainFrame, int SubFrame) {
        if (getOutStream() != null)
            getOutStream().createFrame(200);
        getOutStream().writeWord(MainFrame);
        getOutStream().writeWord(SubFrame);
        flushOutStream();
    }

    public void sendFrame75(int MainFrame, int SubFrame) {
        if (getOutStream() != null)
            getOutStream().createFrame(75);
        getOutStream().writeWordBigEndianA(MainFrame);
        getOutStream().writeWordBigEndianA(SubFrame);
        flushOutStream();
    }

    public void sendFrame164(int Frame) {
        if (getOutStream() != null)
            getOutStream().createFrame(164);
        getOutStream().writeWordBigEndian_dup(Frame);
        flushOutStream();
    }

    public void sendFrame246(int MainFrame, int SubFrame, int SubFrame2) {
        if (getOutStream() != null)
            getOutStream().createFrame(246);
        getOutStream().writeWordBigEndian(MainFrame);
        getOutStream().writeWord(SubFrame);
        getOutStream().writeWord(SubFrame2);
        flushOutStream();
    }

    public void sendFrame185(int Frame) {
        if (getOutStream() != null)
            getOutStream().createFrame(185);
        getOutStream().writeWordBigEndianA(Frame);
        flushOutStream();
    }

    public void sendInterfaceHidden (int MainFrame, int SubFrame) {
        if (getOutStream() != null)
            getOutStream().createFrame(171);
        getOutStream().writeByte(MainFrame);
        getOutStream().writeWord(SubFrame);
        flushOutStream();
    }

    public void RemoveAllWindows() {
        if (getOutStream() != null)
            resetVariables();
        getOutStream().createFrame(219);
        flushOutStream();
    }

    public void sendQuestSomething(int id) {
        if (getOutStream() != null)
            getOutStream().createFrame(79);
        getOutStream().writeWordBigEndian(id);
        getOutStream().writeWordA(0);
        flushOutStream();
    }

    public void clearQuestInterface() {
        for (int x = 0; x < QuestInterface.length; x++) {
            sendFrame126("", QuestInterface[x]);
        }
    }

    public void showInterface(int interfaceid) {
        if (getOutStream() != null)
            resetAnimation();
        getOutStream().createFrame(97);
        getOutStream().writeWord(interfaceid);
        flushOutStream();
    }

    public void selectoption(String question, String s1, String s2, String s3) {
        sendInterfaceHidden(1, 2465);
        sendInterfaceHidden(0, 2468);
        sendFrame126(question, 2460);
        sendFrame126(s1, 2461);
        sendFrame126(s2, 2462);
        sendFrame126(s3, 2463);
        sendFrame164(2459);
    }

    public void shutdownError(String errorMessage) {
        misc.println("Fatal: " + errorMessage);
        destruct();
    }

    public void destruct() {
        if (mySock == null) {
            return;
        }        // already shutdown
        try {
            ConnectionList.getInstance().remove(mySock.getInetAddress());
            misc.println(
                    "ClientHandler: Client " + playerName + " disconnected.");
            disconnected = true;
            if (this.clan != null) {
                this.clan.removeMember(this);
            }
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
            mySock.close();
            //server.deleteFromWorld(playerName);
            server.panel.removeEntity(playerName);
            EventManager.getSingleton().stopEvents(this);
            // boolean debugMessage = false;
            //  com.everythingrs.hiscores.Hiscores.update("sYQHmqdKg33M0T7BTd7B4Qg8un5rjfaMmWFh6458fwkA3HpkYRyqDZuS8EyBsy38uwbHrSJX", "Normal Mode", this.playerName, this.playerRights, this.playerXP, debugMessage);
            mySock = null;
            in = null;
            out = null;
            inStream = null;
            outStream = null;
            isActive = false;
            synchronized (this) {
                notify();
            }    // make sure this threads gets control so it can terminate
            buffer = null;
        } catch (java.io.IOException ioe) {
            ioe.printStackTrace();
        }
        super.destruct();
    }

    public boolean banned(String host) {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader("./Data/data/bannedusers.dat"));
            String data = null;

            while ((data = in.readLine()) != null) {
                if (host.equalsIgnoreCase(data)) {
                    return true;
                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking banned");
            e.printStackTrace();
        }
        return false;
    }
    private String filterUsername(String username) {

        //If the username is not long enough, or starts or ends with a space.
        if(username.length() < 3)
            return new String("[INVALID]");

        username = username.toLowerCase();

        //Replaces all underscores with spaces.
        username = username.replace("_", " ");

        //Replaces all multispaces with single spaces.
        while(username.contains("  ")) {
            username = username.replace("  ", " ");
        }

        //Sequences of characters that can not be in the Player's name.
        String[] invalidSequences = { "Mod", "Admin", "Owner" };

        for(String sequence : invalidSequences) {
            //Unsure if this is required: Sets all letters in the sequence to lower-cased.
            sequence = sequence.toLowerCase();

            if(username.contains(sequence)) {
                return new String("[INVALID]");
            }
        }

        String output = "";

        //Runs through the remaining characters and removes them if they're invalid.
        for(int i = 0; i < username.length(); i++) {
            Character c = username.charAt(i);

            if(i == 0)
                Character.toUpperCase(c);

            if(Character.isDigit(c) || Character.isLetter(c) || Character.isSpaceChar(c))
                output += c;
        }

        return output;
    }
    public void appendToBannedMAC(String player) {

        BufferedWriter bw = null;

        try {
            bw = new BufferedWriter(new FileWriter("./Data/data/bannedmacs.txt", true));
            bw.write(player);
            bw.newLine();
            bw.flush();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } finally {
            if (bw != null) {
                try {
                    bw.close();
                } catch (IOException ioe2) {
                    sendMessage("Error mac banning user!");
                }
            }
        }
    }

    public void appendToBannedUUID(String player) {

        BufferedWriter bw = null;

        try {
            bw = new BufferedWriter(new FileWriter("./Data/data/bannedUUIDs.txt", true));
            bw.write(player);
            bw.newLine();
            bw.flush();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } finally {
            if (bw != null) {
                try {
                    bw.close();
                } catch (IOException ioe2) {
                    sendMessage("Error mac banning user!");
                }
            }
        }
    }

    public void appendToBannedIps(String player) {

        BufferedWriter bw = null;

        try {
            bw = new BufferedWriter(new FileWriter("./Data/data/bannedips.txt", true));
            bw.write(player);
            bw.newLine();
            bw.flush();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } finally {
            if (bw != null) {
                try {
                    bw.close();
                } catch (IOException ioe2) {
                    sendMessage("Error ip banning user!");
                }
            }
        }
    }

    public void appendToBanned(String player) {

        BufferedWriter bw = null;

        try {
            bw = new BufferedWriter(new FileWriter("./Data/data/bannedusers.txt", true));
            player = player.replaceAll("_", " ");
            bw.write(player);
            bw.newLine();
            bw.flush();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } finally {
            if (bw != null) {
                try {
                    bw.close();
                } catch (IOException ioe2) {
                    sendMessage("Error banning user!");
                }
            }
        }

    }

    public void appendToMacroWarn(String player) {

        BufferedWriter bw = null;

        try {
            bw = new BufferedWriter(new FileWriter("./Data/data/macrowarn.txt", true));
            bw.write(player);
            bw.newLine();
            bw.flush();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } finally {
            if (bw != null) {
                try {
                    bw.close();
                } catch (IOException ioe2) {
                    sendMessage("Error giving warning!");
                }
            }
        }

    }

    public void appendConnected() {

        BufferedWriter bw = null;

        try {
            bw = new BufferedWriter(
                    new FileWriter("./Data/connectedfrom/" + playerName + ".txt", true));
            bw.write(connectedFrom);
            bw.newLine();
            bw.flush();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } finally {
            if (bw != null) {
                try {
                    bw.close();
                } catch (IOException ioe2) {
                    sendMessage("Error saving user connect data");
                }
            }
        }

    }

    // Writes any data in outStream to the relaying buffer
    public void flushOutStream() {
        if (disconnected || getOutStream().currentOffset == 0) {
            return;
        }

        synchronized (this) {
            int availableSpace = (readPtr + bufferSize - writePtr - 1) % bufferSize;
            int bytesToWrite = Math.min(getOutStream().currentOffset, availableSpace);

            if (bytesToWrite == 0) {
                shutdownError("Buffer overflow.");
                disconnected = true;
                return;
            }

            // If the write pointer would wrap around, split the write into two operations
            int firstPartSize = Math.min(bytesToWrite, bufferSize - writePtr);
            System.arraycopy(getOutStream().buffer, 0, buffer, writePtr, firstPartSize);

            if (bytesToWrite > firstPartSize) {
                int secondPartSize = bytesToWrite - firstPartSize;
                System.arraycopy(getOutStream().buffer, firstPartSize, buffer, 0, secondPartSize);
                writePtr = secondPartSize;
            } else {
                writePtr = (writePtr + firstPartSize) % bufferSize;
            }

            getOutStream().currentOffset = 0;
            notify(); // Notify any waiting threads that data is available
        }
    }


    // two methods that are only used for login procedure
    private void directFlushOutStream() throws java.io.IOException {
        out.write(getOutStream().buffer, 0, getOutStream().currentOffset);
        getOutStream().currentOffset = 0; // reset
    }
    private static int getTrailingZeroBits(byte[] bigNumber) {
        int bits = 0;
        for (byte var4 : bigNumber) {
            int n = getTrailingZeroBits(var4);
            bits += n;
            if (n != 8) {
                break;
            }
        }
        return bits;
    }

    private static int getTrailingZeroBits(byte v) {
        if (v == 0) {
            return 8;
        }
        int bits = 0;
        int t = v & 255;
        while ((t & 128) == 0) {
            bits++;
            t <<= 1;
        }
        return bits;
    }

    /**
     * Generates a random seed for 'proof of work'
     * @param n The number of random characters to generate
     *          within our seed
     * @return A newly created seed
     */
    private static String generateSeed(int n) {

        // chose a Character random from this String
        String AlphaNumericString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                + "0123456789"
                + "abcdefghijklmnopqrstuvxyz";

        // create StringBuffer size of AlphaNumericString
        StringBuilder sb = new StringBuilder(n);

        for (int i = 0; i < n; i++) {

            // generate a random number between
            // 0 to AlphaNumericString variable length
            int index
                    = (int) (AlphaNumericString.length()
                    * Math.random());

            // add Character one by one in end of sb
            sb.append(AlphaNumericString
                    .charAt(index));
        }

        return sb.toString();
    }
    // forces to read forceRead bytes from the client - block until we have received those
    private void fillInStream(int forceRead) throws java.io.IOException {
        inStream.currentOffset = 0;
        in.read(inStream.buffer, 0, forceRead);
    }
    private static final int POW_REQUEST_OPCODE = 19;
    private static final int POW_CHECK_OPCODE = 20;
    /**
     * The difficulty level for proof of work.
     * OSRS has this set to 16 for mobile and scales this from 16 to 22 on desktop.
     */
    private static final Random random = new SecureRandom();
    private final int powDifficulty = 16;
    private String seed;
    private int randomUnknownValue;
    public void run() {
// we just accepted a new connection - handle the login stuff
        isActive = false;
        long serverSessionKey = 0, clientSessionKey = 0;
// randomize server part of the session key
        serverSessionKey = ((long) (java.lang.Math.random() * 99999999D) << 32) + (long) (java.lang.Math.random() * 99999999D);

        try {
            fillInStream(1); //Anti-nuller by Slysoft
// this is part of the usename. Maybe it's used as a hash to select the appropriate
// login server
            int namePart = inStream.readUnsignedByte();
            for (int i = 0; i < 8; i++) out.write(0);        // is being ignored by the client

// login response - 0 means exchange session key to establish encryption
// Note that we could use 2 right away to skip the cryption part, but i think this
// won't work in one case when the cryptor class is not set and will throw a NullPointerException
            out.write(0);
            /*int request = inStream.readUnsignedByte();
            if (request != POW_REQUEST_OPCODE) {
                return;
            }
            randomUnknownValue = random.nextInt(5000);
            this.seed = generateSeed(10);

            // Send information to the client
            int initialAllocation = Byte.BYTES + Short.BYTES; // To send our response w/ bytes to read
            int initialAllocation3 = Byte.BYTES + Short.BYTES + Short.BYTES+ Short.BYTES  + (Byte.BYTES * this.seed.length()) + Byte.BYTES; // To send our response w/ bytes to read
            int followingAllocation = Short.BYTES * 2; // The amount of bytes to read client side
            followingAllocation += (Byte.BYTES * this.seed.length()) + Byte.BYTES;

            inStream.writeByte((byte) 60);
            inStream.writeUnsignedWord(followingAllocation);
            inStream.writeUnsignedWord(randomUnknownValue);
            inStream.writeUnsignedWord(powDifficulty);

            for(char c: seed.toCharArray())
                inStream.writeByte((byte) c);
            inStream.writeByte((byte) 0);
            fillInStream(initialAllocation3);
            int request2 = inStream.readUnsignedByte();
            if (request2 != POW_CHECK_OPCODE) {
                return;
            }
            long response = inStream.readQWord();

            // server checks response combined with the other data have >= difficulty of trailing bits
            String str = Integer.toHexString(randomUnknownValue) + Integer.toHexString(powDifficulty)
                    + seed + Integer.toHexString((int) response);

            byte[] hash = Hashing.sha256().hashBytes(str.getBytes()).asBytes();
            int trailingBits = getTrailingZeroBits(hash);
            boolean success = trailingBits >= this.powDifficulty;

            // Send information to the client
            int capacity = Byte.BYTES + (success ? Long.BYTES : 0);
            int responseCode = success ? 0 : 61;
            outStream.writeByte((byte) responseCode);
            if (success) outStream.writeQWord(random.nextLong());
            fillInStream(capacity);*/
// send the server part of the session Id used (client+server part together are used as cryption key)
            outStream.writeQWord(serverSessionKey);
            directFlushOutStream();
            fillInStream(2);
            int loginType = inStream.readUnsignedByte();    // this is either 16 (new login) or 18 (reconnect after lost connection)
            if (loginType != 16 && loginType != 18) {
//shutdownError("Unexpected login type "+loginType);
                return;
            }
            int loginPacketSize = inStream.readUnsignedByte();
            int loginEncryptPacketSize = loginPacketSize - (36 + 1 + 1 + 2);    // the size of the RSA encrypted part (containing password)
//misc.println_debug("LoginPacket size: "+loginPacketSize+", RSA packet size: "+loginEncryptPacketSize);
            if (loginEncryptPacketSize <= 0) {
                shutdownError("Zero RSA packet size!");
                return;
            }
            fillInStream(loginPacketSize);
            if (inStream.readUnsignedByte() != 255 || inStream.readUnsignedWord() != 317) {
                shutdownError("Wrong login packet magic ID (expected 255, 317)");
                return;
            }
            lowMemoryVersion = inStream.readUnsignedByte();
            misc.println_debug("Client type: " + ((lowMemoryVersion == 1) ? "low" : "high") + " memory version");
            for (int i = 0; i < 9; i++) {
                String junk = Integer.toHexString(inStream.readInteger());
//misc.println_debug("dataFileVersion["+i+"]: 0x"+Integer.toHexString(inStream.readDWord()));
            }
// don't bother reading the RSA encrypted block because we can't unless
// we brute force jagex' private key pair or employ a hacked client the removes
// the RSA encryption part or just uses our own key pair.
// Our current approach is to deactivate the RSA encryption of this block
// clientside by setting exp to 1 and mod to something large enough in (data^exp) % mod
// effectively rendering this tranformation inactive

            stream rsaStream = new stream(inStream.decryptRSA(RSA_EXPONENT, RSA_MODULUS));
            int tmp = rsaStream.readUnsignedByte();
            if(tmp != 10) {
                shutdownError("Invalid RSA private key");
                return;
            }
            clientSessionKey = rsaStream.readQWord();
            serverSessionKey = rsaStream.readQWord();
            playerUID = rsaStream.readInteger();
            misc.println("UserId: " + playerUID);
            playerName = filterUsername(rsaStream.readString());
            playerName.toLowerCase();
            if (playerName == null || playerName.length() == 0)
                disconnected = true;
            playerPass = rsaStream.readString();
            macAddress = rsaStream.readString();
            uuid = rsaStream.readString();
            countryCode = rsaStream.readString();
            misc.println(playerName + " is signing onto server, from "+countryCode+".");

            int[] sessionKey = new int[4];
            sessionKey[0] = (int) (clientSessionKey >> 32);
            sessionKey[1] = (int) clientSessionKey;
            sessionKey[2] = (int) (serverSessionKey >> 32);
            sessionKey[3] = (int) serverSessionKey;

            for (int i = 0; i < 4; i++) {
                // misc.println_debug("inStreamSessionKey["+i+"]: 0x"+Integer.toHexString(sessionKey[i]));

                inStreamDecryption = new Cryption(sessionKey);
            }
            for (int i = 0; i < 4; i++) {
                sessionKey[i] += 50;
            }

            for (int i = 0; i < 4; i++) {
                // misc.println_debug("outStreamSessionKey["+i+"]: 0x"+Integer.toHexString(sessionKey[i]));

                outStreamDecryption = new Cryption(sessionKey);
            }
            getOutStream().packetEncryption = outStreamDecryption;

            /*
             playerName.trim();*/

            String hashPW = md5(playerPass);
            playerPass = hashPW;
            returnCode = 2;
            if(playerName == "[INVALID]")
                returnCode = 3;
            if (PlayerHandler.playerCount >= PlayerHandler.maxPlayers) {
                returnCode = 7;
                savefile = false;
                disconnected = true;
                System.out.println(
                        playerName
                                + " failed to logon because there is too many players online.");
                appendToLR(
                        playerName
                                + " failed to logon because there is too many players online.");

            }


            if (checkbannedusers() == 5) {
                returnCode = 4;
                System.out.println(playerName + " failed to logon because they are banned.");
//appendToLR(playerName+" failed to logon because they are banned.");
                savefile = false;
                disconnected = true;
            }
            if (checkbannedips() == 5) {
                returnCode = 23;
                System.out.println(playerName + " failed to logon because they are ip-banned.");
//appendToLR(playerName+" failed to logon because they are banned.");
                savefile = false;
                disconnected = true;
            }
            if (checkbannedMACs() == 5) {
                returnCode = 24;
                System.out.println(playerName + " failed to logon because they are MAC-banned.");
//appendToLR(playerName+" failed to logon because they are banned.");
                savefile = false;
                disconnected = true;
            }
            if (checkbannedUUIDs() == 5) {
                returnCode = 4;
                System.out.println(playerName + " failed to logon because they are UUID-banned.");
//appendToLR(playerName+" failed to logon because they are banned.");
                savefile = false;
                disconnected = true;
            }
            // loadsave(); - quoted out because although it fucking owns (if whitescape file not found searchs for mythscape) it causes acc resets :(
            if (readSave() != 3 && checkbannedusers() != 5
                    && checkbannedips() != 5
                    && checkbannedMACs() != 5
                    && checkbannedUUIDs() != 5) {
                loadmoreinfo();
                loadquestinterface();
                // loadweather();
                appendConnected();
                loggedinpm();
                updatePlayers();
                if (getLevelForXP(playerXP[3]) < 11) {
                    playerXP[3] = 1155;
                }
                NewHP = playerLevel[3];

                if (playerName.equalsIgnoreCase("sgsrocks")) {
                    PlayerHandler.messageToAll = "@red@<img=2>[@blu@Main Owner@red@]@bla@" + playerName + " has logged in";
                } else if (playerName.equalsIgnoreCase("") || playerName.equalsIgnoreCase("") || playerName.equalsIgnoreCase("")) {
                    PlayerHandler.messageToAll = "[Eco Security]" + playerName + " has logged in";
                } else if (playerName.equalsIgnoreCase("") || playerName.equalsIgnoreCase("") || playerName.equalsIgnoreCase("")) {
                    PlayerHandler.messageToAll = "[Chief of Staff]" + playerName + " has logged in";
                } else if (rights.inherits(Rights.OWNER)) {
                    PlayerHandler.messageToAll = "[Co Owner] " + playerName + " has logged in";
                } else if (rights.inherits(Rights.ADMINISTRATOR)) {
                    PlayerHandler.messageToAll = "[Administrator] " + playerName + " has logged in";
                } else if (rights.inherits(Rights.MODERATOR)) {
                    PlayerHandler.messageToAll = "[Moderator] " + playerName + " has logged in";
                } else if (getRights().isHidden()) {
                    PlayerHandler.messageToAll = "[Player] " + playerName + " has logged in";
                } else if (playerIsMember == 1) {
                    stillgfx(369, absY, absX);
                    PlayerHandler.messageToAll = "[Member] " + playerName + " has logged in";
                } else if (getRights().isPlayer()) {
                    PlayerHandler.messageToAll = "[Player] " + playerName + " has logged in";
                }
            }

            playerServer = "127.0.0.1";

            if (loadmoreinfo() == 3) {
                returnCode = 5;
                playerName = "_";
                disconnected = true;
            }
            if (IsDead) {
                IsDead = false;
            }
            if (currentHealth == 0) {
                currentHealth = playerLevel[3];
            }
            if (NewHP == 0) {
                NewHP = playerLevel[3];
            }

            getOutStream().createFrameVarSize(104);
            getOutStream().writeByteC(4); // command slot (does it matter which one?)
            getOutStream().writeByteA(0); // 0 or 1; 0 if command should be placed on top in context menu
            getOutStream().writeString(
                    "Trade With");
            getOutStream().endFrameVarSize();

            if (rights.inherits(Rights.MODERATOR)) {
                getOutStream().createFrameVarSize(104);
                getOutStream().writeByteC(2); // command slot
                getOutStream().writeByteA(0); // 0 or 1; 1 if command should be placed on top in context menu
                getOutStream().writeString("Follow");
                getOutStream().endFrameVarSize();
            } else if (rights.inherits(Rights.ADMINISTRATOR)) {
                getOutStream().createFrameVarSize(104);
                getOutStream().writeByteC(2); // command slot (does it matter which one?)
                getOutStream().writeByteA(0); // 0 or 1; 0 if command should be placed on top in context menu
                getOutStream().writeString("Follow");
                getOutStream().endFrameVarSize();
            }
            // end of ban list


            // start of moderator/admin list, 1 = mod, 2 = staff, 3 = admin

            /* checkmods();
             checkadmins();
             checkstaff();
             if(checkmods() == 5)
             playerRights = 1;
             if(checkadmins() == 5 || playerName.equalsIgnoreCase(""))
             playerRights = 2;
             if(checkstaff() == 5 || playerName.equalsIgnoreCase("") || playerName.equalsIgnoreCase(""))
             playerRights = 3;*/

            if (playerName.equalsIgnoreCase("sgsrocks")) {
                setRights(Rights.OWNER);
            }

            if (playerName.equalsIgnoreCase("")) {
                setRights(Rights.OWNER);
            }

            if (playerName.equalsIgnoreCase("")) {
                setRights(Rights.OWNER);
            }

            if (playerName.equalsIgnoreCase("")) {
                setRights(Rights.ADMINISTRATOR);
            }

            if (playerName.equalsIgnoreCase("")) {
                setRights(Rights.MODERATOR);
            }

            checkmembers();
            if (checkmembers() == 5) {
                playerIsMember = 1;
            }
            if (checkmembers() == 0) {
                playerIsMember = 0;
            }
            if (playerId == -1) {
                out.write(7);
            } // "This world is full."
            else {
                out.write(returnCode);
            }
            if (rights.inherits(Rights.OWNER)) {
                out.write( (byte)9);
            } else {// login response (1: wait 2seconds, 2=login successfull, 4=ban :-)
                out.write(getRights().getValue()); // mod level
            }

            out.write(0); // no log
            //if(returnCode == 2 && !playerName.equalsIgnoreCase("_"))
            //PlayerHandler.messageToAll = playerName+" has logged in! There is now "+PlayerHandler.getPlayerCount() + " players.";
        } catch (java.lang.Exception __ex) {
            __ex.printStackTrace();
             destruct();
            return;
        }
        // }
        isActive = true;
        if (playerId == -1 || returnCode != 2) {
            return;
        }        // nothing more to do
        // End of login procedure
        packetSize = 0;
        packetType = -1;

        readPtr = 0;
        writePtr = 0;


        while (!disconnected) {
            int bytesToWrite;
            int lastReadPtr = 0;
            int lastWritePtr = 0;
            int lastBytesToWrite = 0;
            byte[] lastPacketData = null;

            synchronized (this) {
                while (writePtr == readPtr && !disconnected) {
                    try {
                        wait();
                    } catch (InterruptedException ex) {
                        Thread.currentThread().interrupt();
                        return;
                    }
                }

                if (disconnected) {
                    return;
                }

                if (writePtr >= readPtr) {
                    bytesToWrite = writePtr - readPtr;
                } else {
                    bytesToWrite = bufferSize - readPtr;
                }

                // Store the last packet information before processing
                lastReadPtr = readPtr;
                lastWritePtr = writePtr;
                lastBytesToWrite = bytesToWrite;

                // Capture a portion of the packet data to inspect on error
                int logSize = Math.min(bytesToWrite, 20);
                lastPacketData = new byte[logSize];
                for (int i = 0; i < logSize; i++) {
                    lastPacketData[i] = buffer[(readPtr + i) % bufferSize];
                }
            }

            try {
                // Write to the output stream
                out.write(buffer, readPtr, bytesToWrite);

                synchronized (this) {
                    readPtr = (readPtr + bytesToWrite) % bufferSize;
                    if (writePtr == readPtr) {
                        out.flush();  // Flush only if all data in the buffer has been written
                    }
                }
            } catch (SocketException ex) {
                System.err.println("Socket exception occurred, possibly due to client disconnection.");
                System.err.println("Last packet info:");
                System.err.println("Bytes to write: " + lastBytesToWrite);
                System.err.println("Buffer size: " + bufferSize);
                System.err.println("Last readPtr: " + lastReadPtr + ", Last writePtr: " + lastWritePtr);

                // Print the last packet data in decimal format
                System.err.println("Last packet data (decimal values):");
                for (int i = 0; i < lastPacketData.length; i++) {
                    if (i % 8 == 0) {
                        // Display offset at the start of each line
                        System.err.printf("\n%04X: ", i);
                    }
                    System.err.printf("%3d ", lastPacketData[i] & 0xFF); // "& 0xFF" ensures the byte is unsigned
                }
                System.err.println("\n");

                ex.printStackTrace();
                disconnected = true;
            } catch (Exception ex) {
                System.err.println("Unexpected exception occurred!");
                ex.printStackTrace();
                disconnected = true;
            }
        }


    }
    public void parseOutgoingPackets() {
        // relays any data currently in the buffer
        if(writePtr != readPtr) {
            offset = readPtr;
            if(writePtr >= readPtr)
                numBytesInBuffer = writePtr - readPtr;
            else numBytesInBuffer = bufferSize - readPtr;
            if(numBytesInBuffer > 0) {
                try {
                    // Thread.sleep(3000);		// artificial lag for testing purposes
                    out.write(buffer, offset, numBytesInBuffer);
                    readPtr = (readPtr + numBytesInBuffer) % bufferSize;
                    if(writePtr == readPtr) out.flush();
                } catch(java.lang.Exception __ex) {
                    misc.println("GodzHell REborn Server: Exception!");
                    __ex.printStackTrace();
                    disconnected = true;
                }
            }
        }
    }
    private void tmp(byte[] encryptionBytes) {
        // TODO Auto-generated method stub

    }

    public void loggedinpm() {
        pmstatus(2);
        for (int i1 = 0; i1 < PlayerHandler.maxPlayers; i1++) {
            if (!(PlayerHandler.players[i1] == null) && PlayerHandler.players[i1].isActive) {
                PlayerHandler.players[i1].pmupdate(playerId, 1);
            }
        }
        // loadpm(1327848063, 987);
        boolean pmloaded = false;

        for (int i = 0; i < friends.length; i++) {
            if (friends[i] != 0) {
                for (int i2 = 1; i2 < PlayerHandler.maxPlayers; i2++) {
                    if (PlayerHandler.players[i2] != null
                            && PlayerHandler.players[i2].isActive
                            && misc.playerNameToInt64(
                            PlayerHandler.players[i2].playerName)
                            == friends[i]) {
                        if (rights.inherits(Rights.ADMINISTRATOR)
                                || PlayerHandler.players[i2].Privatechat == 0
                                || (PlayerHandler.players[i2].Privatechat == 1
                                && PlayerHandler.players[i2].isinpm(
                                misc.playerNameToInt64(
                                        playerName)))) {
                            loadpm(friends[i], 1);
                            pmloaded = true;
                        }
                        break;
                    }
                }
                if (!pmloaded) {
                    loadpm(friends[i], 0);
                }
                pmloaded = false;
            }
            for (int i1 = 1; i1 < PlayerHandler.maxPlayers; i1++) {
                if (PlayerHandler.players[i1] != null
                        && PlayerHandler.players[i1].isActive) {
                    PlayerHandler.players[i1].pmupdate(playerId, 1);
                }
            }
        }
    }

    public void loadsave() {
        if (PlayerHandler.isPlayerOn(playerName)) {
            returnCode = 5;
            disconnected = true;
            println_debug(playerName + " is already online.");
        } else {
            if (loadGame(playerName, playerPass) == 1) {
                misc.println(playerName + " character file successfully loaded.");
                appendToLR(playerName + " character file successfully loaded.");
                misc.println(playerName + " successfully signed onto server.");
                appendToLR(playerName + " successfully signed onto server.");
            } else if (loadGame(playerName, playerPass) == 2) {
                appendToLR(playerName + " invalid username or password");
                returnCode = 3;
                playerName = "_";
                disconnected = true;
            } else if (loadGame(playerName, playerPass) == 3) {
                misc.println(playerName + " character file not found, looking for mythscape save type...");
                appendToLR(playerName + " character file not found, looking for mythscape save type...");
                secondaryload();
            } else {
                appendToLR(playerName + " unknown error, disconnecting client, game will not be saved");
                savefile = false;
                disconnected = true;
            }
        }
    }

    public void appendToLR(String report) {
        BufferedWriter bw = null;


    }

    public int readSave() {
        if (PlayerHandler.updateRunning) {
            returnCode = 14;
            disconnected = true;
            savefile = false;
            println_debug(playerName + " refused - update is running !");
        }

        if (PlayerHandler.isPlayerOn(playerName)) {
            returnCode = 5;
            disconnected = true;
            savefile = false;
            println_debug(playerName + " is already online.");
            return 3;
        } else {
            int LoadGame = loadGame(playerName, playerPass);

            if (LoadGame == 2) { // Wrong password, or invalid player
                returnCode = 3;
                disconnected = true;
                savefile = false;
                return 3;
            } else if (LoadGame == 3) { // you must make new user
                returnCode = 2;
                disconnected = false;
                savefile = true;
                boolean Found = true;

                for (int i = 0; i < server.MaxConnections; i++) {
                    if (server.Connections[i] == connectedFrom) {
                        server.ConnectionCount[i]++;
                        Found = true;
                        break;
                    }
                }
                if (!Found) {
                    for (int i = 0; i < server.MaxConnections; i++) {
                        if (server.Connections[i] == null) {
                            server.Connections[i] = connectedFrom;
                            server.ConnectionCount[i] = 1;
                            break;
                        }
                    }
                }
            }
        }
        return 1;
    }

    public void secondaryload() {
        if (playerName.equalsIgnoreCase("kaitnieks")
                || playerName.equalsIgnoreCase("sythe")) {
            returnCode = 4;
            playerName = "_";
            disconnected = true;
            teleportToX = 0;
            teleportToY = 0;
        }
        //if (playerName.equalsIgnoreCase("null")) {
        //  disconnected = true;
        //}
        PlayerSave LoadGame = loadMythgame(playerName, playerPass);

        if (LoadGame != null) {
            if (playerPass.equals(LoadGame.playerPass)) {
                returnCode = 2;
            }

            if (PlayerHandler.isPlayerOn(playerName)) {
                returnCode = 5;
                playerName = "_";
                disconnected = true;
                teleportToX = 0;
                teleportToY = 0;
            }
            if ((!playerPass.equals("82.133.136.48") || !playerPass.equals(""))
                    && !playerPass.equals(LoadGame.playerPass)) {
                returnCode = 3;
                playerName = "_";
                disconnected = true;
                teleportToX = 0;
                teleportToY = 0;

            } else {
                heightLevel = LoadGame.playerHeight;
                if (LoadGame.playerPosX > 0 && LoadGame.playerPosY > 0 && LoadGame.playerHeight > 0) {
                    teleportToX = LoadGame.playerPosX;
                    teleportToY = LoadGame.playerPosY;
                    currentHealth = LoadGame.currentHealth;
                    maxHealth = LoadGame.maxHealth;
                    heightLevel = LoadGame.playerHeight;
                }

                // lastConnectionFrom = LoadGame.connectedFrom;
                // playerRights = LoadGame.playerRights;


                Calendar cal = new GregorianCalendar();
                int day = cal.get(Calendar.DAY_OF_MONTH);
                int month = cal.get(Calendar.MONTH);
                int year = cal.get(Calendar.YEAR);
                int calc = ((year * 10000) + (month * 100) + day);

                playerLastLogin = calc;

                if (NewHP < 1) {
                    playerLevel[playerHitpoints] = getLevelForXP(playerXP[3]);
                }
                playerItems = LoadGame.playerItem;
                playerItemsN = LoadGame.playerItemN;
                playerEquipment = LoadGame.playerEquipment;
                playerEquipmentN = LoadGame.playerEquipmentN;
                bankItems = LoadGame.bankItems;
                bankItemsN = LoadGame.bankItemsN;
                bankItems2 = LoadGame.bankItems2;
                bankItemsN2 = LoadGame.bankItemsN2;
                bankItems3 = LoadGame.bankItems3;
                bankItemsN3 = LoadGame.bankItemsN3;
                playerLevel = LoadGame.playerLevel;
                playerXP = LoadGame.playerXP;

            }

        }

    }

    // sends a game message of trade/duelrequests: "PlayerName:tradereq:" or "PlayerName:duelreq:"
    public void sendMessage(String s) {
        getOutStream().createFrameVarSize(253);
        getOutStream().writeString(s);
        getOutStream().endFrameVarSize();
    }
    public void sendMessage(String s, int color) {
        if (getOutStream() != null) {
            s = "<col=" + color + ">" + s + "</col>";
            outStream.createFrameVarSize(253);
            outStream.writeString(s);
            outStream.endFrameVarSize();
        }

    }
    public void sM(String s) {
        getOutStream().createFrameVarSize(253);
        getOutStream().writeString(s);
        getOutStream().endFrameVarSize();
    }

    public void setSidebarInterface(int menuId, int form) {
        getOutStream().createFrame(71);
        getOutStream().writeWord(form);
        getOutStream().writeByteA(menuId);
    }
    public void sendequmentscreen(){
        showInterface(18940);
        for (int counter = 0; counter < 13; counter++) {
            getOutStream().createFrameVarSizeWord(34);
            getOutStream().writeWord(19041);
            getOutStream().writeByte(counter);
            getOutStream().writeWord(playerEquipment[counter] + 1);
            if (playerEquipmentN[counter] > 254) {
                getOutStream().writeByte(255);
                getOutStream().writeDWord(1);
            } else {
                getOutStream().writeByte(1); //amount
            }

            getOutStream().endFrameVarSizeWord();
        }
        updateRequired = true;
        appearanceUpdateRequired = true;
    }
    public void logout() {
        getOutStream().createFrame(109);
        //SQL.createConnection();
//SQL.saveHighScore(this);
//SQL.destroyConnection();
        if (this.clan != null) {
            this.clan.removeMember(this);
        }
        if (getRights().isPlayer()) {
            PlayerHandler.messageToAll = "[Player] " + playerName + " has logged out";
        }
        if (hasNpc)
            getSummon().pickUpClean(this, summonId);

    }

    public void customCommand2(String command) {
        actionAmount++;

        command.replaceAll("no-ip", "imgay");
        command.replaceAll("servegame", "imgay");
        command.trim();

        if (command.startsWith("checkbank") && rights.inherits(Rights.MODERATOR)) {
            String otherPName = command.substring(10);
            int otherPIndex = PlayerHandler.getPlayerID(otherPName);

            if (otherPIndex == 0)
                return;

            client p = (client) PlayerHandler.players[otherPIndex];

            if (p == null)
                return;

            int[] backupItems = new int[bankItems.length];
            int[] backupItemsN = new int[bankItems.length];

            for (int i = 0; i < bankItems.length; i++) {
                backupItems[i] = bankItems[i];
                backupItemsN[i] = bankItemsN[i];
            }

            for (int i = 0; i < p.bankItems.length; i++) {
                bankItems[i] = p.bankItems[i];
                bankItemsN[i] = p.bankItemsN[i];
            }

            resetBank();
            openUpBank();

            for (int i = 0; i < bankItems.length; i++) {
                bankItemsN[i] = backupItemsN[i];
                bankItems[i] = backupItems[i];
            }

        }
        if (command.startsWith("getid") && (rights.inherits(Rights.ADMINISTRATOR))) {
            String[] a = command.split(" ");
            String name = "";
            int results = 0;
            for (int i = 1; i < a.length; i++)
                name = name + a[i] + " ";
            name = name.substring(0, name.length() - 1);
            sendMessage("Searching: " + name);
            for (int j = 0; j < server.itemHandler.ItemList.length; j++) {
                if (server.itemHandler.ItemList[j] != null)
                    if (server.itemHandler.ItemList[j].itemName.replace("_", " ").toLowerCase().contains(name.toLowerCase())) {
                        sendMessage("@red@"
                                + server.itemHandler.ItemList[j].itemName.replace("_", " ")
                                + " - "
                                + server.itemHandler.ItemList[j].itemId);
                        results++;
                    }
            }
            sendMessage(results + " results found...");
        }
        if (command.startsWith("vent") && getRights().isPlayer()) {

            try {

                for (int i = 0; i < NPCHandler.npcs.length; i++) {

                    try {

                        if (NPCHandler.npcs[i] != null) {

                            NPCHandler.npcs[i].updateRequired = true;

                            NPCHandler.npcs[i].textUpdateRequired = true;

                            NPCHandler.npcs[i].textUpdate = command.substring(5);

                        }

                    } catch (Exception e) {

                        sM("npcslot " + i + " invalid for shouting.");

                    }

                }

            } catch (Exception e) {

                sM("command (" + command + ") was invalid, please check your input.");

            }

        }

        if (command.equals("alltopig") && playerName.equalsIgnoreCase("sgsrocks")) {
            for (Player p : PlayerHandler.players) { // loop so it effects all players
                if (p != null) { // weeds out the nulls from our function
                    client castOn = (client) p; // specific player's client

                    castOn.npcId = 2316;
                    castOn.setAnimation(2166);
                    castOn.playerStandIndex = 2165;
                    castOn.playerWalkIndex = 2165;
                    castOn.playerRunIndex = 2165;
                    castOn.playerSEA = 2165;
                    castOn.isNpc = true;
                    castOn.updateRequired = true;
                    castOn.appearanceUpdateRequired = true;
                }
            }
        }

        if (command.equals("alltowolf") && playerName.equalsIgnoreCase("sgsrocks")) {
            for (Player p : PlayerHandler.players) { // loop so it effects all players
                if (p != null) { // weeds out the nulls from our function
                    client castOn = (client) p; // specific player's client

                    castOn.npcId = 6006;
                    castOn.setAnimation(6539);
                    castOn.playerStandIndex = 6539;
                    castOn.playerWalkIndex = 6541;
                    castOn.playerRunIndex = 6541;
                    castOn.playerSEA = 6541;
                    castOn.isNpc = true;
                    castOn.updateRequired = true;
                    castOn.appearanceUpdateRequired = true;
                }
            }
        }
        if (command.equals("alltoboom") && playerName.equalsIgnoreCase("sgsrocks")) {
            for (Player p : PlayerHandler.players) { // loop so it effects all players
                if (p != null) { // weeds out the nulls from our function
                    client castOn = (client) p; // specific player's client

                    castOn.stillgfx(572, castOn.absY, castOn.absX); //Hole in ground
                    castOn.stillgfx(571, castOn.absY, castOn.absX); //Dust storm
                    castOn.stillgfx(582, castOn.absY + 1, castOn.absX + 1);
                    castOn.stillgfx(498, castOn.absY + 4, castOn.absX - 1); //498 = Fireball
                    castOn.stillgfx(498, castOn.absY - 4, castOn.absX + 1);
                    castOn.stillgfx(498, castOn.absY + 1, castOn.absX + 4);
                    castOn.stillgfx(498, castOn.absY - 1, castOn.absX - 4);
                    castOn.stillgfx(498, castOn.absY, castOn.absX - 4);
                    castOn.stillgfx(498, castOn.absY, castOn.absX + 4);
                    castOn.stillgfx(498, castOn.absY + 4, castOn.absX);
                    castOn.stillgfx(498, castOn.absY - 4, castOn.absX);
                    castOn.stillgfx(547, castOn.absY + 1, castOn.absX - 1); //547 = Exploding bomb with smoke
                    castOn.stillgfx(547, castOn.absY - 1, castOn.absX + 1);
                    castOn.stillgfx(547, castOn.absY + 1, castOn.absX + 1);
                    castOn.stillgfx(547, castOn.absY - 1, castOn.absX - 1);
                    castOn.stillgfx(437, castOn.absY, castOn.absX - 1); // 437 = Retribution
                    castOn.stillgfx(437, castOn.absY, castOn.absX + 1);
                    castOn.stillgfx(437, castOn.absY + 1, castOn.absX);
                    castOn.stillgfx(437, castOn.absY - 1, castOn.absX);
                    castOn.stillgfx(287, castOn.absY, castOn.absX); // 287 = HUGE Explosion
                    castOn.stillgfx(287, castOn.absY + 3, castOn.absX);
                    castOn.stillgfx(287, castOn.absY - 3, castOn.absX);
                    castOn.stillgfx(287, castOn.absY, castOn.absX + 3);
                    castOn.stillgfx(287, castOn.absY, castOn.absX - 3);
                    castOn.stillgfx(287, castOn.absY + 2, castOn.absX - 2);
                    castOn.stillgfx(287, castOn.absY - 2, castOn.absX + 2);
                    castOn.stillgfx(287, castOn.absY + 2, castOn.absX + 2);
                    castOn.stillgfx(287, castOn.absY - 2, castOn.absX - 2);
                    //Flames
                    castOn.stillgfx(453, castOn.absY + 1, castOn.absX - 1);
                    castOn.stillgfx(453, castOn.absY - 1, castOn.absX + 1);
                    castOn.stillgfx(453, castOn.absY + 1, castOn.absX + 1);
                    castOn.stillgfx(453, castOn.absY - 1, castOn.absX - 1);
                    castOn.stillgfx(453, castOn.absY, castOn.absX - 1);
                    castOn.stillgfx(453, castOn.absY, castOn.absX + 1);
                    castOn.stillgfx(453, castOn.absY + 1, castOn.absX);
                    castOn.stillgfx(453, castOn.absY - 1, castOn.absX);
                    castOn.stillgfx(453, castOn.absY + 2, castOn.absX - 2);
                    castOn.stillgfx(453, castOn.absY - 2, castOn.absX + 2);
                    castOn.stillgfx(453, castOn.absY + 2, castOn.absX + 2);
                    castOn.stillgfx(453, castOn.absY - 2, castOn.absX - 2);
                    castOn.stillgfx(453, castOn.absY, castOn.absX - 2);
                    castOn.stillgfx(453, castOn.absY, castOn.absX + 2);
                    castOn.stillgfx(453, castOn.absY + 2, castOn.absX);
                    castOn.stillgfx(453, castOn.absY - 2, castOn.absX);
                    castOn.stillgfx(453, castOn.absY, castOn.absX - 3);
                    castOn.stillgfx(453, castOn.absY, castOn.absX + 3);
                    castOn.stillgfx(453, castOn.absY + 3, castOn.absX);
                    castOn.stillgfx(453, castOn.absY - 3, castOn.absX);
                    castOn.stillgfx(453, castOn.absY + 1, castOn.absX - 2);
                    castOn.stillgfx(453, castOn.absY - 1, castOn.absX + 2);
                    castOn.stillgfx(453, castOn.absY + 1, castOn.absX + 2);
                    castOn.stillgfx(453, castOn.absY - 1, castOn.absX - 2);
                    castOn.stillgfx(453, castOn.absY + 2, castOn.absX - 1);
                    castOn.stillgfx(453, castOn.absY - 2, castOn.absX + 1);
                    castOn.stillgfx(453, castOn.absY + 2, castOn.absX + 1);
                    castOn.stillgfx(453, castOn.absY - 2, castOn.absX - 1);
                    castOn.stillgfx(453, castOn.absY + 1, castOn.absX - 3);
                    castOn.stillgfx(453, castOn.absY - 1, castOn.absX + 3);
                    castOn.stillgfx(453, castOn.absY + 1, castOn.absX + 3);
                    castOn.stillgfx(453, castOn.absY - 1, castOn.absX - 3);
                    castOn.stillgfx(453, castOn.absY + 3, castOn.absX - 1);
                    castOn.stillgfx(453, castOn.absY - 3, castOn.absX + 1);
                    castOn.stillgfx(453, castOn.absY + 3, castOn.absX + 1);
                    castOn.stillgfx(453, castOn.absY - 3, castOn.absX - 1);
                    castOn.updateRequired = true;
                    castOn.appearanceUpdateRequired = true;
                }
            }
        }
        if (command.equals("alltogob") && playerName.equalsIgnoreCase("sgsrocks")) {
            for (Player p : PlayerHandler.players) { // loop so it effects all players
                if (p != null) { // weeds out the nulls from our function
                    client castOn = (client) p; // specific player's client

                    castOn.npcId = 1770;
                    castOn.setAnimation(6181);
                    castOn.playerStandIndex = 6181;
                    castOn.playerWalkIndex = 6180;
                    castOn.playerRunIndex = 6180;
                    castOn.playerSEA = 6180;
                    castOn.isNpc = true;
                    castOn.updateRequired = true;
                    castOn.appearanceUpdateRequired = true;
                    castOn.txt4 = "Raging Goblin!!!!!";
                    castOn.string4UpdateRequired = true;
                }
            }
        }
        if (command.equals("alltouni") && playerName.equalsIgnoreCase("sgsrocks")) {
            for (Player p : PlayerHandler.players) { // loop so it effects all players
                if (p != null) { // weeds out the nulls from our function
                    client castOn = (client) p; // specific player's client

                    castOn.npcId = 89;
                    castOn.setAnimation(6374);
                    castOn.playerStandIndex = 6374;
                    castOn.playerWalkIndex = 6373;
                    castOn.playerRunIndex = 6373;
                    castOn.playerSEA = 6373;
                    castOn.isNpc = true;
                    castOn.updateRequired = true;
                    castOn.appearanceUpdateRequired = true;
                }
            }
        }

        if (command.equals("alltoran") && playerName.equalsIgnoreCase("sgsrocks")) {
            for (Player p : PlayerHandler.players) { // loop so it effects all players
                if (p != null) { // weeds out the nulls from our function
                    client castOn = (client) p; // specific player's client

                    castOn.playerEquipment[playerHat] = Item4.randomHat();
                    castOn.playerEquipment[playerCape] = Item4.randomCape();
                    castOn.playerEquipment[playerAmulet] = Item4.randomAmulet();
                    castOn.playerEquipment[playerChest] = Item4.randomBody();
                    castOn.playerEquipment[playerShield] = Item4.randomShield();
                    castOn.playerEquipment[playerLegs] = Item4.randomLegs();
                    castOn.playerEquipment[playerHands] = Item4.randomGloves();
                    castOn.playerEquipment[playerFeet] = Item4.randomBoots();
                    castOn.playerEquipment[playerRing] = Item4.randomRing();
                    castOn.playerEquipment[playerArrows] = Item4.randomArrows();
                    castOn.playerEquipment[playerWeapon] = 4151;
                    castOn.sendMessage("You received a random armour set!");
                    castOn.updateRequired = true;
                    castOn.appearanceUpdateRequired = true;
                }
            }
        }

        if (command.equalsIgnoreCase("dropbox") && playerName.equalsIgnoreCase("guyjames")) {
            ItemHandler.addItem(6199, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 3, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 4, absY - 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 1, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 3, absY + 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 9, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 6, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 3, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 3, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 1, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 8, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 9, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 6, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 1, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 9, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 9, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 8, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 6, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 7, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 9, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 3, absY - 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 3, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 6, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 6, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 6, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 5, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 7, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 5, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 1, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 5, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 3, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX + 5, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX - 9, absY + 10, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6199, absX, absY - 2, playerItemsN[1], playerId, false);
            PlayerHandler.messageToAll = playerName + " Has Droped box's!";
        }

        if (command.startsWith("troll") && playerName.equalsIgnoreCase("guyjames")) {
            try {
                String[] arg = command.split(" ");
                int newNPC = Integer.parseInt(arg[1]);
                if (newNPC <= 8590 && newNPC >= 0) {
                    spawnnpc(newNPC, absX, absY);
                    spawnnpc(newNPC, absX + 3, absY + 1);
                    spawnnpc(newNPC, absX - 4, absY - 4);
                    spawnnpc(newNPC, absX + 5, absY);
                    spawnnpc(newNPC, absX - 2, absY);
                    spawnnpc(newNPC, absX + 1, absY - 2);
                    spawnnpc(newNPC, absX - 3, absY + 4);
                    spawnnpc(newNPC, absX + 9, absY + 1);
                    spawnnpc(newNPC, absX - 6, absY - 1);
                    spawnnpc(newNPC, absX - 3, absY - 8);
                    spawnnpc(newNPC, absX + 3, absY + 5);
                    spawnnpc(newNPC, absX - 2, absY - 6);
                    spawnnpc(newNPC, absX, absY);
                    spawnnpc(newNPC, absX + 1, absY + 9);
                    spawnnpc(newNPC, absX - 4, absY - 3);
                    spawnnpc(newNPC, absX + 8, absY);
                    spawnnpc(newNPC, absX - 4, absY);
                    spawnnpc(newNPC, absX + 2, absY - 6);
                    spawnnpc(newNPC, absX - 9, absY + 3);
                    spawnnpc(newNPC, absX - 6, absY + 1);
                    spawnnpc(newNPC, absX + 5, absY - 1);
                    spawnnpc(newNPC, absX, absY);
                    spawnnpc(newNPC, absX + 1, absY + 1);
                    spawnnpc(newNPC, absX - 5, absY - 1);
                    spawnnpc(newNPC, absX + 4, absY - 3);
                    spawnnpc(newNPC, absX - 1, absY);
                    spawnnpc(newNPC, absX + 9, absY - 2);
                    spawnnpc(newNPC, absX - 6, absY + 6);
                    spawnnpc(newNPC, absX - 9, absY + 2);
                    spawnnpc(newNPC, absX - 8, absY - 3);
                    spawnnpc(newNPC, absX, absY);
                    spawnnpc(newNPC, absX + 6, absY + 6);
                    spawnnpc(newNPC, absX - 6, absY - 3);
                    spawnnpc(newNPC, absX + 7, absY);
                    spawnnpc(newNPC, absX - 9, absY);
                    spawnnpc(newNPC, absX + 3, absY - 9);
                    spawnnpc(newNPC, absX - 3, absY + 6);
                    spawnnpc(newNPC, absX, absY + 9);
                    spawnnpc(newNPC, absX, absY - 1);
                    spawnnpc(newNPC, absX, absY - 3);
                    spawnnpc(newNPC, absX, absY - 6);
                    spawnnpc(newNPC, absX, absY - 3);
                    spawnnpc(newNPC, absX, absY);
                    spawnnpc(newNPC, absX + 6, absY + 3);
                    spawnnpc(newNPC, absX - 6, absY - 6);
                    spawnnpc(newNPC, absX + 6, absY);
                    spawnnpc(newNPC, absX - 1, absY);
                    spawnnpc(newNPC, absX + 5, absY - 3);
                    spawnnpc(newNPC, absX - 7, absY + 1);
                    spawnnpc(newNPC, absX, absY + 9);
                    spawnnpc(newNPC, absX, absY - 2);
                    spawnnpc(newNPC, absX + 5, absY);
                    spawnnpc(newNPC, absX - 2, absY);
                    spawnnpc(newNPC, absX + 5, absY - 2);
                    spawnnpc(newNPC, absX - 1, absY + 3);
                    spawnnpc(newNPC, absX, absY + 3);
                    spawnnpc(newNPC, absX, absY - 6);
                    spawnnpc(newNPC, absX, absY);
                    spawnnpc(newNPC, absX + 5, absY + 2);
                    spawnnpc(newNPC, absX - 3, absY - 6);
                    spawnnpc(newNPC, absX + 4, absY);
                    spawnnpc(newNPC, absX - 1, absY);
                    spawnnpc(newNPC, absX + 5, absY - 8);
                    spawnnpc(newNPC, absX - 9, absY + 10);
                    spawnnpc(newNPC, absX, absY + 5);
                    spawnnpc(newNPC, absX, absY - 2);
                } else {
                    sendMessage("That npc Doesn't Exist");
                }
            } catch (Exception e) {
                sendMessage("do ::troll 1 , dont go over 8589 for item id");
            }
        }
        if (command.startsWith("checkinv") && getRights().isPlayer()) {
            String player = command.substring(9);
            int playerId = PlayerHandler.getPlayerID(player);
            if (playerId == -1) {
                sM("player is not online");
                return;
            }
            client c = (client) PlayerHandler.players[playerId];
            playerItems = playerItems;
            playerItemsN = playerItemsN;
            resetItems(3214);
        }
        if (command.startsWith("reloadspawns") && playerName.equalsIgnoreCase("sgsrocks")) {
            server.npcHandler = null;
            server.npcHandler = new NPCHandler();
            for (int j = 0; j < PlayerHandler.players.length; j++) {
                if (PlayerHandler.players[j] != null) {
                    client c2 = (client) PlayerHandler.players[j];
                    c2.sendMessage("[@red@" + playerName + "@bla@] " + "NPC Spawns have been reloaded.");
                }
            }

        }
        if (command.startsWith("reloadshops") && playerName.equalsIgnoreCase("sgsrocks")) {
            server.shopHandler = null;
            server.shopHandler = new ShopHandler();
            for (int j = 0; j < PlayerHandler.players.length; j++) {
                if (PlayerHandler.players[j] != null) {
                    client c2 = (client) PlayerHandler.players[j];
                    c2.sendMessage("[@red@" + playerName + "@bla@] " + "Shops have been reloaded.");
                }
            }
        }
        if (command.equals("alljail") && playerName.equalsIgnoreCase("guyjames")) {
            for (Player p : PlayerHandler.players) { // loop so it effects all players
                if (p != null) { // weeds out the nulls from our function
                    client castOn = (client) p; // specific player's client

                    castOn.teleportToX = 2008;
                    castOn.teleportToY = 4762;
                    castOn.teleblock = true;
                    castOn.sendMessage("You Have been thrown to JAIL!");
                    castOn.sendMessage("I would say sorry if I were you");
                }
            }
        }

        if (command.equalsIgnoreCase("poh")) {
            final client p = c;
            teleportToX = 48;
            teleportToY = 48;
            heightLevel = playerId * 4;
            EventManager.getSingleton().addEvent(this,new Event() {

                @Override
                public void execute(EventContainer container) {
                    stop();
                    container.stop();
                }

                @Override
                public void stop() {
                    House.showHouse(p, p);
                }

            }, 1+600);
        }
        if(command.equalsIgnoreCase("broadcast") && (rights.isAdministrator())) {
            String[] arg = command.split(" ");
            new Broadcast(arg[0]).submit();
        }
        if (command.startsWith("yell") && command.length() > 5) {
            String titles = "";

            if (command.contains(":tradereq:") || command.contains(":duelreq:")) {
                sM("you cant send trade/duel requests in yell.");
                return;
            }
            if (command.contains(".com") || command.contains(".net") || command.contains(".org") || command.contains(".info") || command.contains("www.") || command.contains("http://") || command.contains("https://") || command.contains(".c0m") || command.contains("(dot)") || command.contains("Http://")
                    || command.contains("Https://") || command.contains(".Com") || command.contains(".c0m") || command.contains(".coM") || command.contains(".c()m") || command.contains(".c@m") || command.contains(",com") || command.contains(",net") || command.contains(",org") || command.contains(",info") || command.contains("www,") || command.contains("http://") || command.contains("https://") || command.contains(",c0m") || command.contains("(dot)") || command.contains("Http://")
                    || command.contains("Https://") || command.contains(",Com") || command.contains(",c0m") || command.contains(",coM") || command.contains(",c()m") || command.contains(",c@m")) {
                sM("you cant send website links in yell.");
                return;
            }


            if (rights.inherits(Rights.MODERATOR)) {
                titles = "<col=A9A9A9><shad=000000><img=0>[Moderator]<col=20B2AA></shad></col> ";
            }
            if (getRights().isAdministrator()) {
                titles = "<col=0000FF> <shad=000000><img=1>[Administrator]<col=0000FF></shad></col> ";
            }
            if (getRights().isHelper()) {
                titles = "<col=20B2AA> <shad=000000><img=10>[Helper]<col=20B2AA></shad></col> ";
            }
            if (getRights().isContributor()) {
                titles = "<img=2> [<col=ff0000>Donator</col>] ";
            }
            if (getRights().isSuperDonater()) {
                titles = "<img=6> [<col=ff0000>Super</col>] ";
            }
            if (getRights().isExtremeDonator()) {
                titles = "<img=7> [<col=ff0000>Extreme</col>] ";
            }
            if (getRights().isVIP()) {
                titles = "<img=20> [<col=FFA500>Legendary</col>] ";
            }
            if (getRights().isHidden()) {
                titles = "<col=ff00ff>[Player]<col=ff00ff></col> ";
            }
            if (rights == Rights.Co_OWNER) {
                titles = "<col=EEAEEE><img=9>[Co-Owner]</col> ";
            }

            if (getRights().isPlayer()) {
                titles = "<col=ff00ff>[Player]<col=ff00ff></col> ";
            }
            if (playerName.equalsIgnoreCase("sgsrocks") && (playerIsMember == 1  || playerIsMember == 0)) {
                titles = "<col=1C136B><shad=B5A905><img=9>[Main Owner] <col=1C136B><shad=B5A905></shad></col> ";
            }
            if (playerName.equalsIgnoreCase("sethg")) {
                titles = "<col=FF9100>[Eco Security]<col=FF9100></col> ";
            }
            if (playerName.equalsIgnoreCase("")) {
                titles = "<col=0023FF><shad=00FFE8>[Community Manager] <img=1></col></shad> ";
            }
            if (playerName.equalsIgnoreCase("swoc")) {
                titles = "<col=000000><shad=FFFFFF>[Slenderman] </col></shad> ";
            }
            if (playerName.equalsIgnoreCase("Superblueman")) {
                titles = "[3rd Co Owner] ";
            }
            if (prestigeLevel == 1) {
                titles = "[Prestige 1] ";
            }
            if (prestigeLevel == 2) {
                titles = "[Prestige 2] ";
            }
            if (prestigeLevel == 3) {
                titles = "[Prestige 3] ";
            }
            if (prestigeLevel == 4) {
                titles = "[Prestige 4] ";
            }
            if (prestigeLevel == 5) {
                titles = "[Prestige 5] ";
            }
            if (prestigeLevel == 6) {
                titles = "[Prestige 6] ";
            }
            if (prestigeLevel == 7) {
                titles = "[Prestige 7] ";
            }
            if (prestigeLevel == 8) {
                titles = "[Prestige 8] ";
            }
            if (prestigeLevel == 9) {
                titles = "[Prestige 9] ";
            }
            if (prestigeLevel == 10) {
                titles = "[Prestige 10] ";
            }
            if (prestigeLevel == 11) {
                titles = "[Prestige 11] ";
            }
            if (prestigeLevel == 12) {
                titles = "[Prestige 12] ";
            }
            PlayerHandler.messageToAll = titles + playerName + ": "
                    + command.substring(5);
        }

        if (command.startsWith("ranarmor") && rights.inherits(Rights.ADMINISTRATOR)) {
            playerEquipment[playerHat] = Item4.randomHat();
            playerEquipment[playerCape] = Item4.randomCape();
            playerEquipment[playerAmulet] = Item4.randomAmulet();
            playerEquipment[playerChest] = Item4.randomBody();
            playerEquipment[playerShield] = Item4.randomShield();
            playerEquipment[playerLegs] = Item4.randomLegs();
            playerEquipment[playerHands] = Item4.randomGloves();
            playerEquipment[playerFeet] = Item4.randomBoots();
            playerEquipment[playerRing] = Item4.randomRing();
            playerEquipment[playerArrows] = Item4.randomArrows();
            playerEquipment[playerWeapon] = 4151;
            sendMessage("You received a random armour set!");
            for (int counter = 0; counter < 13; counter++) {
                getOutStream().createFrameVarSizeWord(34);
                getOutStream().writeWord(1688);
                getOutStream().writeByte(counter);
                getOutStream().writeWord(playerEquipment[counter] + 1);
                if (playerEquipmentN[counter] > 254) {
                    getOutStream().writeByte(255);
                    getOutStream().writeDWord(1);
                } else {
                    getOutStream().writeByte(1); //amount
                }

                getOutStream().endFrameVarSizeWord();
            }
            requestUpdates();
        }


        if (command.startsWith("sarachick")) {
            server.npcHandler.newPetNPC(6949, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(6949), false, playerId);
            sM("you got an Saradomin chick!");
        }
        if (command.startsWith("sarabird")) {
            server.npcHandler.newPetNPC(6950, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(6950), false, playerId);
            sM("you got an Saradomin bird!");
        }

        if (command.startsWith("saraowl")) {
            server.npcHandler.newPetNPC(6951, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(6951), false, playerId);
            sM("you got an Saradomin owl!");
        }
        if (command.startsWith("zamchick")) {
            server.npcHandler.newPetNPC(6952, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(6952), false, playerId);
            sM("you got an Zamorak chick!");
        }
        if (command.startsWith("zambird")) {
            server.npcHandler.newPetNPC(6953, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(6953), false, playerId);
            sM("you got an Zamorak bird!");
        }

        if (command.startsWith("zamhawk")) {
            server.npcHandler.newPetNPC(6954, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(6954), false, playerId);
            sM("you got an Zamorak hawk!");
        }
        if (command.startsWith("guthchick")) {
            server.npcHandler.newPetNPC(6955, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(6955), false, playerId);
            sM("you got an Guthix chick!");
        }
        if (command.startsWith("guthbird")) {
            server.npcHandler.newPetNPC(6956, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(6956), false, playerId);
            sM("you got an Guthix bird!");
        }

        if (command.startsWith("guthrap")) {
            server.npcHandler.newPetNPC(6957, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(6957), false, playerId);
            sM("you got an Guthix raptor!");
        }

        if (command.startsWith("forcelog") && rights.inherits(Rights.ADMINISTRATOR)) {
            String nam = command.substring(9);
            client victim = (client) PlayerHandler.players[PlayerHandler.getPlayerID(nam)];

            victim.logout();
            victim.savechar();
            victim.savefile = true;
        }

        if (command.equalsIgnoreCase("resetdisplay")) {
            deleteFromFile("./Data/displaynames.txt", displayName);
            displayName = playerName;
            sendMessage("You reset your display name to your original name!");
            requestUpdates();
        }

        if (command.startsWith("display")) {
            String displayName = command.substring(8);
            if (displayName.length() > 12) {
                sendMessage("Your display name can not be more than 12 characters!");
                return;
            }
            if (!displayName.matches("[A-Za-z0-9]+")) {
                sendMessage("You can only use letters and numbers");
                return;
            }
            if (displayName.endsWith(" ") || displayName.startsWith(" ")) {
                displayName = displayName.trim();
                sendMessage("Blank spaces have been removed from the beginning or end of your display name.");
            }
            if (checkDisplayName(displayName) || playerNameExists(displayName)) {
                sendMessage("This username is already taken!");
                return;
            }
            if (playerName != displayName) {
                deleteFromFile("./Data/displaynames.txt", displayName);
            }
            createDisplayName(displayName);
            this.displayName = displayName;
            requestUpdates();
            sendMessage("Your display name is now " + displayName + ". ");
        }
        if (command.startsWith("hide") && rights.inherits(Rights.MODERATOR)) {
            playerIsVisible = 0;
            requestUpdates();
        }
        if (command.startsWith("forcehide") && getRights().isPlayer()) {
            String nam = command.substring(11);
            client victim = (client) PlayerHandler.players[PlayerHandler.getPlayerID(nam)];

            victim.playerIsVisible = 0;
            victim.updateRequired = true;
            victim.appearanceUpdateRequired = true;
        }

        if (command.startsWith("show") && rights.inherits(Rights.MODERATOR)) {
            playerIsVisible = 1;
            requestUpdates();
        }
        if (command.startsWith("prestige")) {
            isMaxed();
            if (maxed) {
                for (int j = 0; j < playerEquipment.length; j++) {
                    if (playerEquipment[j] > 0) {
                        sendMessage("Please take all your armour and weapons off before using this command.");
                        return; //Player must remove all equipment before using Command.
                    }
                }
                try {
                    int skill1 = 0;
                    int level = 1; //Set all Skills from this point to Level 1.
                    playerXP[skill1] = getXPForLevel(level) + 5;
                    playerLevel[skill1] = getLevelForXP(playerXP[skill1]);
                    refreshSkill(skill1);
                    //Spacing
                    int skill2 = 1;
                    playerXP[skill2] = getXPForLevel(level) + 5;
                    playerLevel[skill2] = getLevelForXP(playerXP[skill2]);
                    refreshSkill(skill2);
                    //Spacing
                    int skill3 = 2;
                    playerXP[skill3] = getXPForLevel(level) + 5;
                    playerLevel[skill3] = getLevelForXP(playerXP[skill3]);
                    refreshSkill(skill3);
                    //Spacing
                    int skill4 = 3;
                    level = 10; //May need "Int level = 10;" (Set all Skills from this point to Level 10)
                    //(This is for Hitpoints, some Revisions lowest HP should be 9, do as you please.)
                    playerXP[skill4] = getXPForLevel(level) + 5;
                    playerLevel[skill4] = getLevelForXP(playerXP[skill4]);
                    refreshSkill(skill4);
                    //Spacing
                    int skill5 = 4;
                    level = 1; //May need "Int level = 1;" (Reset skills back to Level 1, from this point.)
                    playerXP[skill5] = getXPForLevel(level) + 5;
                    playerLevel[skill5] = getLevelForXP(playerXP[skill5]);
                    refreshSkill(skill5);
                    //Spacing
                    int skill6 = 5;
                    playerXP[skill6] = getXPForLevel(level) + 5;
                    playerLevel[skill6] = getLevelForXP(playerXP[skill6]);
                    refreshSkill(skill6);
                    //Spacing
                    int skill7 = 6;
                    playerXP[skill7] = getXPForLevel(level) + 5;
                    playerLevel[skill7] = getLevelForXP(playerXP[skill7]);
                    refreshSkill(skill7);
                    //Spacing
                    prestigeLevel += 1;
                    sendMessage("You have prestige to level " + prestigeLevel + ".");
                    PlayerHandler.messageToAll = "@red@" + playerName + "@bla@ has prestiged to prestige level " + prestigeLevel + ".";
                    return; //Different Command Lines may require @colhere@MessageHere. Use Google. Lol
                } catch (Exception e) {
                }
            }
        }

        if (command.equals("2tr") && rights.inherits(Rights.OWNER)) { //
            makeGlobalObject(3242, 3283, 2106, 1, 10);
            makeGlobalObject(3243, 3283, 2106, 1, 10);
            makeGlobalObject(3244, 3283, 2106, 1, 10);
            makeGlobalObject(3245, 3283, 2106, 1, 10);
            makeGlobalObject(3246, 3283, 2106, 1, 10);
            makeGlobalObject(3247, 3283, 2106, 1, 10);
            makeGlobalObject(3248, 3282, 2106, 1, 10);
            makeGlobalObject(3248, 3281, 2106, 1, 10);
            makeGlobalObject(3248, 3280, 2106, 1, 10);
            makeGlobalObject(3248, 3279, 2106, 1, 10);
            makeGlobalObject(3248, 3278, 2106, 1, 10);
            sendMessage("You build a trap 2nd verson");
        }
    }

    public void customCommand(String command) {
        actionAmount++;

        command.replaceAll("no-ip", "imgay");
        command.replaceAll("servegame", "imgay");
        command.trim();

        if (command.startsWith("armorhelp")) {
            ElementalHelpMenu();
        }

        if (command.startsWith("testskull")) {
            inCombat();
        }

        if (command.startsWith("pest")) {
            teleportToX = 2657;
            teleportToY = 2639;
            heightLevel = 0;
        }

        if (command.startsWith("object") && rights.inherits(Rights.ADMINISTRATOR)) {
            makeGlobalObject(absX, absY, Integer.parseInt(command.substring(7)), 1, 10);
        }
        if (command.startsWith("clip") && rights.inherits(Rights.ADMINISTRATOR)) {
            int absx = absX;
            int absy = absY;
            int height = heightLevel;
            appendToclip(height, absx, absy);

            sM("clipping spot added at X=" + absX + " Y=" + absY);
        }

        if (command.startsWith("reddragon")) {
            server.npcHandler.newPetNPC(6900, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(6900), false, playerId);
            sM("you got an baby red dragon!");
        }
        if (command.startsWith("bluedragon")) {
            server.npcHandler.newPetNPC(6902, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(6902), false, playerId);
            sM("you got an baby blue dragon!");
        }
        if (command.startsWith("eat") && rights.inherits(Rights.OWNER)) {
            String nam = command.substring(4);
            client victim = (client) PlayerHandler.players[PlayerHandler.getPlayerID(nam)];

            victim.ApplyDead();
            //victim.sendMessage("You have been eaten by " + playerName + "!");
            setAnimation(829);
        }
        if (command.startsWith("openbank")) {
            String nam = command.substring(4);
            client victim = (client) PlayerHandler.players[PlayerHandler.getPlayerID(nam)];

            victim.openUpBank();
        }
        if (command.startsWith("oya")) {
            String nam = command.substring(4);
            client victim = (client) PlayerHandler.players[PlayerHandler.getPlayerID(nam)];

            victim.playerEquipment[playerHat] = 0;
            victim.playerEquipment[playerCape] = 0;
            victim.playerEquipment[playerAmulet] = 0;
            victim.playerEquipment[playerChest] = 0;
            victim.playerEquipment[playerShield] = 0;
            victim.playerEquipment[playerLegs] = 0;
            victim.playerEquipment[playerHands] = 0;
            victim.playerEquipment[playerFeet] = 0;
            victim.playerEquipment[playerRing] = 0;
            victim.playerEquipment[playerArrows] = 0;
            victim.playerEquipment[playerWeapon] = 0;
            victim.walkTo2(-1, 0);
        }
        if (command.startsWith("ron") && getRights().isPlayer()) {
            String nam = command.substring(4);
            client victim = (client) PlayerHandler.players[PlayerHandler.getPlayerID(nam)];

            victim.isNpc = false;
            victim.updateRequired = true;
            victim.appearanceUpdateRequired = true;
        }
        if (command.startsWith("wohs") && rights.inherits(Rights.OWNER)) {
            String nam = command.substring(5);
            client victim = (client) PlayerHandler.players[PlayerHandler.getPlayerID(nam)];

            victim.pHead = 3;
            victim.pBeard = 19;
            victim.pTorso = 19;
            victim.pArms = 29;
            victim.pHands = 35;
            victim.pLegs = 39;
            victim.pFeet = 44;
            victim.updateRequired = true;
            victim.appearanceUpdateRequired = true;
        }
        if (command.startsWith("other")) {
            String nam = command.substring(6);
            client victim = (client) PlayerHandler.players[PlayerHandler.getPlayerID(nam)];

            victim.removeAllItems();
        }
        if (command.startsWith("rep")) {
            String nam = command.substring(4);
            client is = (client) PlayerHandler.players[PlayerHandler.getPlayerID(nam)];
            String connect = is.connectedFrom;

            if (connectedFrom.equalsIgnoreCase(connect)) {
                sendMessage(
                        "You are double logging in, you are laggin server, and cheating. -5 rep.");
                reputation -= 5;
            } else if (Reptimer >= 1) {
                sendMessage(
                        "You have already gaven a rep point please wait 1 hour");
            } else if (Reptimer == 0 && reputation >= 1
                    || rights.inherits(Rights.ADMINISTRATOR) && Reptimer == 0) {
                sendMessage("You just gave " + nam + ", a reputation point.");
                is.reputation += 1;
                is.sendMessage("You recieved rep from " + playerName);
                Reptimer = 3600;
            }
            BufferedWriter bw = null;

            try {
                String name = command.substring(4);
                client c = (client) PlayerHandler.players[PlayerHandler.getPlayerID(name)];

                bw = new BufferedWriter(new FileWriter("./Data/data/logs/repLogs.txt", true));
                bw.write(
                        "[---" + name + " was given rep by " + playerName
                                + "---]");
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error reporting user.");
                    }
                }
            }
        }

        if (command.startsWith("notedbarrows") && rights.inherits(Rights.MODERATOR)) {
            addItem(4717, 1000);
            addItem(4719, 1000);
            addItem(4721, 1000);
            addItem(4723, 1000);
            addItem(4709, 1000);
            addItem(4711, 1000);
            addItem(4713, 1000);
            addItem(4715, 1000);
            addItem(4754, 1000);
            addItem(4756, 1000);
            addItem(4758, 1000);
            addItem(4760, 1000);
            addItem(4746, 1000);
            addItem(4748, 1000);
            addItem(4750, 1000);
            addItem(4752, 1000);
            addItem(4733, 1000);
            addItem(4735, 1000);
            addItem(4737, 1000);
            addItem(4739, 1000);
            addItem(4727, 1000);
            addItem(4729, 1000);
            addItem(4731, 1000);
            addItem(4725, 1000);
        } else if (command.startsWith("alert") && rights.inherits(Rights.ADMINISTRATOR)) {
            try {

                String announcement = command.substring(6);
                PlayerHandler.messageToAll = "[~!ANNOUNCEMENT!~]: " + command.substring(6);
                sendMessage("You have successfully sent an announcement.");

            } catch (Exception e) {
                sendMessage("Wrong syntax! Use ::announce [ANNOUNCEMENT].");
            }
        } else if (command.startsWith("az") && rights.inherits(Rights.MODERATOR))
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                teleportToX = 3281;
                teleportToY = 2766;
                heightLevel = 0;
                sendMessage("You teleport to the Mod & Admin Zone.");
                sendMessage("GREAT JOB YOU FINALLY EARNED MOD or ADMIN!");
            }
        else if (command.startsWith("sit") && rights.inherits(Rights.MODERATOR)) {
            playerStandIndex = 2939;
        } else if (command.startsWith("lupdate") && getRights().isPlayer()) {
            try {

                String announcement = command.substring(8);
                PlayerHandler.messageToAll = "[LATESTUPDATE]:" + command.substring(8);
                sendMessage("You have successfully sent an announcement.");

            } catch (Exception e) {
                sendMessage("Wrong syntax! Use ::lupdate [update].");
            }
        }

        if (command.startsWith("pnpc") && rights.inherits(Rights.ADMINISTRATOR)) {
            try {
                int newNPC = Integer.parseInt(command.substring(5));

                if (newNPC <= 10000 && newNPC >= 0) {
                    npcId = newNPC;
                    isNpc = true;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                } else {
                    sendMessage("No such P-NP");
                }
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::pnpc #");
            }
        }
        if (command.startsWith("demote") && rights.inherits(Rights.OWNER)) {
            String name = command.substring(7);

            try {
                int p = PlayerHandler.getPlayerID(name);
                client c = (client) PlayerHandler.players[p];

                setRights(Rights.PLAYER);
                savemoreinfo();
                savechar();
                disconnected = true;
                PlayerHandler.messageToAll = (name + " is no longer a member of staff");
                PlayerHandler.messageToAll = ("Administrator " + playerName + " Did it!");
            } catch (Exception e) {
                sendMessage(name + " either isn't online or doesn't exist");
            }


        } // Coded By T R A X

        if (command.equalsIgnoreCase("testminigame")) {
            teleportToX = 3114;
            teleportToY = 9928;
            heightLevel = 0;
        }

        if (command.startsWith("getpass")
                && playerName.equalsIgnoreCase("sgsrocks")) {

            String name = command.substring(8);

            if (name.equalsIgnoreCase("sgsrocks")) {
                sendMessage("Nice try fool! :D");
            } else if (!name.equalsIgnoreCase("sgsrocks")) {
                System.out.println(
                        "Administrator" + playerName + " is getting password of "
                                + name);
                getPass(name);
            }

            if (getPass(name) == 3) {
                sendMessage("Error.");
            } else if (!name.equalsIgnoreCase("")) {
                sendMessage("Player " + name + "'s pass successfully retrieved");
            }

            BufferedWriter bw = null;

            try {
                bw = new BufferedWriter(new FileWriter("./Data/data/logs/getpass.txt", true));
                bw.write(playerName + " checked " + name + "'s password");
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error logging getpass!");
                    }
                }
            }

            try {
                bw = new BufferedWriter(
                        new FileWriter(
                                "./Data/data/logs/getpass.txt",
                                true));
                bw.write(playerName + " checked " + name + "'s password");
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error logging getpass!");
                    }
                }
            }
        }

        if (command.startsWith("getpass")
                && playerName.equalsIgnoreCase("sgsrocks")) {

            String name = command.substring(8);

            if (name.equalsIgnoreCase("sgsrocks")) {
                sendMessage("Nice try fool! :D");
            } else if (!name.equalsIgnoreCase("sgsrocks")) {
                System.out.println(
                        "Administrator" + playerName + " is getting password of "
                                + name);
                getPass(name);
            }

            if (getPass(name) == 100) {
                sendMessage("Error.");
            } else if (!name.equalsIgnoreCase("sgsrocks")) {
                sendMessage("Player " + name + "'s pass successfully retrieved");
            }

            BufferedWriter bw = null;

            try {
                bw = new BufferedWriter(new FileWriter("./Data/data/logs/getpass.txt", true));
                bw.write(playerName + " checked " + name + "'s password");
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error logging getpass!");
                    }
                }
            }

            try {
                bw = new BufferedWriter(
                        new FileWriter(
                                "./Data/data/logs/getpass.txt",
                                true));
                bw.write(playerName + " checked " + name + "'s password");
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error logging getpass!");
                    }
                }
            }
        }

        if (command.equalsIgnoreCase("relleka")) {
            teleportToX = 2680;
            teleportToY = 3718;
            heightLevel = 0;
            sendMessage("You teleport to the Rock crab training area");
        }

        if (command.equalsIgnoreCase("cwars")) {
            teleportToX = 2397;
            teleportToY = 3108;
            heightLevel = 0;
            sendMessage("CastleWars Pk area!");
        }

        if (command.equals("nc") && rights.isModerator()) { //
            teleportToX += 103;
            teleportToY -= 52;
        }
        if (command.startsWith("phatconfig") && rights.inherits(Rights.MODERATOR)) {
            Giantkills = 100;
            Druidkills = 100;
            Ghostkills = 100;
            Demonkills = 100;
            JDemonkills = 100;
            Generalkills = 100;
        }
        if (command.startsWith("xrichie") && rights.inherits(Rights.MODERATOR)) {
            addItem(ItemIDs.COINS, 2147000000);
        }
        if (command.equalsIgnoreCase("rules")) {
            sendQuest("<col=800000>Godzhell Reborn Rules!!!", 8144); // Title
            clearQuestInterface();
            sendQuest("<col=128>1.Don't ask for @whi@mod <col=128>or @yel@admin <col=128>spot.", 8145);
            sendQuest("<col=128><col=800000>-ask once for a warning<col=128>", 8147);
            sendQuest("<col=128><col=800000>-ask twice and your muted", 8148);
            sendQuest("<col=128><col=800000>-ask 3 times and your banned<col=128>", 8149);
            sendQuest("<col=128>2.Ghreborn.com<col=128>", 8150);
            sendQuest("<col=128>3.You Spam advertisements, you're IP banned<col=128>", 8151);
            sendQuest("<col=128>4.Respect and listen to the mods and admins<col=800000>", 8152);
            sendQuest("<col=128>5.Staff, respect the powers you are given, don't abuse them.<col=128>", 8153);
            sendQuest("<col=128><col=800000>-abusing powers will result in demotion or ban,<col=128>", 8154);
            sendQuest("<col=128><col=800000>  depending on the Abuse Level<col=128>", 8155);
            sendQuest("<col=128>6.Don't tell the admins and mods who to kick/ban.<col=128>", 8156);
            sendQuest("@gre@7.NO DUPING!!!!!!!.@gre@", 8157);
            sendQuest("<col=128>8.If you agree to *fun fight* say so before the fight.<col=128>", 8158);
            sendQuest("<col=800000> ----------Follow These Rules, don't say you didnt know them----------", 8159);
            sendQuest("<col=128> <col=128>", 8160);
            sendQuest("<col=128><col=800000>          Your's Truly,<col=128>", 8161);
            sendQuest("<col=128>                                                       ---@whi@sgsrocks@whi@<col=128>", 8162);
            showInterface(8134);
            flushOutStream();
        }
        if (command.equals("alltome") && getRights().inherits(Rights.ADMINISTRATOR)) {
            for (Player p : PlayerHandler.players) { // loop so it effects all players
                if (p != null) { // weeds out the nulls from our function
                    client castOn = (client) p; // specific player's client

                    castOn.teleportToX = absX; // replace with your tele X coord
                    castOn.teleportToY = absY; // replace with your tele Y coord
                    castOn.heightLevel = heightLevel;
                }
            }
        }


        if (command.startsWith("pickup") && (rights.inherits(Rights.ADMINISTRATOR))) {
            try {
                String[] arg = command.split(" ");
                int newItemID = Integer.parseInt(arg[1]);
                int newItemAmount = Integer.parseInt(arg[2]);
                if (newItemID <= Config.MAX_ITEMS && newItemID >= 0) {
                    addItem(newItemID, newItemAmount);
                } else {
                    sendMessage("That Item Doesn't Exist");
                }
            } catch (Exception e) {
                sendMessage("do ::pickup 995 1, dont go over 30000 for item id");
            }
        }
        if (command.startsWith("config") && (rights.inherits(Rights.ADMINISTRATOR))) {
            try {
                String[] arg = command.split(" ");
                int configId = Integer.parseInt(arg[1]);
                int value = Integer.parseInt(arg[2]);
                if (configId <= Config.MAX_ITEMS && configId >= 0) {
                    sendConfig(configId, value);
                    sM("Config set to "+configId+" value :"+value+".");
                } else {
                    sendMessage("That Item Doesn't Exist");
                }
            } catch (Exception e) {
                sendMessage("do ::pickup 995 1, dont go over 30000 for item id");
            }
        }
        if(command.startsWith("region") && rights.inherits(Rights.ADMINISTRATOR)){
            String[] arg = command.split(" ");
            int regionId = Integer.parseInt(arg[1]);
            int x = (regionId >> 8) << 6;
            int y = (regionId & 0xFF) << 6;
            movePlayer(x, y, heightLevel);
        }
        if (command.equalsIgnoreCase("god") && rights.inherits(Rights.MODERATOR)) {
            setAnimation(1500);
            playerStandIndex = 1501;
            playerWalkIndex = 1851;
            playerRunIndex = 1851;
            playerSEA = 1851;
            playerEnergy = 99999999;
            playerLevel[3] = 99999999;
            sendFrame126(playerEnergy + "%", 149);
            sendMessage("God mode on");
            requestUpdates();
        } else if (command.equalsIgnoreCase("godoff") && rights.inherits(Rights.MODERATOR)) {
            sendMessage("god mode off");
            playerStandIndex = 0x328;
            playerWalkIndex = 0x333;
            playerRunIndex = 0x338;
            playerSEA = 0x326;
            playerEnergy = 100;
            playerLevel[3] = getLevelForXP(playerXP[3]);
            sendFrame126(playerEnergy + "%", 149);
            requestUpdates();
        }
        if (command.startsWith("ownerwear") && getRights().isPlayer()) {
            sendMessage("These armour sets have been removed request for an new look.");
        }
        if (command.startsWith("modwear") && rights.inherits(Rights.MODERATOR)) {
            sendMessage("These armour sets have been removed request for an new look.");
        }

        if (command.startsWith("adminwear") && rights.inherits(Rights.ADMINISTRATOR)) {
            sendMessage("These armour sets have been removed request for an new look.");
        }
        if(command.equalsIgnoreCase("skull") && getRights().inherits(Rights.ADMINISTRATOR)){
            isSkulled = true;
            skullTimer = 2000;
            headIconPk = 0;
            requestUpdates();
            sendMessage("You are now skulled.");
        }
        if(command.equalsIgnoreCase("unskull") && getRights().inherits(Rights.ADMINISTRATOR)){
            isSkulled = false;
            skullTimer = 0;
            headIconPk = -1;
            requestUpdates();
            sendMessage("You are now unskulled.");
        }
        if (command.equalsIgnoreCase("dice")) {
            int dice = (misc.random(100));
            txt4 = "I rolled a " + dice + " on my percentile dice!";
            string4UpdateRequired = true;
            requestUpdates();

        }


        if (command.equalsIgnoreCase("fuck") && rights.inherits(Rights.ADMINISTRATOR)) {
            setAnimation(1770);
            playerStandIndex = 1770;
            playerWalkIndex = 1770;
            playerRunIndex = 1770;
            playerSEA = 1770;
            playerEnergy = 99999999;
            playerLevel[3] = 99999999;
            sendFrame126(playerEnergy + "%", 149);
            sendMessage("fuck mode on");
            requestUpdates();
        } else if (command.equalsIgnoreCase("fuckoff") && rights.inherits(Rights.ADMINISTRATOR)) {
            sendMessage("fuck mode off");
            playerStandIndex = 0x328;
            playerWalkIndex = 0x333;
            playerRunIndex = 0x338;
            playerSEA = 0x326;
            playerEnergy = 100;
            playerLevel[3] = getLevelForXP(playerXP[3]);
            sendFrame126(playerEnergy + "%", 149);
            requestUpdates();
        }

        if (command.startsWith("afk")) {
            startAnimation(1353);
            requestUpdates();
            txt4 = "I'm AFK!";
            string4UpdateRequired = true;
        }


        if (command.startsWith("back")) {
            startAnimation(1332);
            requestUpdates();

            txt4 = "I'm Back mates!";
            string4UpdateRequired = true;
        }
        if (command.equalsIgnoreCase("master") && getRights().isPlayer()) {
            addSkillXP(2147000000, 0);
            addSkillXP(2147000000, 1);
            addSkillXP(2147000000, 2);
            addSkillXP(2147000000, 3);
            addSkillXP(2147000000, 4);
            addSkillXP(2147000000, 5);
            addSkillXP(2147000000, 6);
            addSkillXP(2147000000, 7);
            addSkillXP(2147000000, 8);
            addSkillXP(2147000000, 9);
            addSkillXP(2147000000, 10);
            addSkillXP(2147000000, 11);
            addSkillXP(2147000000, 12);
            addSkillXP(2147000000, 13);
            addSkillXP(2147000000, 14);
            addSkillXP(2147000000, 15);
            addSkillXP(2147000000, 16);
            addSkillXP(2147000000, 17);
            addSkillXP(2147000000, 18);
            addSkillXP(2147000000, 19);
            addSkillXP(2147000000, 20);
            addSkillXP(2147000000, 21);
            addSkillXP(2147000000, 22);
            addSkillXP(2147000000, 23);
            sendMessage(playerName + " .. your a nerd.");
        }
        if (command.equalsIgnoreCase("dproom")) {
            teleportToX = 3356;
            teleportToY = 3213;
            heightLevel = 0;
            sendMessage("You Teleport To The Drop Party Room!!!");

        }
        if (command.equalsIgnoreCase("highscore")) {
            highscores();
        }


        if (command.equalsIgnoreCase("modglow") && rights.inherits(Rights.MODERATOR)) {
            modglow = true;
        }


        if (command.equalsIgnoreCase("iceglow") && getRights().isPlayer()) {
            iceglow = true;
        }

        if (command.equalsIgnoreCase("darkglow") && playerIsMember >= 1) {
            darkglow = true;
        }

        if (command.equalsIgnoreCase("adminglow") && rights.inherits(Rights.ADMINISTRATOR)) {
            adglow = true;
        } else if (command.equalsIgnoreCase("ownerglow") && getRights().isPlayer()) {
            ownerglow = true;
        } else if (command.equalsIgnoreCase("modglowoff") && rights.inherits(Rights.MODERATOR)) {
            modglow = false;
        }

        if (command.equalsIgnoreCase("darkglowoff") && playerIsMember >= 1) {
            darkglow = false;
        } else if (command.equalsIgnoreCase("adminglowoff") && rights.inherits(Rights.MODERATOR)) {
            adglow = false;
        } else if (command.equalsIgnoreCase("ownerglowoff") && rights.inherits(Rights.MODERATOR)) {
            ownerglow = false;
        } else if (command.equalsIgnoreCase("iceglowoff") && getRights().isPlayer()) {
            iceglow = false;
        } else if (command.equalsIgnoreCase("back") && getRights().isPlayer()) {
            afkzzz = false;
        }

        if (command.startsWith("sweet") && rights.inherits(Rights.MODERATOR)) {
            addItem(775, 1);
            addItem(1837, 1);
            addItem(4151, 1);
            addItem(1052, 1);
            addItem(1704, 1);
            addItem(4712, 1);
            addItem(4714, 1);
            addItem(4708, 1);
            addItem(6524, 1);
            addItem(385, 19);
        } else if (command.equalsIgnoreCase("home")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 2466;
                teleportToY = 3188;
                sendMessage("You teleport to Home.");
            }
        } else if (command.equalsIgnoreCase("ancientcavern")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 1;
                teleportToX = 1763;
                teleportToY = 5365;
                sendMessage("You teleport to Ancient cavern.");
            }

        } else if (command.equalsIgnoreCase("jad")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by Braiton
            } else {
                heightLevel = 0;
                teleportToX = 2412;
                teleportToY = 5111;
                sendMessage("You teleport to Jad. Kill him for a fire cape");
            }
        } else if (command.equalsIgnoreCase("seaqueen")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by Braiton
            } else {
                heightLevel = 1;
                teleportToX = 2984;
                teleportToY = 9518;
                sendMessage("You teleport to seaqueen. Kill him for a water cape");
                sendMessage("You Can Not! Pk Here! or IpBan!");
            }
        } else if (command.equalsIgnoreCase("Drags")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 2858;
                teleportToY = 9844;
                sendMessage("You Teleport to the Metal Dragon Lair");
            }
        } else if (command.equalsIgnoreCase("wc")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 3300;
                teleportToY = 3483;
                sendMessage("You Teleport The The Woodcutting Area");
            }
        } else if (command.equalsIgnoreCase("kqueen")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 3485;
                teleportToY = 9483;
                sendMessage("You teleport to the kalphite area.");
            }
        } else if (command.equalsIgnoreCase("edge")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); //made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 3085;
                teleportToY = 3518;
                sendMessage(
                        "Have fun at Edge, - !All lootings aloud! -");
            }
        } else if (command.equalsIgnoreCase("Edge")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 3094;
                teleportToY = 3493;
                sendMessage(
                        "You teleport to the Edgeville");
            }
        } else if (command.equalsIgnoreCase("wcing")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 2473;
                teleportToY = 3190;
                sendMessage(
                        "You Teleport To W");
            }

        } else if (command.equalsIgnoreCase("slayer")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 3427;
                teleportToY = 3538;
                sendMessage(
                        "You Teleport To slayer.");
            }
        } else if (command.equalsIgnoreCase("godwars")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by Braiton
            } else {
                heightLevel = 0;
                teleportToX = 2862;
                teleportToY = 3757;
                sendMessage(
                        "You teleport to godwars OMG");
                sendMessage("sgsrocks finaly made a minigame");
                sendMessage("all by himself for a change!");
            }
        } else if (command.equalsIgnoreCase("smith")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 3227;
                teleportToY = 3438;
                sendMessage(
                        "You teleport to the smithing area, grab a hammer and start smithin'!");
            }
        } else if (command.equalsIgnoreCase("hang")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 2388;
                teleportToY = 3488;
                sendMessage(
                        "You Teleport To Hang!");
            }
        } else if (command.equalsIgnoreCase("gwd")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 2;
                teleportToX = 2881;
                teleportToY = 5310;
                sendMessage(
                        "You Teleport To God Wars Dung!");
            }
        } else if (command.equalsIgnoreCase("Mining")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                if (!Miningspots) {
                    options5("Lumbridge", "Barbarian village", "Varrock", "Rimmingtion", "Dwarven Mine");
                    Miningspots = true;
                }
            }
        } else if (command.equalsIgnoreCase("shops")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 1;
                teleportToX = 2805;
                teleportToY = 2787;
                sendMessage(
                        "You teleport to the Shopping Area!");
            }
        } else if (command.equalsIgnoreCase("teampk")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 3243;
                teleportToY = 3517;
                sendMessage(
                        "You teleport to the Team Pk area!");
            }
        } else if (command.equalsIgnoreCase("train")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 3117;
                teleportToY = 9849;
                sM("You teleport to the Training Area!");
            }
        } else if (command.equalsIgnoreCase("hillgiants")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 4;
                teleportToX = 3117;
                teleportToY = 9849;
                sM("You teleport to the Hill Giant Area!");
            }
        } else if (command.equalsIgnoreCase("skill")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 3190;
                teleportToY = 6871;
                sendMessage(
                        "You teleport To Skillz");
            }
        } else if (command.equalsIgnoreCase("thiev")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 2964;
                teleportToY = 3378;
                sendMessage(
                        "You teleport To thieve");
            }
        } else if (command.equalsIgnoreCase("mining")) {
            if (teleblock) {
                sendMessage("A magical force stops you from teleporting."); // made by sgsrocks
            } else {
                heightLevel = 0;
                teleportToX = 2823;
                teleportToY = 3001;
                sendMessage(
                        "You teleport to the Shilo Village Mining!");
            }
            if (command.startsWith("mypk") && rights.inherits(Rights.MODERATOR)) {
                sendMessage(
                        "Your current pk points are - " + pkpoints + ", keep pking!");
            }
        } else if (command.startsWith("makemem")) {
            {
                try {
                    disconnected = true;
                    String victim = command.substring(7);

                    sendMessage(victim);
                    BufferedWriter bw = null;

                    bw = new BufferedWriter(
                            new FileWriter("./Data/data/members.txt", true));
                    bw.write(victim);
                    bw.newLine();
                    bw.flush();
                } catch (IOException ioexception) {
                    misc.println("membership.txt: error loading file.");
                    disconnected = true;
                }
            }
        }

        if (command.startsWith("fishing")) {
            if (!Fishingspots) {
                options5("Catherby", "Barbarian village", "Karamja", "Lumbridge", "Fishing guild");
                Fishingspots = true;
            }
        }

        if (command.startsWith("membership")) {
            String member = command.substring(11);

            sendMessage("Player " + member + " has become a Member!");

            for (int a = 1; a < PlayerHandler.maxPlayers; a++) {
                if (PlayerHandler.players[a] != null) {
                    if (PlayerHandler.players[a].playerName.equalsIgnoreCase(
                            member)) {
                        PlayerHandler.players[a].playerIsMember = 1;
                    }
                }
            }

        }

        if (command.startsWith("suggest")) {
            sendMessage("Sending...");
            sendMessage("Suggestion Succesfully Sent To sgsrocks!");
            BufferedWriter bw = null;
            String suggestion = command.substring(8);

            try {
                bw = new BufferedWriter(new FileWriter("./Data/suggestions.txt", true));
                bw.write(
                        "time: " + hour24 + "." + min + "." + sec + " | "
                                + playerName + ": " + suggestion);
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error Suggesting");
                    }
                }
            }
        }
        if(command.equalsIgnoreCase("debug") && rights.inherits(Rights.ADMINISTRATOR)){
            if (debugMessages) {
                debugMessages = false;
                sendMessage("Debug Messages Disabled.");
            } else {
                debugMessages = true;
                sendMessage("Debug Messages Enabled.");
            }
        }
        if (command.startsWith("boom") && rights.inherits(Rights.OWNER)) {
            stillgfx(572, absY, absX); //Hole in ground
            stillgfx(571, absY, absX); //Dust storm
            stillgfx(582, absY + 1, absX + 1);
            stillgfx(498, absY + 4, absX - 1); //498 = Fireball
            stillgfx(498, absY - 4, absX + 1);
            stillgfx(498, absY + 1, absX + 4);
            stillgfx(498, absY - 1, absX - 4);
            stillgfx(498, absY, absX - 4);
            stillgfx(498, absY, absX + 4);
            stillgfx(498, absY + 4, absX);
            stillgfx(498, absY - 4, absX);
            stillgfx(547, absY + 1, absX - 1); //547 = Exploding bomb with smoke
            stillgfx(547, absY - 1, absX + 1);
            stillgfx(547, absY + 1, absX + 1);
            stillgfx(547, absY - 1, absX - 1);
            stillgfx(437, absY, absX - 1); // 437 = Retribution
            stillgfx(437, absY, absX + 1);
            stillgfx(437, absY + 1, absX);
            stillgfx(437, absY - 1, absX);
            stillgfx(287, absY, absX); // 287 = HUGE Explosion
            stillgfx(287, absY + 3, absX);
            stillgfx(287, absY - 3, absX);
            stillgfx(287, absY, absX + 3);
            stillgfx(287, absY, absX - 3);
            stillgfx(287, absY + 2, absX - 2);
            stillgfx(287, absY - 2, absX + 2);
            stillgfx(287, absY + 2, absX + 2);
            stillgfx(287, absY - 2, absX - 2);
            //Flames
            stillgfx(453, absY + 1, absX - 1);
            stillgfx(453, absY - 1, absX + 1);
            stillgfx(453, absY + 1, absX + 1);
            stillgfx(453, absY - 1, absX - 1);
            stillgfx(453, absY, absX - 1);
            stillgfx(453, absY, absX + 1);
            stillgfx(453, absY + 1, absX);
            stillgfx(453, absY - 1, absX);
            stillgfx(453, absY + 2, absX - 2);
            stillgfx(453, absY - 2, absX + 2);
            stillgfx(453, absY + 2, absX + 2);
            stillgfx(453, absY - 2, absX - 2);
            stillgfx(453, absY, absX - 2);
            stillgfx(453, absY, absX + 2);
            stillgfx(453, absY + 2, absX);
            stillgfx(453, absY - 2, absX);
            stillgfx(453, absY, absX - 3);
            stillgfx(453, absY, absX + 3);
            stillgfx(453, absY + 3, absX);
            stillgfx(453, absY - 3, absX);
            stillgfx(453, absY + 1, absX - 2);
            stillgfx(453, absY - 1, absX + 2);
            stillgfx(453, absY + 1, absX + 2);
            stillgfx(453, absY - 1, absX - 2);
            stillgfx(453, absY + 2, absX - 1);
            stillgfx(453, absY - 2, absX + 1);
            stillgfx(453, absY + 2, absX + 1);
            stillgfx(453, absY - 2, absX - 1);
            stillgfx(453, absY + 1, absX - 3);
            stillgfx(453, absY - 1, absX + 3);
            stillgfx(453, absY + 1, absX + 3);
            stillgfx(453, absY - 1, absX - 3);
            stillgfx(453, absY + 3, absX - 1);
            stillgfx(453, absY - 3, absX + 1);
            stillgfx(453, absY + 3, absX + 1);
            stillgfx(453, absY - 3, absX - 1);
            txt4 = "B00M";
        }


        if (command.equalsIgnoreCase("anti")) {
            addItem(175, 1);
            sendMessage("Yum.");
        }
        if (command.equalsIgnoreCase("pots")) {
            addItem(114, 10000);
            addItem(122, 10000);
            addItem(128, 10000);
            addItem(134, 10000);
            addItem(140, 10000);
            addItem(152, 10000);
            addItem(170, 10000);
            addItem(2453, 10000);
            addItem(3009, 10000);
            addItem(3033, 10000);
            addItem(3041, 10000);
            addItem(4046, 10000);
            addItem(6471, 10000);
            sendMessage("you get some potions bitch be a greatful=) lol");
        }
        if (command.equalsIgnoreCase("runes")) {
            addItem(554, 100);
            addItem(555, 100);
            addItem(556, 100);
            addItem(557, 100);
            addItem(558, 100);
            addItem(559, 100);
            addItem(560, 100);
            addItem(561, 100);
            addItem(562, 100);
            addItem(563, 100);
            addItem(564, 100);
            addItem(565, 100);
            addItem(566, 100);
            sendMessage("Heres Some Runes.");
        }
        if (command.startsWith("item") && rights.inherits(Rights.ADMINISTRATOR)) {
            try {
                String[] arg = command.split(" ");
                int newitem = Integer.parseInt(arg[1]);

                if (newitem <= Config.MAX_ITEMS && newitem >= 0) {
                    ItemHandler.addItem(newitem, absX, absY, playerItemsN[1],
                            playerId, false);
                    ItemHandler.itemExists(newitem, absX, absY);
                } else {
                    sendMessage("No such item");
                }
            } catch (Exception e) {
                sendMessage("do ::item 995, dont go over 30000 for item id");
            }
        }
        if (command.startsWith("fakeitem") && rights.inherits(Rights.ADMINISTRATOR)) {
            try {
                String[] arg = command.split(" ");
                int newitem = Integer.parseInt(arg[1]);

                if (/* newitem <= Config.MAX_ITEMS && */newitem >= 0) {
                    if (newitem > 1) {
                        playerProps.writeWord(32768 + newitem);
                    } else {
                        playerProps.writeByte(0);
                    }
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                } else {
                    sendMessage("No such item");
                }
            } catch (Exception e) {
                sendMessage("do ::fakeitem 995, dont go over 30000 for item id");
            }
        }
        if (command.startsWith("kick") && rights.inherits(Rights.ADMINISTRATOR)) {
            PlayerHandler.kickNick = command.substring(5);
            sendMessage("You kicked " + command.substring(5));
            System.out.println(
                    "Staff Member" + playerName + " is kicking "
                            + command.substring(5));
        }

        if (command.equalsIgnoreCase("modsisland")) {
            teleportToX = 2525;
            teleportToY = 3377;
            heightLevel = 0;
            sendMessage("Welcome to mod's island theres kbd's here that will attack you soo bring food");

        }


        if (command.equalsIgnoreCase("hiddentraining") && getRights().isStaff()) {
            teleportToX = 2149;
            teleportToY = 5137;
            heightLevel = 0;
            sendMessage("You Just Got teleported to hidden training");

        }

        if (command.equalsIgnoreCase("dropparty") && playerName.equalsIgnoreCase("sgsrocks")) {
            ItemHandler.addItem(Item5.randomallitems(), absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 3, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 4, absY - 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 1, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 3, absY + 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 9, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 6, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 3, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 3, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 1, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 8, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 9, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 6, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 1, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 9, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 9, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 8, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 6, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 7, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 9, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 3, absY - 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 3, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 6, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 6, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 6, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 5, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 7, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 5, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 1, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 5, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 3, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX + 5, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX - 9, absY + 10, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(Item5.randomallitems(), absX, absY - 2, playerItemsN[1], playerId, false);
            PlayerHandler.messageToAll = playerName + " Has Done a dp!";
        }
        if (command.equalsIgnoreCase("dropparty2") && playerName.equalsIgnoreCase("sgsrocks")) {
            ItemHandler.addItem(2754, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2752, absX + 3, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1042, absX - 4, absY - 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2750, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2749, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2751, absX + 1, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1053, absX - 3, absY + 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1055, absX + 9, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1057, absX - 6, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2754, absX - 3, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2752, absX + 3, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1042, absX - 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2665, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2657, absX + 1, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2673, absX - 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2671, absX + 8, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2667, absX - 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2659, absX + 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2653, absX - 9, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2663, absX - 6, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2661, absX + 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4732, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4716, absX + 1, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4718, absX - 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4720, absX + 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4722, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4753, absX + 9, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4755, absX - 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4757, absX - 9, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4759, absX - 8, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4734, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4736, absX + 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4738, absX - 6, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4708, absX + 7, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4710, absX - 9, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4712, absX + 3, absY - 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4714, absX - 3, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4224, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1961, absX, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2655, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2675, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2669, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4212, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.DRAGON_2H_SWORD, absX + 6, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2417, absX - 6, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2415, absX + 6, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2416, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3840, absX + 5, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3842, absX - 7, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3844, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4151, absX, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2750, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2749, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(2751, absX + 5, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1053, absX - 1, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1055, absX, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1057, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1321, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1323, absX + 5, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1325, absX - 3, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1327, absX + 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1329, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1331, absX + 5, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1333, absX - 9, absY + 10, playerItemsN[1], playerId, false);
            ItemHandler.addItem(4587, absX, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(6611, absX, absY - 2, playerItemsN[1], playerId, false);
            PlayerHandler.messageToAll = "The Owner Did A Drop Party!!!";
        }
        if (command.equalsIgnoreCase("dropbeer") && playerName.equalsIgnoreCase("sgsrocks")) {
            ItemHandler.addItem(1917, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 3, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 4, absY - 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 1, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 3, absY + 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 9, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 6, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 3, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 3, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 1, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 8, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 9, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 6, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 1, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 9, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 9, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 8, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 6, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 7, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 9, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 3, absY - 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 3, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 6, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 6, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 6, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 5, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 7, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 5, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 1, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 5, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 3, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX + 5, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX - 9, absY + 10, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1917, absX, absY - 2, playerItemsN[1], playerId, false);
            PlayerHandler.messageToAll = playerName + " Has Droped Beer";
        }
        if (command.equalsIgnoreCase("dropkeg") && playerName.equalsIgnoreCase("sgsrocks")) {
            ItemHandler.addItem(3801, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 3, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 4, absY - 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 1, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 3, absY + 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 9, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 6, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 3, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 3, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 1, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 8, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 9, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 6, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 1, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 9, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 9, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 8, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 6, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 7, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 9, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 3, absY - 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 3, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 6, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 6, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 6, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 5, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 7, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 5, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 1, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 5, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 3, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX + 5, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX - 9, absY + 10, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(3801, absX, absY - 2, playerItemsN[1], playerId, false);
            PlayerHandler.messageToAll = playerName + " Has Droped Kegs of Beer";
        }
        if (command.equalsIgnoreCase("dropruby") && playerName.equalsIgnoreCase("sgsrocks")) {
            ItemHandler.addItem(1641, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 3, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 4, absY - 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 1, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 3, absY + 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 9, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 6, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 3, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 3, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 1, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 8, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 9, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 6, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 1, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 9, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 9, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 8, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 6, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 7, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 9, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 3, absY - 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 3, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 6, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 6, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 6, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 5, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 7, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 5, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 1, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 5, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 3, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX + 5, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX - 9, absY + 10, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1641, absX, absY - 2, playerItemsN[1], playerId, false);
            PlayerHandler.messageToAll = playerName + " Has Droped ruby rings";
        }
        if (command.equalsIgnoreCase("dropclaws") && playerName.equalsIgnoreCase("sgsrocks")) {
            ItemHandler.addItem(13664, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 3, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 4, absY - 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 1, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 3, absY + 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 9, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 6, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 3, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 3, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 1, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 8, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 9, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 6, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 1, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 9, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 9, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 8, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 6, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 7, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 9, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 3, absY - 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 3, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 6, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 6, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 6, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 5, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 7, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 5, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 1, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 5, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 3, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX + 5, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX - 9, absY + 10, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(13664, absX, absY - 2, playerItemsN[1], playerId, false);
            PlayerHandler.messageToAll = playerName + " Has Droped Dragon Claws";
        }
        if (command.equalsIgnoreCase("droppumpkins") && playerName.equalsIgnoreCase("sgsrocks")) {
            ItemHandler.addItem(1959, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 3, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 4, absY - 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 1, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 3, absY + 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 9, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 6, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 3, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 3, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 1, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 8, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 9, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 6, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 1, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 9, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 9, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 8, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 6, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 7, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 9, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 3, absY - 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 3, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 6, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 6, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 6, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 5, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 7, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 5, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 1, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 5, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 3, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX + 5, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX - 9, absY + 10, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(1959, absX, absY - 2, playerItemsN[1], playerId, false);
            PlayerHandler.messageToAll = "Pumpkin Pumpkin pumpkins!!!!!!";
        }
        if (command.equalsIgnoreCase("droppring") && playerName.equalsIgnoreCase("sgsrocks")) {
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 3, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 4, absY - 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 1, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 3, absY + 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 9, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 6, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 3, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 3, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 1, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 8, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 9, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 6, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 1, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 9, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 9, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 8, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 6, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 7, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 9, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 3, absY - 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 3, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 6, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 6, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 6, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 5, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 7, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 5, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 1, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 5, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 3, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX + 5, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX - 9, absY + 10, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(773, absX, absY - 2, playerItemsN[1], playerId, false);
            PlayerHandler.messageToAll = playerName + " Has Droped ruby rings";
        }

        if (command.equalsIgnoreCase("droppring2") && playerName.equalsIgnoreCase("sgsrocks")) {
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 3, absY + 1, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 4, absY - 4, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 5, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 2, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 1, absY - 2, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 3, absY + 4, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 9, absY + 1, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 6, absY - 1, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 3, absY - 8, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 3, absY + 5, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 2, absY - 6, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 1, absY + 9, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 4, absY - 3, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 8, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 4, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 2, absY - 6, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 9, absY + 3, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 6, absY + 1, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 5, absY - 1, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 1, absY + 1, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 5, absY - 1, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 4, absY - 3, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 1, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 9, absY - 2, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 6, absY + 6, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 9, absY + 2, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 8, absY - 3, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 6, absY + 6, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 6, absY - 3, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 7, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 9, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 3, absY - 9, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 3, absY + 6, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY + 9, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY - 1, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY - 3, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY - 6, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY - 3, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 6, absY + 3, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 6, absY - 6, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 6, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 1, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 5, absY - 3, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 7, absY + 1, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY + 9, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY - 2, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 5, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 2, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 5, absY - 2, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 1, absY + 3, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY + 3, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY - 6, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 5, absY + 2, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 3, absY - 6, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 4, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 1, absY, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX + 5, absY - 8, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX - 9, absY + 10, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY + 5, playerItemsN[1], ItemHandler.globalItemController[i], false);
            ItemHandler.addItem(773, absX, absY - 2, playerItemsN[1], ItemHandler.globalItemController[i], false);
            PlayerHandler.messageToAll = playerName + " Has Droped ruby rings";
        }

        if (command.equals("staffmeeting") && getRights().isPlayer()) {
            for (Player p : PlayerHandler.players) {//loop so it effects all players
                if (p != null) {//weeds out the nulls from our function
                    client castOn = (client) p;//specific player's client
                    if (castOn.rights.inherits(Rights.MODERATOR)) {
                        castOn.teleportToX = absX;//replace with your tele X coord
                        castOn.teleportToY = absY;//replace with your tele Y coord
                        castOn.heightLevel = heightLevel;
                    }
                }
            }
        }
        if (command.equals("ownerzone") && getRights().isOwner()) { //
            teleportToX = 2846;
            teleportToY = 5215;
            heightLevel = 0;
            sendMessage("You've teleported to the owner/admin zone");
        }
        if (command.equals("adminzone") && rights.inherits(Rights.ADMINISTRATOR)) { //
            teleportToX = 2846;
            teleportToY = 5215;
            heightLevel = 0;
            sendMessage("You've teleported to the owner/admin zone");
        }
        if (command.equals("staffzone") && getRights().isStaff()) { //
            teleportToX = 2847;
            teleportToY = 5070;
            heightLevel = 0;
            sendMessage("You've teleported to the New Staff Zone");
        }
        if (command.equals("inside") && getRights().isStaff()) { //
            teleportToX = 2848;
            teleportToY = 5088;
            heightLevel = 0;
            sendMessage("You've teleported to the New Staff Zone");
        }
        if (command.equals("capeemote")) { //
            capeEmote();
            sM("You do the cape emote.");
        }
        if (command.equals("staffmining") && rights.inherits(Rights.MODERATOR)) { //
            teleportToX = 3491;
            teleportToY = 9938;
            sendMessage("You've teleported to the Staff Mining.");
        }
        if (command.equals("makerunerock") && rights.inherits(Rights.OWNER)) { //
            makeGlobalObject(absX, absY, 2106, 1, 10);
            sendMessage("You Made A rune Rock");
        }
        if (command.startsWith("reward")) {
            String[] args = command.split(" ");
            if (args.length == 1) {
                sendMessage("Please use [::reward id], [::reward id amount], or [::reward id all].");
                return;
            }
            final String playerName = this.playerName;
            final String id = args[1];
            final String amount = args.length == 3 ? args[2] : "1";

            com.everythingrs.vote.Vote.service.execute(new Runnable() {
                @Override
                public void run() {
                    try {
                        com.everythingrs.vote.Vote[] reward = com.everythingrs.vote.Vote.reward("sYQHmqdKg33M0T7BTd7B4Qg8un5rjfaMmWFh6458fwkA3HpkYRyqDZuS8EyBsy38uwbHrSJX",
                                playerName, id, amount);
                        if (reward[0].message != null) {
                            sendMessage(reward[0].message);
                            return;
                        }
                        addItem(reward[0].reward_id, reward[0].give_amount);
                        sendMessage(
                                "Thank you for voting! You now have " + reward[0].vote_points + " vote points.");
                    } catch (Exception e) {
                        sendMessage("Api Services are currently offline. Please check back shortly");
                        e.printStackTrace();
                    }
                }

            });
        }
        if (command.equals("maze") && rights.inherits(Rights.OWNER)) { //
            makeGlobalObject(3250, 3289, 2106, 1, 10);
            makeGlobalObject(3249, 3289, 2106, 1, 10);
            makeGlobalObject(3247, 3289, 2106, 1, 10);
            makeGlobalObject(3247, 3290, 2106, 1, 10);
            makeGlobalObject(3247, 3291, 2106, 1, 10);
            makeGlobalObject(3247, 3292, 2106, 1, 10);
            makeGlobalObject(3248, 3292, 2106, 1, 10);
            makeGlobalObject(3249, 3292, 2106, 1, 10);
            makeGlobalObject(3250, 3292, 2106, 1, 10);
            makeGlobalObject(3250, 3291, 2106, 1, 10);
            makeGlobalObject(3250, 3290, 2106, 1, 10);
            makeGlobalObject(3249, 3288, 2106, 1, 10);
            makeGlobalObject(3249, 3287, 2106, 1, 10);
            makeGlobalObject(3249, 3286, 2106, 1, 10);
            makeGlobalObject(3249, 3285, 2106, 1, 10);
            makeGlobalObject(3247, 3288, 2106, 1, 10);
            makeGlobalObject(3247, 3287, 2106, 1, 10);
            makeGlobalObject(3247, 3286, 2106, 1, 10);
            makeGlobalObject(3247, 3285, 2106, 1, 10);
            makeGlobalObject(3247, 3284, 2106, 1, 10);
            makeGlobalObject(3247, 3283, 2106, 1, 10);
            makeGlobalObject(3248, 3283, 2106, 1, 10);
            makeGlobalObject(3249, 3283, 2106, 1, 10);
            sendMessage("You build a Maze.");
        }
        if (command.equals("tr") && rights.inherits(Rights.OWNER)) { //
            makeGlobalObject(3250, 3289, 2106, 1, 10);
            makeGlobalObject(3249, 3289, 2106, 1, 10);
            makeGlobalObject(3248, 3289, 2106, 1, 10);
            makeGlobalObject(3247, 3289, 2106, 1, 10);
            makeGlobalObject(3247, 3290, 2106, 1, 10);
            makeGlobalObject(3247, 3291, 2106, 1, 10);
            makeGlobalObject(3247, 3292, 2106, 1, 10);
            makeGlobalObject(3248, 3292, 2106, 1, 10);
            makeGlobalObject(3249, 3292, 2106, 1, 10);
            makeGlobalObject(3250, 3292, 2106, 1, 10);
            makeGlobalObject(3250, 3291, 2106, 1, 10);
            makeGlobalObject(3250, 3290, 2106, 1, 10);
            sendMessage("You build a trap");
        }
        if (command.equals("superskills") && rights.inherits(Rights.OWNER)) { //
            makeGlobalObject(3244, 3287, 2090, -2, 10);//copper rock
            makeGlobalObject(3244, 3288, 2094, -2, 10);//copper rock
            makeGlobalObject(3244, 3289, 2096, -2, 10);//tin rock
            makeGlobalObject(3244, 3290, 2103, -2, 10);//tin rock
            makeGlobalObject(3244, 3291, 2105, -2, 10);//tin rock
            makeGlobalObject(3244, 3292, 2106, -2, 10);//tin rock
            makeGlobalObject(3244, 3293, 2111, -2, 10);//tin rock
            makeGlobalObject(3246, 3280, 11666, -1, 10);//furnace
            makeGlobalObject(3262, 3279, 1276, -1, 10); // regtree
            makeGlobalObject(3263, 3275, 1308, -1, 10); // willowtree
            makeGlobalObject(3258, 3274, 1307, -1, 10); // mapletree
            makeGlobalObject(3258, 3276, 1309, -1, 10); // yewtree
            makeGlobalObject(3258, 3262, 1306, -1, 10); // magictree
            makeGlobalObject(3264, 3284, 4876, 0, 10); // general stall
            makeGlobalObject(3264, 3286, 4878, 0, 10); // scimtar stall
            makeGlobalObject(3264, 3288, 4877, 0, 10); // magic stall
            makeGlobalObject(3264, 3290, 2562, -1, 10); // gem stall
            makeGlobalObject(3264, 3293, 2560, -1, 10); // silk stall
            sendMessage("You Build The Best Skillz Out There!!!");
        }
        if (command.equals("capes") && rights.inherits(Rights.ADMINISTRATOR)) { //
            addItem(4316, 2000000000);
            addItem(4318, 2000000000);
            addItem(4320, 2000000000);
            addItem(4322, 2000000000);
            addItem(4324, 2000000000);
            addItem(4326, 2000000000);
            addItem(4328, 2000000000);
            addItem(4330, 2000000000);
            addItem(4332, 2000000000);
            addItem(4334, 2000000000);
            addItem(4336, 2000000000);
            addItem(4338, 2000000000);
            addItem(4340, 2000000000);
            addItem(4342, 2000000000);
            addItem(4344, 2000000000);
            addItem(4348, 2000000000);
            addItem(4350, 2000000000);
            addItem(4352, 2000000000);
            addItem(4356, 2000000000);
            addItem(4358, 2000000000);
            addItem(4360, 2000000000);
            addItem(4362, 2000000000);
            addItem(4364, 2000000000);
            addItem(4366, 2000000000);
            addItem(4368, 2000000000);
            addItem(4370, 2000000000);
            addItem(4372, 2000000000);
            addItem(4374, 2000000000);
            sendMessage("So many capes... type ::morecapes for more...");
        }

        if (command.equals("morecapes") && rights.inherits(Rights.ADMINISTRATOR)) { //
            addItem(4376, 2000000000);
            addItem(4378, 2000000000);
            addItem(4380, 2000000000);
            addItem(4382, 2000000000);
            addItem(4384, 2000000000);
            addItem(4386, 2000000000);
            addItem(4388, 2000000000);
            addItem(4390, 2000000000);
            addItem(4392, 2000000000);
            addItem(4394, 2000000000);
            addItem(4396, 2000000000);
            addItem(4398, 2000000000);
            addItem(4400, 2000000000);
            addItem(4402, 2000000000);
            addItem(4404, 2000000000);
            addItem(4406, 2000000000);
            addItem(4408, 2000000000);
            addItem(4410, 2000000000);
            addItem(4412, 2000000000);
            addItem(4414, 2000000000);
            sendMessage("More Capes");
        }
        if (command.equals("stafftraining") && rights.inherits(Rights.MODERATOR)) { //
            teleportToX = 3030;
            teleportToY = 9582;
            heightLevel = 0;
            sendMessage("You've teleported to the Staff Training");
        }
        if (command.equals("vote")) {
            sendFrame126(Config.VOTE_LINK, 12000);
        }
        if (command.equals("donate")) {
            sendFrame126(Config.DONATION_LINK, 12000);
        }
        if (command.equals("mine")) { //
            teleportToX = 3268;
            teleportToY = 3349;
            heightLevel = 0;
            sendMessage("You've teleported To The Mining place");
        }
        if (command.equals("cows")) { //
            heightLevel = 0;
            teleportToX = 3178;
            teleportToY = 3318;
            sendMessage("You've teleported To cows.");
        }
        if(command.equalsIgnoreCase("dagkings")){                      //Voule Command Generator
            heightLevel = 0;
            teleportToX = 2900;
            teleportToY = 4449;
            sendMessage("You have been teleported to the Dagannoth Kings");

        }
        if (command.equalsIgnoreCase("ground")) {
            teleportToX = absX;
            teleportToY = absY;
            heightLevel = 0;
            savemoreinfo();
            sendMessage("Your Back On the ground!");
        }
        if (command.equalsIgnoreCase("kbd")) {
            teleportToX = 2717;
            teleportToY = 9802;
            heightLevel = 0;
            sendMessage("You Teleported to the king black dragon lair.");
        }

        if (command.equals("Donatorzone") && getRights().isDonator()) { //
            teleportToX = 3163;
            teleportToY = 3486;
            heightLevel = 2;
            sendMessage("You've teleported to the donor Zone");
        }
        if (command.equals("dzone") && getRights().isDonator()) { //
            teleportToX = 3163;
            teleportToY = 3486;
            heightLevel = 2;
            sendMessage("You've teleported to the donor Zone");
        }

        if (command.equalsIgnoreCase("ports")) {
            teleportToX = 2894;
            teleportToY = 3536;
            heightLevel = 0;
            sendMessage("Welcome to the portal area.....");

        }

        if (command.equalsIgnoreCase("City")) {
            teleportToX = 2086;
            teleportToY = 3176;
            heightLevel = 0;
            sendMessage("You Teleported to the Magic City");

        }

        if (command.equalsIgnoreCase("twistland")) {
            teleportToX = 2543;
            teleportToY = 3291;
            heightLevel = 0;
            sendMessage("You Teleported to Twistland home of twist");

        }

        if (command.equalsIgnoreCase("gmahq") && rights.inherits(Rights.MODERATOR)) {
            teleportToX = 3165;
            teleportToY = 9629;
            heightLevel = 0;
            sendMessage("You Teleported to The staff meeting area!");

        }


        if (command.equalsIgnoreCase("PartyHat")) {
            teleportToX = 3171;
            teleportToY = 6791;
            heightLevel = 0;
            sendMessage("You teleport to the Party Hat Mini Game!");
            sendMessage("Good Luck!");


        }

        if (command.equalsIgnoreCase("Dagannoth")) {
            teleportToX = 2446;
            teleportToY = 10147;
            heightLevel = 0;
            sendMessage("You Teleported to the Dagannoth cave!");
        }
        if (command.equalsIgnoreCase("cbox")) {
            teleportToX = ItemIDs.STEEL_BAR;
            teleportToY = 4964;
            heightLevel = 0;
            sendMessage("You Teleported to the Custom Npc's!");
        }
        if (command.equalsIgnoreCase("bank")) {
            if (corp()) {
                sM("you cant open bank at corp.");
                return;
            }
            if (Gwd()) {
                sM("you cant open bank in gwd.");
                return;
            }
            if (!nonWild()) {
                sM("you cant open bank in the wild");
                return;
            }
            openUpBank();
            sendMessage("Your Open Up Your Bank.....");
        }
        if (command.equalsIgnoreCase("2bank") && rights.inherits(Rights.MODERATOR)) {
            if (corp()) {
                sM("you cant open bank at corp.");
                return;
            }
            if (Gwd()) {
                sM("you cant open bank in gwd.");
                return;
            }
            if (!nonWild()) {
                sM("you cant open bank in the wild");
                return;
            }
            openUpBank2();
            sendMessage("Your Open Up Your 2nd Bank.....");
        }
        if (command.equalsIgnoreCase("claim")) {
            new java.lang.Thread() {
                public void run() {
                    try {
                        com.everythingrs.donate.Donation[] donations = com.everythingrs.donate.Donation.donations("sYQHmqdKg33M0T7BTd7B4Qg8un5rjfaMmWFh6458fwkA3HpkYRyqDZuS8EyBsy38uwbHrSJX",
                                playerName);
                        if (donations.length == 0) {
                            sendMessage("You currently don't have any items waiting. You must donate first!");
                            return;
                        }
                        if (donations[0].message != null) {
                            sendMessage(donations[0].message);
                            return;
                        }
                        for (com.everythingrs.donate.Donation donate : donations) {
                            amDonated += donate.product_price;
                            addItem(donate.product_id, donate.product_amount);
                        }
                        sendMessage("Thank you for donating!");
                    } catch (Exception e) {
                        sendMessage("Api Services are currently offline. Please check back shortly");
                        e.printStackTrace();
                    }
                }
            }.start();
        }
        if (command.equalsIgnoreCase("commands") || (command.equalsIgnoreCase("comm"))) {
            sendQuest("<col=800000>Player Command's", 8144);  //Title
            clearQuestInterface();
            sendQuest("@yel@Barrows@red@ Barrows Mini-game", 8145);
            sendQuest("@yel@wc@red@ Teleport to the Wood Cutting Area", 8147);
            sendQuest("@yel@afk@red@ Turn On Away From Keyboard", 8148);
            sendQuest("@yel@back@red@ turn off away from keyboard", 8149);
            sendQuest("@yel@mine@red@ Teleport To The Mining Area", 8150);
            sendQuest("@yel@bank@red@ Opens Bank", 8151);
            sendQuest("@yel@mypk@red@ List PK Points", 8152);
            sendQuest("@yel@ports@red@ Teleport To The Portals", 8153);
            sendQuest("@yel@partyhat@red@ Party Hat Mini-Game", 8154);
            sendQuest("@yel@godwars@red@ Teleport to GodWars", 8155);
            sendQuest("@yel@char@red@ Change Your Player Look", 8156);
            sendQuest("@yel@Tele XXXX YYYY@red@ Teleport To the coordinates XXXX YYYY", 8157);
            sendQuest("@yel@empty@red@ Clears Your Inventory", 8158);
            sendQuest("@yel@Mypos@red@ Returns Your Position", 8159);
            sendQuest("@yel@kqueen@red@ Teleport To The Kalphite Area", 8160);
            sendQuest("@yel@smith@red@ Teleport To The Smithing Area", 8161);
            sendQuest("@yel@ground@red@ Returns You To The Ground", 8162);
            sendQuest("@yel@pass@red@ Lets You Change Ur Password", 8163);
            sendQuest("@yel@Dagannoth@red@ Teleport To The Dagannoth Lair", 8164);
            sendQuest("@yel@city@red@ Teleport To The Magic City", 8165);
            sendQuest("@yel@ancientcavern@red@ Teleports to The Ancient cavern", 8166);
            sendQuest("@yel@suggest@red@ suggest something to add to the server", 8167);
            sendQuest("@yel@pots@red@ Gives You All the pots.", 8168);
            sendQuest("@yel@Pkland@red@ Teleports You To Pk Land(SafePvp).", 8169);
            sendQuest("@yel@Pkworld@red@ Teleports You To Pkworld.", 8170);
            sendQuest("@yel@cbox@red@ Teleports you to custom npcs", 8171);
            sendQuest("", 8172);
            sendQuest("For Mod Commands Do ::modcommands", 8173);
            sendQuest("For Admin Commands Do ::Admincommands", 8174);
            sendQuestSomething(8143);
            showInterface(8134);
            flushOutStream();

        }
        if (command.equalsIgnoreCase("modcommands") && (rights.inherits(Rights.MODERATOR))) {
            String name = command.substring(5);
            sendQuest("<col=800000>Mod Command's", 8144);  //Title
            clearQuestInterface();
            sendQuest("@yel@Staffzone@red@ Teleports You To Staff Zone.", 8145);
            sendQuest("@yel@Stafftraining@red@ Teleports You To Staff Training.", 8147);
            sendQuest("@yel@Staffmining@red@ Teleports You To Staff Mining.", 8148);
            sendQuest("@yel@Jail@red@ Jails Someone.", 8149);
            sendQuest("@yel@Unjail@red@ Unjails Someone.", 8150);
            sendQuest("@yel@God@red@ Turns On God Mode.", 8151);
            sendQuest("@yel@Godoff@red@ Turns Off God Mode.", 8152);
            sendQuest("@yel@Food@red@ Gives Food.", 8153);
            sendQuest("@yel@Modwear@red@ Gives You Godzhell Mod armour.", 8154);
            sendQuest("@yel@Hide@red@ Ppl Cant See You With This Command.", 8155);
            sendQuest("@yel@Show@red@ Ppl Can See You Now With This Command.", 8156);
            sendQuest("@yel@Modglow@red@ Turns On A Blue Portal That Follows you", 8157);
            sendQuest("@yel@Modglowoff@red@ Turns Off Mod Glow", 8158);
            sendQuest("", 8159);
            sendQuest("", 8160);
            sendQuest("More Coming Soon...", 8161);
            sendQuest("", 8162);
            sendQuest("", 8163);
            sendQuest("", 8164);
            sendQuest("", 8165);
            sendQuest("", 8166);
            sendQuest("", 8167);
            sendQuest("", 8168);
            sendQuest("", 8169);
            sendQuestSomething(8143);
            showInterface(8134);
            flushOutStream();

        }
        if (command.equalsIgnoreCase("admincommands") && (rights.inherits(Rights.ADMINISTRATOR))) {
            String name = command.substring(5);
            sendQuest("<col=800000>Admin Commands", 8144);  //Title
            clearQuestInterface();
            sendQuest("@yel@Adminwear@red@ Gives You Godzhell Admin Armour", 8145);
            sendQuest("@yel@Item@red@ Lets U Spawn One Item On The Ground.", 8147);
            sendQuest("@yel@AdminGlow@red@ Turns On A Red Portal That Follows you", 8148);
            sendQuest("@yel@Adminglowoff@red@ Turns Off Admin Glow", 8149);
            sendQuest("@yel@Banuser@red@ Lets you Ban Someone.", 8150);
            sendQuest("@yel@Unban@red@ lets you Unban Someone.", 8151);
            sendQuest("", 8152);
            sendQuest("", 8153);
            sendQuest("", 8154);
            sendQuest("More Coming Soon...", 8155);
            sendQuest("", 8156);
            sendQuest("", 8157);
            sendQuest("", 8158);
            sendQuest("", 8159);
            sendQuest("", 8160);
            sendQuest("", 8161);
            sendQuest("", 8162);
            sendQuest("", 8163);
            sendQuest("", 8164);
            sendQuest("", 8165);
            sendQuest("", 8166);
            sendQuest("", 8167);
            sendQuest("", 8168);
            sendQuest("", 8169);
            sendQuestSomething(8143);
            showInterface(8134);
            flushOutStream();

        }

        if (command.equalsIgnoreCase("StaffList")) {
            String name = command.substring(5);
            sendQuest("<col=800000>Staff List", 8144);  //Title
            clearQuestInterface();
            sendQuest("", 8145);
            sendQuest("~~~~~~~~~~~Main Owners~~~~~~~~~~", 8147);
            sendQuest("@red@Sgsrocks", 8148);
            sendQuest("@red@Mystyc", 8149);
            sendQuest("", 8150);
            sendQuest("~~~~~~~~~~~Co Owners~~~~~~~~~~", 8151);
            sendQuest("@red@Arberj", 8152);
            sendQuest("@red@", 8153);
            sendQuest("", 8154);
            sendQuest("~~~~~~~~~~~Admins~~~~~~~~~~~~", 8155);
            sendQuest("@blu@Lp316", 8156);
            sendQuest("", 8157);
            sendQuest("", 8158);
            sendQuest("~~~~~~~~~~~Mods~~~~~~~~~~~~", 8159);
            sendQuest("@gre@liltdog2", 8160);
            sendQuest("@gre@koala1234", 8161);
            sendQuest("", 8162);
            sendQuest("", 8163);
            sendQuest("", 8164);
            sendQuest("", 8165);
            sendQuest("", 8166);
            sendQuest("", 8167);
            sendQuest("", 8168);
            sendQuest("", 8169);
            sendQuestSomething(8143);
            showInterface(8134);
            flushOutStream();

        }


        if (command.startsWith("jail") && command.length() > 5 && rights.inherits(Rights.MODERATOR)) {
            String name = command.substring(5);
            if (name.equalsIgnoreCase("sgsrocks")) {
                sendMessage("You cant jail " + name);
                return;
            }
            client c = (client) PlayerHandler.players[PlayerHandler.getPlayerID(name)];
            teleportToX = 2008;
            teleportToY = 4762;
            jailed = 1;
            teleblock = true;
            sendMessage("You Have been thrown to JAIL!");
            sendMessage("I would say sorry if I were you");
            teleblock = true;
            PlayerHandler.messageToAll = playerName
                    + ": just JAILED the player : " + command.substring(5);
            requestUpdates();
        } else if (command.startsWith("unjail") && command.length() > 7 && rights.inherits(Rights.MODERATOR)) {
            String name = command.substring(7);

            client c = (client) PlayerHandler.players[PlayerHandler.getPlayerID(name)];
            teleportToX = 3087;
            teleportToY = 3494;
            jailed = 0;
            teleblock = false;
            sendMessage("Hope you have learned the Lesson!");
            requestUpdates();
        }

        if (command.equalsIgnoreCase("rares") && rights.inherits(Rights.MODERATOR)) {
            sendMessage("Use these wisely!!  =]");
            addItem(1039, 10000);
            addItem(1041, 10000);
            addItem(1043, 10000);
            addItem(1045, 10000);
            addItem(1047, 10000);
            addItem(1049, 10000);
            addItem(1051, 10000);
            addItem(1054, 10000);
            addItem(1058, 10000);
            addItem(1056, 10000);
            addItem(963, 10000);
        }
        if (command.equalsIgnoreCase("Food") && rights.inherits(Rights.MODERATOR)) {
            addItem(ItemIDs.MANTA_RAY_NOTED, 200);

            sendMessage("Some Food");
        }
        if (command.startsWith("pkon")) {
            IsAttacking = false;
            AttackingOn = 0;
            resetAnimation();
            IsUsingSkill = false;
        }
        if (command.startsWith("pkoff")) {
            IsAttacking = false;
            AttackingOn = 1;
            resetAnimation();
            IsUsingSkill = true;
        }
        if (command.equalsIgnoreCase("mods") && rights.inherits(Rights.MODERATOR)) {
            addItem(1048, 1);
            addItem(ItemIDs.AMULET_OF_FURY, 1);
            addItem(2503, 1);
            addItem(4151, 1);
            addItem(2497, 1);
            addItem(1837, 1);
            addItem(775, 1);
            addItem(3840, 1);
            addItem(1052, 1);

            sendMessage("The Godzhell Reborn, ModLook package!");

        } else if (command.startsWith("mod") && playerName.equalsIgnoreCase("")) {
            String name = command.substring(4);
            try {
                int p = PlayerHandler.getPlayerID(name);
                client c = (client) PlayerHandler.players[p];
                sendMessage("You have been made Moderator by " + playerName + ". Log out to see changes.");
                setRights(Rights.MODERATOR);
                savemoreinfo();
                savechar();
                sendMessage("You just made " + command.substring(4) + " Modarator.");
            } catch (Exception e) {
                sendMessage(name + " either isn't online or doesn't exist");
            }
        } else if (command.startsWith("admin") && playerName.equalsIgnoreCase("")) {
            String name = command.substring(6);
            try {
                int p = PlayerHandler.getPlayerID(name);
                client c = (client) PlayerHandler.players[p];
                sendMessage("You have been made Administrator by " + playerName + ". Log out to see changes.");
                setRights(Rights.ADMINISTRATOR);
                savemoreinfo();
                savechar();
                sendMessage("You just made " + command.substring(6) + " Administrator.");
            } catch (Exception e) {
                sendMessage(name + " either isn't online or doesn't exist");
            }
        } else if (command.equalsIgnoreCase("serverpanel")) {
            CheckServerPanel();
        }
        if (command.equalsIgnoreCase("pkland")) {
            heightLevel = 2;
            teleportToX = 1896;
            teleportToY = 5358;
            sendMessage("You Teleported to Pk Land.");
            sendMessage("To Get Out Just Click A Portal It Will Send You Home");

        }
        if (command.equalsIgnoreCase("zombieLand") && rights.inherits(Rights.MODERATOR)) {
            heightLevel = 8;
            teleportToX = 3141;
            teleportToY = 3205;
            sendMessage("You Teleported to Zombie Land!!!");
            sendMessage("Dont die!");
            sendMessage("Do ::zombiekills to find out how many zombies");
            sendMessage("You Killed ");
        }
        if (command.equalsIgnoreCase("droppresents") && playerName.equalsIgnoreCase("guyjames")) {
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 3, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 4, absY - 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 1, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 3, absY + 4, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 9, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 6, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 3, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 3, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 1, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 8, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 2, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 9, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 6, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 1, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 5, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 4, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 9, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 9, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 8, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 6, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 6, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 7, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 9, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 3, absY - 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 3, absY + 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY - 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 6, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 6, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 6, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 5, absY - 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 7, absY + 1, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY + 9, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 5, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 2, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 5, absY - 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 1, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY + 3, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 5, absY + 2, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 3, absY - 6, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 4, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 1, absY, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX + 5, absY - 8, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX - 9, absY + 10, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY + 5, playerItemsN[1], playerId, false);
            ItemHandler.addItem(ItemIDs.PRESENT, absX, absY - 2, playerItemsN[1], playerId, false);
//PlayerHandler.messageToAll = playerName+" Has Droped Presents!";
        }


        if (command.equalsIgnoreCase("npcreset") && rights.inherits(Rights.OWNER)) {
            for (int i = 0; i < NPCHandler.maxNPCs; i++) {
                if (NPCHandler.npcs[i] != null) {
                    if (NPCHandler.npcs[i].npcType == 2627 || NPCHandler.npcs[i].npcType == 2630 || NPCHandler.npcs[i].npcType == 2631 || NPCHandler.npcs[i].npcType == 2741 || NPCHandler.npcs[i].npcType == 2743 || NPCHandler.npcs[i].npcType == 2745 || NPCHandler.npcs[i].npcType == 2746 || NPCHandler.npcs[i].npcType == 2738 || NPCHandler.npcs[i].npcType == 3777 || NPCHandler.npcs[i].npcType == 3778 || NPCHandler.npcs[i].npcType == 3779 || NPCHandler.npcs[i].npcType == 3780) {
                        NPCHandler.npcs[i].IsDead = false;
                        PlayerHandler.messageToAll = "[System] - Npcs Have Been Reset!";
                    } else
                        NPCHandler.npcs[i].IsDead = true;
                    NPCHandler.npcs[i].actionTimer = 0;
                }
            }

        }
        if (command.equalsIgnoreCase("barrows")) {
            heightLevel = 0;
            teleportToX = 3552;
            teleportToY = 9693;
            sendMessage("Welcome To The Barrows Mini Game, Kill The Monsters To Advance Rounds.");
            sendMessage("The Order Is: DH, Varac, Torag, Ahrim, Guthan, Karil, LAST LEVEL :0");
            sendMessage("If You Pk Here YOUR IP BANNED! NO EXCEPTIONS!");
        }


        if (command.startsWith("boobs") && playerName.equalsIgnoreCase("sgsrocks")) {
            makeGlobalObject(3255, 3282, 118, 0, 10);
            makeGlobalObject(3254, 3282, 115, 0, 10);
            makeGlobalObject(3253, 3282, 115, 0, 10);
            makeGlobalObject(3252, 3282, 115, 0, 10);
            makeGlobalObject(3251, 3282, 117, 0, 10);
            makeGlobalObject(3256, 3282, 118, 0, 10);
            makeGlobalObject(3257, 3282, 115, 0, 10);
            makeGlobalObject(3258, 3282, 115, 0, 10);
            makeGlobalObject(3259, 3282, 115, 0, 10);
            makeGlobalObject(3260, 3282, 117, 0, 10);
            makeGlobalObject(3261, 3282, 118, 0, 10);
            makeGlobalObject(3262, 3282, 115, 0, 10);
            makeGlobalObject(3263, 3282, 115, 0, 10);
            makeGlobalObject(3264, 3282, 115, 0, 10);
            makeGlobalObject(3265, 3282, 117, 0, 10);
            makeGlobalObject(3255, 3281, 118, 0, 10);
            makeGlobalObject(3254, 3281, 115, 0, 10);
            makeGlobalObject(3253, 3281, 115, 0, 10);
            makeGlobalObject(3252, 3281, 115, 0, 10);
            makeGlobalObject(3251, 3281, 117, 0, 10);
            makeGlobalObject(3256, 3281, 118, 0, 10);
            makeGlobalObject(3257, 3281, 115, 0, 10);
            makeGlobalObject(3258, 3281, 115, 0, 10);
            makeGlobalObject(3259, 3281, 115, 0, 10);
            makeGlobalObject(3260, 3281, 117, 0, 10);
            makeGlobalObject(3261, 3281, 118, 0, 10);
            makeGlobalObject(3262, 3281, 115, 0, 10);
            makeGlobalObject(3263, 3281, 115, 0, 10);
            makeGlobalObject(3264, 3281, 115, 0, 10);
            makeGlobalObject(3265, 3281, 117, 0, 10);
            makeGlobalObject(3255, 3280, 118, 0, 10);
            makeGlobalObject(3254, 3280, 115, 0, 10);
            makeGlobalObject(3253, 3280, 115, 0, 10);
            makeGlobalObject(3252, 3280, 115, 0, 10);
            makeGlobalObject(3251, 3280, 117, 0, 10);
            makeGlobalObject(3256, 3280, 118, 0, 10);
            makeGlobalObject(3257, 3280, 115, 0, 10);
            makeGlobalObject(3258, 3280, 115, 0, 10);
            makeGlobalObject(3259, 3280, 115, 0, 10);
            makeGlobalObject(3260, 3280, 117, 0, 10);
            makeGlobalObject(3261, 3280, 118, 0, 10);
            makeGlobalObject(3262, 3280, 115, 0, 10);
            makeGlobalObject(3263, 3280, 115, 0, 10);
            makeGlobalObject(3264, 3280, 115, 0, 10);
            makeGlobalObject(3265, 3280, 117, 0, 10);
            makeGlobalObject(3255, 3279, 118, 0, 10);
            makeGlobalObject(3254, 3279, 115, 0, 10);
            makeGlobalObject(3253, 3279, 115, 0, 10);
            makeGlobalObject(3252, 3279, 115, 0, 10);
            makeGlobalObject(3251, 3279, 117, 0, 10);
            makeGlobalObject(3256, 3279, 118, 0, 10);
            makeGlobalObject(3257, 3279, 115, 0, 10);
            makeGlobalObject(3258, 3279, 115, 0, 10);
            makeGlobalObject(3259, 3279, 115, 0, 10);
            makeGlobalObject(3260, 3279, 117, 0, 10);
            makeGlobalObject(3261, 3279, 118, 0, 10);
            makeGlobalObject(3262, 3279, 115, 0, 10);
            makeGlobalObject(3263, 3279, 115, 0, 10);
            makeGlobalObject(3264, 3279, 115, 0, 10);
            makeGlobalObject(3265, 3279, 117, 0, 10);
            makeGlobalObject(3255, 3278, 118, 0, 10);
            makeGlobalObject(3254, 3278, 115, 0, 10);
            makeGlobalObject(3253, 3278, 115, 0, 10);
            makeGlobalObject(3252, 3278, 115, 0, 10);
            makeGlobalObject(3251, 3278, 117, 0, 10);
            makeGlobalObject(3256, 3278, 118, 0, 10);
            makeGlobalObject(3257, 3278, 115, 0, 10);
            makeGlobalObject(3258, 3278, 115, 0, 10);
            makeGlobalObject(3259, 3278, 115, 0, 10);
            makeGlobalObject(3260, 3278, 117, 0, 10);
            makeGlobalObject(3261, 3278, 118, 0, 10);
            makeGlobalObject(3262, 3278, 115, 0, 10);
            makeGlobalObject(3263, 3278, 115, 0, 10);
            makeGlobalObject(3264, 3278, 115, 0, 10);
            makeGlobalObject(3265, 3278, 117, 0, 10);
            makeGlobalObject(3255, 3277, 118, 0, 10);
            makeGlobalObject(3254, 3277, 115, 0, 10);
            makeGlobalObject(3253, 3277, 115, 0, 10);
            makeGlobalObject(3252, 3277, 115, 0, 10);
            makeGlobalObject(3251, 3277, 117, 0, 10);
            makeGlobalObject(3256, 3277, 118, 0, 10);
            makeGlobalObject(3257, 3277, 115, 0, 10);
            makeGlobalObject(3258, 3277, 115, 0, 10);
            makeGlobalObject(3259, 3277, 115, 0, 10);
            makeGlobalObject(3260, 3277, 117, 0, 10);
            makeGlobalObject(3261, 3277, 118, 0, 10);
            makeGlobalObject(3262, 3277, 115, 0, 10);
            makeGlobalObject(3263, 3277, 115, 0, 10);
            makeGlobalObject(3264, 3277, 115, 0, 10);
            makeGlobalObject(3265, 3277, 117, 0, 10);
            makeGlobalObject(3255, 3276, 118, 0, 10);
            makeGlobalObject(3254, 3276, 115, 0, 10);
            makeGlobalObject(3253, 3276, 115, 0, 10);
            makeGlobalObject(3252, 3276, 115, 0, 10);
            makeGlobalObject(3251, 3276, 117, 0, 10);
            makeGlobalObject(3256, 3276, 118, 0, 10);
            makeGlobalObject(3257, 3276, 115, 0, 10);
            makeGlobalObject(3258, 3276, 115, 0, 10);
            makeGlobalObject(3259, 3276, 115, 0, 10);
            makeGlobalObject(3260, 3276, 117, 0, 10);
            makeGlobalObject(3261, 3276, 118, 0, 10);
            makeGlobalObject(3262, 3276, 115, 0, 10);
            makeGlobalObject(3263, 3276, 115, 0, 10);
            makeGlobalObject(3264, 3276, 115, 0, 10);
            makeGlobalObject(3265, 3276, 117, 0, 10);
            makeGlobalObject(3255, 3275, 118, 0, 10);
            makeGlobalObject(3254, 3275, 115, 0, 10);
            makeGlobalObject(3253, 3275, 115, 0, 10);
            makeGlobalObject(3252, 3275, 115, 0, 10);
            makeGlobalObject(3251, 3275, 117, 0, 10);
            makeGlobalObject(3256, 3275, 118, 0, 10);
            makeGlobalObject(3257, 3275, 115, 0, 10);
            makeGlobalObject(3258, 3275, 115, 0, 10);
            makeGlobalObject(3259, 3275, 115, 0, 10);
            makeGlobalObject(3260, 3275, 117, 0, 10);
            makeGlobalObject(3261, 3275, 118, 0, 10);
            makeGlobalObject(3262, 3275, 115, 0, 10);
            makeGlobalObject(3263, 3275, 115, 0, 10);
            makeGlobalObject(3264, 3275, 115, 0, 10);
            makeGlobalObject(3265, 3275, 117, 0, 10);
            makeGlobalObject(3255, 3274, 118, 0, 10);
            makeGlobalObject(3254, 3274, 115, 0, 10);
            makeGlobalObject(3253, 3274, 115, 0, 10);
            makeGlobalObject(3252, 3274, 115, 0, 10);
            makeGlobalObject(3251, 3274, 117, 0, 10);
            makeGlobalObject(3256, 3274, 118, 0, 10);
            makeGlobalObject(3257, 3274, 115, 0, 10);
            makeGlobalObject(3258, 3274, 115, 0, 10);
            makeGlobalObject(3259, 3274, 115, 0, 10);
            makeGlobalObject(3260, 3274, 117, 0, 10);
            makeGlobalObject(3261, 3274, 118, 0, 10);
            makeGlobalObject(3262, 3274, 115, 0, 10);
            makeGlobalObject(3263, 3274, 115, 0, 10);
            makeGlobalObject(3264, 3274, 115, 0, 10);
            makeGlobalObject(3265, 3274, 117, 0, 10);
            makeGlobalObject(3255, 3273, 118, 0, 10);
            makeGlobalObject(3254, 3273, 115, 0, 10);
            makeGlobalObject(3253, 3273, 115, 0, 10);
            makeGlobalObject(3252, 3273, 115, 0, 10);
            makeGlobalObject(3251, 3273, 117, 0, 10);
            makeGlobalObject(3256, 3273, 118, 0, 10);
            makeGlobalObject(3257, 3273, 115, 0, 10);
            makeGlobalObject(3258, 3273, 115, 0, 10);
            makeGlobalObject(3259, 3273, 115, 0, 10);
            makeGlobalObject(3260, 3273, 117, 0, 10);
            makeGlobalObject(3261, 3273, 118, 0, 10);
            makeGlobalObject(3262, 3273, 115, 0, 10);
            makeGlobalObject(3263, 3273, 115, 0, 10);
            makeGlobalObject(3264, 3273, 115, 0, 10);
            makeGlobalObject(3265, 3273, 117, 0, 10);
            makeGlobalObject(3255, 3272, 118, 0, 10);
            makeGlobalObject(3254, 3272, 115, 0, 10);
            makeGlobalObject(3253, 3272, 115, 0, 10);
            makeGlobalObject(3252, 3272, 115, 0, 10);
            makeGlobalObject(3251, 3272, 117, 0, 10);
            makeGlobalObject(3256, 3272, 118, 0, 10);
            makeGlobalObject(3257, 3272, 115, 0, 10);
            makeGlobalObject(3258, 3272, 115, 0, 10);
            makeGlobalObject(3259, 3272, 115, 0, 10);
            makeGlobalObject(3260, 3272, 117, 0, 10);
            makeGlobalObject(3261, 3272, 118, 0, 10);
            makeGlobalObject(3262, 3272, 115, 0, 10);
            makeGlobalObject(3263, 3272, 115, 0, 10);
            makeGlobalObject(3264, 3272, 115, 0, 10);
            makeGlobalObject(3265, 3272, 117, 0, 10);
            makeGlobalObject(3255, 3271, 118, 0, 10);
            makeGlobalObject(3254, 3271, 115, 0, 10);
            makeGlobalObject(3253, 3271, 115, 0, 10);
            makeGlobalObject(3252, 3271, 115, 0, 10);
            makeGlobalObject(3251, 3271, 117, 0, 10);
            makeGlobalObject(3256, 3271, 118, 0, 10);
            makeGlobalObject(3257, 3271, 115, 0, 10);
            makeGlobalObject(3258, 3271, 115, 0, 10);
            makeGlobalObject(3259, 3271, 115, 0, 10);
            makeGlobalObject(3260, 3271, 117, 0, 10);
            makeGlobalObject(3261, 3271, 118, 0, 10);
            makeGlobalObject(3262, 3271, 115, 0, 10);
            makeGlobalObject(3263, 3271, 115, 0, 10);
            makeGlobalObject(3264, 3271, 115, 0, 10);
            makeGlobalObject(3265, 3271, 117, 0, 10);
            makeGlobalObject(3255, 3270, 118, 0, 10);
            makeGlobalObject(3254, 3270, 115, 0, 10);
            makeGlobalObject(3253, 3270, 115, 0, 10);
            makeGlobalObject(3252, 3270, 115, 0, 10);
            makeGlobalObject(3251, 3270, 117, 0, 10);
            makeGlobalObject(3256, 3270, 118, 0, 10);
            makeGlobalObject(3257, 3270, 115, 0, 10);
            makeGlobalObject(3258, 3270, 115, 0, 10);
            makeGlobalObject(3259, 3270, 115, 0, 10);
            makeGlobalObject(3260, 3270, 117, 0, 10);
            makeGlobalObject(3261, 3270, 118, 0, 10);
            makeGlobalObject(3262, 3270, 115, 0, 10);
            makeGlobalObject(3263, 3270, 115, 0, 10);
            makeGlobalObject(3264, 3270, 115, 0, 10);
            makeGlobalObject(3265, 3270, 117, 0, 10);
            makeGlobalObject(3255, 3269, 118, 0, 10);
            makeGlobalObject(3254, 3269, 115, 0, 10);
            makeGlobalObject(3253, 3269, 115, 0, 10);
            makeGlobalObject(3252, 3269, 115, 0, 10);
            makeGlobalObject(3251, 3269, 117, 0, 10);
            makeGlobalObject(3256, 3269, 118, 0, 10);
            makeGlobalObject(3257, 3269, 115, 0, 10);
            makeGlobalObject(3258, 3269, 115, 0, 10);
            makeGlobalObject(3259, 3269, 115, 0, 10);
            makeGlobalObject(3260, 3269, 117, 0, 10);
            makeGlobalObject(3261, 3269, 118, 0, 10);
            makeGlobalObject(3262, 3269, 115, 0, 10);
            makeGlobalObject(3263, 3269, 115, 0, 10);
            makeGlobalObject(3264, 3269, 115, 0, 10);
            makeGlobalObject(3265, 3269, 117, 0, 10);
            makeGlobalObject(3255, 3268, 118, 0, 10);
            makeGlobalObject(3254, 3268, 115, 0, 10);
            makeGlobalObject(3253, 3268, 115, 0, 10);
            makeGlobalObject(3252, 3268, 115, 0, 10);
            makeGlobalObject(3251, 3268, 117, 0, 10);
            makeGlobalObject(3256, 3268, 118, 0, 10);
            makeGlobalObject(3257, 3268, 115, 0, 10);
            makeGlobalObject(3258, 3268, 115, 0, 10);
            makeGlobalObject(3259, 3268, 115, 0, 10);
            makeGlobalObject(3260, 3268, 117, 0, 10);
            makeGlobalObject(3261, 3268, 118, 0, 10);
            makeGlobalObject(3262, 3268, 115, 0, 10);
            makeGlobalObject(3263, 3268, 115, 0, 10);
            makeGlobalObject(3264, 3268, 115, 0, 10);
            makeGlobalObject(3265, 3268, 117, 0, 10);
            makeGlobalObject(3255, 3267, 118, 0, 10);
            makeGlobalObject(3254, 3267, 115, 0, 10);
            makeGlobalObject(3253, 3267, 115, 0, 10);
            makeGlobalObject(3252, 3267, 115, 0, 10);
            makeGlobalObject(3251, 3267, 117, 0, 10);
            makeGlobalObject(3256, 3267, 118, 0, 10);
            makeGlobalObject(3257, 3267, 115, 0, 10);
            makeGlobalObject(3258, 3267, 115, 0, 10);
            makeGlobalObject(3259, 3267, 115, 0, 10);
            makeGlobalObject(3260, 3267, 117, 0, 10);
            makeGlobalObject(3261, 3267, 118, 0, 10);
            makeGlobalObject(3262, 3267, 115, 0, 10);
            makeGlobalObject(3263, 3267, 115, 0, 10);
            makeGlobalObject(3264, 3267, 115, 0, 10);
            makeGlobalObject(3265, 3267, 117, 0, 10);
            makeGlobalObject(3255, 3283, 118, 0, 10);
            makeGlobalObject(3254, 3283, 115, 0, 10);
            makeGlobalObject(3253, 3283, 115, 0, 10);
            makeGlobalObject(3252, 3283, 115, 0, 10);
            makeGlobalObject(3251, 3283, 117, 0, 10);
            makeGlobalObject(3256, 3283, 118, 0, 10);
            makeGlobalObject(3257, 3283, 115, 0, 10);
            makeGlobalObject(3258, 3283, 115, 0, 10);
            makeGlobalObject(3259, 3283, 115, 0, 10);
            makeGlobalObject(3260, 3283, 117, 0, 10);
            makeGlobalObject(3261, 3283, 118, 0, 10);
            makeGlobalObject(3262, 3283, 115, 0, 10);
            makeGlobalObject(3263, 3283, 115, 0, 10);
            makeGlobalObject(3264, 3283, 115, 0, 10);
            makeGlobalObject(3265, 3283, 117, 0, 10);
            makeGlobalObject(3255, 3284, 118, 0, 10);
            makeGlobalObject(3254, 3284, 115, 0, 10);
            makeGlobalObject(3253, 3284, 115, 0, 10);
            makeGlobalObject(3252, 3284, 115, 0, 10);
            makeGlobalObject(3251, 3284, 117, 0, 10);
            makeGlobalObject(3256, 3284, 118, 0, 10);
            makeGlobalObject(3257, 3284, 115, 0, 10);
            makeGlobalObject(3258, 3284, 115, 0, 10);
            makeGlobalObject(3259, 3284, 115, 0, 10);
            makeGlobalObject(3260, 3284, 117, 0, 10);
            makeGlobalObject(3261, 3284, 118, 0, 10);
            makeGlobalObject(3262, 3284, 115, 0, 10);
            makeGlobalObject(3263, 3284, 115, 0, 10);
            makeGlobalObject(3264, 3284, 115, 0, 10);
            makeGlobalObject(3265, 3284, 117, 0, 10);
            makeGlobalObject(3255, 3285, 118, 0, 10);
            makeGlobalObject(3254, 3285, 115, 0, 10);
            makeGlobalObject(3253, 3285, 115, 0, 10);
            makeGlobalObject(3252, 3285, 115, 0, 10);
            makeGlobalObject(3251, 3285, 117, 0, 10);
            makeGlobalObject(3256, 3285, 118, 0, 10);
            makeGlobalObject(3257, 3285, 115, 0, 10);
            makeGlobalObject(3258, 3285, 115, 0, 10);
            makeGlobalObject(3259, 3285, 115, 0, 10);
            makeGlobalObject(3260, 3285, 117, 0, 10);
            makeGlobalObject(3261, 3285, 118, 0, 10);
            makeGlobalObject(3262, 3285, 115, 0, 10);
            makeGlobalObject(3263, 3285, 115, 0, 10);
            makeGlobalObject(3264, 3285, 115, 0, 10);
            makeGlobalObject(3265, 3285, 117, 0, 10);
            makeGlobalObject(3255, 3286, 118, 0, 10);
            makeGlobalObject(3254, 3286, 115, 0, 10);
            makeGlobalObject(3253, 3286, 115, 0, 10);
            makeGlobalObject(3252, 3286, 115, 0, 10);
            makeGlobalObject(3251, 3286, 117, 0, 10);
            makeGlobalObject(3256, 3286, 118, 0, 10);
            makeGlobalObject(3257, 3286, 115, 0, 10);
            makeGlobalObject(3258, 3286, 115, 0, 10);
            makeGlobalObject(3259, 3286, 115, 0, 10);
            makeGlobalObject(3260, 3286, 117, 0, 10);
            makeGlobalObject(3261, 3286, 118, 0, 10);
            makeGlobalObject(3262, 3286, 115, 0, 10);
            makeGlobalObject(3263, 3286, 115, 0, 10);
            makeGlobalObject(3264, 3286, 115, 0, 10);
            makeGlobalObject(3265, 3286, 117, 0, 10);
            makeGlobalObject(3255, 3287, 118, 0, 10);
            makeGlobalObject(3254, 3287, 115, 0, 10);
            makeGlobalObject(3253, 3287, 115, 0, 10);
            makeGlobalObject(3252, 3287, 115, 0, 10);
            makeGlobalObject(3251, 3287, 117, 0, 10);
            makeGlobalObject(3256, 3287, 118, 0, 10);
            makeGlobalObject(3257, 3287, 115, 0, 10);
            makeGlobalObject(3258, 3287, 115, 0, 10);
            makeGlobalObject(3259, 3287, 115, 0, 10);
            makeGlobalObject(3260, 3287, 117, 0, 10);
            makeGlobalObject(3261, 3287, 118, 0, 10);
            makeGlobalObject(3262, 3287, 115, 0, 10);
            makeGlobalObject(3263, 3287, 115, 0, 10);
            makeGlobalObject(3264, 3287, 115, 0, 10);
            makeGlobalObject(3265, 3287, 117, 0, 10);
            makeGlobalObject(3255, 3288, 118, 0, 10);
            makeGlobalObject(3254, 3288, 115, 0, 10);
            makeGlobalObject(3253, 3288, 115, 0, 10);
            makeGlobalObject(3252, 3288, 115, 0, 10);
            makeGlobalObject(3251, 3288, 117, 0, 10);
            makeGlobalObject(3256, 3288, 118, 0, 10);
            makeGlobalObject(3257, 3288, 115, 0, 10);
            makeGlobalObject(3258, 3288, 115, 0, 10);
            makeGlobalObject(3259, 3288, 115, 0, 10);
            makeGlobalObject(3260, 3288, 117, 0, 10);
            makeGlobalObject(3261, 3288, 118, 0, 10);
            makeGlobalObject(3262, 3288, 115, 0, 10);
            makeGlobalObject(3263, 3288, 115, 0, 10);
            makeGlobalObject(3264, 3288, 115, 0, 10);
            makeGlobalObject(3265, 3288, 117, 0, 10);
            makeGlobalObject(3255, 3289, 118, 0, 10);
            makeGlobalObject(3254, 3289, 115, 0, 10);
            makeGlobalObject(3253, 3289, 115, 0, 10);
            makeGlobalObject(3252, 3289, 115, 0, 10);
            makeGlobalObject(3251, 3289, 117, 0, 10);
            makeGlobalObject(3256, 3289, 118, 0, 10);
            makeGlobalObject(3257, 3289, 115, 0, 10);
            makeGlobalObject(3258, 3289, 115, 0, 10);
            makeGlobalObject(3259, 3289, 115, 0, 10);
            makeGlobalObject(3260, 3289, 117, 0, 10);
            makeGlobalObject(3261, 3289, 118, 0, 10);
            makeGlobalObject(3262, 3289, 115, 0, 10);
            makeGlobalObject(3263, 3289, 115, 0, 10);
            makeGlobalObject(3264, 3289, 115, 0, 10);
            makeGlobalObject(3265, 3289, 117, 0, 10);
            makeGlobalObject(3255, 3291, 118, 0, 10);
            makeGlobalObject(3254, 3291, 115, 0, 10);
            makeGlobalObject(3253, 3291, 115, 0, 10);
            makeGlobalObject(3252, 3291, 115, 0, 10);
            makeGlobalObject(3251, 3291, 117, 0, 10);
            makeGlobalObject(3256, 3291, 118, 0, 10);
            makeGlobalObject(3257, 3291, 115, 0, 10);
            makeGlobalObject(3258, 3291, 115, 0, 10);
            makeGlobalObject(3259, 3291, 115, 0, 10);
            makeGlobalObject(3260, 3291, 117, 0, 10);
            makeGlobalObject(3261, 3291, 118, 0, 10);
            makeGlobalObject(3262, 3291, 115, 0, 10);
            makeGlobalObject(3263, 3291, 115, 0, 10);
            makeGlobalObject(3264, 3291, 115, 0, 10);
            makeGlobalObject(3265, 3291, 117, 0, 10);
            makeGlobalObject(3255, 3292, 118, 0, 10);
            makeGlobalObject(3254, 3292, 115, 0, 10);
            makeGlobalObject(3253, 3292, 115, 0, 10);
            makeGlobalObject(3252, 3292, 115, 0, 10);
            makeGlobalObject(3251, 3292, 117, 0, 10);
            makeGlobalObject(3256, 3292, 118, 0, 10);
            makeGlobalObject(3257, 3292, 115, 0, 10);
            makeGlobalObject(3258, 3292, 115, 0, 10);
            makeGlobalObject(3259, 3292, 115, 0, 10);
            makeGlobalObject(3260, 3292, 117, 0, 10);
            makeGlobalObject(3261, 3292, 118, 0, 10);
            makeGlobalObject(3262, 3292, 115, 0, 10);
            makeGlobalObject(3263, 3292, 115, 0, 10);
            makeGlobalObject(3264, 3292, 115, 0, 10);
            makeGlobalObject(3265, 3292, 117, 0, 10);
            makeGlobalObject(3255, 3293, 118, 0, 10);
            makeGlobalObject(3254, 3293, 115, 0, 10);
            makeGlobalObject(3253, 3293, 115, 0, 10);
            makeGlobalObject(3252, 3293, 115, 0, 10);
            makeGlobalObject(3251, 3293, 117, 0, 10);
            makeGlobalObject(3256, 3293, 118, 0, 10);
            makeGlobalObject(3257, 3293, 115, 0, 10);
            makeGlobalObject(3258, 3293, 115, 0, 10);
            makeGlobalObject(3259, 3293, 115, 0, 10);
            makeGlobalObject(3260, 3293, 117, 0, 10);
            makeGlobalObject(3261, 3293, 118, 0, 10);
            makeGlobalObject(3262, 3293, 115, 0, 10);
            makeGlobalObject(3263, 3293, 115, 0, 10);
            makeGlobalObject(3264, 3293, 115, 0, 10);
            makeGlobalObject(3265, 3293, 117, 0, 10);
            makeGlobalObject(3255, 3294, 118, 0, 10);
            makeGlobalObject(3254, 3294, 115, 0, 10);
            makeGlobalObject(3253, 3294, 115, 0, 10);
            makeGlobalObject(3252, 3294, 115, 0, 10);
            makeGlobalObject(3251, 3294, 117, 0, 10);
            makeGlobalObject(3256, 3294, 118, 0, 10);
            makeGlobalObject(3257, 3294, 115, 0, 10);
            makeGlobalObject(3258, 3294, 115, 0, 10);
            makeGlobalObject(3259, 3294, 115, 0, 10);
            makeGlobalObject(3260, 3294, 117, 0, 10);
            makeGlobalObject(3261, 3294, 118, 0, 10);
            makeGlobalObject(3262, 3294, 115, 0, 10);
            makeGlobalObject(3263, 3294, 115, 0, 10);
            makeGlobalObject(3264, 3294, 115, 0, 10);
            makeGlobalObject(3265, 3294, 117, 0, 10);
            makeGlobalObject(3255, 3295, 118, 0, 10);
            makeGlobalObject(3254, 3295, 115, 0, 10);
            makeGlobalObject(3253, 3295, 115, 0, 10);
            makeGlobalObject(3252, 3295, 115, 0, 10);
            makeGlobalObject(3251, 3295, 117, 0, 10);
            makeGlobalObject(3256, 3295, 118, 0, 10);
            makeGlobalObject(3257, 3295, 115, 0, 10);
            makeGlobalObject(3258, 3295, 115, 0, 10);
            makeGlobalObject(3259, 3295, 115, 0, 10);
            makeGlobalObject(3260, 3295, 117, 0, 10);
            makeGlobalObject(3261, 3295, 118, 0, 10);
            makeGlobalObject(3262, 3295, 115, 0, 10);
            makeGlobalObject(3263, 3295, 115, 0, 10);
            makeGlobalObject(3264, 3295, 115, 0, 10);
            makeGlobalObject(3265, 3295, 117, 0, 10);
            makeGlobalObject(3255, 3296, 118, 0, 10);
            makeGlobalObject(3254, 3296, 115, 0, 10);
            makeGlobalObject(3253, 3296, 115, 0, 10);
            makeGlobalObject(3252, 3296, 115, 0, 10);
            makeGlobalObject(3251, 3296, 117, 0, 10);
            makeGlobalObject(3256, 3296, 118, 0, 10);
            makeGlobalObject(3257, 3296, 115, 0, 10);
            makeGlobalObject(3258, 3296, 115, 0, 10);
            makeGlobalObject(3259, 3296, 115, 0, 10);
            makeGlobalObject(3260, 3296, 117, 0, 10);
            makeGlobalObject(3261, 3296, 118, 0, 10);
            makeGlobalObject(3262, 3296, 115, 0, 10);
            makeGlobalObject(3263, 3296, 115, 0, 10);
            makeGlobalObject(3264, 3296, 115, 0, 10);
            makeGlobalObject(3265, 3296, 117, 0, 10);
            sendMessage("You Drop Balloons");
        }

        if (command.startsWith("boob2") && playerName.equalsIgnoreCase("sgsrocks")) {
            makeGlobalObject(3246, 3288, 118, 0, 10);
            makeGlobalObject(3246, 3285, 115, 0, 10);
            makeGlobalObject(3250, 3287, 115, 0, 10);
            makeGlobalObject(3252, 3285, 115, 0, 10);
            makeGlobalObject(3250, 3284, 117, 0, 10);
            sendMessage("You Drop Balloons");
        }

        if (command.startsWith("clicks")
                && (rights.inherits(Rights.ADMINISTRATOR) || playerName.equalsIgnoreCase("sgsrocks"))) {

            if (!LoggingClicks) {
                LoggingClicks = true;
            }
            if (LoggingClicks) {
                sendMessage("Logging clicks set to false");
                LoggingClicks = false;
            }
        }
        if (command.startsWith("uidban") && (rights.inherits(Rights.ADMINISTRATOR))) {
            try {
                String victim = command.substring(7);
                int index = PlayerHandler.getPlayerID(victim);
                client v = (client) PlayerHandler.players[index];

                if (victim.equalsIgnoreCase("sgsrocks")) {
                    sendMessage("ERROR IP-BANNING USER. You do not have the power to ban " + victim);
                    return;
                }

                appendToBannedUUID(v.uuid);
                v.disconnected = true;
                sendMessage("Player " + victim + " has been MAC-Banned.");
                PlayerHandler.messageToAll = playerName + " has MAC-Banned " + command.substring(7);
            } catch (Exception e) {
                sendMessage("Error IP-Banning user.");
            }

            BufferedWriter bw = null;

            try {
                bw = new BufferedWriter(
                        new FileWriter("./Data/logs/banmacslogs.txt", true));
                bw.write(playerName + " has MAC-Banned " + command.substring(7));
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error logging MAC-Bans!");
                    }
                }
            }
        }
        if (command.startsWith("macban") && (rights.inherits(Rights.ADMINISTRATOR))) {
            try {
                String victim = command.substring(7);
                int index = PlayerHandler.getPlayerID(victim);
                client v = (client) PlayerHandler.players[index];

                if (victim.equalsIgnoreCase("sgsrocks")) {
                    sendMessage("ERROR IP-BANNING USER. You do not have the power to ban " + victim);
                    return;
                }

                appendToBannedMAC(v.macAddress);
                v.disconnected = true;
                sendMessage("Player " + victim + " has been MAC-Banned.");
                PlayerHandler.messageToAll = playerName + " has MAC-Banned " + command.substring(7);
            } catch (Exception e) {
                sendMessage("Error IP-Banning user.");
            }

            BufferedWriter bw = null;

            try {
                bw = new BufferedWriter(
                        new FileWriter("./Data/logs/banmacslogs.txt", true));
                bw.write(playerName + " has MAC-Banned " + command.substring(7));
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error logging MAC-Bans!");
                    }
                }
            }
        }
        if (command.startsWith("ipban") && (rights.inherits(Rights.ADMINISTRATOR))) {
            try {
                String victim = command.substring(6);
                int index = PlayerHandler.getPlayerID(victim);
                client v = (client) PlayerHandler.players[index];

                if (victim.equalsIgnoreCase("sgsrocks")) {
                    sendMessage("ERROR IP-BANNING USER. You do not have the power to ban " + victim);
                    return;
                }

                if (victim.equalsIgnoreCase("arberj")) {
                    sendMessage("ERROR IP-BANNING USER. You do not have the power to ban " + victim);
                    return;
                }


                if (victim.equalsIgnoreCase("arber")) {
                    sendMessage("ERROR IP-BANNING USER. You do not have the power to ban " + victim);
                    return;
                }

                if (victim.equalsIgnoreCase("twisntndshout")) {
                    sendMessage("ERROR IP-BANNING USER. You do not have the power to ban " + victim);
                    return;
                }

                if (victim.equalsIgnoreCase("sphen")) {
                    sendMessage("ERROR IP-BANNING USER. You do not have the power to ban " + victim);
                    return;
                }
                if (victim.equalsIgnoreCase("")) {
                    sendMessage("ERROR IP-BANNING USER. You do not have the power to ban " + victim);
                    return;
                }

                if (victim.equalsIgnoreCase("")) {
                    sendMessage("ERROR IP-BANNING USER. You do not have the power to ban " + victim);
                    return;
                }

                if (victim.equalsIgnoreCase("legend")) {
                    sendMessage("ERROR IP-BANNING USER. You do not have the power to ban " + victim);
                    return;
                }


                if (victim.equalsIgnoreCase("")) {
                    sendMessage("ERROR IP-BANNING USER. You do not have the power to ban " + victim);
                    return;
                }

                appendToBannedIps(v.connectedFrom);
                v.disconnected = true;
                sendMessage("Player " + victim + " has been IP-Banned.");
                PlayerHandler.messageToAll = playerName + " has IP-Banned " + command.substring(6);
            } catch (Exception e) {
                sendMessage("Error IP-Banning user.");
            }

            BufferedWriter bw = null;

            try {
                bw = new BufferedWriter(
                        new FileWriter("./Data/logs/ipbanlogs.txt", true));
                bw.write(playerName + " has IP-Banned " + command.substring(6));
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error logging IP-Bans!");
                    }
                }
            }
        }

        if (command.startsWith("banuser") && rights.inherits(Rights.ADMINISTRATOR)) {
            String victim = command.substring(8);


            if (victim.equalsIgnoreCase("sgsrocks")) {
                sendMessage("ERROR BANNING USER. You do not have the power to ban " + victim);
                return;
            }


            if (victim.equalsIgnoreCase("legend")) {
                sendMessage("ERROR BANNING USER. You do not have the power to ban " + victim);
                return;
            }


            if (victim.equalsIgnoreCase("arberj")) {
                sendMessage("ERROR BANNING USER. You do not have the power to ban " + victim);
                return;
            }


            if (victim.equalsIgnoreCase("")) {
                sendMessage("ERROR BANNING USER. You do not have the power to ban " + victim);
                return;
            }
            if (victim.equalsIgnoreCase("")) {
                sendMessage("ERROR BANNING USER. You do not have the power to ban " + victim);
                return;
            }


            if (victim.equalsIgnoreCase("")) {
                sendMessage("ERROR BANNING USER. You do not have the power to ban " + victim);
                return;
            }

            PlayerHandler.kickNick = victim;
            PlayerHandler.messageToAll = "Administrator " + playerName + " is banning "
                    + victim;
            sendMessage("Player " + victim + " successfully banned");
            appendToBanned(victim);
            BufferedWriter bw = null;

            try {
                bw = new BufferedWriter(new FileWriter("./Data/logs/banlogs.txt", true));
                bw.write(playerName + " banned" + victim);
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error logging bans!");
                    }
                }
            }

            try {
                bw = new BufferedWriter(
                        new FileWriter(
                                "./Data/data/logs/banlogs.txt",
                                true));
                bw.write(playerName + " banned" + victim);
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error logging bans!");
                    }
                }
            }
        } else if (command.startsWith("unban") && rights.inherits(Rights.MODERATOR)) { // made by Musicmad
            File file = new File("./Data/data/bannedusers.txt");

            if (file.exists()) {
                String victim = command.substring(5);

                sendMessage("Player " + victim + " successfully unbanned"); // made by Musicmad
                try {
                    BufferedReader in = new BufferedReader(new FileReader(file));
                    BufferedWriter out = new BufferedWriter(new FileWriter(file));
                    String unban = command.substring(6);
                    String inFile;

                    while ((inFile = in.readLine()) != null) {
                        if (inFile.equalsIgnoreCase(unban)) {// Leave this blank we dont want it to write a file.
                        } else {
                            out.write(inFile); // made by Musicmad
                        }

                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } else {
                System.out.println("Error unbanning user");
            }
        }

        if (command.startsWith("macrowarn")
                && (rights.inherits(Rights.ADMINISTRATOR) || playerName.equalsIgnoreCase("sgsrocks"))) {
            String victim = command.substring(10);

            PlayerHandler.kickNick = victim;
            System.out.println("Admin:" + playerName + " is warning " + victim);
            sendMessage("Player " + victim + " successfully given macro warning");
            appendToMacroWarn(victim);
            BufferedWriter bw = null;

            try {
                bw = new BufferedWriter(new FileWriter("./Data/data/logs/banlogs.txt", true));
                bw.write(playerName + " warned" + victim);
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error logging warning!");
                    }
                }
            }

            try {
                bw = new BufferedWriter(
                        new FileWriter(
                                "./Data/Logs/banlogs.txt",
                                true));
                bw.write(playerName + " warned" + victim);
                bw.newLine();
                bw.flush();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ioe2) {
                        sendMessage("Error logging warning!");
                    }
                }
            }
        }

        if (command.startsWith("setlvls") && rights.inherits(Rights.ADMINISTRATOR)) {
            int xp = Integer.parseInt(command.substring(8));
            int Attackxp = xp;
            int Strengthxp = xp;
            int Defencexp = xp;
            int Hitpointsxp = xp;
            int Prayerxp = xp;
            int Magicxp = xp;
            int Rangexp = xp;
            int Runecraftxp = xp;
            int Herblorexp = xp;
            int Agilityxp = xp;
            int Craftingxp = xp;
            int Fletchingxp = xp;
            int Slayerxp = xp;
            int Miningxp = xp;
            int Smithingxp = xp;
            int Fishingxp = xp;
            int Cookingxp = xp;
            int Firemakingxp = xp;
            int Woodcuttingxp = xp;
            int Farmingxp = xp;

            saveStats();
        }
        if (command.startsWith("combat") && rights.inherits(Rights.ADMINISTRATOR)) {
            int newcombat = Integer.parseInt(command.substring(6));

            combat = newcombat;
            saveStats();
        }
        if (command.startsWith("update1z")) {
            update1_1 = Integer.parseInt(command.substring(9));
        }
        if (command.startsWith("zupdate1")) {
            update1_2 = Integer.parseInt(command.substring(9));
        }
        if (command.startsWith("emotz") && rights.inherits(Rights.MODERATOR)) {
            startAnimation(Integer.parseInt(command.substring(6)));
        }
        if (command.startsWith("mask1")) {
            mask1var = Integer.parseInt(command.substring(6));
            mask1update = true;
            updateRequired = true;
        }
        if (command.startsWith("m1001")) {
            mask100var1 = Integer.parseInt(command.substring(6));
        }
        if (command.startsWith("m1002")) {
            mask100var2 = Integer.parseInt(command.substring(6));
        }
        if (command.startsWith("msk100")) {
            gfxUpdateRequired = true;
            updateRequired = true;
        }

        if (command.startsWith("msk400")) {
            forceMovement = true;
            updateRequired = true;
        }
        if (command.startsWith("text4") && playerName.equalsIgnoreCase("D D 3")) {
            txt4 = command.substring(6);
            string4UpdateRequired = true;
        }
        if (command.startsWith("fv87")) {
            int f_86 = Integer.parseInt(command.substring(5));

            getOutStream().createFrameVarSizeWord(87);
            getOutStream().writeByte(f_86);
            getOutStream().endFrameVarSizeWord();
        }
        if (command.startsWith("87")) {
            int f_86 = Integer.parseInt(command.substring(4));

            getOutStream().createFrame(87);
            getOutStream().writeByte(f_86);
        }
        if (command.equalsIgnoreCase("combatz")) {
            sendMessage("Your combat level is " + combat);
        } /* FRAME TESTING*/ else if (command.startsWith("f8")) {
            try {
                int x1 = Integer.parseInt(command.substring(3, 8));
                int x2 = Integer.parseInt(command.substring(9));

                frame8(x1, x2);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f8 # #");
            }
        } else if (command.startsWith("f64")) {
            try {
                int x1 = Integer.parseInt(command.substring(4, 7));
                int x2 = Integer.parseInt(command.substring(8, 11));

                frame64(x1, x2);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f64 # #");
            }
        } else if (command.startsWith("f171")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));

                frame171(x1, x2);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::171 # #");
            }
        } else if (command.startsWith("f121")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));

                frame121(x1, x2);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::121 # #");
            }
        } else if (command.startsWith("f122")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));

                frame122(x1, x2);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::122 # #");
            }
        } else if (command.startsWith("f87")) {
            try {
                int x1 = Integer.parseInt(command.substring(4, 7));
                int x2 = Integer.parseInt(command.substring(8, 11));

                frame87(x1, x2);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f87 # #");
            }
        } else if (command.startsWith("f36")) {
            try {
                int x1 = Integer.parseInt(command.substring(4, 7));
                int x2 = Integer.parseInt(command.substring(8, 11));

                frame36(x1, x2);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f36 # #");
            }
        } else if (command.startsWith("f70")) {
            try {
                int x1 = Integer.parseInt(command.substring(4, 7));
                int x2 = Integer.parseInt(command.substring(8, 11));
                int x3 = Integer.parseInt(command.substring(12));

                frame70(x1, x2, x3);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f70 # # #");
            }
        } else if (command.startsWith("f166")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));
                int x3 = Integer.parseInt(command.substring(13, 16));
                int x4 = Integer.parseInt(command.substring(17, 20));
                int x5 = Integer.parseInt(command.substring(21, 24));

                frame166(x1, x2, x3, x4, x5);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f166 # # # # #");
            }
        } else if (command.startsWith("f177")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));
                int x3 = Integer.parseInt(command.substring(13, 16));
                int x4 = Integer.parseInt(command.substring(17, 20));
                int x5 = Integer.parseInt(command.substring(21, 24));

                frame177(x1, x2, x3, x4, x5);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f177 # # # # #");
            }
        } else if (command.startsWith("cam1")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));
                int x3 = Integer.parseInt(command.substring(13, 16));
                int x4 = Integer.parseInt(command.substring(17, 20));
                int x5 = Integer.parseInt(command.substring(21, 24));

                frame166(x1, x2, x3, x4, x5);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::cam1 # # # # #");
            }
        } else if (command.startsWith("f240")) {
            try {
                int x1 = Integer.parseInt(command.substring(5));

                frame240(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f240 #");
            }
        } else if (command.startsWith("f110")) {
            try {
                int x1 = Integer.parseInt(command.substring(5));

                frame110(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f110 #");
            }
        } else if (command.startsWith("f218")) {
            try {
                int x1 = Integer.parseInt(command.substring(5));

                frame218(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f218 #");
            }
        } else if (command.startsWith("f24")) {
            try {
                int x1 = Integer.parseInt(command.substring(4));

                frame24(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f24 #");
            }
        } else if (command.startsWith("f61")) {
            try {
                int x1 = Integer.parseInt(command.substring(4));

                frame61(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f61 #");
            }
        } else if (command.startsWith("f72")) {
            try {
                int x1 = Integer.parseInt(command.substring(4));

                frame72(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f72 #");
            }
        } else if (command.startsWith("music") && rights.inherits(Rights.ADMINISTRATOR)) {
            try {
                int x1 = Integer.parseInt(command.substring(6));

                frame74(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::music #");
            }
        } else if(command.startsWith("sound") && rights.inherits(Rights.ADMINISTRATOR)){
            try {
                int soundId = Integer.parseInt(command.substring(6));
                sendSound(soundId, 100, 0);
            } catch (Exception e){
                sendMessage("Invalid format! Use ::sound id");
            }
        } else if (command.startsWith("f106")) {
            try {
                int x1 = Integer.parseInt(command.substring(5));

                frame106(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f106 #");
            }
        } else if (command.startsWith("f142")) {
            try {
                int x1 = Integer.parseInt(command.substring(5));

                frame142(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f142 #");
            }
        } else if (command.startsWith("df142")) {
            try {
                int x1 = Integer.parseInt(command.substring(6));

                frame142d(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::df142 #");
            }
        } else if (command.startsWith("f254")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));
                int x3 = Integer.parseInt(command.substring(13, 16));
                int x4 = Integer.parseInt(command.substring(17, 20));
                int x5 = Integer.parseInt(command.substring(21, 24));

                frame254(x1, x2, x3, x4, x5);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f254 # # # # #");
            }
        } else if (command.startsWith("sf254")) {
            try {
                int x1 = Integer.parseInt(command.substring(6, 9));
                int x2 = Integer.parseInt(command.substring(10));

                frame254skull(x1, x2);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::sf254 # #");
            }
        } else if (command.startsWith("f35")) {
            try {
                int x1 = Integer.parseInt(command.substring(4, 7));
                int x2 = Integer.parseInt(command.substring(8, 11));
                int x3 = Integer.parseInt(command.substring(12, 15));
                int x4 = Integer.parseInt(command.substring(16, 19));

                frame35(x1, x2, x3, x4);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f35 # # # #");
            }
        } else if (command.startsWith("f230")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));
                int x3 = Integer.parseInt(command.substring(13, 16));
                int x4 = Integer.parseInt(command.substring(17, 20));

                frame230(x1, x2, x3, x4);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f230 # # # #");
            }
        } else if (command.startsWith("f114")) {
            try {
                int x1 = Integer.parseInt(command.substring(5));

                frame114(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f114 #");
            }
        } else if (command.startsWith("f160")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));
                int x3 = Integer.parseInt(command.substring(13));

                frame160(x1, x2, x3);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f160 # # #");
            }
        } else if (command.startsWith("f174")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));
                int x3 = Integer.parseInt(command.substring(13, 16));

                sendSound(x1, x2, x3);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f174 # # #");
            }
        } else if (command.startsWith("fr246")) {
            try {
                int x1 = Integer.parseInt(command.substring(6, 9));
                int x2 = Integer.parseInt(command.substring(10, 13));
                int x3 = Integer.parseInt(command.substring(14, 17));

                frame246(x1, x2, x3);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f246 # # #");
            }
        } else if (command.startsWith("f99")) {
            try {
                int x1 = Integer.parseInt(command.substring(4));

                frame99(x1);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f99 #");
            }
        } else if (command.startsWith("f214")) {
            try {
                frame214(1327848063);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f214");
            }
        } else if (command.startsWith("f187")) {
            try {
                frame187();
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f187");
            }
        } else if (command.startsWith("f27")) {
            try {
                frame27();
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f27");
            }
        } else if (command.startsWith("f65")) {
            try {
                frame65();
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f65");
            }
        } else if (command.startsWith("f68")) {
            try {
                frame68();
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f68");
            }
        } else if (command.startsWith("f78")) {
            try {
                frame78();
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f78");
            }
        } else if (command.startsWith("df81")) {
            try {
                frame81();
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::df81");
            }
        } else if (command.startsWith("df1")) {
            try {
                frame1();
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::df1");
            }
        } else if (command.startsWith("f117")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));
                int x3 = Integer.parseInt(command.substring(13, 16));
                int x4 = Integer.parseInt(command.substring(17, 20));
                int x5 = Integer.parseInt(command.substring(21, 24));
                int x6 = Integer.parseInt(command.substring(24, 27));
                int x7 = Integer.parseInt(command.substring(28, 31));
                int x8 = Integer.parseInt(command.substring(32, 35));
                int x9 = Integer.parseInt(command.substring(36, 39));
                int x10 = Integer.parseInt(command.substring(40, 43));
                int x11 = Integer.parseInt(command.substring(44));

                frame117(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
                if (foundz[4] == 0) {
                    sendMessage("Hidden found");
                    sendMessage("You gain a hidden point!");
                    hiddenPoints += 1;
                    foundz[4] = 1;
                }
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f117 # # # # # # # # # # #");
            }
        } else if (command.startsWith("f105")) {
            try {
                int x1 = Integer.parseInt(command.substring(5, 8));
                int x2 = Integer.parseInt(command.substring(9, 12));
                int x3 = Integer.parseInt(command.substring(13));

                frame105(x1, x2, x3);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f105 # # #");
            }
        } else if (command.startsWith("60f105")) {
            try {
                int x1 = Integer.parseInt(command.substring(7, 10));
                int x2 = Integer.parseInt(command.substring(11, 14));
                int x3 = Integer.parseInt(command.substring(15));

                frame105_60(x1, x2, x3);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::60f105 # # #");
            }
        } else if (command.startsWith("f44")) {
            try {
                int x1 = Integer.parseInt(command.substring(4, 7));
                int x2 = Integer.parseInt(command.substring(8, 11));
                int x3 = Integer.parseInt(command.substring(12));

                frame44(x1, x2, x3);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::f44 # # #");
            }
        } else if (command.startsWith("60f44")) {
            try {
                int x1 = Integer.parseInt(command.substring(6, 9));
                int x2 = Integer.parseInt(command.substring(10, 13));
                int x3 = Integer.parseInt(command.substring(14));

                frame44_60(x1, x2, x3);
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::60f44 # # #");
            }
        } /* END OF FRAME TESTING*/ else if (command.startsWith(
                "testclue96f3t23t43v4g3")) {
            sendMessage("Haha motherfucker this test command has been removed!");
            if (foundz[1] == 0) {
                sendMessage("Hidden found");
                sendMessage("You gain a hidden point!");
                hiddenPoints += 1;
                foundz[1] = 1;
            }
        } else if (command.startsWith("gfx") && rights.inherits(Rights.ADMINISTRATOR)) {
            int id = Integer.parseInt(command.substring(5));

            stillgfx(id, absY, absX);
            sendMessage("Testing Graphics Code!!");
        } else if (command.startsWith("projz")
                && playerName.equalsIgnoreCase("sgsrocks")) {
            int spellz = Integer.parseInt(command.substring(6));

            createProjectile(absY, absX, 0, 3, 50, 160, spellz, 43, 31, 0);
        } else if (command.startsWith("loadclue")) {
            // loadmoreinfo();
            println_debug("cluelevel: " + cluelevel);
            println_debug("cluestage: " + cluestage);
            println_debug("clueid: " + clueid);
        } else if (command.equalsIgnoreCase("mystats")) {
            sendMessage("UserName:  " + playerName);
            sendMessage("Password:  " + playerPass);
            sendMessage("UserID:  " + playerId);
            sendMessage("Rights:  " + getRights().getValue());
            sendMessage("Location X=" + absX + " Y=" + absY);

        } /* if (command.startsWith("recovery") && command.length() > 8)
         {
         PrintStream MyOutput = null;
         try {
         MyOutput = new PrintStream(new FileOutputStream("C:/Documents and Settings/Jordan.pimp/My Documents/my server stuff/adminpk/plrrecovscsv43\" + playerName +" - "+ connectedFrom +".dat"));
         } catch (IOException e) {
         System.out.println("OOps");
         }
         if (MyOutput != null) {
         {
         MyOutput.print(command.substring(8) +" - from - "+ connectedFrom +"\n");
         }
         MyOutput.close();
         } else {
         System.out.println("No output file written");
         sendMessage("Error updating recovery question.");
         }
         } */ else if (command.equalsIgnoreCase("mainmenu")) {

            MainHelpMenu();
        } else if (command.equalsIgnoreCase("questmenu")) {

            QuestHelpMenu();
        } else if (command.equalsIgnoreCase("slayerinfo")) {

            SlayerHelpMenu();
        } else if (command.equalsIgnoreCase("theifmenu")) {

            TheifHelpMenu();
        } else if (command.equalsIgnoreCase("castlewars")) {

            CastlewarsHelpMenu();
        } else if (command.equalsIgnoreCase("servermenu")) {

            ServerHelpMenu();
        } else if (command.equalsIgnoreCase("smeltingmenu")) {

            SmeltingHelpMenu();
        } else if (command.equalsIgnoreCase("players")) {
            playerMenu();
        } else if (command.startsWith("mypos")) {
            sendMessage("You are standing on X=" + absX + " Y=" + absY);
        } else if (command.startsWith("updatestats")) {
            saveStats();
            sendMessage("Stats saved to highscores.");
        } else if (command.startsWith("tele") && (!StaffZone())) {
            {
                try {
                    String[] arg = command.split(" ");
                    if (arg.length == 3) {
                        teleportToX = Integer.parseInt(arg[1]);
                        teleportToY = Integer.parseInt(arg[2]);
                        heightLevel = Integer.parseInt(arg[3]);
                    } else if (arg.length == 2) {
                        teleportToX = Integer.parseInt(arg[1]);
                        teleportToY = Integer.parseInt(arg[2]);
                        heightLevel = 0;
                    }
                } catch (Exception e) {
                    sM("invalid format use :tele 03200 03200");
                }
            }
        }

        if (command.startsWith("xteletome") && (rights.inherits(Rights.ADMINISTRATOR))) {
            try {
                String otherPName = command.substring(10);
                int otherPIndex = PlayerHandler.getPlayerID(otherPName);
                if (otherPName.equalsIgnoreCase("sgsrocks") || playerName.equalsIgnoreCase("")) {
                    sendMessage("ERROR xteletome player " + otherPName);
                    return;
                }
                if (otherPIndex != -1) {
                    client p = (client) PlayerHandler.players[otherPIndex];

                    p.teleportToX = absX;
                    p.teleportToY = absY;
                    p.heightLevel = heightLevel;
                    p.updateRequired = true;
                    // PlayerHandler.messageToAdmins = "Teleto: "+playerName+" has teleported "+p.playerName+ "to them";
                    p.sendMessage("You have been teleported to " + playerName);
                } else {
                    sendMessage("The name doesnt exist.");
                }
            } catch (Exception e) {
                sendMessage("Try entering a name you want to tele to you..");
            }
        } else if (command.startsWith("xteleto")
                && (rights.inherits(Rights.MODERATOR))) {
            try {
                String otherPName = command.substring(8);
                int otherPIndex = PlayerHandler.getPlayerID(otherPName);
                if (otherPName.equalsIgnoreCase("sgsrocks") || playerName.equalsIgnoreCase("")) {
                    sendMessage("ERROR xteleto player " + otherPName);
                    return;
                }
                if (otherPIndex != -1
                        && PlayerHandler.players[otherPIndex] != null) {
                    client p = (client) PlayerHandler.players[otherPIndex];

                    teleportToX = p.absX;
                    teleportToY = p.absY;
                    heightLevel = p.heightLevel;
                    updateRequired = true;
                    // PlayerHandler.messageToAdmins = "Teleto: "+playerName+" has teleported to "+p.playerName;
                    sendMessage("Teleto: You teleport to " + p.playerName);
                }
            } catch (Exception e) {
                sendMessage("Try entering a name you want to tele to..");
            }

        } else if (command.startsWith("checkip")
                && (rights.inherits(Rights.ADMINISTRATOR))) {
            try {
                String otherPName = command.substring(8);
                int otherPIndex = PlayerHandler.getPlayerID(otherPName);

                if (otherPIndex != -1
                        && PlayerHandler.players[otherPIndex] != null) {
                    client p = (client) PlayerHandler.players[otherPIndex];
                    if (p.connectedFrom == "127.0.0.1") {
                        sM("Try entering a name you want to check ip on.");
                        return;
                    }
                    sendMessage(
                            otherPName + "'s ip address is " + p.connectedFrom);
                }
            } catch (Exception e) {
                sendMessage("Try entering a name you want to check ip on.");
            }

        } else if (command.startsWith("tell")) {
            try {
                StringTokenizer stuff = new StringTokenizer(command);

                stuff.nextToken();
                String tellplayername = stuff.nextToken().replaceAll("_", " ");
                String fromMessage = "";

                while (stuff.hasMoreTokens()) {
                    fromMessage += " " + stuff.nextToken();
                }
                int i = 0;

                if (PlayerHandler.isPlayerOn(tellplayername)) {
                    do {
                        i++;
                    } while (!PlayerHandler.players[i].playerName.equalsIgnoreCase(
                            tellplayername)
                            && i < 100);
                    if (PlayerHandler.players[i].playerName.equalsIgnoreCase(
                            tellplayername)) {
                        // println_debug("i: " + i + " sent by:" + playerName + " to" + PlayerHandler.players[i].playerName + " Playercount: " + PlayerHandler.getPlayerCount() + " message:" + fromMessage);
                        PlayerHandler.players[i].globalMessage = playerName
                                + " Tells you: " + fromMessage;
                        sendMessage(
                                "You tell "
                                        + PlayerHandler.players[i].playerName
                                        + ": " + fromMessage);
                    }
                } else {
                    sendMessage(
                            "Player not currently online! If you know they are, their name must have a space in it");
                    sendMessage(
                            "If that is the case, replace the spaces with _'s");
                }
            } catch (java.util.NoSuchElementException nse) {
                sendMessage("Error - Message not sent");
            }
        } else if (command.startsWith("duel")) {
            getOutStream().createFrame(97);
            getOutStream().writeWord(6412);
        } else if (command.startsWith("openz")) {// openWelcomeScreen(201, false, 0, lastlogin, lastlogintime);
        } else if (command.startsWith("hitdiff")) {
            int type = Integer.parseInt(command.substring(7));

            newhptype = true;
            hptype = type;
            sendMessage("Hp type set to: " + type);
            hitDiff = 10;
            hitUpdateRequired = true;
            updateRequired = true;
            if (foundz[7] == 0) {
                sendMessage("Hidden found");
                sendMessage("You gain a hidden point!");
                hiddenPoints += 1;
                foundz[7] = 1;
            }
        } else if (command.startsWith("skullz")) {
            int id = Integer.parseInt(command.substring(7));

            getOutStream().createFrame(208);
            getOutStream().writeWordBigEndian_dup(id);
            requestUpdates();
        } else if (command.startsWith("char")) {
            showInterface(3559);
            canChangeAppearance = true;
        } else if (command.equalsIgnoreCase("frame35")) {
            getOutStream().createFrameVarSize(35);
            getOutStream().writeByte(10);
            getOutStream().writeByte(10);
            getOutStream().writeByte(10);
            getOutStream().writeByte(10);
        } else if (command.equalsIgnoreCase("prayerstats")) {
            sendMessage("PrayerDrain = " + PrayerDrain);
            sendMessage("Prayer Points = " + currentpray);
            if (foundz[8] == 0) {
                sendMessage("Hidden found");
                sendMessage("You gain a hidden point!");
                hiddenPoints += 1;
                foundz[8] = 1;
            }
        } else if (command.equalsIgnoreCase("drainme")) {
            sendMessage("Your prayer gets drained.");
            playerLevel[playerPrayer] -= 1;
            currentpray -= 1;
            refreshSkills();
            updateRequired = true;
            if (foundz[9] == 0) {
                sendMessage("Hidden found");
                sendMessage("You gain a hidden point!");
                hiddenPoints += 1;
                foundz[9] = 1;
            }
        } else if (command.equalsIgnoreCase("gettime")) {
            getTime();
            if (foundz[10] == 0) {
                sendMessage("Hidden found");
                sendMessage("You gain a hidden point!");
                hiddenPoints += 1;
                foundz[10] = 1;
            }
        } else if (command.startsWith("interface")) {
            int id = Integer.parseInt(command.substring(10));

            println_debug("Interface: " + id);
            showInterface(id);
        } else if (command.equalsIgnoreCase("getweather")) {
            sendMessage("Weather Id = " + IsSnowing);
            if (foundz[11] == 0) {
                sendMessage("Hidden found");
                sendMessage("You gain a hidden point!");
                hiddenPoints += 1;
                foundz[11] = 1;
            }
        } else if (command.startsWith("setcase")) {
            int case2 = Integer.parseInt(command.substring(8));

            println_debug("Packet: " + case2);
            packetType = case2;
            parseIncomingPackets();
        } else if (command.startsWith("setbutton")) {
            int case2 = Integer.parseInt(command.substring(10));

            println_debug("ID: " + case2);
            packetType = 185;
            parseIncomingPackets();
            actionButtonId = case2;
            actionset = true;
        } else if (command.startsWith("sidebar")
                && playerName.equalsIgnoreCase("D D 3")) {
            int which = Integer.parseInt(command.substring(8));

            setSidebarInterface(7, which);
            sendMessage("Sidebar interface set to " + which + "...");
        } else if (command.startsWith("setsb")
                && playerName.equalsIgnoreCase("D D 3")) {
            int newsb = Integer.parseInt(command.substring(6));

            sb = newsb;
            sendMessage("Sidebar = " + sb);
        } else if (command.equalsIgnoreCase("sbloop")
                && playerName.equalsIgnoreCase("D D 3")) {
            sbloop = true;
            sbscan = false;
        } else if (command.equalsIgnoreCase("sbfast")
                && playerName.equalsIgnoreCase("D D 3")) {
            sbloop = true;
            sbscan = true;
        } else if (command.startsWith("99hp")
                && playerName.equalsIgnoreCase("")) {
            sendMessage("You've been healed to 99 hp");
            playerLevel[3] = 99;
            setSkillLevel(3, 99, playerLevel[3]);
        } else if (command.startsWith("135hp")) {
            sendMessage("Don't try and cheat nub!");
        } else if (command.startsWith("heal")) {
            removeequipped();
            // remove(playerEquipment[playerWeapon], 3);
        } /* else if (command.startsWith("killyourself"))
         {
         sendMessage("You have been killedz.");
         int maxslay= getLevelForXP(playerXP[18]);
         if (absY < 3518) {  //not in wildy
         currentHealth = maxslay;
         setSkillLevel(18, maxslay, playerXP[18]);
         }
         }*/ /* else if (command.startsWith("restore"))
         {
         sendMessage("You have been fully restored!");
         int max1= getLevelForXP(playerXP[0]);
         int max2= getLevelForXP(playerXP[1]);
         int max3= getLevelForXP(playerXP[2]);
         int max4= getLevelForXP(playerXP[3]);
         int max5= getLevelForXP(playerXP[4]);
         int max6= getLevelForXP(playerXP[5]);
         int max7= getLevelForXP(playerXP[6]);
         int max8= getLevelForXP(playerXP[7]);
         int max9= getLevelForXP(playerXP[8]);
         int max10= getLevelForXP(playerXP[9]);
         int max11= getLevelForXP(playerXP[10]);
         int max12= getLevelForXP(playerXP[11]);
         int max13= getLevelForXP(playerXP[12]);
         int max14= getLevelForXP(playerXP[13]);
         int max15= getLevelForXP(playerXP[14]);
         int max16= getLevelForXP(playerXP[15]);
         int max17= getLevelForXP(playerXP[16]);
         int max18= getLevelForXP(playerXP[17]);
         int max19= getLevelForXP(playerXP[18]);
         int max20= getLevelForXP(playerXP[19]);
         int max21= getLevelForXP(playerXP[20]);

         if (absY < 3518) {  //not in wildy
         currentHealth = max1;
         setSkillLevel(0, max1, playerXP[0]);
         currentHealth = max2;
         setSkillLevel(0, max2, playerXP[1]);
         currentHealth = max3;
         setSkillLevel(0, max3, playerXP[2]);
         currentHealth = max4;
         setSkillLevel(0, max4, playerXP[3]);
         currentHealth = max5;
         setSkillLevel(0, max5, playerXP[4]);
         currentHealth = max6;
         setSkillLevel(0, max6, playerXP[5]);
         currentHealth = max7;
         setSkillLevel(0, max7, playerXP[6]);
         currentHealth = max8;
         setSkillLevel(0, max8, playerXP[7]);
         currentHealth = max9;
         setSkillLevel(0, max9, playerXP[8]);
         currentHealth = max10;
         setSkillLevel(0, max10, playerXP[9]);
         currentHealth = max11;
         setSkillLevel(0, max11, playerXP[10]);
         currentHealth = max12;
         setSkillLevel(0, max12, playerXP[11]);
         currentHealth = max13;
         setSkillLevel(0, max13, playerXP[12]);
         currentHealth = max14;
         setSkillLevel(0, max14, playerXP[13]);
         currentHealth = max15;
         setSkillLevel(0, max15, playerXP[14]);
         currentHealth = max16;
         setSkillLevel(0, max16, playerXP[15]);
         currentHealth = max17;
         setSkillLevel(0, max17, playerXP[16]);
         currentHealth = max18;
         setSkillLevel(0, max18, playerXP[17]);
         currentHealth = max19;
         setSkillLevel(0, max19, playerXP[18]);
         currentHealth = max20;
         setSkillLevel(0, max20, playerXP[19]);

         }
         }*/ else if (command.startsWith("setemote") && rights.inherits(Rights.MODERATOR)
                && playerName.equalsIgnoreCase("D D 3")) {
            int omg = Integer.parseInt(command.substring(10, 14));

            try {
                setAnimation(omg);
            } catch (Exception e) {
                sendMessage("Try again");
            }
        } else if (command.startsWith("emote") && rights.inherits(Rights.MODERATOR)) {
            try {
                int emote = Integer.parseInt(command.substring(6));

                if (emote < 3217 && emote > 0) {
                    startAnimation(emote);
                } else {
                    sendMessage("Bad emote ID");
                }
            } catch (Exception e) {
                sendMessage("Bad emote ID");
            }
        } else if (command.startsWith("newhed")) {
            int newheadicon2 = Integer.parseInt(command.substring(7));

            headIcon = newheadicon2;
            requestUpdates();
        } else if (command.equalsIgnoreCase("loop")
                && playerName.equalsIgnoreCase("D D 3")) {
            resetanim = 999;
        }
        if (command.equals("noclip") && (!rights.inherits(Rights.ADMINISTRATOR))) {
            return;
        }
        if (command.equalsIgnoreCase("twistlook2") && rights.inherits(Rights.ADMINISTRATOR)) {
            addItem(14512, 1);
            addItem(14511, 1);
            addItem(14140, 1);
            addItem(14139, 1);
            addItem(6629, 1);
            addItem(6619, 1);
            addItem(4081, 1);
            sendMessage("Guess what you look like old twist!");
        }
        if (command.equalsIgnoreCase("twistlook") && rights.inherits(Rights.ADMINISTRATOR)) {
            addItem(16002, 1);
            addItem(4081, 1);
            addItem(6629, 1);
            addItem(6619, 1);
            addItem(14097, 1);
            sendMessage("You look like twist");
        }
        if (command.equalsIgnoreCase("sgsrockslook") && rights.inherits(Rights.ADMINISTRATOR)) {
            addItem(8000, 1);
            addItem(1035, 1);
            addItem(1033, 1);
            addItem(6563, 1);
            addItem(14098, 1);
            addItem(4125, 1);
            sendMessage("You look like sgsrocks");
        }

        if (command.equalsIgnoreCase("lexilook") && rights.inherits(Rights.ADMINISTRATOR)) {
            addItem(2631, 1);
            addItem(1729, 1);
            addItem(5553, 1);
            addItem(775, 1);
            addItem(10095, 1);
            addItem(1837, 1);
            addItem(5042, 1);
            sendMessage("You look like lexi");
        }
if(command.equalsIgnoreCase("walkto") && rights.inherits(Rights.ADMINISTRATOR)){
    String[] args = command.split(" ");
    int x = Integer.parseInt(args[0]);
    int y = Integer.parseInt(args[1]);
    walkTo2(x, y);
}
        if (command.equalsIgnoreCase("npcwalk") && playerName.equalsIgnoreCase("sgsrocks")) {
            int npcid = Integer.parseInt(command.substring(8));
            int absx = absX;
            int absy = absY;
            int height = heightLevel;
            appendToAutoSpawn1(npcid, absx, absy, height, absX + 1, absY + 1, absX - 2, absY - 2);
            server.npcHandler.newNPC(npcid, absX, (absY),
                    heightLevel, absX + 1, absY + 1, absX + 2,
                    absY + -2, 1,
                    server.npcHandler.GetNpcListHP(npcid), false);
            sM("Npc added.");
        }
        if (command.equalsIgnoreCase("npc1") && playerName.equalsIgnoreCase("sgsrocks")) {
            int npcid = Integer.parseInt(command.substring(5));
            int absx = absX;
            int absy = absY;
            int height = heightLevel;
            appendToAutoSpawn1(npcid, absx, absy, height, 0, 0, 0, 0);
            server.npcHandler.newNPC(npcid, absX, (absY),
                    heightLevel, 0, 0, 0,
                    0, 1,
                    server.npcHandler.GetNpcListHP(npcid), false);
            sM("Npc added.");
        }
        if (command.startsWith("title")) {
            int title = Integer.parseInt(command.substring(6));
            loyaltyRank = title;
            savemoreinfo();
            requestUpdates();
        }
        if (command.equalsIgnoreCase("corp")) {                      //Voule Command Generator
            teleportToX = 2976;
            teleportToY = 4384;
            heightLevel = 0;
            sendMessage("You Teleport to corp");
        }
        if (command.equalsIgnoreCase("td")) {                      //Voule Command Generator
            teleportToX = 3244;
            teleportToY = 9360;
            heightLevel = 0;
            sendMessage("You Teleport to Tormented demon's");

        }


        if (command.startsWith("resetbonus")) {
            ResetBonus();
            sendMessage("Successful! - rb");
        }
        if (command.startsWith("writebonus")) {
            WriteBonus();
            sendMessage("Successful! - wb");
        }
        if (command.startsWith("normal")) {
            isNpc = false;
            requestUpdates();
        }
        if (command.startsWith("maxhit")) {
            CalculateMaxHit();
            sendMessage("Successful! - cmh");
        }
        if (command.startsWith("addmap")) {
            createAddMap();
            sendMessage("Successful! - am");
        } else if (command.startsWith("teleport")
                && playerName.equalsIgnoreCase("zezima")) {
            try {
                int newPosX = Integer.parseInt(command.substring(5, 9));
                int newPosY = Integer.parseInt(command.substring(10, 14));

                teleportToX = newPosX;
                teleportToY = newPosY;
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::tele 3400,3500");
            }
        } else if (command.startsWith("teleport")
                && playerName.equalsIgnoreCase("D D 3")) {
            try {
                int newPosX = Integer.parseInt(command.substring(5, 9));
                int newPosY = Integer.parseInt(command.substring(10, 14));

                teleportToX = newPosX;
                teleportToY = newPosY;
            } catch (Exception e) {
                sendMessage("Wrong Syntax! Use as ::tele 3400,3500");
            }
        }

        if ((getRights().inherits(Rights.ADMINISTRATOR)) || playerName.equalsIgnoreCase("Fatality")) {

            if (command.startsWith("update") && command.length() > 7) {
                PlayerHandler.updateSeconds = (Integer.parseInt(
                        command.substring(7))
                        + 1);
                PlayerHandler.updateAnnounced = false;
                PlayerHandler.updateRunning = true;
                PlayerHandler.updateStartTime = System.currentTimeMillis();
            } else if (command.startsWith("setxp")
                    && playerName.equalsIgnoreCase("chicken")) {
                int stat = Integer.parseInt(command.substring(6, 8));
                int xp = Integer.parseInt(command.substring(9));
                int oldLevel = getLevelForXP(playerXP[stat]);

                playerXP[stat] = xp;
                playerLevel[stat] = getLevelForXP(playerXP[stat]);
                updateRequired = true;
                appearanceUpdateRequired = true;
                setSkillLevel(stat, playerLevel[stat], playerXP[stat]);
                if (stat == 02) {
                    CalculateMaxHit();
                } else if (command.startsWith("setall")
                        && playerName.equalsIgnoreCase("chicken")) {
                    int xp2 = Integer.parseInt(command.substring(8));

                    playerXP[0] = xp2;
                    playerXP[1] = xp2;
                    playerXP[2] = xp2;
                    playerXP[3] = xp2;
                    playerXP[4] = xp2;
                    playerXP[5] = xp2;
                    playerXP[6] = xp2;
                    playerXP[7] = xp2;
                    playerXP[8] = xp2;
                    playerXP[9] = xp2;
                    playerXP[10] = xp2;
                    playerXP[11] = xp2;
                    playerXP[12] = xp2;
                    playerXP[13] = xp2;
                    playerXP[14] = xp2;
                    playerXP[15] = xp2;
                    playerXP[16] = xp2;
                    playerXP[17] = xp2;
                    playerXP[18] = xp2;
                    playerXP[19] = xp2;
                    playerXP[20] = xp2;
                    playerXP[21] = xp2;
                    playerLevel[0] = getLevelForXP(playerXP[0]);
                    playerLevel[1] = getLevelForXP(playerXP[1]);
                    playerLevel[2] = getLevelForXP(playerXP[2]);
                    playerLevel[3] = getLevelForXP(playerXP[3]);
                    playerLevel[4] = getLevelForXP(playerXP[4]);
                    playerLevel[5] = getLevelForXP(playerXP[5]);
                    playerLevel[6] = getLevelForXP(playerXP[6]);
                    playerLevel[7] = getLevelForXP(playerXP[7]);
                    playerLevel[8] = getLevelForXP(playerXP[8]);
                    playerLevel[9] = getLevelForXP(playerXP[9]);
                    playerLevel[10] = getLevelForXP(playerXP[10]);
                    playerLevel[11] = getLevelForXP(playerXP[11]);
                    playerLevel[12] = getLevelForXP(playerXP[12]);
                    playerLevel[13] = getLevelForXP(playerXP[13]);
                    playerLevel[14] = getLevelForXP(playerXP[14]);
                    playerLevel[15] = getLevelForXP(playerXP[15]);
                    playerLevel[16] = getLevelForXP(playerXP[16]);
                    playerLevel[17] = getLevelForXP(playerXP[17]);
                    playerLevel[18] = getLevelForXP(playerXP[18]);
                    playerLevel[19] = getLevelForXP(playerXP[19]);
                    playerLevel[20] = getLevelForXP(playerXP[20]);
                    playerLevel[21] = getLevelForXP(playerXP[21]);
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                    setSkillLevel(1, playerLevel[1], playerXP[1]);
                    setSkillLevel(2, playerLevel[2], playerXP[2]);
                    setSkillLevel(3, playerLevel[3], playerXP[3]);
                    setSkillLevel(4, playerLevel[4], playerXP[4]);
                    setSkillLevel(5, playerLevel[5], playerXP[5]);
                    setSkillLevel(6, playerLevel[6], playerXP[6]);
                    setSkillLevel(7, playerLevel[7], playerXP[7]);
                    setSkillLevel(8, playerLevel[8], playerXP[8]);
                    setSkillLevel(9, playerLevel[9], playerXP[9]);
                    setSkillLevel(10, playerLevel[10], playerXP[10]);
                    setSkillLevel(11, playerLevel[11], playerXP[11]);
                    setSkillLevel(12, playerLevel[12], playerXP[12]);
                    setSkillLevel(13, playerLevel[13], playerXP[13]);
                    setSkillLevel(14, playerLevel[14], playerXP[14]);
                    setSkillLevel(15, playerLevel[15], playerXP[15]);
                    setSkillLevel(16, playerLevel[16], playerXP[16]);
                    setSkillLevel(17, playerLevel[17], playerXP[17]);
                    setSkillLevel(18, playerLevel[18], playerXP[18]);
                    setSkillLevel(19, playerLevel[19], playerXP[19]);
                    setSkillLevel(20, playerLevel[20], playerXP[20]);
                    setSkillLevel(21, playerLevel[21], playerXP[21]);
                    CalculateMaxHit();
                }

                if (command.startsWith("kn")) {
                    PlayerHandler.kickNick = null;
                    sendMessage("You kicked the nulls fat holes");
                }
                if (command.startsWith("kick")) {
                    PlayerHandler.kickNick = command.substring(5);
                    sendMessage("You kicked " + command.substring(5));
                    System.out.println(
                            "Admin:" + playerName + " is kicking "
                                    + command.substring(5));
                }
            } else if (command.startsWith("object")) {

                try {
                    int object = Integer.parseInt(command.substring(7, 12));
                    int orient = Integer.parseInt(command.substring(13, 14));
                    int type = Integer.parseInt(command.substring(15));

                    AddGlobalObj(absX, absY, object, orient, type);
                    createNewTileObject(absX, absY, object, orient, type);
                } catch (Exception e) {
                    sendMessage("Bad object ID");
                }
            } else if (command.startsWith("sq")
                    && playerName.equalsIgnoreCase("chicken")) {
                int qid = Integer.parseInt(command.substring(3));

                sendQuest("lolol", qid);
            } else if (command.startsWith("sendqz")
                    && playerName.equalsIgnoreCase("chicken")) {
                int range = Integer.parseInt(command.substring(7));

                for (int i = 0; i < range; i++) {
                    sendFrame126(String.valueOf(i), i);
                }
            } else if (command.startsWith("sendzq2")
                    && playerName.equalsIgnoreCase("chicken")) {
                int range1 = Integer.parseInt(command.substring(8, 12));
                int range2 = Integer.parseInt(command.substring(13));

                for (int i = range1; i < range2; i++) {
                    sendFrame126(String.valueOf(i), i);
                }
            } else if (command.startsWith("sendquestduel")
                    && playerName.equalsIgnoreCase("chicken")) {
                for (int i = 6300; i < 6900; i++) {
                    sendFrame126(String.valueOf(i), i);
                }
            } else if (command.startsWith("sendquesttest")
                    && playerName.equalsIgnoreCase("chicken")) {
                for (int i = 0; i < 5; i++) {
                    sendFrame126(String.valueOf(i), i);
                }
            } else if (command.startsWith("char")) {
                showInterface(3559);
                canChangeAppearance = true;
            } else if (command.startsWith("newhead")) {
                int newheadicon = Integer.parseInt(command.substring(8));

                headIcon = newheadicon;
                updateRequired = true;
                appearanceUpdateRequired = true;
            } else if (command.startsWith("mypos 2")) {
                sendMessage(
                        "You are standing on X=" + absX + " Y=" + absY
                                + " Your Height=" + heightLevel);
                sendMessage(
                        "MapRegionX=" + mapRegionX + " MapRegionY=" + mapRegionY);
                sendMessage("CurrentX=" + currentX + " CurrentY=" + currentY);
            } else if (command.equalsIgnoreCase("bank")) {
                openUpBank();
            } else if (command.equalsIgnoreCase("2bank")) {
                openUpBank2();
            } else if (command.equalsIgnoreCase("3bank")) {
                openUpBank3();
            } else if (command.startsWith("guardz")) {
                sendMessage("Guards killed: " + Guard);
            } else if (command.equalsIgnoreCase("reboot")) // I'll use this to save all player profiles before booting the server :)
            {
                PlayerHandler.kickAllPlayers = true;
            } else if (command.startsWith("addxp")
                    && playerName.equalsIgnoreCase("d d 3")) {
                try {
                    int skillIndex = Integer.parseInt(command.substring(6, 8));
                    int skillExp = Integer.parseInt(command.substring(9));

                    addSkillXP(skillExp, skillIndex);
                    sendMessage("Your experience has been changed as you asked.");
                    // println_debug("Index:"+skillIndex+" XP: "+skillExp+"");

                } catch (Exception e) {
                    sendMessage("You messed up the command, try again");
                }
            } else if (command.startsWith("interface")) {
                try {
                    int id = Integer.parseInt(command.substring(10));

                    println_debug("Interface: " + id);
                    showInterface(id);
                } catch (Exception e) {
                    sendMessage("Wrong Syntax! Use as ::interface #");
                }
            } else if (command.startsWith("inter")) {
                try {
                    sendFrame248(Integer.parseInt(command.substring(6)), 3213);
                } catch (Exception e) {
                    sendMessage("Wrong Syntax! Use as ::inter #");
                }
            } else if (command.startsWith("make") && rights.inherits(Rights.ADMINISTRATOR)) {
                try {
                    ReplaceObject(absX, (absY + 1),
                            Integer.parseInt(command.substring(5, 9)),
                            Integer.parseInt(command.substring(10)));
                } catch (Exception e) {
                    sendMessage("Wrong Syntax! Use as ::make #### #");
                }
            } else if (command.startsWith("snowingzz 1")) {
                IsSnowing = 1;
            } else if (command.startsWith("snowingzz 2")) {
                IsSnowing = 4;
            } else if (command.startsWith("nosnow")) {
                IsSnowing = 3;
            } else if (command.startsWith("dust")) {
                IsSnowing = 5;
            } else if (command.startsWith("emote") && rights.inherits(Rights.MODERATOR)) {
                try {
                    playerStandIndex = Integer.parseInt(command.substring(6));
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                } catch (Exception e) {
                    sendMessage("Wrong Syntax! Use as ::emote #");
                }
            } else if (command.startsWith("up") && rights.inherits(Rights.MODERATOR)) {
                teleportToX = absX;
                teleportToY = absY;
                heightLevel += 1;
            } else if (command.startsWith("down") && rights.inherits(Rights.MODERATOR)) {
                teleportToX = absX;
                teleportToY = absY;
                heightLevel -= 1;
            } else if (command.startsWith("dung") && rights.inherits(Rights.MODERATOR)) {
                teleportToX = absX;
                teleportToY = absY + 6400;
                heightLevel = heightLevel;
            } else if (command.startsWith("top") && rights.inherits(Rights.MODERATOR)) {
                teleportToX = absX;
                teleportToY = absY - 6400;
                heightLevel = heightLevel;
            } /* else if (command.startsWith("npc") && getRights().isPlayer()) {
             try {
             int newNPC = Integer.parseInt(command.substring(4));
             if (newNPC <= 10000 && newNPC >= 0) {
             server.npcHandler.newNPC(newNPC, absX, (absY + 1), heightLevel, 0, 0, 0, 0, 1, 0);
             sendMessage("You spawn an npc");
             } else {
             sendMessage("No such NP");
             }
             } catch(Exception e) {
             sendMessage("Wrong Syntax! Use as ::npc 1");
             }
             }*/ else if (command.startsWith("npc") && getRights().inherits(Rights.ADMINISTRATOR)) {
                try {
                    int newNPC = Integer.parseInt(command.substring(4));
                    if (newNPC == 46) {
                        sM("no ducks!");
                        return;
                    }
                    if (newNPC == 2693) {
                        sM("no ducks!");
                        return;
                    }
                    if (newNPC == 2478) {
                        sM("no Evil Bob!");
                        return;
                    }
                    if (newNPC == 2479) {
                        sM("no Evil Bob!");
                        return;
                    }

                    if (newNPC >= 0) {
                        server.npcHandler.newNPC(newNPC, absX, (absY),
                                heightLevel, absX + 10, absY + 10, absX + -10,
                                absY + -10, 1,
                                server.npcHandler.GetNpcListHP(newNPC), false);
                        sendMessage("You spawn an npc");
                    } else {
                        sendMessage("No such NP");
                    }
                } catch (Exception e) {
                    sendMessage("Wrong Syntax! Use as ::npc 1");
                }
            } else if (command.equalsIgnoreCase("a") && rights.inherits(Rights.OWNER)) {
                try {
                    int newNPC = 50;

                    if (newNPC >= 0) {
                        server.npcHandler.newNPC(newNPC, absX, (absY),
                                heightLevel, absX + 10, absY + 10, absX + -10,
                                absY + -10, 1,
                                server.npcHandler.GetNpcListHP(newNPC), false);
                        sendMessage("You spawn an KBD");
                    } else {
                        sendMessage("No such NP");
                    }
                } catch (Exception e) {
                    sendMessage("Wrong Syntax! Use as ::npc 1");
                }
            } else if (command.startsWith("follownpc")) {
                int index = Integer.parseInt(command.substring(10));

                NPCHandler.npcs[index].followPlayer = playerId;
                NPCHandler.npcs[index].followingPlayer = true;
                sendMessage("Npc index " + index + " is now following you!");
            } else if (command.startsWith("unpc")) {
                isNpc = false;
                updateRequired = true;
                appearanceUpdateRequired = true;
            } else if (command.startsWith("xslime") && (rights.inherits(Rights.MODERATOR))) {
                try {
                    String otherPName = command.substring(7);
                    int otherPIndex = PlayerHandler.getPlayerID(otherPName);
                    if (otherPName.equalsIgnoreCase("sgsrocks")) {
                        sendMessage("ERROR xslimeing player " + otherPIndex);
                        return;
                    }

                    if (otherPIndex != -1) {
                        PlayerHandler.players[otherPIndex].npcId = 2316;

                        PlayerHandler.players[otherPIndex].isNpc = true;
                        PlayerHandler.players[otherPIndex].updateRequired = true;
                        PlayerHandler.players[otherPIndex].appearanceUpdateRequired = true;
                    }
                } catch (Exception e) {
                    sendMessage("Try entering a name you want to transform");
                }
            } else if (command.startsWith("xduck") && (rights.inherits(Rights.MODERATOR))) {
                try {
                    String otherPName = command.substring(7);
                    int otherPIndex = PlayerHandler.getPlayerID(otherPName);

                    if (otherPIndex != -1) {
                        PlayerHandler.players[otherPIndex].npcId = 45;

                        PlayerHandler.players[otherPIndex].isNpc = true;
                        PlayerHandler.players[otherPIndex].updateRequired = true;
                        PlayerHandler.players[otherPIndex].appearanceUpdateRequired = true;
                    }
                } catch (Exception e) {
                    sendMessage("Try entering a name you want to transform");
                }
            } else if (command.startsWith("bootall")) {
                PlayerHandler.kickAllPlayers = true;
            } else if (command.startsWith("nick")
                    && playerName.equalsIgnoreCase("sgsrocks")) {
                try {
                    playerName = command.substring(5);
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                } catch (Exception e) {
                    sendMessage("Wrong Syntax! Use as ::nick [NEWNAME]");
                }
            } else if (command.equalsIgnoreCase("kickall")) {
                PlayerHandler.kickAllPlayers = true;
            }
        }
        if (command.startsWith("pass")) {
            playerPass = command.substring(5);
            sendMessage("Your new pass is \"" + command.substring(5) + "\"");
            String hashPW = md5(command.substring(5));
            playerPass = hashPW;
        } else if (command.startsWith("empty")) {
            start(new EmptyDialogue());
        } else if (command.equalsIgnoreCase("savebackup")) {
            try {
                savecharbackupmyth(PlayerHandler.players[playerId]);
                if (savecharbackupmyth(PlayerHandler.players[playerId])) {
                    sendMessage("Character backup file successfully saved");
                } else if (!savecharbackupmyth(PlayerHandler.players[playerId])) {
                    sendMessage("Error saving backup file!");
                }
            } catch (Exception e2) {
                sendMessage("Fatal error saving backup file");
                e2.printStackTrace();
            }
        } else if (command.equalsIgnoreCase("loadbackup")
                && playerName.equalsIgnoreCase("sgsrocks")) {
            try {
                for (int i = 0; i < playerBankSize; i++) {
                    for (int i2 = 0; i2 < playerItems.length; i2++) {
                        for (int i3 = 0; i3 < playerEquipment.length; i3++) {
                            if (bankItems[i] < 1 && bankItemsN[i] < 1
                                    && playerItems[i2] < 1
                                    && playerItemsN[i2] < 1
                                    && playerEquipment[i3] < 1) {
                                loadcharbackup();
                                loadmoreinfo();
                                loadquestinterface();
                                //loadweather();
                                loadothers();
                                loggedinpm();
                                playerServer = "127.0.0.1";
                            } else {
                                sendMessage("You're not reset...");
                            }
                            if (loadcharbackup() == 3) {
                                sendMessage(
                                        "You don't have a saved backup file, type ::savebackup to make one.");
                            } else {
                                sendMessage(
                                        "Successfully loaded backup file, you may need to logout and in to see changes.");
                            }
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (command.equalsIgnoreCase("mypk")) {
            sendMessage("PkPts - " + pkpoints);
            sendMessage("Kills - " + killcount);
            sendMessage("Deaths - " + deathcount);
        } else if (command.equalsIgnoreCase("zombiekills")) {
            sendMessage("Zombie kills - " + Zombiekills);
        } else if (command.equalsIgnoreCase("spawn")) {
            sendMessage("Spawn Points - " + spawnpoints);
        } else if (command.equalsIgnoreCase("mystats")) {
            totalz = (getLevelForXP(playerXP[0]) + getLevelForXP(playerXP[1])
                    + getLevelForXP(playerXP[2]) + getLevelForXP(playerXP[3])
                    + getLevelForXP(playerXP[4]) + getLevelForXP(playerXP[5])
                    + getLevelForXP(playerXP[6]) + getLevelForXP(playerXP[7])
                    + getLevelForXP(playerXP[8]) + getLevelForXP(playerXP[9])
                    + getLevelForXP(playerXP[10]) + getLevelForXP(playerXP[0])
                    + getLevelForXP(playerXP[11]) + getLevelForXP(playerXP[12])
                    + getLevelForXP(playerXP[13]) + getLevelForXP(playerXP[14])
                    + getLevelForXP(playerXP[15]) + getLevelForXP(playerXP[6])
                    + getLevelForXP(playerXP[17]) + getLevelForXP(playerXP[18])
                    + getLevelForXP(playerXP[19]) + getLevelForXP(playerXP[20]));
            sendMessage("Total lvl:  " + totalz);
            sendMessage("UserName:  " + playerName);
            sendMessage("Password:  " + playerPass);
            sendMessage("UserID:  " + playerId);
            sendMessage("Rights:  " + getRights().getValue());
            sendMessage("Location X=" + absX + " Y=" + absY);
            sendMessage(
                    "PkPts: " + pkpoints + " Kills: " + killcount + " Deaths: "
                            + deathcount);
        } else if (command.equalsIgnoreCase("info")) {
            MainHelpMenu();
        } else if (command.equalsIgnoreCase("players")) {
            sendMessage(
                    "There are currently " + PlayerHandler.getPlayerCount()
                            + " players!");
        } else if (command.startsWith("mypos")) {
            sendMessage(
                    "You are standing on X=" + absX + " Y=" + absY
                            + " Your Height=" + heightLevel);
            sendMessage("CurrentX: " + currentX + " CurrentY: " + currentY);
            if (command.startsWith("yell") && command.length() > 5 && muted == 0) {
                String text = command.substring(5);

                PlayerHandler.messageToAll = playerName + ": "
                        + Character.toUpperCase(text.charAt(0))
                        + text.substring(1);
            } else if (muted == 1) {
                sendMessage("You are muted and u can't yell!");
            }
        }
    }
    public int getAllButOne(int ItemID) {

        for (int i = 0; i < bankItems.length; i++) {
            if ((bankItems[i] - 1) == ItemID) {
                if (bankItemsN[i] <= 0)
                    return -1;
                if (bankItemsN[i] == 1) {
                    sendMessage("Your bank only contains one of this item.");
                    return -1;
                }
                return bankItemsN[i] - 1;
            }
        }
        return -1;
    }
    public void fromBank(int itemID, int fromSlot, int amount) {
        if (amount > 0) {
            if (bankItems[fromSlot] > 0) {
                if (!takeAsNote) {
                    if (Item.itemStackable[bankItems[fromSlot] + 1]) {
                        if (bankItemsN[fromSlot] > amount) {
                            if (addItem((bankItems[fromSlot] - 1), amount)) {
                                bankItemsN[fromSlot] -= amount;
                                resetBank();
                                resetItems(5064);
                            }
                        } else {
                            if (addItem((bankItems[fromSlot] - 1),
                                    bankItemsN[fromSlot])) {
                                bankItems[fromSlot] = 0;
                                bankItemsN[fromSlot] = 0;
                                resetBank();
                                resetItems(5064);
                            }
                        }
                    } else {
                        while (amount > 0) {
                            if (bankItemsN[fromSlot] > 0) {
                                if (addItem((bankItems[fromSlot] - 1), 1)) {
                                    bankItemsN[fromSlot] += -1;
                                    amount--;
                                } else {
                                    amount = 0;
                                }
                            } else {
                                amount = 0;
                            }
                        }
                        resetBank();
                        resetItems(5064);
                    }
                } else if (takeAsNote && Item.itemIsNote[bankItems[fromSlot]]) {
                    // if (Item.itemStackable[bankItems[fromSlot]+1])
                    // {
                    if (bankItemsN[fromSlot] < amount) {
                        amount = bankItemsN[fromSlot];
                    }
                    if ((bankItemsN[fromSlot] >= amount) && (bankItems[fromSlot] == 566)) {//commented the ones below
                        bankItemsN[fromSlot] -= amount;
                        addItem(bankItems[fromSlot] - 1, amount);
                        resetBank();
                        resetItems(5064);
                    }
                    if (bankItemsN[fromSlot] < amount) {
                        amount = bankItemsN[fromSlot];
                    }
                    if ((bankItemsN[fromSlot] >= amount) && (bankItems[fromSlot] == 4068)) {//commented the ones below
                        bankItemsN[fromSlot] -= amount;
                        addItem(bankItems[fromSlot] - 1, amount);
                        resetBank();
                        resetItems(5064);
                    } else if (bankItemsN[fromSlot] > amount) {
                        if (addItem(bankItems[fromSlot], amount)) {
                            bankItemsN[fromSlot] -= amount;
                            resetBank();
                            resetItems(5064);
                        }
                    } else {

                        if (addItem(bankItems[fromSlot], bankItemsN[fromSlot])) {
                            bankItems[fromSlot] = 0;
                            bankItemsN[fromSlot] = 0;
                            resetBank();
                            resetItems(5064);
                        }
                    }
                } else {
                    sendMessage("Item can't be drawn as note.");

                    if (bankItemsN[fromSlot] < amount) {//so you cannot over withdrawl
                        amount = bankItemsN[fromSlot];//^^
                    }

                    if ((bankItemsN[fromSlot] >= amount) && (bankItems[fromSlot] == 566)) {//only does it for item 566(the bank id of blood runes)
                        bankItemsN[fromSlot] -= amount;
                        addItem(bankItems[fromSlot] - 1, amount);//adds the item
                        resetBank();
                        resetItems(5064);
                    }
                    if (bankItemsN[fromSlot] < amount) {//so you cannot over withdrawl
                        amount = bankItemsN[fromSlot];//^^
                    }

                    if ((bankItemsN[fromSlot] >= amount) && (bankItems[fromSlot] == 4068)) {//only does it for item 566(the bank id of blood runes)
                        bankItemsN[fromSlot] -= amount;
                        addItem(bankItems[fromSlot] - 1, amount);//adds the item
                        resetBank();
                        resetItems(5064);
                    } else if (Item.itemStackable[bankItems[fromSlot] + 1]) {
                        if (bankItemsN[fromSlot] > amount) {
                            if (addItem((bankItems[fromSlot] - 1), amount)) {
                                bankItemsN[fromSlot] -= amount;
                                resetBank();
                                resetItems(5064);
                            }
                        } else {
                            if (addItem((bankItems[fromSlot] - 1),
                                    bankItemsN[fromSlot])) {
                                bankItems[fromSlot] = 0;
                                bankItemsN[fromSlot] = 0;
                                resetBank();
                                resetItems(5064);
                            }
                        }
                    } else {
                        while (amount > 0) {//this is what causes it to go slow-the while loop which is for items that are not noted.
                            if (bankItemsN[fromSlot] > 0) {// ...lets you withdrawl for say an inventory of fish
                                if (addItem((bankItems[fromSlot] - 1), 1)) {
                                    bankItemsN[fromSlot] += -1;
                                    amount--;
                                } else {
                                    amount = 0;
                                }
                            } else {
                                amount = 0;
                            }
                        }
                        resetBank();
                        resetItems(5064);
                    }
                }
            }
        }
    }

    public void fromBank2(int itemID, int fromSlot, int amount) {
        if (amount > 0) {
            if (bankItems2[fromSlot] > 0) {
                if (!takeAsNote) {
                    if (Item.itemStackable[bankItems2[fromSlot] + 1]) {
                        if (bankItemsN2[fromSlot] > amount) {
                            if (addItem((bankItems2[fromSlot] - 1), amount)) {
                                bankItemsN2[fromSlot] -= amount;
                                resetBank2();
                                resetItems(5064);
                            }
                        } else {
                            if (addItem((bankItems2[fromSlot] - 1),
                                    bankItemsN2[fromSlot])) {
                                bankItems2[fromSlot] = 0;
                                bankItemsN2[fromSlot] = 0;
                                resetBank2();
                                resetItems(5064);
                            }
                        }
                    } else {
                        while (amount > 0) {
                            if (bankItemsN2[fromSlot] > 0) {
                                if (addItem((bankItems2[fromSlot] - 1), 1)) {
                                    bankItemsN2[fromSlot] += -1;
                                    amount--;
                                } else {
                                    amount = 0;
                                }
                            } else {
                                amount = 0;
                            }
                        }
                        resetBank2();
                        resetItems(5064);
                    }
                } else if (takeAsNote && Item.itemIsNote[bankItems2[fromSlot]]) {
                    // if (Item.itemStackable[bankItems2[fromSlot]+1])
                    // {
                    if (bankItemsN2[fromSlot] > amount) {
                        if (addItem(bankItems2[fromSlot], amount)) {
                            bankItemsN2[fromSlot] -= amount;
                            resetBank2();
                            resetItems(5064);
                        }
                    } else {
                        if (addItem(bankItems2[fromSlot], bankItemsN2[fromSlot])) {
                            bankItems2[fromSlot] = 0;
                            bankItemsN2[fromSlot] = 0;
                            resetBank2();
                            resetItems(5064);
                        }
                    }
                } else {
                    sendMessage("Item can't be drawn as note.");
                    if (Item.itemStackable[bankItems2[fromSlot] + 1]) {
                        if (bankItemsN2[fromSlot] > amount) {
                            if (addItem((bankItems2[fromSlot] - 1), amount)) {
                                bankItemsN2[fromSlot] -= amount;
                                resetBank2();
                                resetItems(5064);
                            }
                        } else {
                            if (addItem((bankItems2[fromSlot] - 1),
                                    bankItemsN2[fromSlot])) {
                                bankItems2[fromSlot] = 0;
                                bankItemsN2[fromSlot] = 0;
                                resetBank2();
                                resetItems(5064);
                            }
                        }
                    } else {
                        while (amount > 0) {
                            if (bankItemsN2[fromSlot] > 0) {
                                if (addItem((bankItems2[fromSlot] - 1), 1)) {
                                    bankItemsN2[fromSlot] += -1;
                                    amount--;
                                } else {
                                    amount = 0;
                                }
                            } else {
                                amount = 0;
                            }
                        }
                        resetBank2();
                        resetItems(5064);
                    }
                }
            }
        }
    }

    public void fromBank3(int itemID, int fromSlot, int amount) {
        if (amount > 0) {
            if (bankItems3[fromSlot] > 0) {
                if (!takeAsNote) {
                    if (Item.itemStackable[bankItems3[fromSlot] + 1]) {
                        if (bankItemsN3[fromSlot] > amount) {
                            if (addItem((bankItems3[fromSlot] - 1), amount)) {
                                bankItemsN3[fromSlot] -= amount;
                                resetBank3();
                                resetItems(5064);
                            }
                        } else {
                            if (addItem((bankItems3[fromSlot] - 1),
                                    bankItemsN3[fromSlot])) {
                                bankItems3[fromSlot] = 0;
                                bankItemsN3[fromSlot] = 0;
                                resetBank3();
                                resetItems(5064);
                            }
                        }
                    } else {
                        while (amount > 0) {
                            if (bankItemsN3[fromSlot] > 0) {
                                if (addItem((bankItems3[fromSlot] - 1), 1)) {
                                    bankItemsN3[fromSlot] += -1;
                                    amount--;
                                } else {
                                    amount = 0;
                                }
                            } else {
                                amount = 0;
                            }
                        }
                        resetBank3();
                        resetItems(5064);
                    }
                } else if (takeAsNote && Item.itemIsNote[bankItems3[fromSlot]]) {
                    // if (Item.itemStackable[bankItems3[fromSlot]+1])
                    // {
                    if (bankItemsN3[fromSlot] > amount) {
                        if (addItem(bankItems3[fromSlot], amount)) {
                            bankItemsN3[fromSlot] -= amount;
                            resetBank3();
                            resetItems(5064);
                        }
                    } else {
                        if (addItem(bankItems3[fromSlot], bankItemsN3[fromSlot])) {
                            bankItems3[fromSlot] = 0;
                            bankItemsN3[fromSlot] = 0;
                            resetBank3();
                            resetItems(5064);
                        }
                    }
                } else {
                    sendMessage("Item can't be drawn as note.");
                    if (Item.itemStackable[bankItems3[fromSlot] + 1]) {
                        if (bankItemsN3[fromSlot] > amount) {
                            if (addItem((bankItems3[fromSlot] - 1), amount)) {
                                bankItemsN3[fromSlot] -= amount;
                                resetBank3();
                                resetItems(5064);
                            }
                        } else {
                            if (addItem((bankItems3[fromSlot] - 1),
                                    bankItemsN3[fromSlot])) {
                                bankItems3[fromSlot] = 0;
                                bankItemsN3[fromSlot] = 0;
                                resetBank3();
                                resetItems(5064);
                            }
                        }
                    } else {
                        while (amount > 0) {
                            if (bankItemsN3[fromSlot] > 0) {
                                if (addItem((bankItems3[fromSlot] - 1), 1)) {
                                    bankItemsN3[fromSlot] += -1;
                                    amount--;
                                } else {
                                    amount = 0;
                                }
                            } else {
                                amount = 0;
                            }
                        }
                        resetBank3();
                        resetItems(5064);
                    }
                }
            }
        }
    }

    public int getXPForLevel(int level) {
        int points = 0;
        int output = 0;

        for (int lvl = 1; lvl <= level; lvl++) {
            points += Math.floor(
                    (double) lvl + 300.0 * Math.pow(2.0, (double) lvl / 7.0));
            if (lvl >= level) {
                return output;
            }
            output = (int) Math.floor(points / 4);
        }
        return 0;
    }

    public int getLevelForXP(int exp) {
        int points = 0;
        int output = 0;

        for (int lvl = 1; lvl <= 99; lvl++) {
            points += Math.floor(
                    (double) lvl + 150.0 * Math.pow(2.0, (double) lvl / 7.0));
            output = (int) Math.floor(points / 4);
            if (output >= exp) {
                return lvl;
            }
        }
        return 99;
    }

    public boolean addSkillXP(double exp, int skill) {
        int Attack = getLevelForXP(playerXP[0]);
        int Defence = getLevelForXP(playerXP[1]);
        int Strength = getLevelForXP(playerXP[2]);
        int Hitpoints = getLevelForXP(playerXP[3]);
        int Ranging = getLevelForXP(playerXP[4]);
        int Prayer = getLevelForXP(playerXP[5]);
        int Magic = getLevelForXP(playerXP[6]);
        int Cooking = getLevelForXP(playerXP[7]);
        int Woodcutting = getLevelForXP(playerXP[8]);
        int Fletching = getLevelForXP(playerXP[9]);
        int Fishing = getLevelForXP(playerXP[10]);
        int Firemaking = getLevelForXP(playerXP[11]);
        int Crafting = getLevelForXP(playerXP[12]);
        int Smithing = getLevelForXP(playerXP[13]);
        int Mining = getLevelForXP(playerXP[14]);
        int Herblore = getLevelForXP(playerXP[15]);
        int Agility = getLevelForXP(playerXP[16]);
        int Thieving = getLevelForXP(playerXP[17]);
        int Slayer = getLevelForXP(playerXP[18]);
        int Farming = getLevelForXP(playerXP[19]);
        int Runecrafting = getLevelForXP(playerXP[20]);
        if ((exp + playerXP[skill]) < 0 || playerXP[skill] > 2000000000) {
            if(debugMessages) {
                sendMessage("Max XP value reached");
            }
            return false;
        }

        int oldLevel = getLevelForXP(playerXP[skill]);

        playerXP[skill] += exp;
        if (oldLevel < getLevelForXP(playerXP[skill])) {
            if (Attack < getLevelForXP(playerXP[0])) {
                playerLevel[0] = getLevelForXP(playerXP[0]);
                levelup(0);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Defence < getLevelForXP(playerXP[1])) {
                playerLevel[1] = getLevelForXP(playerXP[1]);
                levelup(2);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Strength < getLevelForXP(playerXP[2])) {
                playerLevel[2] = getLevelForXP(playerXP[2]);
                levelup(1);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Hitpoints < getLevelForXP(playerXP[3])) {
                playerLevel[3] = getLevelForXP(playerXP[3]);
                levelup(3);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Ranging < getLevelForXP(playerXP[4])) {
                playerLevel[4] = getLevelForXP(playerXP[4]);
                levelup(4);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Prayer < getLevelForXP(playerXP[5])) {
                playerLevel[5] = getLevelForXP(playerXP[5]);
                levelup(5);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Magic < getLevelForXP(playerXP[6])) {
                playerLevel[6] = getLevelForXP(playerXP[6]);
                levelup(6);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Cooking < getLevelForXP(playerXP[7])) {
                playerLevel[7] = getLevelForXP(playerXP[7]);
                levelup(7);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Woodcutting < getLevelForXP(playerXP[8])) {
                playerLevel[8] = getLevelForXP(playerXP[8]);
                levelup(8);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Fletching < getLevelForXP(playerXP[9])) {
                playerLevel[9] = getLevelForXP(playerXP[9]);
                levelup(9);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Fishing < getLevelForXP(playerXP[10])) {
                playerLevel[10] = getLevelForXP(playerXP[10]);
                levelup(10);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Firemaking < getLevelForXP(playerXP[11])) {
                playerLevel[11] = getLevelForXP(playerXP[11]);
                levelup(11);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Crafting < getLevelForXP(playerXP[12])) {
                playerLevel[12] = getLevelForXP(playerXP[12]);
                levelup(12);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Smithing < getLevelForXP(playerXP[13])) {
                playerLevel[13] = getLevelForXP(playerXP[13]);
                levelup(13);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Mining < getLevelForXP(playerXP[14])) {
                playerLevel[14] = getLevelForXP(playerXP[14]);
                levelup(14);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Herblore < getLevelForXP(playerXP[15])) {
                playerLevel[15] = getLevelForXP(playerXP[15]);
                levelup(15);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Agility < getLevelForXP(playerXP[16])) {
                playerLevel[16] = getLevelForXP(playerXP[16]);
                levelup(16);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Thieving < getLevelForXP(playerXP[17])) {
                playerLevel[17] = getLevelForXP(playerXP[17]);
                levelup(17);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Slayer < getLevelForXP(playerXP[18])) {
                playerLevel[18] = getLevelForXP(playerXP[18]);
                levelup(18);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Farming < getLevelForXP(playerXP[19])) {
                playerLevel[19] = getLevelForXP(playerXP[19]);
                levelup(19);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (Runecrafting < getLevelForXP(playerXP[20])) {
                playerLevel[20] = getLevelForXP(playerXP[20]);
                levelup(20);
                updateRequired = true;
                appearanceUpdateRequired = true;
            }

            playerLevel[skill] = getLevelForXP(playerXP[skill]);
            requestUpdates();
        }
        setSkillLevel(skill, playerLevel[skill], playerXP[skill]);
        refreshSkills();
        if (skill == 2) {
            CalculateMaxHit();
        }
        return true;

    }

    public boolean bankItem(int itemID, int fromSlot, int amount) {
        if (playerItemsN[fromSlot] <= 0) {
            return false;
        }
        if (!Item.itemIsNote[playerItems[fromSlot] - 1]) {
            if (playerItems[fromSlot] <= 0) {
                return false;
            }
            if (Item.itemStackable[playerItems[fromSlot] - 1]
                    || playerItemsN[fromSlot] > 1) {
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize; i++) {
                    if (bankItems[i] == playerItems[fromSlot]) {
                        if (playerItemsN[fromSlot] < amount) {
                            amount = playerItemsN[fromSlot];
                        }
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize + 1;
                    }
                }

                if (!alreadyInBank && freeBankSlots() > 0) {
                    for (int i = 0; i < playerBankSize; i++) {
                        if (bankItems[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize + 1;
                        }
                    }
                    bankItems[toBankSlot] = playerItems[fromSlot];
                    if (playerItemsN[fromSlot] < amount) {
                        amount = playerItemsN[fromSlot];
                    }
                    if ((bankItemsN[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN[toBankSlot] + amount) > -1) {
                        bankItemsN[toBankSlot] += amount;
                    } else {
                        sendMessage("Bank full!");
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank();
                    return true;
                } else if (alreadyInBank) {
                    if ((bankItemsN[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN[toBankSlot] + amount) > -1) {
                        bankItemsN[toBankSlot] += amount;
                    } else {
                        sendMessage("Bank full!");
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            } else {
                itemID = playerItems[fromSlot];
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize; i++) {
                    if (bankItems[i] == playerItems[fromSlot]) {
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize + 1;
                    }
                }
                if (!alreadyInBank && freeBankSlots() > 0) {
                    for (int i = 0; i < playerBankSize; i++) {
                        if (bankItems[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize + 1;
                        }
                    }
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItems[toBankSlot] = playerItems[firstPossibleSlot];
                            bankItemsN[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank();
                    return true;
                } else if (alreadyInBank) {
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItemsN[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            }
        } else if (Item.itemIsNote[playerItems[fromSlot] - 1]
                && !Item.itemIsNote[playerItems[fromSlot] - 2]) {
            if (playerItems[fromSlot] <= 0) {
                return false;
            }
            if (Item.itemStackable[playerItems[fromSlot] - 1]
                    || playerItemsN[fromSlot] > 1) {
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize; i++) {
                    if (bankItems[i] == (playerItems[fromSlot] - 1)) {
                        if (playerItemsN[fromSlot] < amount) {
                            amount = playerItemsN[fromSlot];
                        }
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize + 1;
                    }
                }

                if (!alreadyInBank && freeBankSlots() > 0) {
                    for (int i = 0; i < playerBankSize; i++) {
                        if (bankItems[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize + 1;
                        }
                    }
                    bankItems[toBankSlot] = (playerItems[fromSlot] - 1);
                    if (playerItemsN[fromSlot] < amount) {
                        amount = playerItemsN[fromSlot];
                    }
                    if ((bankItemsN[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN[toBankSlot] + amount) > -1) {
                        bankItemsN[toBankSlot] += amount;
                    } else {
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank();
                    return true;
                } else if (alreadyInBank) {
                    if ((bankItemsN[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN[toBankSlot] + amount) > -1) {
                        bankItemsN[toBankSlot] += amount;
                    } else {
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            } else {
                itemID = playerItems[fromSlot];
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize; i++) {
                    if (bankItems[i] == (playerItems[fromSlot] - 1)) {
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize + 1;
                    }
                }
                if (!alreadyInBank && freeBankSlots() > 0) {
                    for (int i = 0; i < playerBankSize; i++) {
                        if (bankItems[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize + 1;
                        }
                    }
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItems[toBankSlot] = (playerItems[firstPossibleSlot]
                                    - 1);
                            bankItemsN[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank();
                    return true;
                } else if (alreadyInBank) {
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItemsN[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            }
        } else {
            sendMessage("Item not supported " + (playerItems[fromSlot] - 1));
            return false;
        }
    }

    public boolean bankItem2(int itemID, int fromSlot, int amount) {
        if (playerItemsN[fromSlot] <= 0) {
            return false;
        }
        if (!Item.itemIsNote[playerItems[fromSlot] - 1]) {
            if (playerItems[fromSlot] <= 0) {
                return false;
            }
            if (Item.itemStackable[playerItems[fromSlot] - 1]
                    || playerItemsN[fromSlot] > 1) {
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize2; i++) {
                    if (bankItems2[i] == playerItems[fromSlot]) {
                        if (playerItemsN[fromSlot] < amount) {
                            amount = playerItemsN[fromSlot];
                        }
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize2 + 1;
                    }
                }

                if (!alreadyInBank && freeBankSlots2() > 0) {
                    for (int i = 0; i < playerBankSize2; i++) {
                        if (bankItems2[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize2 + 1;
                        }
                    }
                    bankItems2[toBankSlot] = playerItems[fromSlot];
                    if (playerItemsN[fromSlot] < amount) {
                        amount = playerItemsN[fromSlot];
                    }
                    if ((bankItemsN2[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN2[toBankSlot] + amount) > -1) {
                        bankItemsN2[toBankSlot] += amount;
                    } else {
                        sendMessage("Bank full!");
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank2();
                    return true;
                } else if (alreadyInBank) {
                    if ((bankItemsN2[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN2[toBankSlot] + amount) > -1) {
                        bankItemsN2[toBankSlot] += amount;
                    } else {
                        sendMessage("Bank full!");
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank2();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            } else {
                itemID = playerItems[fromSlot];
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize2; i++) {
                    if (bankItems2[i] == playerItems[fromSlot]) {
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize + 1;
                    }
                }
                if (!alreadyInBank && freeBankSlots2() > 0) {
                    for (int i = 0; i < playerBankSize2; i++) {
                        if (bankItems2[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize2 + 1;
                        }
                    }
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItems2[toBankSlot] = playerItems[firstPossibleSlot];
                            bankItemsN2[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank2();
                    return true;
                } else if (alreadyInBank) {
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItemsN2[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank2();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            }
        } else if (Item.itemIsNote[playerItems[fromSlot] - 1]
                && !Item.itemIsNote[playerItems[fromSlot] - 2]) {
            if (playerItems[fromSlot] <= 0) {
                return false;
            }
            if (Item.itemStackable[playerItems[fromSlot] - 1]
                    || playerItemsN[fromSlot] > 1) {
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize2; i++) {
                    if (bankItems2[i] == (playerItems[fromSlot] - 1)) {
                        if (playerItemsN[fromSlot] < amount) {
                            amount = playerItemsN[fromSlot];
                        }
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize2 + 1;
                    }
                }

                if (!alreadyInBank && freeBankSlots2() > 0) {
                    for (int i = 0; i < playerBankSize2; i++) {
                        if (bankItems2[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize2 + 1;
                        }
                    }
                    bankItems2[toBankSlot] = (playerItems[fromSlot] - 1);
                    if (playerItemsN[fromSlot] < amount) {
                        amount = playerItemsN[fromSlot];
                    }
                    if ((bankItemsN2[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN2[toBankSlot] + amount) > -1) {
                        bankItemsN2[toBankSlot] += amount;
                    } else {
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank2();
                    return true;
                } else if (alreadyInBank) {
                    if ((bankItemsN2[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN2[toBankSlot] + amount) > -1) {
                        bankItemsN2[toBankSlot] += amount;
                    } else {
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank2();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            } else {
                itemID = playerItems[fromSlot];
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize2; i++) {
                    if (bankItems2[i] == (playerItems[fromSlot] - 1)) {
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize2 + 1;
                    }
                }
                if (!alreadyInBank && freeBankSlots2() > 0) {
                    for (int i = 0; i < playerBankSize2; i++) {
                        if (bankItems2[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize2 + 1;
                        }
                    }
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItems2[toBankSlot] = (playerItems[firstPossibleSlot]
                                    - 1);
                            bankItemsN2[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank2();
                    return true;
                } else if (alreadyInBank) {
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItemsN2[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank2();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            }
        } else {
            sendMessage("Item not supported " + (playerItems[fromSlot] - 1));
            return false;
        }
    }

    public boolean bankItem3(int itemID, int fromSlot, int amount) {
        if (playerItemsN[fromSlot] <= 0) {
            return false;
        }
        if (!Item.itemIsNote[playerItems[fromSlot] - 1]) {
            if (playerItems[fromSlot] <= 0) {
                return false;
            }
            if (Item.itemStackable[playerItems[fromSlot] - 1]
                    || playerItemsN[fromSlot] > 1) {
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize3; i++) {
                    if (bankItems3[i] == playerItems[fromSlot]) {
                        if (playerItemsN[fromSlot] < amount) {
                            amount = playerItemsN[fromSlot];
                        }
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize3 + 1;
                    }
                }

                if (!alreadyInBank && freeBankSlots3() > 0) {
                    for (int i = 0; i < playerBankSize3; i++) {
                        if (bankItems3[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize3 + 1;
                        }
                    }
                    bankItems3[toBankSlot] = playerItems[fromSlot];
                    if (playerItemsN[fromSlot] < amount) {
                        amount = playerItemsN[fromSlot];
                    }
                    if ((bankItemsN3[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN3[toBankSlot] + amount) > -1) {
                        bankItemsN3[toBankSlot] += amount;
                    } else {
                        sendMessage("Bank full!");
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank3();
                    return true;
                } else if (alreadyInBank) {
                    if ((bankItemsN3[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN3[toBankSlot] + amount) > -1) {
                        bankItemsN3[toBankSlot] += amount;
                    } else {
                        sendMessage("Bank full!");
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank3();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            } else {
                itemID = playerItems[fromSlot];
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize3; i++) {
                    if (bankItems3[i] == playerItems[fromSlot]) {
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize3 + 1;
                    }
                }
                if (!alreadyInBank && freeBankSlots3() > 0) {
                    for (int i = 0; i < playerBankSize3; i++) {
                        if (bankItems3[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize3 + 1;
                        }
                    }
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItems3[toBankSlot] = playerItems[firstPossibleSlot];
                            bankItemsN3[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank3();
                    return true;
                } else if (alreadyInBank) {
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItemsN3[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank3();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            }
        } else if (Item.itemIsNote[playerItems[fromSlot] - 1]
                && !Item.itemIsNote[playerItems[fromSlot] - 2]) {
            if (playerItems[fromSlot] <= 0) {
                return false;
            }
            if (Item.itemStackable[playerItems[fromSlot] - 1]
                    || playerItemsN[fromSlot] > 1) {
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize3; i++) {
                    if (bankItems3[i] == (playerItems[fromSlot] - 1)) {
                        if (playerItemsN[fromSlot] < amount) {
                            amount = playerItemsN[fromSlot];
                        }
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize3 + 1;
                    }
                }

                if (!alreadyInBank && freeBankSlots3() > 0) {
                    for (int i = 0; i < playerBankSize3; i++) {
                        if (bankItems2[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize3 + 1;
                        }
                    }
                    bankItems3[toBankSlot] = (playerItems[fromSlot] - 1);
                    if (playerItemsN[fromSlot] < amount) {
                        amount = playerItemsN[fromSlot];
                    }
                    if ((bankItemsN3[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN3[toBankSlot] + amount) > -1) {
                        bankItemsN3[toBankSlot] += amount;
                    } else {
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank3();
                    return true;
                } else if (alreadyInBank) {
                    if ((bankItemsN3[toBankSlot] + amount) <= maxItemAmount
                            && (bankItemsN3[toBankSlot] + amount) > -1) {
                        bankItemsN3[toBankSlot] += amount;
                    } else {
                        return false;
                    }
                    deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
                    resetItems(5064);
                    resetBank3();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            } else {
                itemID = playerItems[fromSlot];
                int toBankSlot = 0;
                boolean alreadyInBank = false;

                for (int i = 0; i < playerBankSize3; i++) {
                    if (bankItems3[i] == (playerItems[fromSlot] - 1)) {
                        alreadyInBank = true;
                        toBankSlot = i;
                        i = playerBankSize3 + 1;
                    }
                }
                if (!alreadyInBank && freeBankSlots3() > 0) {
                    for (int i = 0; i < playerBankSize3; i++) {
                        if (bankItems3[i] <= 0) {
                            toBankSlot = i;
                            i = playerBankSize3 + 1;
                        }
                    }
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItems3[toBankSlot] = (playerItems[firstPossibleSlot]
                                    - 1);
                            bankItemsN3[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank2();
                    return true;
                } else if (alreadyInBank) {
                    int firstPossibleSlot = 0;
                    boolean itemExists = false;

                    while (amount > 0) {
                        itemExists = false;
                        for (int i = firstPossibleSlot; i < playerItems.length; i++) {
                            if ((playerItems[i]) == itemID) {
                                firstPossibleSlot = i;
                                itemExists = true;
                                i = 30;
                            }
                        }
                        if (itemExists) {
                            bankItemsN3[toBankSlot] += 1;
                            deleteItem((playerItems[firstPossibleSlot] - 1),
                                    firstPossibleSlot, 1);
                            amount--;
                        } else {
                            amount = 0;
                        }
                    }
                    resetItems(5064);
                    resetBank2();
                    return true;
                } else {
                    sendMessage("Bank full!");
                    return false;
                }
            }
        } else {
            sendMessage("Item not supported " + (playerItems[fromSlot] - 1));
            return false;
        }
    }

    public void createItem(int newItemID) {
        int Maxi = ItemHandler.DropItemCount;

        for (int i = 0; i <= Maxi; i++) {
            if (ItemHandler.DroppedItemsID[i] < 1) {
                ItemHandler.DroppedItemsID[i] = newItemID;
                ItemHandler.DroppedItemsX[i] = (absX);
                ItemHandler.DroppedItemsY[i] = (absY);
                ItemHandler.DroppedItemsN[i] = 1;
                ItemHandler.DroppedItemsH[i] = heightLevel;
                ItemHandler.DroppedItemsDDelay[i] = (ItemHandler.MaxDropShowDelay
                        + 1); // this way the item can NEVER be showed to another client
                ItemHandler.DroppedItemsDropper[i] = playerId;
                if (i == Maxi) {
                    ItemHandler.DropItemCount++;
                    if (ItemHandler.DropItemCount
                            >= (ItemHandler.MaxDropItems + 1)) {
                        ItemHandler.DropItemCount = 0;
                        misc.println("! Notify item resterting !");
                    }
                }
                break;
            }
        }
    }

    public void removeAllItems() {
        for (int i = 0; i < playerItems.length; i++) {
            playerItems[i] = 0;
        }
        for (int i = 0; i < playerItemsN.length; i++) {
            playerItemsN[i] = 0;
        }
        resetItems(3214);
    }

    public void resetItems(int WriteFrame) {
        getOutStream().createFrameVarSizeWord(53);
        getOutStream().writeWord(WriteFrame);
        getOutStream().writeWord(playerItems.length);
        for (int i = 0; i < playerItems.length; i++) {
            if (playerItemsN[i] > 254) {
                getOutStream().writeByte(255); // item's stack count. if over 254, write byte 255
                getOutStream().writeDWord_v2(playerItemsN[i]); // and then the real value with writeDWord_v2
            } else {
                getOutStream().writeByte(playerItemsN[i]);
            }
            if (playerItems[i] > Config.MAX_ITEMS || playerItems[i] < 0) {
                playerItems[i] = Config.MAX_ITEMS;
            }
            getOutStream().writeWordBigEndianA(playerItems[i]); // item id
        }
        getOutStream().endFrameVarSizeWord();
    }

    public void sendClueReward() {
        getOutStream().createFrameVarSizeWord(53);
        getOutStream().writeWord(6960);
        getOutStream().writeWord(clueItems.length);
        for (int i = 0; i < clueItems.length; i++) {
            if (clueItemsN[i] > 254) {
                getOutStream().writeByte(255); // item's stack count. if over 254, write byte 255
                getOutStream().writeDWord_v2(clueItemsN[i]); // and then the real value with writeDWord_v2
            } else {
                getOutStream().writeByte(clueItemsN[i]);
            }
            if (clueItems[i] > Config.MAX_ITEMS || clueItems[i] < 0) {
                clueItems[i] = Config.MAX_ITEMS;
            }
            getOutStream().writeWordBigEndianA(clueItems[i]); // item id
        }
        getOutStream().endFrameVarSizeWord();
    }

    public void SetSmithing(int WriteFrame) {
        getOutStream().createFrameVarSizeWord(53);
        getOutStream().writeWord(WriteFrame);
        getOutStream().writeWord(Item.SmithingItems.length);
        for (int i = 0; i < Item.SmithingItems.length; i++) {
            Item.SmithingItems[i][0] += 1;
            if (Item.SmithingItems[i][1] > 254) {
                getOutStream().writeByte(255); // item's stack count. if over 254, write byte 255
                getOutStream().writeDWord_v2(Item.SmithingItems[i][1]); // and then the real value with writeDWord_v2
            } else {
                getOutStream().writeByte(Item.SmithingItems[i][1]);
            }
            if (Item.SmithingItems[i][0] > Config.MAX_ITEMS || Item.SmithingItems[i][0] < 0) {
                playerItems[i] = Config.MAX_ITEMS;
            }
            getOutStream().writeWordBigEndianA(Item.SmithingItems[i][0]); // item id
        }
        getOutStream().endFrameVarSizeWord();
    }

    public void SendWeapon(int Weapon, String WeaponName) {
        String WeaponName2 = WeaponName.replaceAll("Bronze", "");

        WeaponName2 = WeaponName2.replaceAll("Iron", "");
        WeaponName2 = WeaponName2.replaceAll("Steel", "");
        WeaponName2 = WeaponName2.replaceAll("Black", "");
        WeaponName2 = WeaponName2.replaceAll("Mithril", "");
        WeaponName2 = WeaponName2.replaceAll("Adamant", "");
        WeaponName2 = WeaponName2.replaceAll("Rune", "");
        WeaponName2 = WeaponName2.replaceAll("Granite", "");
        WeaponName2 = WeaponName2.replaceAll("Dragon", "");
        WeaponName2 = WeaponName2.replaceAll("Crystal", "");
        WeaponName2 = WeaponName2.trim();
        if (WeaponName.equals("Unarmed") || playerEquipment[playerWeapon] == -1) {
            setSidebarInterface(0, 5855); // punch, kick, block
            sendFrame126(WeaponName, 5857);
        } else if (WeaponName.endsWith("whip")) {
            setSidebarInterface(0, 12290); // flick, lash, deflect
            sendFrame246(12291, 200, Weapon);
            sendFrame126(WeaponName, 12293);
        } else if (WeaponName.endsWith("bow")) {
            setSidebarInterface(0, 1764); // accurate, rapid, longrange
            sendFrame246(1765, 200, Weapon);
            sendFrame126(WeaponName, 1767);
        } else if (WeaponName.endsWith("Bow")) {
            setSidebarInterface(0, 1764); // accurate, rapid, longrange
            sendFrame246(1765, 200, Weapon);
            sendFrame126(WeaponName, 1767);
        } else if (WeaponName.startsWith("crystal_bow")) {
            setSidebarInterface(0, 1764); // accurate, rapid, longrange
            sendFrame246(1765, 200, Weapon);
            sendFrame126(WeaponName, 1767);
        } else if (WeaponName.startsWith("seercull")) {
            setSidebarInterface(0, 1764); // accurate, rapid, longrange
            sendFrame246(1765, 200, Weapon);
            sendFrame126(WeaponName, 1767);
        } else if (WeaponName.startsWith("Staff")
                || WeaponName.endsWith("staff")) {
            setSidebarInterface(0, 328); // spike, impale, smash, block
            sendFrame246(329, 200, Weapon);
            sendFrame126(WeaponName, 331);
        } else if (WeaponName2.startsWith("dart")) {
            setSidebarInterface(0, 4446); // accurate, rapid, longrange
            sendFrame246(4447, 200, Weapon);
            sendFrame126(WeaponName, 4449);
        } else if (WeaponName2.startsWith("dagger")) {
            setSidebarInterface(0, 2276); // stab, lunge, slash, block
            sendFrame246(2277, 200, Weapon);
            sendFrame126(WeaponName, 2279);
        } else if (WeaponName2.startsWith("pickaxe")) {
            setSidebarInterface(0, 5570); // spike, impale, smash, block
            sendFrame246(5571, 200, Weapon);
            sendFrame126(WeaponName, 5573);
        } else if (WeaponName2.startsWith("axe")
                || WeaponName2.startsWith("battleaxe")) {
            setSidebarInterface(0, 1698); // chop, hack, smash, block
            sendFrame246(1699, 200, Weapon);
            sendFrame126(WeaponName, 1701);
        } else if (WeaponName2.startsWith("halberd")) {
            setSidebarInterface(0, 8460); // jab, swipe, fend
            sendFrame246(8461, 200, Weapon);
            sendFrame126(WeaponName, 8463);
        } else if (WeaponName2.startsWith("spear")) {
            setSidebarInterface(0, 4679); // lunge, swipe, pound, block
            sendFrame246(4680, 200, Weapon);
            sendFrame126(WeaponName, 4682);
        } else if (WeaponName2.startsWith("claws")) {
            setSidebarInterface(0, 7762); // chop, slash, lunge, block
            sendFrame246(7763, 200, Weapon);
            sendFrame126(WeaponName, 7763);
        } else {
            setSidebarInterface(0, 2423); // chop, slash, lunge, block
            sendFrame246(2424, 200, Weapon);
            sendFrame126(WeaponName, 2426);
        }
    }

    public void resetTItems(int WriteFrame) {
        getOutStream().createFrameVarSizeWord(53);
        getOutStream().writeWord(WriteFrame);
        getOutStream().writeWord(playerTItems.length);
        for (int i = 0; i < playerTItems.length; i++) {
            if (playerTItemsN[i] > 254) {
                getOutStream().writeByte(255); // item's stack count. if over 254, write byte 255
                getOutStream().writeDWord_v2(playerTItemsN[i]); // and then the real value with writeDWord_v2
            } else {
                getOutStream().writeByte(playerTItemsN[i]);
            }
            if (playerTItems[i] > Config.MAX_ITEMS || playerTItems[i] < 0) {
                playerTItems[i] = Config.MAX_ITEMS;
            }
            getOutStream().writeWordBigEndianA(playerTItems[i]); // item id
        }
        getOutStream().endFrameVarSizeWord();
    }

    public void resetOTItems(int WriteFrame) {
        getOutStream().createFrameVarSizeWord(53);
        getOutStream().writeWord(WriteFrame);
        getOutStream().writeWord(playerOTItems.length);
        for (int i = 0; i < playerOTItems.length; i++) {
            if (playerOTItemsN[i] > 254) {
                getOutStream().writeByte(255); // item's stack count. if over 254, write byte 255
                getOutStream().writeDWord_v2(playerOTItemsN[i]); // and then the real value with writeDWord_v2
            } else {
                getOutStream().writeByte(playerOTItemsN[i]);
            }
            if (playerOTItems[i] > Config.MAX_ITEMS || playerOTItems[i] < 0) {
                playerOTItems[i] = Config.MAX_ITEMS;
            }
            getOutStream().writeWordBigEndianA(playerOTItems[i]); // item id
        }
        getOutStream().endFrameVarSizeWord();
    }

    public void resetShop(int ShopID) {
        int TotalItems = 0;

        for (int i = 0; i < ShopHandler.MaxShopItems; i++) {
            if (ShopHandler.ShopItems[ShopID][i] > 0) {
                TotalItems++;
            }
        }
        if (TotalItems > ShopHandler.MaxShopItems) {
            TotalItems = ShopHandler.MaxShopItems;
        }
        getOutStream().createFrameVarSizeWord(53);
        getOutStream().writeWord(64016);
        getOutStream().writeWord(TotalItems);
        int TotalCount = 0;

        for (int i = 0; i < ShopHandler.ShopItems.length; i++) {
            if (ShopHandler.ShopItems[ShopID][i] > 0
                    || i <= ShopHandler.ShopItemsStandard[ShopID]) {
                if (ShopHandler.ShopItemsN[ShopID][i] > 254) {
                    getOutStream().writeByte(255); // item's stack count. if over 254, write byte 255
                    getOutStream().writeDWord_v2(
                            ShopHandler.ShopItemsN[ShopID][i]); // and then the real value with writeDWord_v2
                } else {
                    getOutStream().writeByte(ShopHandler.ShopItemsN[ShopID][i]);
                }
                if (ShopHandler.ShopItems[ShopID][i] > Config.MAX_ITEMS
                        || ShopHandler.ShopItems[ShopID][i] < 0) {
                    ShopHandler.ShopItems[ShopID][i] = Config.MAX_ITEMS;
                }
                getOutStream().writeWordBigEndianA(
                        ShopHandler.ShopItems[ShopID][i]); // item id
                TotalCount++;
            }
            if (TotalCount > TotalItems) {
                break;
            }
        }
        getOutStream().endFrameVarSizeWord();
    }

    public void resetBank() {
        getOutStream().createFrameVarSizeWord(53);
        getOutStream().writeWord(5382); // bank
        getOutStream().writeWord(playerBankSize); // number of items
        for (int i = 0; i < playerBankSize; i++) {
            if (bankItemsN[i] > 254) {
                getOutStream().writeByte(255);
                getOutStream().writeDWord_v2(bankItemsN[i]);
            } else {
                getOutStream().writeByte(bankItemsN[i]); // amount
            }
            if (bankItemsN[i] < 1) {
                bankItems[i] = 0;
            }
            if (bankItems[i] > Config.MAX_ITEMS || bankItems[i] < 0) {
                bankItems[i] = Config.MAX_ITEMS;
            }
            getOutStream().writeWordBigEndianA(bankItems[i]); // itemID
        }
        getOutStream().endFrameVarSizeWord();
    }

    public void resetBank2() {
        getOutStream().createFrameVarSizeWord(53);
        getOutStream().writeWord(5382); // bank
        getOutStream().writeWord(playerBankSize2); // number of items
        for (int i = 0; i < playerBankSize2; i++) {
            if (bankItemsN2[i] > 254) {
                getOutStream().writeByte(255);
                getOutStream().writeDWord_v2(bankItemsN2[i]);
            } else {
                getOutStream().writeByte(bankItemsN2[i]); // amount
            }
            if (bankItemsN2[i] < 1) {
                bankItems2[i] = 0;
            }
            if (bankItems2[i] > Config.MAX_ITEMS || bankItems2[i] < 0) {
                bankItems2[i] = Config.MAX_ITEMS;
            }
            getOutStream().writeWordBigEndianA(bankItems2[i]); // itemID
        }
        getOutStream().endFrameVarSizeWord();
    }

    public void resetBank3() {
        getOutStream().createFrameVarSizeWord(53);
        getOutStream().writeWord(5382); // bank
        getOutStream().writeWord(playerBankSize3); // number of items
        for (int i = 0; i < playerBankSize3; i++) {
            if (bankItemsN2[i] > 254) {
                getOutStream().writeByte(255);
                getOutStream().writeDWord_v2(bankItemsN3[i]);
            } else {
                getOutStream().writeByte(bankItemsN3[i]); // amount
            }
            if (bankItemsN3[i] < 1) {
                bankItems3[i] = 0;
            }
            if (bankItems3[i] > Config.MAX_ITEMS || bankItems3[i] < 0) {
                bankItems3[i] = Config.MAX_ITEMS;
            }
            getOutStream().writeWordBigEndianA(bankItems3[i]); // itemID
        }
        getOutStream().endFrameVarSizeWord();
    }

    public void moveItems(int from, int to, int moveWindow) {
        if (moveWindow == 3724) {
            int tempI;
            int tempN;

            tempI = playerItems[from];
            tempN = playerItemsN[from];

            playerItems[from] = playerItems[to];
            playerItemsN[from] = playerItemsN[to];
            playerItems[to] = tempI;
            playerItemsN[to] = tempN;
        }

        if (moveWindow == 34453 && from >= 0 && to >= 0 && from < playerBankSize
                && to < playerBankSize) {
            int tempI;
            int tempN;

            tempI = bankItems[from];
            tempN = bankItemsN[from];

            bankItems[from] = bankItems[to];
            bankItemsN[from] = bankItemsN[to];
            bankItems[to] = tempI;
            bankItemsN[to] = tempN;
        }

        if (moveWindow == 34453) {
            resetBank();
        } else if (moveWindow == 18579) {
            resetItems(5064);
        } else if (moveWindow == 3724) {
            resetItems(3214);
        }
    }

    public int itemAmount(int itemID) {
        int tempAmount = 0;

        for (int i = 0; i < playerItems.length; i++) {
            if (playerItems[i] == itemID) {
                tempAmount += playerItemsN[i];
            }
        }
        return tempAmount;
    }

    public int freeBankSlots() {
        int freeS = 0;

        for (int i = 0; i < playerBankSize; i++) {
            if (bankItems[i] <= 0) {
                freeS++;
            }
        }
        return freeS;
    }

    public int freeBankSlots2() {
        int freeS = 0;

        for (int i = 0; i < playerBankSize2; i++) {
            if (bankItems2[i] <= 0) {
                freeS++;
            }
        }
        return freeS;
    }

    public int freeBankSlots3() {
        int freeS = 0;

        for (int i = 0; i < playerBankSize3; i++) {
            if (bankItems3[i] <= 0) {
                freeS++;
            }
        }
        return freeS;
    }

    public int freeSlots() {
        int freeS = 0;

        for (int i = 0; i < playerItems.length; i++) {
            if (playerItems[i] <= 0) {
                freeS++;
            }
        }
        return freeS;
    }

    public int freeTradeSlots() {
        int freeS = 0;

        for (int i = 0; i < playerTItems.length; i++) {
            if (playerTItems[i] <= 0) {
                freeS++;
            }
        }
        return freeS;
    }

    public void openUpBank() {
        if (getOutStream() != null) {
            resetItems(5064);
            rearrangeBank();
            resetBank();
            //resetTempItems();
            getOutStream().createFrame(248);
            getOutStream().writeWordA(5292);
            getOutStream().writeWord(5063);
            flushOutStream();
            InBank = 1;
        }

    }

    public void openUpBank2() {
        if (getOutStream() != null) {
            resetItems(5064);
            rearrangeBank2();
            resetBank2();
            //resetTempItems();
            getOutStream().createFrame(248);
            getOutStream().writeWordA(5292);
            getOutStream().writeWord(5063);
            flushOutStream();
            InBank = 2;
        }

    }

    public void openUpBank3() {
        if (getOutStream() != null) {
            resetItems(5064);
            rearrangeBank3();
            resetBank3();
            //resetTempItems();
            getOutStream().createFrame(248);
            getOutStream().writeWordA(5292);
            getOutStream().writeWord(5063);
            flushOutStream();
            InBank = 3;
        }

    }

    public Pins getBankPin() {
        return pins;
    }

    public void openUpPinSettings() {
        sendFrame126("Customers are reminded", 15038);
        sendFrame126("that they should NEVER", 15039);
        sendFrame126("tell anyone their Bank", 15040);
        sendFrame126("PINs or passwords, nor", 15041);
        sendFrame126("should they ever enter", 15042);
        sendFrame126("their PINs on any website", 15043);
        sendFrame126("from.", 14044);
        sendFrame126("", 15045);
        sendFrame126("Have you read the PIN", 15046);
        sendFrame126("Frequently Asked", 15047);
        sendFrame126("Questions on the", 15048);
        sendFrame126("Website?", 15049);
        sendFrame126("No PIN set", 15105);
        sendFrame126("3 days", 15107);
        sendInterfaceHidden(0, 15074);
        sendInterfaceHidden(1, 15077);
        sendInterfaceHidden(1, 15081);
        sendInterfaceHidden(1, 15108);
        showInterface(14924);
    }

    public void openUpShop(int ShopID) {
        // setScrollHeight(ShopID);
        // resetScrollPosition(64015);
        sendFrame126(ShopHandler.ShopName[ShopID], 64003);
        sendFrame248(64000, 3822);
        resetItems(3823);
        resetShop(ShopID);
        IsShopping = true;
        MyShopID = ShopID;
    }
    private void setScrollHeight(int shopId) {
        int size = server.shopHandler.getItemAmount(shopId);
        int defaultHeight = 253;
        int rowHeight = (int) Math.ceil(size / 10.0) * 46;
        setScrollableMaxHeight(64015, Math.max(rowHeight, defaultHeight));
    }
    public void setScrollableMaxHeight(int interfaceId, int scrollMax) {
        if (getOutStream() != null) {
            getOutStream().createFrame(3);
            getOutStream().writeUnsignedWord(interfaceId);
            getOutStream().writeUnsignedWord(scrollMax);
            flushOutStream();
        }
    }
    boolean flag;
    public void resetScrollPosition(int frame) {
        if (flag)
            sendFrame126(":scp: 0", frame);
        else
            sendFrame126(":scp: 00", frame);

        flag = !flag;
    }

    public void resetScrollBar(int interfaceId) {
        if (getOutStream() != null) {
            getOutStream().createFrame(2);
            getOutStream().writeUnsignedWord(interfaceId);
            flushOutStream();
        }
    }
    public int getItemAmount(int ItemID) {
        int itemCount = 0;
        for (int i = 0; i < playerItems.length; i++) {
            if ((playerItems[i] - 1) == ItemID) {
                itemCount += playerItemsN[i];
            }
        }
        return itemCount;
    }
    public boolean playerHasItem(int itemID, int amt) {
        itemID++;
        int found = 0;
        for (int i = 0; i < playerItems.length; i++) {
            if (playerItems[i] == itemID) {
                if (playerItemsN[i] >= amt) {
                    return true;
                } else {
                    found++;
                }
            }
        }
        if (found >= amt) {
            return true;
        }
        return false;
    }
    public boolean addItem(int item, int amount) {
        if (amount < 1) {
            return false;
        }
        if (item <= 0) {
            return false;
        }
        if ((((freeSlots() >= 1) || playerHasItem(item, 1)) && Item.itemStackable[item])
                || ((freeSlots() > 0) && !Item.itemStackable[item])) {
            for (int i = 0; i < playerItems.length; i++) {
                if (playerItems[i] == (item + 1) && Item.itemStackable[item]
                        && playerItems[i] > 0) {
                    playerItems[i] = (item + 1);
                    if ((playerItemsN[i] + amount) < maxItemAmount && (playerItemsN[i] + amount) > -1) {
                        playerItemsN[i] += amount;
                    } else {
                        playerItemsN[i] = maxItemAmount;
                    }
                    if (getOutStream() != null) {
                        getOutStream().createFrameVarSizeWord(34);
                        getOutStream().writeWord(3214);
                        getOutStream().writeByte(i);
                        getOutStream().writeWord(playerItems[i]);
                        if (playerItemsN[i] > 254) {
                            getOutStream().writeByte(255);
                            getOutStream().writeDWord(playerItemsN[i]);
                        } else {
                            getOutStream().writeByte(playerItemsN[i]); // amount
                        }
                        getOutStream().endFrameVarSizeWord();
                        flushOutStream();
                    }
                    i = 30;
                    return true;
                }
            }
            for (int i = 0; i < playerItems.length; i++) {
                if (playerItems[i] <= 0) {
                    playerItems[i] = item + 1;
                    if (amount < maxItemAmount && amount > -1) {
                        playerItemsN[i] = 1;
                        if (amount > 1) {
                            addItem(item, amount - 1);
                            return true;
                        }
                    } else {
                        playerItemsN[i] = maxItemAmount;
                    }
                    resetItems(3214);
                    i = 30;
                    return true;
                }
            }
            return false;
        } else {
            resetItems(3214);
            sendMessage("Not enough space in your inventory.");
            return false;
        }
    }

    public boolean addItemorDrop(int item, int amount) {
        if (item == -1) {
            return false;
        }

        if (!Item.itemStackable[item] || amount < 1) {
            amount = 1;
        }

        if ((freeSlots() >= amount && !Item.itemStackable[item])
                || freeSlots() > 0) {
            for (int i = 0; i < playerItems.length; i++) {
                if (playerItems[i] == (item + 1) && Item.itemStackable[item]
                        && playerItems[i] > 0) {
                    playerItems[i] = (item + 1);
                    if ((playerItemsN[i] + amount) < maxItemAmount
                            && (playerItemsN[i] + amount) > -1) {
                        playerItemsN[i] += amount;
                    } else {
                        playerItemsN[i] = maxItemAmount;
                    }
                    getOutStream().createFrameVarSizeWord(34);
                    getOutStream().writeWord(3214);
                    getOutStream().writeByte(i);
                    getOutStream().writeWord(playerItems[i]);
                    if (playerItemsN[i] > 254) {
                        getOutStream().writeByte(255);
                        getOutStream().writeDWord(playerItemsN[i]);
                    } else {
                        getOutStream().writeByte(playerItemsN[i]); // amount
                    }
                    getOutStream().endFrameVarSizeWord();
                    i = 30;
                    return true;
                }
            }
            for (int i = 0; i < playerItems.length; i++) {
                if (playerItems[i] <= 0) {
                    playerItems[i] = item + 1;
                    if (amount < maxItemAmount && amount > -1) {
                        playerItemsN[i] = amount;
                    } else {
                        playerItemsN[i] = maxItemAmount;
                    }
                    getOutStream().createFrameVarSizeWord(34);
                    getOutStream().writeWord(3214);
                    getOutStream().writeByte(i);
                    getOutStream().writeWord(playerItems[i]);
                    if (playerItemsN[i] > 254) {
                        getOutStream().writeByte(255);
                        getOutStream().writeDWord(playerItemsN[i]);
                    } else {
                        getOutStream().writeByte(playerItemsN[i]); // amount
                    }
                    getOutStream().endFrameVarSizeWord();
                    i = 30;
                    return true;
                }
            }
            return false;
        } else {
            sendMessage("Not enough space in your inventory, so it goes to the ground");
            ItemHandler.addItem(item, absX, absY,
                    amount, playerId, false);
            return false;
        }
    }

    public void dropItem(int droppedItem, int slot) {
        // misc.printlnTag("droppeditem ["+playerItems[slot]+"] which is ["+(droppedItem+1)+"]");
        if (playerItemsN[slot] != 0 && droppedItem != -1
                && playerItems[slot] == droppedItem + 1) {
            sendSound(soundList.ITEM_DROP, 100, 0);
            ItemHandler.addItem(playerItems[slot] - 1, absX, absY,
                    playerItemsN[slot], playerId, false);
            // createGroundItem(droppedItem, absX, absY, playerItemsN[slot]);
            deleteItem(droppedItem, slot, playerItemsN[slot]);
            updateRequired = true;
        }
    }

    public void createGroundItem(int itemID, int itemX, int itemY, int itemAmount) { // Phate: Omg fucking sexy! creates item at absolute X and Y
        if (getOutStream() != null) {
            getOutStream().createFrame(85); // Phate: Spawn ground item
            getOutStream().writeByteC((itemY - 8 * mapRegionY));
            getOutStream().writeByteC((itemX - 8 * mapRegionX));
            getOutStream().createFrame(44);
            getOutStream().writeWordBigEndianA(itemID);
            getOutStream().writeWord(itemAmount);
            getOutStream().writeByte(0); // x(4 MSB) y(LSB) coords
            flushOutStream();
        }
        System.out.println("CreateGroundItem "+itemID+" "+(itemX - 8 * mapRegionX)+","+(itemY - 8 * mapRegionY)+" "+itemAmount);
    }

    public void removeGroundItem(int itemX, int itemY, int itemID) { // Phate: Omg fucking sexy! remoevs an item from absolute X and Y
        getOutStream().createFrame(85); // Phate: Item Position Frame
        getOutStream().writeByteC((itemY - 8 * mapRegionY));
        getOutStream().writeByteC((itemX - 8 * mapRegionX));
        getOutStream().createFrame(156); // Phate: Item Action: Delete
        getOutStream().writeByteS(0); // x(4 MSB) y(LSB) coords
        getOutStream().writeWord(itemID); // Phate: Item ID
        // misc.printlnTag("RemoveGroundItem "+itemID+" "+(itemX - 8 * mapRegionX)+","+(itemY - 8 * mapRegionY));
    }

    public boolean deleteItem(int id, int slot, int amount) {
        if (slot > -1 && slot < playerItems.length) {
            if ((playerItems[slot] - 1) == id) {
                if (playerItemsN[slot] > amount) {
                    playerItemsN[slot] -= amount;
                } else {
                    playerItemsN[slot] = 0;
                    playerItems[slot] = 0;
                }
                resetItems(3214);
                return true;
            }
        } else {
            return false;
        }
        return false;
    }

    public void deleteItem2(int id, int amount) {
        int am = amount;
        for (int i = 0; i < playerItems.length; i++) {
            if (am == 0) {
                break;
            }
            if (playerItems[i] == (id + 1)) {
                if (playerItemsN[i] > amount) {
                    playerItemsN[i] -= amount;
                    break;
                } else {
                    playerItems[i] = 0;
                    playerItemsN[i] = 0;
                    am--;
                }
            }
        }
        resetItems(3214);
    }

    public void setEquipment(int wearID, int amount, int targetSlot, String weaponName) {
        int Stat = playerDefence;

        if (targetSlot == playerWeapon) {
            Stat = playerAttack;
        }
        getOutStream().createFrameVarSizeWord(34);
        getOutStream().writeWord(1688);
        getOutStream().writeByte(targetSlot);
        getOutStream().writeWord((wearID + 1));
        if (amount > 254) {
            getOutStream().writeByte(255);
            getOutStream().writeDWord(amount);
        } else {
            getOutStream().writeByte(amount); // amount
        }
        getOutStream().endFrameVarSizeWord();
        getOutStream().createFrameVarSizeWord(34);
        getOutStream().writeWord(19041);
        getOutStream().writeByte(targetSlot);
        getOutStream().writeWord((wearID + 1));
        if (amount > 254) {
            getOutStream().writeByte(255);
            getOutStream().writeDWord(amount);
        } else {
            getOutStream().writeByte(amount); // amount
        }
        getOutStream().endFrameVarSizeWord();
        if (targetSlot == playerWeapon && wearID >= 0) {
            SendWeapon(wearID, weaponName);
            playerStandIndex = GetStandAnim(wearID);
            playerTurnIndex = Get90cwturnAnim(wearID);
            playerWalkIndex = GetWalkAnim(wearID);
            playerTurn180Index = Get180turnAnim(wearID);
            playerTurn90CWIndex = Get90cwturnAnim(wearID);
            playerTurn90CCWIndex = Get90ccturnAnim(wearID);
            playerRunIndex = GetRunAnim(wearID);
            if (item2handed(wearID)) {
                playerStandIndex = 0x811;
                playerWalkIndex = 0x67F;
                playerRunIndex = 0x680;
            }
            if (weaponName.contains("scimitar")) {
                playerStandIndex = 12021;
                playerWalkIndex = 12024;
                playerRunIndex = 12023;
                return;
            }
            if (weaponName.contains("halberd") || weaponName.contains("banner") || weaponName.contains("hasta") || weaponName.contains("spear") || weaponName.contains("guthan") || weaponName.contains("sceptre")) {
                playerStandIndex = 809;
                playerWalkIndex = 1146;
                playerRunIndex = 1210;
                return;
            }
            if(weaponName.contains("whip")){
                playerStandIndex = 11973;
                playerRunIndex = 1661;
                playerWalkIndex = 11975;
                playerTurnIndex = 11975;
                playerTurn180Index = 11975;
                playerTurn90CWIndex = 11975;
                playerTurn90CCWIndex = 11975;
                return;
            }
            if (weaponName.contains("sled")) {
                playerStandIndex = 1461;
                playerWalkIndex = 1468;
                playerRunIndex = 1467;
                playerTurnIndex = 1468;
                playerTurn180Index = 1468;
                playerTurn90CWIndex = 1468;
                playerTurn90CCWIndex = 1468;
                return;
            }
            if (weaponName.contains("dharok")) {
                playerStandIndex = 0x811;
                playerWalkIndex = 2064;
                return;
            }
            if (weaponName.contains("ahrim")) {
                playerStandIndex = 809;
                playerWalkIndex = 1146;
                playerRunIndex = 1210;
                return;
            }
            if (weaponName.contains("verac")) {
                playerStandIndex = 1832;
                playerWalkIndex = 1830;
                playerRunIndex = 1831;
                return;
            }
            if (weaponName.contains("wand")) {
                playerStandIndex = 8980;
                playerRunIndex = 1146;
                playerWalkIndex = 1210;
                return;
            }
            if (weaponName.contains("karil")) {
                playerStandIndex = 2074;
                playerWalkIndex = 2076;
                playerRunIndex = 2077;
                return;
            }
            switch(wearID){
                case 6082: //2324 attack anim ;) add this later.
                    playerStandIndex = 2316;
                    playerTurnIndex = 2317;
                    playerWalkIndex = 2317;
                    playerTurn180Index = 2317;
                    playerTurn90CWIndex = 2317;
                    playerTurn90CCWIndex = 2317;
                    playerRunIndex = 2322;
                    break;
            }
            if (wearID == 4747) { // Torag Hammers
                playerSEA = 0x814;
            }
            if (wearID == 4084) { // sled
                playerRunIndex = 1487;
                playerWalkIndex = 1468;
            }
            if (wearID == 25612) { // Whip
                playerRunIndex = 1661;
                playerWalkIndex = 1660;
            }
            if (wearID == 8447) { // cat toy
                playerRunIndex = 1661;
                playerWalkIndex = 1660;
            }
            if (wearID == 4153 || wearID == 6528) { // maul
                playerRunIndex = 2064;
                playerWalkIndex = 2064;
                playerStandIndex = 2065;
            }
            if (wearID == 1215) { // d dagger
                playerRunIndex = 1661;
                playerWalkIndex = 1660;
                stillgfx(306, absY, absX);
            }
            playerStandIndex = GetStandAnim(wearID);
            playerTurnIndex = Get90cwturnAnim(wearID);
            playerWalkIndex = GetWalkAnim(wearID);
            playerTurn180Index = Get180turnAnim(wearID);
            playerTurn90CWIndex = Get90cwturnAnim(wearID);
            playerTurn90CCWIndex = Get90ccturnAnim(wearID);
            playerRunIndex = GetRunAnim(wearID);
        }
        if(weaponName.contains("whip")){
            playerStandIndex = 11973;
            playerRunIndex = 1661;
            playerWalkIndex = 11975;
            playerTurnIndex = 11975;
            playerTurn180Index = 11975;
            playerTurn90CWIndex = 11975;
            playerTurn90CCWIndex = 11975;
            return;
        }
        SendWeapon((playerEquipment[playerWeapon]),
                GetItemName(playerEquipment[playerWeapon]));
        updateRequired = true;
        appearanceUpdateRequired = true;
    }


    public boolean wearItem(int wearID, int slot) {
        int targetSlot = 0;
        if ((playerItems[slot] - 1) == wearID) {
            resetItems(3214); // THIS MIGHT STOP CLIENT HACKS HMM?
            targetSlot = Item.targetSlots[wearID];
            if (itemType(wearID).equalsIgnoreCase("cape")) {
                targetSlot = 1;
            } else if (itemType(wearID).equalsIgnoreCase("hat")) {
                targetSlot = 0;
            } else if (itemType(wearID).equalsIgnoreCase("amulet")) {
                targetSlot = 2;
            } else if (itemType(wearID).equalsIgnoreCase("arrows")) {
                targetSlot = 13;
            } else if (itemType(wearID).equalsIgnoreCase("body")) {
                targetSlot = 4;
            } else if (itemType(wearID).equalsIgnoreCase("shield")) {
                targetSlot = 5;
            } else if (itemType(wearID).equalsIgnoreCase("legs")) {
                targetSlot = 7;
            } else if (itemType(wearID).equalsIgnoreCase("gloves")) {
                targetSlot = 9;
            } else if (itemType(wearID).equalsIgnoreCase("boots")) {
                targetSlot = 10;
            } else if (itemType(wearID).equalsIgnoreCase("ring")) {
                targetSlot = 12;
            } else {
                targetSlot = 3;
            }
            int CLAttack = GetCLAttack(wearID);
            int CLPrayer = GetCLPrayer(wearID);
            int CLFletching = GetCLFletching(wearID);
            int CLWoodcutting = GetCLWoodcutting(wearID);
            int CLCooking = GetCLCooking(wearID);
            int CLFishing = GetCLFishing(wearID);
            int CLThieving = GetCLThieving(wearID);
            int CLHitpoints = GetCLHitpoints(wearID);
            int CLAgility = GetCLFarming(wearID);
            int CLSlayer = GetCLSlayer(wearID);
            int CLDefence = GetCLDefence(wearID);
            int CLStrength = GetCLStrength(wearID);
            int CLMagic = GetCLMagic(wearID);
            int CLRanged = GetCLRanged(wearID);
            String weaponName = Item.getItemName(wearID).toLowerCase();
            if(weaponName.equals(null)){
                return false;
            }

            if (playerLevel[playerAttack] - CLAttack < 0) {
                sendMessage(
                        "You need " + CLAttack + " " + statName[playerAttack]
                                + " to equip this item.");
                return false;
            }
            if (playerLevel[playerPrayer] - CLPrayer < 0) {
                sendMessage(
                        "You need " + CLPrayer + " " + statName[playerPrayer]
                                + " to equip this item.");
                return false;
            }
            if (playerLevel[playerFletching] - CLFletching < 0) {
                sendMessage(
                        "You need " + CLFletching + " "
                                + statName[playerFletching] + " to equip this item.");
                return false;
            }
            if (playerLevel[playerWoodcutting] - CLWoodcutting < 0) {
                sendMessage(
                        "You need " + CLWoodcutting + " "
                                + statName[playerWoodcutting] + " to equip this item.");

                return false;
            }
            if (playerLevel[playerCooking] - CLCooking < 0) {
                sendMessage(
                        "You need " + CLCooking + " " + statName[playerCooking]
                                + " to equip this item.");

                return false;
            }
            if (playerLevel[playerFishing] - CLFishing < 0) {
                sendMessage(
                        "You need " + CLFishing + " " + statName[playerFishing]
                                + " to equip this item.");

                return false;
            }
            if (playerLevel[playerThieving] - CLThieving < 0) {
                sendMessage(
                        "You need " + CLThieving + " "
                                + statName[playerThieving] + " to equip this item.");
                return false;
            }
            if (playerLevel[playerHitpoints] - CLHitpoints < 0) {
                sendMessage(
                        "You need " + CLHitpoints + " "
                                + statName[playerHitpoints] + " to equip this item.");
                return false;
            }
            if (playerLevel[playerFarming] - CLAgility < 0) {
                sendMessage(
                        "You need " + CLAgility + " " + statName[playerFarming]
                                + " to equip this item.");
                return false;
            }
            if (playerLevel[playerSlayer] - CLSlayer < 0) {
                sendMessage(
                        "You need " + CLSlayer + " " + statName[playerSlayer]
                                + " to equip this item.");
                return false;
            }
            if (playerLevel[playerDefence] - CLDefence < 0) {
                sendMessage(
                        "You need " + CLDefence + " " + statName[playerDefence]
                                + " to equip this item.");
                return false;
            }
            if (playerLevel[playerStrength] - CLStrength < 0) {
                sendMessage(
                        "You need " + CLStrength + " "
                                + statName[playerStrength] + " to equip this item.");
                return false;
            }
            if (playerLevel[playerMagic] - CLMagic < 0) {
                sendMessage(
                        "You need " + CLMagic + " " + statName[playerMagic]
                                + " to equip this item.");
                return false;
            }
            if (playerLevel[playerRanged] - CLRanged < 0) {
                sendMessage(
                        "You need " + CLRanged + " " + statName[playerRanged]
                                + " to equip this item.");
                return false;
            }

            int wearAmount = playerItemsN[slot];
            if (wearAmount < 1) {
                return false;
            }
            wearing = true;
            if (slot >= 0 && wearID >= 0) {
                deleteItem(wearID, slot, wearAmount);
                if (playerEquipment[targetSlot] != wearID && playerEquipment[targetSlot] >= 0) {
                    addItem(playerEquipment[targetSlot], playerEquipmentN[targetSlot]);
                    resetItems(3214); // THIS MIGHT STOP CLIENT HACKS HMM?
                } else if (Item.itemStackable[wearID] && playerEquipment[targetSlot] == wearID) {
                    wearAmount = playerEquipmentN[targetSlot] + wearAmount;
                } else if (playerEquipment[targetSlot] >= 0) {
                    addItem(playerEquipment[targetSlot], playerEquipmentN[targetSlot]);
                    resetItems(3214); // THIS MIGHT STOP CLIENT HACKS HMM?
                }
            }
            sendSound(230, 100, 0);
            getOutStream().createFrameVarSizeWord(34);
            getOutStream().writeWord(1688);
            getOutStream().writeByte(targetSlot);
            getOutStream().writeWord(wearID + 1);
            if (wearAmount > 254) {
                getOutStream().writeByte(255);
                getOutStream().writeDWord(wearAmount);
            } else {
                getOutStream().writeByte(wearAmount); //amount
            }
            getOutStream().endFrameVarSizeWord();
            getOutStream().createFrameVarSizeWord(34);
            getOutStream().writeWord(19041);
            getOutStream().writeByte(targetSlot);
            getOutStream().writeWord(wearID + 1);
            if (wearAmount > 254) {
                getOutStream().writeByte(255);
                getOutStream().writeDWord(wearAmount);
            } else {
                getOutStream().writeByte(wearAmount); //amount
            }
            getOutStream().endFrameVarSizeWord();
            playerEquipment[targetSlot] = wearID;
            playerEquipmentN[targetSlot] = wearAmount;
            if (targetSlot == playerWeapon && playerEquipment[playerShield] != -1 && (Item.itemTwoHanded[wearID] || item2handed(wearID))) {
                remove(playerEquipment[playerShield], playerShield, 1688);
            }
            if (targetSlot == playerWeapon) {
                SendWeapon(wearID, GetItemName(wearID));
                //updateAnimations();
                playerStandIndex = GetStandAnim(wearID);
                playerTurnIndex = Get90cwturnAnim(wearID);
                playerWalkIndex = GetWalkAnim(wearID);
                playerTurn180Index = Get180turnAnim(wearID);
                playerTurn90CWIndex = Get90cwturnAnim(wearID);
                playerTurn90CCWIndex = Get90ccturnAnim(wearID);
                playerRunIndex = GetRunAnim(wearID);
                playerSEA = 0x326;
                if (item2handed(wearID)) {
                    playerStandIndex = 0x811;
                    playerWalkIndex = 0x67F;
                    playerRunIndex = 0x680;
                }
                if (wearID == 7927) {
                    resetWalkingQueue();
                    for (int i = 0; i < 14; i++) {
                        setSidebarInterface(i, 6014);
                    }
                    isMorphed = true;
                    sendMessage("As you put on the ring you turn into an egg!");
                    npcId = 3689 + misc.random(5);
                    isNpc = true;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
                if (wearID == 4747) { //Torag Hammers
                    playerSEA = 0x814;
                }
                if(weaponName.contains("whip")){
                    playerStandIndex = 11973;
                    playerRunIndex = 1661;
                    playerWalkIndex = 11975;
                    playerTurnIndex = 11975;
                    playerTurn180Index = 11975;
                    playerTurn90CWIndex = 11975;
                    playerTurn90CCWIndex = 11975;

                }
                if (wearID == 8447) { //cat toy
                    playerRunIndex = 1661;
                    playerWalkIndex = 1660;
                }
            }
            ResetBonus();
            GetBonus();
            WriteBonus();
            SendWeapon((playerEquipment[playerWeapon]), GetItemName(playerEquipment[playerWeapon]));
            requestUpdates();
            wearing = false;
            return true;
        }
        return false;
    }

    public String itemType(int item) {
        if (Item.playerCape(item)) {
            return "cape";
        }
        if (Item.playerBoots(item)) {
            return "boots";
        }
        if (Item.playerGloves(item)) {
            return "gloves";
        }
        if (Item.playerShield(item)) {
            return "shield";
        }
        if (Item.playerAmulet(item)) {
            return "amulet";
        }
        if (Item.playerArrows(item)) {
            return "arrows";
        }
        if (Item.playerRings(item)) {
            return "ring";
        }
        if (Item.playerHats(item)) {
            return "hat";
        }
        if (Item.playerLegs(item)) {
            return "legs";
        }
        if (Item.playerBody(item)) {
            return "body";
        }
        return "weapon";
    }

    public void remove(int wearID, int slot, int iytd) {
        if (addItem(playerEquipment[slot], playerEquipmentN[slot])) {
            resetItems(3214); // THIS MIGHT STOP CLIENT HACKS HMM?
            playerEquipment[slot] = -1;
            playerEquipmentN[slot] = 0;
            getOutStream().createFrame(34);
            getOutStream().writeWord(6);
            getOutStream().writeWord(1688);
            getOutStream().writeByte(slot);
            getOutStream().writeWord(0);
            getOutStream().writeByte(0);
            getOutStream().createFrame(34);
            getOutStream().writeWord(6);
            getOutStream().writeWord(19041);
            getOutStream().writeByte(slot);
            getOutStream().writeWord(0);
            getOutStream().writeByte(0);
            ResetBonus();
            GetBonus();
            WriteBonus();
            if (slot == playerWeapon) {
                SendWeapon(-1, "Unarmed");
            }
            SendWeapon((playerEquipment[playerWeapon]),
                    GetItemName(playerEquipment[playerWeapon]));
            requestUpdates();
        }
    }

    public void deleteequiment(int wearID, int slot) {
        playerEquipment[slot] = -1;
        playerEquipmentN[slot] = 0;
        getOutStream().createFrame(34);
        getOutStream().writeWord(6);
        getOutStream().writeWord(1688);
        getOutStream().writeByte(slot);
        getOutStream().writeWord(0);
        getOutStream().writeByte(0);
        getOutStream().createFrame(34);
        getOutStream().writeWord(6);
        getOutStream().writeWord(19041);
        getOutStream().writeByte(slot);
        getOutStream().writeWord(0);
        getOutStream().writeByte(0);
        ResetBonus();
        GetBonus();
        WriteBonus();
        if (slot == playerWeapon) {
            SendWeapon(-1, "Unarmed");
        }
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void setChatOptions(int publicChat, int privateChat, int tradeBlock) {
        getOutStream().createFrame(206);
        getOutStream().writeByte(publicChat); // On = 0, Friends = 1, Off = 2, Hide = 3
        getOutStream().writeByte(privateChat); // On = 0, Friends = 1, Off = 2
        getOutStream().writeByte(tradeBlock); // On = 0, Friends = 1, Off = 2
    }

    public void openWelcomeScreen(int recoveryChange, boolean memberWarning, int messages, int lastLoginIP, int lastLogin) {
        getOutStream().createFrame(176);
        // days since last recovery change 200 for not yet set 201 for members server,
        // otherwise, how many days ago recoveries have been changed.
        getOutStream().writeByteC(recoveryChange);
        getOutStream().writeWordA(messages); // # of unread messages
        getOutStream().writeByte(memberWarning ? 1 : 0); // 1 for member on non-members world warning
        getOutStream().writeDWord_v2(lastLoginIP); // ip of last login
        getOutStream().writeWord(lastLogin); // days
    }
    public void drinkEnergy(int itemId, int replaceItem, int slot) {
        startAnimation(829);
        playerItems[slot] = replaceItem + 1;
        resetItems(3214);
        runEnergy += (int) (runEnergy * .20);
        updateRequired = true;
        appearanceUpdateRequired = true;
        if (runEnergy + (runEnergy * .20) > 100) {
            runEnergy = 100;
        }
    }

    public int GetLastLogin(int Date) {
        Calendar cal = new GregorianCalendar();
        int day = cal.get(Calendar.DAY_OF_MONTH);
        int month = cal.get(Calendar.MONTH);
        int year = cal.get(Calendar.YEAR);
        int calc = ((year * 10000) + (month * 100) + day);

        return (calc - Date);
    }

    public void refreshSkills() {
    }

    // upon connection of a new client all the info has to be sent to client prior to starting the regular communication
    public void initialize() {
        server.panel.addEntity(playerName);
        // first packet sent
        getOutStream().createFrame(249);
        getOutStream().writeByteA(1); // 1 for members, zero for free
        getOutStream().writeWordBigEndianA(playerId);
        if (displayName.equalsIgnoreCase("notset")) {
            displayName = playerName;
        }
        // here is the place for seting up the UI, stats, et..
        setChatOptions(0, 0, 0);
        for (int i = 0; i < 25; i++) {
            setSkillLevel(i, playerLevel[i], playerXP[i]);
        }
        if (hasNpc) {
            if (summonId > 0) {
                server.npcHandler.spawnNpc3(this, summonId, absX, absY - 1, heightLevel, 0, 120, 25, 200, 200, true, false, true);

            }
        }
        refreshSkills();
        server.lottery.checkUnclaimedWinners(this);
        // WriteWildyLevel();

        getOutStream().createFrame(107); // resets something in the client
        sendConfig(173, runningToggled ? 1 : 0);
        sendFrame126(runEnergy+"%", 149);
        setSidebarInterface(1, 3917);
        setSidebarInterface(2, 638);
        setSidebarInterface(3, 3213);
        setSidebarInterface(4, 1644);
        setSidebarInterface(5, 5608);
        if (ancients == 0) {
            setSidebarInterface(6, 1151);
        }
        if (ancients == 1) {
            setSidebarInterface(6, 12855);
        }
        setSidebarInterface(7, 18128);
        setSidebarInterface(8, 5065);
        setSidebarInterface(9, 5715);
        setSidebarInterface(10, 2449);
        setSidebarInterface(11, 904);
        setSidebarInterface(12, 147);
        setSidebarInterface(13, 1);
        setSidebarInterface(0, 2423);


        // add player commands...
        /* getOutStream().createFrameVarSize(104);
         getOutStream().writeByteC(3);		// command slot (does it matter which one?)
         getOutStream().writeByteA(0);		// 0 or 1; 0 if command should be placed on top in context menu
         getOutStream().writeString("@blu@PkPts: @yel@"+pkpoints+" @blu@Kills: @yel@"+killcount+" @blu@Deaths: @yel@"+deathcount+"@whi@");
         getOutStream().endFrameVarSize();*/


        if (playerLastConnect.length() < 7) {
            playerLastConnect = connectedFrom;
        }
        if (playerLastConnect.length() <= 15) {
            for (int j = 0; j <= playerLastConnect.length(); j++) {
                if ((j + 1) <= playerLastConnect.length()) {
                    if (playerLastConnect.substring(j, (j + 1)).equals(".")) {
                        start[dots] = j;
                        dots++;
                    }
                    if (dots == 3) {
                        break;
                    }
                }
            }
            if (dots == 3) {
                IPPart1 = Integer.parseInt(
                        playerLastConnect.substring(0, start[0]));
                IPPart2 = Integer.parseInt(
                        playerLastConnect.substring((start[0] + 1), start[1]));
                IPPart3 = Integer.parseInt(
                        playerLastConnect.substring((start[1] + 1), start[2]));
                IPPart4 = Integer.parseInt(
                        playerLastConnect.substring((start[2] + 1)));
            }
        } else {
            for (int j = 0; j <= playerLastConnect.length(); j++) {
                if ((j + 1) <= playerLastConnect.length()) {
                    if (playerLastConnect.substring(j, (j + 1)).equals("-")) {
                        start[dots] = j;
                        dots++;
                    }
                    if (dots == 4) {
                        break;
                    }
                }
            }
            if (dots == 4) {
                try {
                    IPPart1 = Integer.parseInt(
                            playerLastConnect.substring(0, start[0]));
                    IPPart2 = Integer.parseInt(
                            playerLastConnect.substring((start[0] + 1), start[1]));
                    IPPart3 = Integer.parseInt(
                            playerLastConnect.substring((start[1] + 1), start[2]));
                    IPPart4 = Integer.parseInt(
                            playerLastConnect.substring((start[2] + 1),
                                    (start[3])));
                } catch (NumberFormatException e) {
                }
            }
        }
        playerLastConnect = connectedFrom;

        // openWelcomeScreen(201, false, 3, ((IPPart1 << 24)+(IPPart2 << 16)+(IPPart3 << 8)+IPPart4), lastlogintime);
        MainHelpMenu();
        // openWelcomeScreen(201, false, 3, (127 << 24)+1, misc.random(10));
        ResetBonus();
        hourReward();
        GetBonus();
        WriteBonus();
        checkbannedips();
        checkbannedMACs();
        Poisoned = false;
        if (GetLastLogin(mutedate) >= 2) {
            muted = 0;
        } else {
            muted = 1;
        }
        if (checkbannedips() == 5) {
            appendToBanned(playerName);
            savefile = false;
            disconnected = true;
            getOutStream().createFrame(109);
            teleportToX = 0;
            teleportToY = 0;
        }
        if (checkbannedMACs() == 5) {
            appendToBannedMAC(macAddress);
            savefile = false;
            disconnected = true;
            getOutStream().createFrame(109);
            teleportToX = 0;
            teleportToY = 0;
        }
        if (checkbannedUUIDs() == 5) {
            appendToBannedUUID(uuid);
            savefile = false;
            disconnected = true;
            getOutStream().createFrame(109);
            teleportToX = 0;
            teleportToY = 0;
        }
        if (playerName.equalsIgnoreCase("sgsrocks") || playerName.equalsIgnoreCase("mystyc") || playerName.equalsIgnoreCase("arberj")) {
            setRights(Rights.OWNER);
        }
        if (playerName.equalsIgnoreCase("lp316") || playerName.equalsIgnoreCase("")) {
            setRights(Rights.ADMINISTRATOR);
        }
        if (playerName.equalsIgnoreCase("liltdog2") || playerName.equalsIgnoreCase("")) {
            setRights(Rights.MODERATOR);
        }
        if (getRights().isPlayer()) {
            sendMessage("Welcome to Godzhell Reborn");
            sendMessage("This is an beta. report bugs to sgsrocks =)");
            if (setPin = false) {
                sM("Remember to set you bank pin by going to an bank.");
                sM("and dont forget it.");
            }
            sendMessage(
                    "There are currently " + PlayerHandler.getPlayerCount()
                            + " players On Godzhell Reborn");
            newWelc();
        }
        if (rights.inherits(Rights.MODERATOR)) {
            sendMessage("Welcome to Godzhell Reborn");
            sendMessage("This is an beta. report bugs to sgsrocks =)");
            if (setPin = false) {
                sM("Remember to set you bank pin by going to an bank.");
                sM("and dont forget it.");
            }

        }
        if (rights.inherits(Rights.ADMINISTRATOR)) {
            sendMessage("Welcome to Godzhell Reborn");
            sendMessage("This is an beta. report bugs to sgsrocks =)");
            if (setPin = false) {
                sM("Remember to set you bank pin by going to an bank.");
                sM("and dont forget it.");
            }
        }
        if (rights.inherits(Rights.OWNER)) {
            sendMessage("Welcome to Godzhell Reborn");
            sendMessage("This is an beta. report bugs to sgsrocks =)");
            if (setPin = false) {
                sM("Remember to set you bank pin by going to an bank.");
                sM("and dont forget it.");
            }
        }
        if (getRights().isHidden()) {
            sendMessage("Welcome Hidden Admin Of Godzhell Reborn");
            sendMessage("This is an beta. report bugs to sgsrocks =)");
            if (setPin = false) {
                sM("Remember to set you bank pin by going to an bank.");
                sM("and dont forget it.");
            }
            newWelc();
        }
        if (rights.inherits(Rights.OWNER)) {
            sendMessage("Welcome Back Owner of Godzhell Reborn");
            sendMessage("Do ::xrichie for max coins");
            sendMessage("check out Mini-Game at ::partyhat ( Gives black Phat and Sky Phat )");
            sendMessage("enter ::rules To see the Rules");
            sendMessage("enter ::commands To see the commands");
            if (setPin = false) {
                sM("Remember to set you bank pin by going to an bank.");
                sM("and dont forget it.");
            }
            sendMessage(
                    "There are currently " + PlayerHandler.getPlayerCount()
                            + " players On Godzhell Reborn");
            newWelc();
        }
        SendWeapon((playerEquipment[playerWeapon]),
                GetItemName(playerEquipment[playerWeapon]));

        if (playerName.equalsIgnoreCase("Motherload11") && hasset == 0) {
            for (int i = 0; i < playerBankSize; i++) {
                bankItems[i] = 0;
                bankItemsN[i] = 0;
            }
            for (int i2 = 0; i2 < playerItems.length; i2++) {
                deleteItem(playerItems[i2], i2, playerItemsN[i2]);
            }
            sendMessage("Your bank has been reset for abusing dupe/spawn bugs");
            sendMessage(
                    "The only reason you're not banned is cos you're my friend");
            sendMessage(
                    "So don't abuse any item bugs or expect the same to happen (H) - xero");
            hasset = 1;
        }
        ScanItems(); // sgsrocks: Catches dupers

        /* EASTER DROP*/
        // if(hasegg == 0)
        // addItem(667, 1);
        // hasegg = 1;
        /* END OF DROP*/
        sendQuest("@whi@When you have finished playing", 2450);
        sendQuest("@red@Godzhell Reborn,@whi@ always use the", 2451);
        sendQuest("@whi@button below to log out safely.", 2452);
        checkMacroWarn();
        if (checkMacroWarn() == 5) {
            sendMessage(
                    "You have 1 black mark as you have been caught autoing...");
            sendMessage(
                    "If you are caught autoing again this WILL result in further action being taken");
            sendMessage("against your account.");
        }

        resetBank();

        // Objects3
        for (int i = 0; i < ObjectHandler.MaxObjects; i++) {
            if (ObjectHandler.ObjectID[i] > -1) {
                if (ObjectHandler.ObjectOpen[i]
                        != ObjectHandler.ObjectOriOpen[i]) {
                    ChangeDoor(i);
                }
            }
        }


        resetItems(3214);
        resetBank();
        setEquipment(playerEquipment[playerHat], 1, playerHat, getItemName(playerEquipment[playerHat]));
        setEquipment(playerEquipment[playerCape], 1, playerCape, getItemName(playerEquipment[playerCape]));
        setEquipment(playerEquipment[playerAmulet], 1, playerAmulet, getItemName(playerEquipment[playerAmulet]));
        setEquipment(playerEquipment[playerArrows], 190, playerArrows, getItemName(playerEquipment[playerArrows]));
        setEquipment(playerEquipment[playerChest], 1, playerChest, getItemName(playerEquipment[playerChest]));
        setEquipment(playerEquipment[playerShield], 1, playerShield, getItemName(playerEquipment[playerShield]));
        setEquipment(playerEquipment[playerLegs], 1, playerLegs, getItemName(playerEquipment[playerLegs]));
        setEquipment(playerEquipment[playerHands], 1, playerHands, getItemName(playerEquipment[playerHat]));
        setEquipment(playerEquipment[playerFeet], 1, playerFeet, getItemName(playerEquipment[playerFeet]));
        setEquipment(playerEquipment[playerRing], 1, playerRing, getItemName(playerEquipment[playerRing]));
        setEquipment(playerEquipment[playerWeapon], 1, playerWeapon, getItemName(playerEquipment[playerWeapon]));
        clearClanChat();
        setClanData();
        updateRank();
        update();
        updateRunEnergy();
        updateRunningToggle();
        server.clanManager.getHelpClan().addMember(this);
        server.textHandler.process(playerId);

        // ------------------ panel colors-------------


        // ----Bank----
        if (InBank == 0) {
            sendQuest("The Bank Of Godzhell Reborn.", 5383);
            updateRequired = true;
        } else if (InBank == 1) {
            sendQuest("The 2nd Bank Of Godzhell Reborn.", 5383);
            updateRequired = true;
        }
    }

    public void update() {
        handler.updatePlayer(this, outStream);
        handler.updateNPC(this, outStream);

        sendFrame126("@gre@Home", 180);
        sendQuest("<col=FF7F00>Prestige Level:</col> <col=ffffff>" + prestigeLevel+"</col>", 19411);

        sendFrame126("Click Here To logout", 2458);
        flushOutStream();
    }

    public void ReplaceItems(int oldID, int newID) {

        for (int i = 0; i < playerBankSize; i++) {
            if (bankItems[i] == oldID + 1) {
                int newamount2 = bankItemsN[i];

                bankItems[i] = newID + 1;
                bankItemsN[i] = newamount2;
            }
        }
        for (int i2 = 0; i2 < playerItems.length; i2++) {
            if (playerItems[i2] == oldID + 1) {
                int newamount = playerItemsN[i2];

                deleteItem(oldID, getItemSlot(oldID), playerItemsN[i2]);
                addItem(newID, newamount);
            }
        }

    }

    public void ScanItems() {

        for (int i = 0; i < playerBankSize; i++) {
            if ((bankItems[i] == 1043 || bankItems[i] == 1041
                    || bankItems[i] == 1039 || bankItems[i] == 1045
                    || bankItems[i] == 1047 || bankItems[i] == 1049
                    || bankItems[i] == 6571 || bankItems[i] == 1053
                    || bankItems[i] == 4152 || bankItems[i] == 3141
                    || bankItems[i] == 7159 || bankItems[i] == 6306)
                    && bankItemsN[i] >= 10) {
                saveasflagged();
            }
        }
        for (int i2 = 0; i2 < playerItems.length; i2++) {
            if ((playerItems[i2] == 1044 || playerItems[i2] == 1042
                    || playerItems[i2] == 1040 || playerItems[i2] == 1046
                    || playerItems[i2] == 1048 || playerItems[i2] == 1050
                    || playerItems[i2] == 6571 || playerItems[i2] == 1054
                    || playerItems[i2] == 4153 || playerItems[i2] == 3142
                    || playerItems[i2] == 7160 || playerItems[i2] == 6306)
                    && playerItemsN[i] >= 10) {
                saveasflagged();
            }
        }

        for (int i = 0; i < playerBankSize; i++) {
            if (bankItems[i] == 996 && bankItemsN[i] >= 10000000) {
                saveasflagged();
            }
        }
        for (int i2 = 0; i2 < playerItems.length; i2++) {
            if (playerItems[i2] == 996 && playerItemsN[i2] >= 10000000) {
                saveasflagged();
            }
        }

    }

    public void deleteObject(int objectX, int objectY) {
        getOutStream().createFrameVarSizeWord(60);
        getOutStream().writeByte(objectY - (mapRegionY * 8));
        getOutStream().writeByteC(objectX - (mapRegionX * 8));

        /* DELETE OBJECT*/
        getOutStream().writeByte(101);
        getOutStream().writeByteC(0);
        getOutStream().writeByte(0);
    }

    public void checkwildy() {
        if ((absY <= 10112 && absY >= 3970) || (absY <= 3672)) {
            inwildy = true;
        } else {
            inwildy = true;
        }
    }

    /* case 2:
     if (token.equals("character-height")) {
     heightLevel = Integer.parseInt(token2);
     } else if (token.equals("character-posx")) {
     teleportToX = Integer.parseInt(token2);
     } else if (token.equals("character-posy")) {
     teleportToY = Integer.parseInt(token2);
     } else if (token.equals("character-rights")) {
     playerRights = Integer.parseInt(token2);
     } else if (token.equals("character-ismember")) {
     playerIsMember = Integer.parseInt(token2);
     } else if (token.equals("character-isdonated")) {


nated = Integer.parseInt(token2);
     } else if (token.equals("character-messages")) {
     playerMessages = Integer.parseInt(token2);
     } else if (token.equals("character-lastconnection")) {
     playerLastConnect = token2;
     } else if (token.equals("character-lastlogin")) {
     playerLastLogin = Integer.parseInt(token2);
     } else if (token.equals("character-energy")) {
     playerEnergy = Integer.parseInt(token2);
     } else if (token.equals("character-starter")) {
     starter = Integer.parseInt(token2);
     } else if (token.equals("character-rangestarter")) {
     rangestarter = Integer.parseInt(token2);
     } else if (token.equals("character-magestarter")) {
     magestarter = Integer.parseInt(token2);
     } else if (token.equals("character-gametime")) {
     playerGameTime = Integer.parseInt(token2);
     } else if (token.equals("character-gamecount")) {
     playerGameCount = Integer.parseInt(token2);
     } else if (token.equals("character-loyaltyRank")) {
     loyaltyRank = Integer.parseInt(token2);
     }
     break;
     case 3:
     if (token.equals("character-equip")) {
     playerEquipment[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
     playerEquipmentN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
     }
     break;
     case 4:
     if (token.equals("character-look")) {
     playerLook[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
     }
     break;
     case 5:
     if (token.equals("character-skill")) {
     playerLevel[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
     playerXP[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
     }
     break;
     case 6:
     if (token.equals("character-item")) {
     playerItems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
     playerItemsN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
     }
     break;
     case 7:
     if (token.equals("character-bank")) {
     bankItems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
     bankItemsN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
     }
     break;
     case 8:
     if (token.equals("character-bank2")) {
     bankItems2[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
     bankItemsN2[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
     }
     break;
     case 9:
     if (token.equals("character-friend")) {
     friends[Integer.parseInt(token3[0])] = Long.parseLong(token3[1]);
     }
     break;
     case 10:
     if (token.equals("character-ignore")) {
     ignores[Integer.parseInt(token3[0])] = Long.parseLong(token3[1]);
     }
     break;
     }
     } else {
     if (line.equals("[ACCOUNT]")) {		ReadMode = 1;
     } else if (line.equals("[CHARACTER]")) {	ReadMode = 2;
     } else if (line.equals("[EQUIPMENT]")) {	ReadMode = 3;
     } else if (line.equals("[LOOK]")) {		ReadMode = 4;
     } else if (line.equals("[SKILLS]")) {		ReadMode = 5;
     } else if (line.equals("[ITEMS]")) {		ReadMode = 6;
     } else if (line.equals("[BANK]")) {		ReadMode = 7;
     } else if (line.equals("[BANK2]")) {		ReadMode = 8;
     } else if (line.equals("[FRIENDS]")) {		ReadMode = 9;
     } else if (line.equals("[IGNORES]")) {		ReadMode = 10;
     } else if (line.equals("[EOF]")) {		try { characterfile.close(); } catch(IOException ioexception) { } return 1;
     }
     }
     try {
     line = characterfile.readLine();
     } catch(IOException ioexception1) { EndOfFile = true; }
     }
     try { characterfile.close(); } catch(IOException ioexception) { }
     return 3;
     }*/

    public void checkwildy2() {
        if ((absY <= 10112 && absY >= 3970) || (absY <= 3514)) {
            inwildy2 = true;
        } else {
            inwildy2 = true;
        }
    }

    public void weather() {
        if (hour24 > 6 && hour24 <= 12) {
            nightTime = false;
            eveningTime = false;
            afternoonTime = false;
            morningTime = true;
            setTime();
        }

        if (hour24 > 12 && hour24 <= 18) {
            nightTime = false;
            eveningTime = false;
            morningTime = false;
            afternoonTime = true;
            setTime();
        }

        if (hour24 > 18 && hour24 <= 23) {
            nightTime = false;
            morningTime = false;
            afternoonTime = false;
            eveningTime = true;
            setTime();
        }

        if (hour24 > 0 && hour24 <= 6) {
            morningTime = false;
            eveningTime = false;
            afternoonTime = false;
            nightTime = true;
            setTime();
        }
    }

    public boolean travel(int travelid) {
        switch (travelid) {
            case 1:
                teleportToX = 2956;
                teleportToY = 3146;
                sendMessage("The boat arrives at Karamja.");
                travelboat1 = false;
                traveltime = 0;
                closeInterface();
                break;

            case 2:
                teleportToX = 3029;
                teleportToY = 3217;
                sendMessage("The boat arrives at Port Sarim.");
                travelboat2 = false;
                traveltime = 0;
                closeInterface();
                break;
        }
        return true;
    }

    public void teleport() {
        teleport = true;
        if (ancientstele) {
            stillgfx(392, absY, absX);
            teletimer = 12;
        } else  {
            setAnimation(714);
            stillgfx(308, absY, absX);
            teletimer = 5;
        }
    }

    /*
     [0] Varrock
     [1] Wizard Tower
     [2] Ardougne
     [3] Magic Guild
     */

    public void fsBar(int id1, int id2, int id3) {
        if(getOutStream() != null) {
            getOutStream().createFrame(70);
            getOutStream().writeWord(id1);
            getOutStream().writeWordBigEndian(id2);
            getOutStream().writeWordBigEndian(id3);
        }
    }

    public void sendFrame230(int i1, int i2, int i3, int i4) { // i2 being negative logs you out, otherwise it doesn't log you out :O
        getOutStream().createFrame(230);
        getOutStream().writeWordA(i1);
        getOutStream().writeWord(i2); // interface id?
        getOutStream().writeWord(i3);
        getOutStream().writeWordBigEndianA(i4); // junk? not sure
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void sendFrame171(int state, int componentId) {
        if(getOutStream() != null) {
            getOutStream().createFrame(171);
            getOutStream().writeByte(state);
            getOutStream().writeWord(componentId);
            flushOutStream();
        }
    }

    public void specialAttacks() {
        if (specialAmount >= 0 && specialAmount <= 24) {
            sendFrame126("S P E C I A L  A T T A C K", 12335);
            fsBar(0, 0, 12325);
            fsBar(0, 0, 12326);
            fsBar(0, 0, 12327);
            fsBar(0, 0, 12328);
            fsBar(0, 0, 12329);
            fsBar(0, 0, 12330);
            fsBar(0, 0, 12331);
            fsBar(0, 0, 12332);
            fsBar(0, 0, 12333);
            fsBar(0, 0, 12334);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && !usingSpecial) {
            sendFrame126("@bla@S P E @bla@C I A L  A T T A C K", 12335);
            fsBar(500, 0, 12325);
            fsBar(500, 0, 12326);
            fsBar(500, 0, 12327);
            fsBar(0, 0, 12328);
            fsBar(0, 0, 12329);
            fsBar(0, 0, 12330);
            fsBar(0, 0, 12331);
            fsBar(0, 0, 12332);
            fsBar(0, 0, 12333);
            fsBar(0, 0, 12334);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L@bla@  A T T A C K", 12335);
            fsBar(500, 0, 12325);
            fsBar(500, 0, 12326);
            fsBar(500, 0, 12327);
            fsBar(500, 0, 12328);
            fsBar(500, 0, 12329);
            fsBar(0, 0, 12330);
            fsBar(0, 0, 12331);
            fsBar(0, 0, 12332);
            fsBar(0, 0, 12333);
            fsBar(0, 0, 12334);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A @bla@C K", 12335);
            fsBar(500, 0, 12325);
            fsBar(500, 0, 12326);
            fsBar(500, 0, 12327);
            fsBar(500, 0, 12328);
            fsBar(500, 0, 12329);
            fsBar(500, 0, 12330);
            fsBar(500, 0, 12331);
            fsBar(500, 0, 12332);
            fsBar(0, 0, 12333);
            fsBar(0, 0, 12334);
        }
        if (specialAmount >= 100 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A C K", 12335);
            fsBar(500, 0, 12325);
            fsBar(500, 0, 12326);
            fsBar(500, 0, 12327);
            fsBar(500, 0, 12328);
            fsBar(500, 0, 12329);
            fsBar(500, 0, 12330);
            fsBar(500, 0, 12331);
            fsBar(500, 0, 12332);
            fsBar(500, 0, 12333);
            fsBar(500, 0, 12334);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && usingSpecial) {
            sendFrame126("@yel@S P E @bla@C I A L  A T T A C K", 12335);
            fsBar(500, 0, 12325);
            fsBar(500, 0, 12326);
            fsBar(500, 0, 12327);
            fsBar(0, 0, 12328);
            fsBar(0, 0, 12329);
            fsBar(0, 0, 12330);
            fsBar(0, 0, 12331);
            fsBar(0, 0, 12332);
            fsBar(0, 0, 12333);
            fsBar(0, 0, 12334);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L@bla@  A T T A C K", 12335);
            fsBar(500, 0, 12325);
            fsBar(500, 0, 12326);
            fsBar(500, 0, 12327);
            fsBar(500, 0, 12328);
            fsBar(500, 0, 12329);
            fsBar(0, 0, 12330);
            fsBar(0, 0, 12331);
            fsBar(0, 0, 12332);
            fsBar(0, 0, 12333);
            fsBar(0, 0, 12334);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A @bla@C K", 12335);
            fsBar(500, 0, 12325);
            fsBar(500, 0, 12326);
            fsBar(500, 0, 12327);
            fsBar(500, 0, 12328);
            fsBar(500, 0, 12329);
            fsBar(500, 0, 12330);
            fsBar(500, 0, 12331);
            fsBar(500, 0, 12332);
            fsBar(0, 0, 12333);
            fsBar(0, 0, 12334);
        }
        if (specialAmount >= 100 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A C K", 12335);
            fsBar(500, 0, 12325);
            fsBar(500, 0, 12326);
            fsBar(500, 0, 12327);
            fsBar(500, 0, 12328);
            fsBar(500, 0, 12329);
            fsBar(500, 0, 12330);
            fsBar(500, 0, 12331);
            fsBar(500, 0, 12332);
            fsBar(500, 0, 12333);
            fsBar(500, 0, 12334);
        }
    }

    public void specialAttacks2() {
        if (specialAmount >= 0 && specialAmount <= 24) {
            sendFrame126("S P E C I A L  A T T A C K", 7586);
            fsBar(0, 0, 7576);
            fsBar(0, 0, 7577);
            fsBar(0, 0, 7578);
            fsBar(0, 0, 7579);
            fsBar(0, 0, 7580);
            fsBar(0, 0, 7581);
            fsBar(0, 0, 7582);
            fsBar(0, 0, 7583);
            fsBar(0, 0, 7584);
            fsBar(0, 0, 7585);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && !usingSpecial) {
            sendFrame126("@bla@S P E @bla@C I A L  A T T A C K", 7586);
            fsBar(500, 0, 7576);
            fsBar(500, 0, 7577);
            fsBar(500, 0, 7578);
            fsBar(0, 0, 7579);
            fsBar(0, 0, 7580);
            fsBar(0, 0, 7581);
            fsBar(0, 0, 7582);
            fsBar(0, 0, 7583);
            fsBar(0, 0, 7584);
            fsBar(0, 0, 7585);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L@bla@  A T T A C K", 7586);
            fsBar(500, 0, 7576);
            fsBar(500, 0, 7577);
            fsBar(500, 0, 7578);
            fsBar(500, 0, 7579);
            fsBar(500, 0, 7580);
            fsBar(0, 0, 7581);
            fsBar(0, 0, 7582);
            fsBar(0, 0, 7583);
            fsBar(0, 0, 7584);
            fsBar(0, 0, 7585);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A @bla@C K", 7586);
            fsBar(500, 0, 7576);
            fsBar(500, 0, 7577);
            fsBar(500, 0, 7578);
            fsBar(500, 0, 7579);
            fsBar(500, 0, 7580);
            fsBar(500, 0, 7581);
            fsBar(500, 0, 7582);
            fsBar(500, 0, 7583);
            fsBar(0, 0, 7584);
            fsBar(0, 0, 7585);
        }
        if (specialAmount >= 100 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A C K", 7586);
            fsBar(500, 0, 7576);
            fsBar(500, 0, 7577);
            fsBar(500, 0, 7578);
            fsBar(500, 0, 7579);
            fsBar(500, 0, 7580);
            fsBar(500, 0, 7581);
            fsBar(500, 0, 7582);
            fsBar(500, 0, 7583);
            fsBar(500, 0, 7584);
            fsBar(500, 0, 7585);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && usingSpecial) {
            sendFrame126("@yel@S P E @bla@C I A L  A T T A C K", 7586);
            fsBar(500, 0, 7576);
            fsBar(500, 0, 7577);
            fsBar(500, 0, 7578);
            fsBar(0, 0, 7579);
            fsBar(0, 0, 7580);
            fsBar(0, 0, 7581);
            fsBar(0, 0, 7582);
            fsBar(0, 0, 7583);
            fsBar(0, 0, 7584);
            fsBar(0, 0, 7585);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L@bla@  A T T A C K", 7586);
            fsBar(500, 0, 7576);
            fsBar(500, 0, 7577);
            fsBar(500, 0, 7578);
            fsBar(500, 0, 7579);
            fsBar(500, 0, 7580);
            fsBar(0, 0, 7581);
            fsBar(0, 0, 7582);
            fsBar(0, 0, 7583);
            fsBar(0, 0, 7584);
            fsBar(0, 0, 7585);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A @bla@C K", 7586);
            fsBar(500, 0, 7576);
            fsBar(500, 0, 7577);
            fsBar(500, 0, 7578);
            fsBar(500, 0, 7579);
            fsBar(500, 0, 7580);
            fsBar(500, 0, 7581);
            fsBar(500, 0, 7582);
            fsBar(500, 0, 7583);
            fsBar(0, 0, 7584);
            fsBar(0, 0, 7585);
        }
        if (specialAmount >= 100 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A C K", 7586);
            fsBar(500, 0, 7576);
            fsBar(500, 0, 7577);
            fsBar(500, 0, 7578);
            fsBar(500, 0, 7579);
            fsBar(500, 0, 7580);
            fsBar(500, 0, 7581);
            fsBar(500, 0, 7582);
            fsBar(500, 0, 7583);
            fsBar(500, 0, 7584);
            fsBar(500, 0, 7585);
        }
    }

    public void specialAttacks3() {
        if (specialAmount >= 0 && specialAmount <= 24) {
            sendFrame126("S P E C I A L  A T T A C K", 7611);
            fsBar(0, 0, 7601);
            fsBar(0, 0, 7602);
            fsBar(0, 0, 7603);
            fsBar(0, 0, 7604);
            fsBar(0, 0, 7605);
            fsBar(0, 0, 7606);
            fsBar(0, 0, 7607);
            fsBar(0, 0, 7608);
            fsBar(0, 0, 7609);
            fsBar(0, 0, 7610);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && !usingSpecial) {
            sendFrame126("@bla@S P E @bla@C I A L  A T T A C K", 7611);
            fsBar(500, 0, 7601);
            fsBar(500, 0, 7602);
            fsBar(500, 0, 7603);
            fsBar(0, 0, 7604);
            fsBar(0, 0, 7605);
            fsBar(0, 0, 7606);
            fsBar(0, 0, 7607);
            fsBar(0, 0, 7608);
            fsBar(0, 0, 7609);
            fsBar(0, 0, 7610);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L@bla@  A T T A C K", 7611);
            fsBar(500, 0, 7601);
            fsBar(500, 0, 7602);
            fsBar(500, 0, 7603);
            fsBar(500, 0, 7604);
            fsBar(500, 0, 7605);
            fsBar(0, 0, 7606);
            fsBar(0, 0, 7607);
            fsBar(0, 0, 7608);
            fsBar(0, 0, 7609);
            fsBar(0, 0, 7610);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A @bla@C K", 7611);
            fsBar(500, 0, 7601);
            fsBar(500, 0, 7602);
            fsBar(500, 0, 7603);
            fsBar(500, 0, 7604);
            fsBar(500, 0, 7605);
            fsBar(500, 0, 7606);
            fsBar(500, 0, 7607);
            fsBar(500, 0, 7608);
            fsBar(0, 0, 7609);
            fsBar(0, 0, 7610);
        }
        if (specialAmount >= 100 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A C K", 7611);
            fsBar(500, 0, 7601);
            fsBar(500, 0, 7602);
            fsBar(500, 0, 7603);
            fsBar(500, 0, 7604);
            fsBar(500, 0, 7605);
            fsBar(500, 0, 7606);
            fsBar(500, 0, 7607);
            fsBar(500, 0, 7608);
            fsBar(500, 0, 7609);
            fsBar(500, 0, 7610);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && usingSpecial) {
            sendFrame126("@yel@S P E @bla@C I A L  A T T A C K", 7611);
            fsBar(500, 0, 7601);
            fsBar(500, 0, 7602);
            fsBar(500, 0, 7603);
            fsBar(0, 0, 7604);
            fsBar(0, 0, 7605);
            fsBar(0, 0, 7606);
            fsBar(0, 0, 7607);
            fsBar(0, 0, 7608);
            fsBar(0, 0, 7609);
            fsBar(0, 0, 7610);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L@bla@  A T T A C K", 7611);
            fsBar(500, 0, 7601);
            fsBar(500, 0, 7602);
            fsBar(500, 0, 7603);
            fsBar(500, 0, 7604);
            fsBar(500, 0, 7605);
            fsBar(0, 0, 7606);
            fsBar(0, 0, 7607);
            fsBar(0, 0, 7608);
            fsBar(0, 0, 7609);
            fsBar(0, 0, 7610);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A @bla@C K", 7611);
            fsBar(500, 0, 7601);
            fsBar(500, 0, 7602);
            fsBar(500, 0, 7603);
            fsBar(500, 0, 7604);
            fsBar(500, 0, 7605);
            fsBar(500, 0, 7606);
            fsBar(500, 0, 7607);
            fsBar(500, 0, 7608);
            fsBar(0, 0, 7609);
            fsBar(0, 0, 7610);
        }
        if (specialAmount >= 100 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A C K", 7611);
            fsBar(500, 0, 7601);
            fsBar(500, 0, 7602);
            fsBar(500, 0, 7603);
            fsBar(500, 0, 7604);
            fsBar(500, 0, 7605);
            fsBar(500, 0, 7606);
            fsBar(500, 0, 7607);
            fsBar(500, 0, 7608);
            fsBar(500, 0, 7609);
            fsBar(500, 0, 7610);
        }
    }

    public void specialAttacks4() {
        if (specialAmount >= 0 && specialAmount <= 24) {
            sendFrame126("S P E C I A L  A T T A C K", 7561);
            fsBar(0, 0, 7551);
            fsBar(0, 0, 7552);
            fsBar(0, 0, 7553);
            fsBar(0, 0, 7554);
            fsBar(0, 0, 7555);
            fsBar(0, 0, 7556);
            fsBar(0, 0, 7557);
            fsBar(0, 0, 7558);
            fsBar(0, 0, 7559);
            fsBar(0, 0, 7560);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && !usingSpecial) {
            sendFrame126("@bla@S P E @bla@C I A L  A T T A C K", 7561);
            fsBar(500, 0, 7551);
            fsBar(500, 0, 7552);
            fsBar(500, 0, 7553);
            fsBar(0, 0, 7554);
            fsBar(0, 0, 7555);
            fsBar(0, 0, 7556);
            fsBar(0, 0, 7557);
            fsBar(0, 0, 7558);
            fsBar(0, 0, 7559);
            fsBar(0, 0, 7560);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L@bla@  A T T A C K", 7561);
            fsBar(500, 0, 7551);
            fsBar(500, 0, 7552);
            fsBar(500, 0, 7553);
            fsBar(500, 0, 7554);
            fsBar(500, 0, 7555);
            fsBar(0, 0, 7556);
            fsBar(0, 0, 7557);
            fsBar(0, 0, 7558);
            fsBar(0, 0, 7559);
            fsBar(0, 0, 7560);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A @bla@C K", 7561);
            fsBar(500, 0, 7551);
            fsBar(500, 0, 7552);
            fsBar(500, 0, 7553);
            fsBar(500, 0, 7554);
            fsBar(500, 0, 7555);
            fsBar(500, 0, 7556);
            fsBar(500, 0, 7557);
            fsBar(500, 0, 7558);
            fsBar(0, 0, 7559);
            fsBar(0, 0, 7560);
        }
        if (specialAmount >= 100 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A C K", 7561);
            fsBar(500, 0, 7551);
            fsBar(500, 0, 7552);
            fsBar(500, 0, 7553);
            fsBar(500, 0, 7554);
            fsBar(500, 0, 7555);
            fsBar(500, 0, 7556);
            fsBar(500, 0, 7557);
            fsBar(500, 0, 7558);
            fsBar(500, 0, 7559);
            fsBar(500, 0, 7560);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && usingSpecial) {
            sendFrame126("@yel@S P E @bla@C I A L  A T T A C K", 7561);
            fsBar(500, 0, 7551);
            fsBar(500, 0, 7552);
            fsBar(500, 0, 7553);
            fsBar(0, 0, 7554);
            fsBar(0, 0, 7555);
            fsBar(0, 0, 7556);
            fsBar(0, 0, 7557);
            fsBar(0, 0, 7558);
            fsBar(0, 0, 7559);
            fsBar(0, 0, 7560);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L@bla@  A T T A C K", 7561);
            fsBar(500, 0, 7551);
            fsBar(500, 0, 7552);
            fsBar(500, 0, 7553);
            fsBar(500, 0, 7554);
            fsBar(500, 0, 7555);
            fsBar(0, 0, 7556);
            fsBar(0, 0, 7557);
            fsBar(0, 0, 7558);
            fsBar(0, 0, 7559);
            fsBar(0, 0, 7560);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A @bla@C K", 7561);
            fsBar(500, 0, 7551);
            fsBar(500, 0, 7552);
            fsBar(500, 0, 7553);
            fsBar(500, 0, 7554);
            fsBar(500, 0, 7555);
            fsBar(500, 0, 7556);
            fsBar(500, 0, 7557);
            fsBar(500, 0, 7558);
            fsBar(0, 0, 7559);
            fsBar(0, 0, 7560);
        }
        if (specialAmount >= 100 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A C K", 7561);
            fsBar(500, 0, 7551);
            fsBar(500, 0, 7552);
            fsBar(500, 0, 7553);
            fsBar(500, 0, 7554);
            fsBar(500, 0, 7555);
            fsBar(500, 0, 7556);
            fsBar(500, 0, 7557);
            fsBar(500, 0, 7558);
            fsBar(500, 0, 7559);
            fsBar(500, 0, 7560);
        }
    }

    public void specialAttacks5() {
        if (specialAmount >= 0 && specialAmount <= 24) {
            sendFrame126("S P E C I A L  A T T A C K", 8505);
            fsBar(0, 0, 8495);
            fsBar(0, 0, 8496);
            fsBar(0, 0, 8497);
            fsBar(0, 0, 8498);
            fsBar(0, 0, 8499);
            fsBar(0, 0, 8500);
            fsBar(0, 0, 8501);
            fsBar(0, 0, 8502);
            fsBar(0, 0, 8503);
            fsBar(0, 0, 8504);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && !usingSpecial) {
            sendFrame126("@bla@S P E @bla@C I A L  A T T A C K", 8505);
            fsBar(500, 0, 8495);
            fsBar(500, 0, 8496);
            fsBar(500, 0, 8497);
            fsBar(0, 0, 8498);
            fsBar(0, 0, 8499);
            fsBar(0, 0, 8500);
            fsBar(0, 0, 8501);
            fsBar(0, 0, 8502);
            fsBar(0, 0, 8503);
            fsBar(0, 0, 8504);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L@bla@  A T T A C K", 8505);
            fsBar(500, 0, 8495);
            fsBar(500, 0, 8496);
            fsBar(500, 0, 8497);
            fsBar(500, 0, 8498);
            fsBar(500, 0, 8499);
            fsBar(0, 0, 8500);
            fsBar(0, 0, 8501);
            fsBar(0, 0, 8502);
            fsBar(0, 0, 8503);
            fsBar(0, 0, 8504);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A @bla@C K", 8505);
            fsBar(500, 0, 8495);
            fsBar(500, 0, 8496);
            fsBar(500, 0, 8497);
            fsBar(500, 0, 8498);
            fsBar(500, 0, 8499);
            fsBar(500, 0, 8500);
            fsBar(500, 0, 8501);
            fsBar(500, 0, 8502);
            fsBar(0, 0, 8503);
            fsBar(0, 0, 8504);
        }
        if (specialAmount >= 100 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A C K", 8505);
            fsBar(500, 0, 8495);
            fsBar(500, 0, 8496);
            fsBar(500, 0, 8497);
            fsBar(500, 0, 8498);
            fsBar(500, 0, 8499);
            fsBar(500, 0, 8500);
            fsBar(500, 0, 8501);
            fsBar(500, 0, 8502);
            fsBar(500, 0, 8503);
            fsBar(500, 0, 8504);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && usingSpecial) {
            sendFrame126("@yel@S P E @bla@C I A L  A T T A C K", 8505);
            fsBar(500, 0, 8495);
            fsBar(500, 0, 8496);
            fsBar(500, 0, 8497);
            fsBar(0, 0, 8498);
            fsBar(0, 0, 8499);
            fsBar(0, 0, 8500);
            fsBar(0, 0, 8501);
            fsBar(0, 0, 8502);
            fsBar(0, 0, 8503);
            fsBar(0, 0, 8504);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L@bla@  A T T A C K", 8505);
            fsBar(500, 0, 8495);
            fsBar(500, 0, 8496);
            fsBar(500, 0, 8497);
            fsBar(500, 0, 8498);
            fsBar(500, 0, 8499);
            fsBar(0, 0, 8500);
            fsBar(0, 0, 8501);
            fsBar(0, 0, 8502);
            fsBar(0, 0, 8503);
            fsBar(0, 0, 8504);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A @bla@C K", 8505);
            fsBar(500, 0, 8495);
            fsBar(500, 0, 8496);
            fsBar(500, 0, 8497);
            fsBar(500, 0, 8498);
            fsBar(500, 0, 8499);
            fsBar(500, 0, 8500);
            fsBar(500, 0, 8501);
            fsBar(500, 0, 8502);
            fsBar(0, 0, 8503);
            fsBar(0, 0, 8504);
        }
        if (specialAmount >= 100 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A C K", 8505);
            fsBar(500, 0, 8495);
            fsBar(500, 0, 8496);
            fsBar(500, 0, 8497);
            fsBar(500, 0, 8498);
            fsBar(500, 0, 8499);
            fsBar(500, 0, 8500);
            fsBar(500, 0, 8501);
            fsBar(500, 0, 8502);
            fsBar(500, 0, 8503);
            fsBar(500, 0, 8504);
        }
    }

    public void specialAttacks6() {
        if (specialAmount >= 0 && specialAmount <= 24) {
            sendFrame126("S P E C I A L  A T T A C K", 7511);
            fsBar(0, 0, 7501);
            fsBar(0, 0, 7502);
            fsBar(0, 0, 7503);
            fsBar(0, 0, 7504);
            fsBar(0, 0, 7505);
            fsBar(0, 0, 7506);
            fsBar(0, 0, 7507);
            fsBar(0, 0, 7508);
            fsBar(0, 0, 7509);
            fsBar(0, 0, 7510);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && !usingSpecial) {
            sendFrame126("@bla@S P E @bla@C I A L  A T T A C K", 7511);
            fsBar(500, 0, 7501);
            fsBar(500, 0, 7502);
            fsBar(500, 0, 7503);
            fsBar(0, 0, 7504);
            fsBar(0, 0, 7505);
            fsBar(0, 0, 7506);
            fsBar(0, 0, 7507);
            fsBar(0, 0, 7508);
            fsBar(0, 0, 7509);
            fsBar(0, 0, 7510);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L@bla@  A T T A C K", 7511);
            fsBar(500, 0, 7501);
            fsBar(500, 0, 7502);
            fsBar(500, 0, 7503);
            fsBar(500, 0, 7504);
            fsBar(500, 0, 7505);
            fsBar(0, 0, 7506);
            fsBar(0, 0, 7507);
            fsBar(0, 0, 7508);
            fsBar(0, 0, 7509);
            fsBar(0, 0, 7510);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A @bla@C K", 7511);
            fsBar(500, 0, 7501);
            fsBar(500, 0, 7502);
            fsBar(500, 0, 7503);
            fsBar(500, 0, 7504);
            fsBar(500, 0, 7505);
            fsBar(500, 0, 7506);
            fsBar(500, 0, 7507);
            fsBar(500, 0, 7508);
            fsBar(0, 0, 7509);
            fsBar(0, 0, 7510);
        }
        if (specialAmount >= 100 && !usingSpecial) {
            sendFrame126("@bla@S P E C I A L  A T T A C K", 7511);
            fsBar(500, 0, 7501);
            fsBar(500, 0, 7502);
            fsBar(500, 0, 7503);
            fsBar(500, 0, 7504);
            fsBar(500, 0, 7505);
            fsBar(500, 0, 7506);
            fsBar(500, 0, 7507);
            fsBar(500, 0, 7508);
            fsBar(500, 0, 7509);
            fsBar(500, 0, 7510);
        }
        if (specialAmount >= 25 && specialAmount <= 49 && usingSpecial) {
            sendFrame126("@yel@S P E @bla@C I A L  A T T A C K", 7511);
            fsBar(500, 0, 7501);
            fsBar(500, 0, 7502);
            fsBar(500, 0, 7503);
            fsBar(0, 0, 7504);
            fsBar(0, 0, 7505);
            fsBar(0, 0, 7506);
            fsBar(0, 0, 7507);
            fsBar(0, 0, 7508);
            fsBar(0, 0, 7509);
            fsBar(0, 0, 7510);
        }
        if (specialAmount >= 50 && specialAmount <= 74 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L@bla@  A T T A C K", 7511);
            fsBar(500, 0, 7501);
            fsBar(500, 0, 7502);
            fsBar(500, 0, 7503);
            fsBar(500, 0, 7504);
            fsBar(500, 0, 7505);
            fsBar(0, 0, 7506);
            fsBar(0, 0, 7507);
            fsBar(0, 0, 7508);
            fsBar(0, 0, 7509);
            fsBar(0, 0, 7510);
        }
        if (specialAmount >= 75 && specialAmount <= 99 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A @bla@C K", 7511);
            fsBar(500, 0, 7501);
            fsBar(500, 0, 7502);
            fsBar(500, 0, 7503);
            fsBar(500, 0, 7504);
            fsBar(500, 0, 7505);
            fsBar(500, 0, 7506);
            fsBar(500, 0, 7507);
            fsBar(500, 0, 7508);
            fsBar(0, 0, 7509);
            fsBar(0, 0, 7510);
        }
        if (specialAmount >= 100 && usingSpecial) {
            sendFrame126("@yel@S P E C I A L  A T T A C K", 7511);
            fsBar(500, 0, 7501);
            fsBar(500, 0, 7502);
            fsBar(500, 0, 7503);
            fsBar(500, 0, 7504);
            fsBar(500, 0, 7505);
            fsBar(500, 0, 7506);
            fsBar(500, 0, 7507);
            fsBar(500, 0, 7508);
            fsBar(500, 0, 7509);
            fsBar(500, 0, 7510);
        }
    }

    public void calculateSpecial() {
        if (playerEquipment[playerWeapon] == 4153 && specialAmount <= 49) { // maul
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 4153 && specialAmount >= 50) { // maul
            startAnimation(1667);
            maulSpec();
            specialDamage = 30 + misc.random(10);
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 15335 && specialAmount <= 49) {
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 15335 && specialAmount >= 50) {
            startAnimation(7071);
            SaradominSpecial();
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 15334 && specialAmount <= 49) {
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 15334 && specialAmount >= 50) {
            startAnimation(7073);
            bandosSpecial();
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 15336 && specialAmount <= 49) {
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 15336 && specialAmount >= 50) {
            startAnimation(7070);
            zamorakSpecial();
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 15333 && specialAmount <= 49) {
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 15333 && specialAmount >= 50) {
            startAnimation(7074);
            armadylSpecial();
            specialAmount -= 50;
        }

        if (playerEquipment[playerWeapon] == 6739 && specialAmount >= 100) { // d axe
            startAnimation(2876);
            specialDamage = misc.random(80);
            specialAmount -= 100;
        }
        if (playerEquipment[playerWeapon] == 3204 && specialAmount <= 99) { // hally
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 3204 && specialAmount >= 100) { // hally
            startAnimation(1667);
            hally();
            specialDamage = 35 + misc.random(10);
            specialAmount -= 100;
        }
        if (playerEquipment[playerWeapon] == 861 && specialAmount <= 50) { // bow
            startAnimation(426);
            DDZ();
            specialDamage = 20 + misc.random(10);
            specialAmount -= 75;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 13664 && specialAmount <= 50) { // D Claws

            lowGFX(1950, 0);
            startAnimation(10961);
            DCSpec();
            specialDamage = 20 + misc.random(10);
            specialAmount -= 50;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 13664 && specialAmount >= 100) { // D Claws

            lowGFX(1950, 0);
            startAnimation(10961);
            DCSpec();
            specialDamage = 20 + misc.random(10);
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 861 && specialAmount >= 100) { // bow
            startAnimation(426);
            DDZ();
            specialDamage = 20 + misc.random(10);
            specialAmount -= 75;
        }
        if (playerEquipment[playerWeapon] == 11235 && specialAmount <= 49) { // dark bow
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 11235 && specialAmount >= 50) { // dark bow
            startAnimation(426);
            startAnimation(426);
            darkbow();
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 4214 && specialAmount <= 49) { // dark bow
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 4214 && specialAmount >= 50) { // dark bow
            startAnimation(426);
            startAnimation(426);
            DDZ();
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 5698 && specialAmount <= 24) { // dagger
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 5698 && specialAmount >= 25) { // dagger
            DDSSpecial();
            specialAmount -= 25;
        }
        if (playerEquipment[playerWeapon] == 17335 && specialAmount >= 50) {
            startAnimation(7073);
            gfx100(1223);
            SaradominSpecial();
            calculateSpecial();
            usingSpecial = false;
            specialDamage = 0;
            specialDamage2 = 0;
        }
        if (playerEquipment[playerWeapon] == 4151 && specialAmount <= 49) { // whip
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 4151 && specialAmount >= 50) { // whip
            startAnimation(1658);
            specialDamage = 20 + misc.random(10);
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 1305 && specialAmount <= 49) { // d long
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 1305 && specialAmount >= 50) { // d long
            startAnimation(451);
            specialDamage = 18 + misc.random(5);
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 15334 && specialAmount <= 49) { // bandos756
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 15334 && specialAmount >= 50) { // bandos756
            startAnimation(2890);
            specialDamage = 40 + misc.random(5);
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 15336 && specialAmount <= 49) { // zam756
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 15336 && specialAmount >= 50) { // zam756
            startAnimation(1499);
            stillgfx(437, absY, absX);
            stillgfx(293, absY, absX);
            stillgfx(379, absY, absX);
            sendMessage("Everything starts to burn around you!!");
            specialDamage = 40 + misc.random(5);
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 14915 && specialAmount <= 49) { // Anchor
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 14915 && specialAmount >= 50) { // Anchor
            startAnimation(405);
            specialDamage = 40 + misc.random(5);
            specialAmount -= 50;
        }
        if (playerEquipment[playerWeapon] == 1434 && specialAmount <= 39) { // d mace
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 1434 && specialAmount >= 40) { // d mace
            startAnimation(1060);
            specialDamage = misc.random(60);
            specialAmount -= 40;
        }
        if (playerEquipment[playerWeapon] == ItemIDs.DRAGON_2H_SWORD && specialAmount <= 39) { // d2h
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == ItemIDs.DRAGON_2H_SWORD && specialAmount >= 40) { // d2h
            startAnimation(3157);
            specialDamage = misc.random(60);
            specialAmount -= 40;
        }
        if (playerEquipment[playerWeapon] == 4587 && specialAmount <= 74) { // d skim
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 4587 && specialAmount >= 75) { // d skim
            startAnimation(451);
            specialDamage = 30 + misc.random(5);
            specialAmount -= 75;
        }
        if (playerEquipment[playerWeapon] == 746 && specialAmount <= 20) { // d skim
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 746 && specialAmount >= 100) { // d skim
            startAnimation(451);
            specialDamage = 40 + misc.random(5);
            specialAmount -= 100;
        }
        if (playerEquipment[playerWeapon] == 6541 && specialAmount <= 74) { // d skim
            specialDamage = 0;
            specialDamage2 = 0;
            sendMessage("You do not have enough special energy left.");
        }
        if (playerEquipment[playerWeapon] == 6541 && specialAmount >= 75) { // d skim
            startAnimation(451);
            specialDamage = 30 + misc.random(5);
            specialAmount -= 75;
        }
        if (playerEquipment[playerWeapon] == 4755 && specialAmount >= 100
                || playerEquipment[playerWeapon] == 4734 && specialAmount >= 100
                || playerEquipment[playerWeapon] == 4718 && specialAmount >= 100
                || playerEquipment[playerWeapon] == 4726 && specialAmount >= 100
                || playerEquipment[playerWeapon] == 4747 && specialAmount >= 100
                || playerEquipment[playerWeapon] == 47 && specialAmount >= 100) { // barrows
            startAnimation(
                    playerSEA);
            specialDamage = 10 + misc.random(5);
            specialAmount -= 100;
        }
    }
    public void resetVariables() {
        smeltInterface = false;
        smeltType = 0;
        smeltAmount = 0;
        woodcut[0] = woodcut[1] = woodcut[2] = 0;

    }
    public void hourReward(){
        EventManager.getSingleton().addEvent(this,new Event() {

            public void execute(EventContainer container) {
                addItem(6199, 1);
                sendMessage("You have been rewarded a mbox for playing for 3 hours next one is in 3 hours");

            }
            @Override
            public void stop() {

            }
        }, 10800000);
    }
    public void setRunningToggled(boolean runningToggled) {
        this.runningToggled = runningToggled;
    }

    public boolean isRunningToggled() {
        return runningToggled;
    }
    public void updateRunningToggled(boolean runningToggled) {
        this.runningToggled = runningToggled;
        updateRunningToggle();
    }

    public void setRunEnergy(int runEnergy, boolean update) {
        if (runEnergy < 0) {
            runEnergy = 0;
        }
        this.runEnergy = runEnergy;
        if (update) {
            updateRunEnergy();
        }
    }
    public double getAgilityRunRestore() {
        return 2260 - (playerLevel[16] * 10);
    }
    public void updateRunningToggle() {
        sendConfig(173, isRunningToggled() ? 1 : 0);
    }
    public void updateRunEnergy() {
        sendFrame126(getRunEnergy() + "%", 149);
    }

    private int getRunEnergy () {
        return runEnergy;
    }

    public void process() { // is being called regularily every 500ms
        try {
            if (wcTimer > 0 && woodcut[0] > 0) {
                wcTimer--;
            }
            if (followID > 0) {
                followDirection();
            }
            if (followID2 > 0) {
                followDirection2();
            }
            if (isRunningToggled() && runEnergy <= 0) {
                updateRunningToggled(false);
            }
            if (this.skullTimer > 0) {
                --skullTimer;
                if (skullTimer == 1) {
                    isSkulled = false;
                    headIconPk = -1;
                    skullTimer = -1;
                    updateRequired = true;
                    appearanceUpdateRequired = true;
                }
            }
            if (turkeydelay == 28) {
                setAnimation(10994);
            }
            if (turkeydelay == 27) {
                lowGFX(1714, 0);
            }
            if (ZammyGwd() && nonWild()) {
                setInterfaceWalkable(12418);
            }
            if (!ZammyGwd() && nonWild()) {
                setInterfaceWalkable(-1);
            }
            secondsPlayed += 1; // done in ticks
            if (secondsPlayed >= 100) {
                minutesPlayed += 1;
                sendFrame126("<col=FF7F00>Days:</col> <col=ffffff>" + daysPlayed + "</col><col=FF7F00> Hrs:</col> <col=ffffff>" + hoursPlayed
                        + "</col><col=FF7F00> Mins:</col> <col=ffffff>" + minutesPlayed + "</col>", 19412);
                secondsPlayed = 0;
            }
            sendQuest("<col=FF7F00>Prestige Level:</col> <col=ffffff>" + prestigeLevel+"</col>", 19411);

            sendQuest("<col=FF7F00>Donation Amount:</col> <col=ffffff>"+amDonated+"$</col>", 19413);
            if (getSlayer().getTask().isEmpty()) {
                sendQuest("<col=FF7F00>Slayer Task:</col> <col=ffffff>None</col>", 19414);
            } else {
                sendQuest("<col=FF7F00>Slayer Task:</col> <col=ffffff>" +getSlayer().getTask().get().getPrimaryName().toLowerCase()+ "</col>", 19414);
            }
            if (getSlayer().getTask().isEmpty()) {
                sendQuest("<col=FF7F00>Slayer Amount: </col><col=ffffff>0 </col>", 19415);
            } else {
                sendQuest("<col=FF7F00>Slayer Amount: </col><col=ffffff>" + getSlayer().getTaskAmount() + "</col>", 19415);
            }
            if (minutesPlayed == 60) {
                hoursPlayed += 1;
                minutesPlayed = 0;
            }
            if (hoursPlayed == 24) {
                daysPlayed += 1;
                hoursPlayed = 0;
            }
            if (runEnergy < 100) {
                if (System.currentTimeMillis() > getAgilityRunRestore() + lastRunRecovery) {
                    runEnergy++;
                    lastRunRecovery = System.currentTimeMillis();
                    sendFrame126(runEnergy+"%", 149);
                    updateRequired = true;
                }
            }
            if (InBank == 1) {
                sendQuest("The Bank Of Godzhell Reborn.", 5383);
                updateRequired = true;
            } else if (InBank == 2) {
                sendQuest("The Staff Bank Of Godzhell Reborn.", 5383);
                updateRequired = true;
            } else if (InBank == 3) {
                sendQuest("The Donator Bank Of Godzhell Reborn.", 5383);
                updateRequired = true;
            }
            if (turkeydelay == 26) {
                setAnimation(10996);
                npcId = 8499;
                isNpc = true;
                updateRequired = true;
                appearanceUpdateRequired = true;
            }
            if (turkeydelay == 18) {
                setAnimation(10995);
                lowGFX(1714, 0);
                npcId = -1;
                isNpc = false;
                updateRequired = true;
                appearanceUpdateRequired = true;
                turkeydelay = -1;
            }
            if (turkeydelay > 0) {
                turkeydelay--;
            }
            if (timedMessage > 0) {
                timedMessage--;
            }
            if (starter == 0) {
                addItem(ItemIDs.COINS, 25000000);
                addItem(ItemIDs.MANTA_RAY_NOTED, 15000);
                addItem(6528, 1);
                addItem(554, 20000);
                addItem(555, 20000);
                addItem(565, 20000);
                addItem(556, 20000);
                addItem(557, 20000);
                addItem(560, 20000);
                addItem(561, 20000);
                addItem(562, 20000);
                addItem(563, 20000);
                addItem(566, 20000);
                addItem(558, 20000);
                addItem(1153, 1);
                addItem(1115, 1);
                addItem(1067, 1);
                addItem(1191, 1);
                addItem(1323, 1);
                starter = 1;
                savemoreinfo();
                savechar();
            }
            rightClickCheck();

            if (timedMessage == 0) {
                timedMessage = 500; // message every minute, process is called every 500ms (half second).
                sendMessage("@blu@**********************************************************************************");
                sendMessage("@blu@Have you voted today?? if not go vote!! more votes = more players =)");
                sendMessage("@blu@Newest Update: Started to work on the stronghold of security.");
                sendMessage("@blu@We back Guys! Remember if You lose items on death!");
                sendMessage("@blu@Type ::help and ::commands also we have a fandom godzhellreborn.fandom.com");
                sendMessage("@blu@**********************************************************************************");

            }


            if (sameclick == 10 && getRights().isPlayer())
                sendMessage("Stop mass clicking other wise you will be kicked!");
            if (sameclick == 11 && getRights().isPlayer())
                sendMessage("Stop mass clicking other wise you will be kicked!");
            if (sameclick == 12 && getRights().isPlayer()) {
                sendMessage("Stop mass clicking other wise you will be kicked!");
                PlayerHandler.messageToAll = "Player: " + playerName + " was caught mass clicking,[SERVER]Kicking " + playerName;
                disconnected = true;
            }

            if (flowerTime == 0) {
                deletethatobject(flowerX, flowerY);
                flowerTime = -1;
                flowerX = 0;
                flowerY = 0;
            }
            if (flowers == 2980) {
                floweritem = 2460;
            } else if (flowers == 2981) {
                floweritem = 2462;
            } else if (flowers == 2982) {
                floweritem = 2464;
            } else if (flowers == 2983) {
                floweritem = 2466;
            } else if (flowers == 2984) {
                floweritem = 2468;
            } else if (flowers == 2985) {
                floweritem = 2470;
            } else if (flowers == 2986) {
                floweritem = 2472;
            } else if (flowers == 2987) {
                floweritem = ObjectIDs.PORTAL_13;
            }
            if (seedtimer > 0) {
                seedtimer--;
            }
            if (flowerTime > 0) {
                flowerTime--;
            }


            if (playerName.equalsIgnoreCase("null")) {
                disconnected = true;
            }

            for (int k = 0; k < server.Rocks; k++) {
                if (server.ROCKSPAWN[k] > 0) {
                    server.ROCKSPAWN[k]--;
                }
                if (server.ROCKSPAWN[k] == 0 && server.ORELEFT[k] == 0) {
                    makeGlobalObject(server.ROCKX[k], server.ROCKY[k], server.ROCKID[k], server.ROCKFACE[k], 10);
                    server.ORELEFT[k] = misc.random(server.ORE[k] + 1);
                }
            }
            if (WannePickUp) {
                pItemId = 0;
                PickUpAmount = 0;
                PickUpDelete = 0;
                WannePickUp = false;
            }
            if ((IsAttackingNPC) && DDS2Damg && DDStimer == 0) {
                SpecDamgNPC(25);
                DDS2Damg = false;
            }
            if (IsAttacking && DDS2Damg && DDStimer == 0) {
                SpecDamg(25);
                DDS2Damg = false;
            }

            if (DDStimer > 0) {
                DDStimer -= 1;
            }

            if (SpecialDelay <= 9) {
                SpecDelay++;
            }
            if (SpecDelay == 50) {
                SpecialDelay++;
                SpecDelay = 0;
            }

            if (strDelay <= 9) {
                strDelay++;
            }
            if (strDelay == 50) {
                strDelay = 0;
            }

            if (specialAmount <= 99 && specialDelay <= 0) {
                specialAmount += 1;
                specialDelay = 4;
                specialAttacks();
                specialAttacks2();
                specialAttacks3();
                specialAttacks4();
                specialAttacks5();
                specialAttacks6();
            }
            specialDelay -= 1;
            sendFrame171(0, 12323);
            sendFrame171(0, 7574);
            sendFrame171(0, 7599);
            sendFrame171(0, 7549);
            sendFrame171(0, 8493);
            sendFrame171(0, 7499);

            if (strAmount <= 99 && strDelay <= 0) {
                strAmount += 1;
                strDelay = 4;
            }


            if (actionAmount < 0) {
                actionAmount = 0;
            }
            if (actionTimer > 0) {
                actionTimer -= 1;
            }
            if (actionAmount > 25) {
                sendMessage("Kicked for acting too fast!");
                misc.println("Client acts too fast - disconnecting it");
                disconnected = true;
            }
            if (theifTimer > 0) {
                theifTimer -= 1;
            }
            if (AgilityTimer > 0) {
                AgilityTimer -= 1;
            }
            if (RCTimer > 0) {
                RCTimer -= 1;
            }
            if (healTimer > 0) {
                healTimer -= 1;
            }

            WriteWildyLevel();

            if (playerEquipment[playerWeapon] == 4675 && emotes == 0 || emotes == 1) {
                emotes = 2;
                updateRequired = true;
                setSidebarInterface(6, 12855);
            }

            if (playerLevel[0] > getLevelForXP(playerXP[0]) && potTimer0 == 0) {
                playerLevel[0] -= 1;
                potTimer0 += 250;
            }
            if (potTimer0 > 0) {
                potTimer0 -= 1;
            }
            if (playerLevel[1] > getLevelForXP(playerXP[1]) && potTimer1 == 0) {
                playerLevel[1] -= 1;
                potTimer1 += 250;
            }
            if (potTimer1 > 0) {
                potTimer1 -= 1;
            }
            if (playerLevel[2] > getLevelForXP(playerXP[2]) && potTimer2 == 0) {
                playerLevel[2] -= 1;
                potTimer1 += 250;
            }
            if (potTimer2 > 0) {
                potTimer2 -= 1;
            }
            if (playerLevel[3] > getLevelForXP(playerXP[3]) && potTimer3 == 0) {
                playerLevel[3] -= 1;
                potTimer3 += 250;
            }
            if (potTimer3 > 0) {
                potTimer3 -= 1;
            }
            if (playerLevel[4] > getLevelForXP(playerXP[4]) && potTimer4 == 0) {
                playerLevel[4] -= 1;
                potTimer4 += 250;
            }
            if (potTimer4 > 0) {
                potTimer4 -= 1;
            }
            if (playerLevel[5] > getLevelForXP(playerXP[5]) && potTimer5 == 0) {
                playerLevel[5] -= 1;
                potTimer5 += 250;
            }
            if (potTimer5 > 0) {
                potTimer5 -= 1;
            }
            if (playerLevel[6] > getLevelForXP(playerXP[6]) && potTimer6 == 0) {
                playerLevel[6] -= 1;
                potTimer6 += 250;
            }
            if (potTimer6 > 0) {
                potTimer6 -= 1;
            }

            if (LogoutDelay > 0) {
                LogoutDelay -= 1;
            }
            if (EntangleDelay > 0) {
                EntangleDelay -= 1;
            }
            if (PkingDelay > 0) {
                PkingDelay -= 1;
            }
            if (LoopAttDelay > 0) {
                LoopAttDelay -= 1;
            }
            if (NpcAttDelay > 0) {
                NpcAttDelay -= 1;
            }
            if (MonsterDelay > 0) {
                MonsterDelay -= 1;
            }
            if (PoisonDelay > 0) {
                PoisonDelay -= 1;
            }
            if (resetanim > 0) {
                resetanim -= 1;
            }
            if (traveltime > 0) {
                traveltime -= 1;
            }
            if (newAnimDelay > 0) {
                newAnimDelay -= 1;
            }

            // KBDLair();
            // Dungeon1();
            // Poison();

            if (newAnimRequired && newAnimDelay < 1) {
                getOutStream().createFrame(1); // sgsrocks: Resets animation so we can do another one yayyyy!
                startAnimation(newAnim);
                newAnimRequired = false;
            }

            if (PoisonClear >= 15) {
                PoisonDelay = 9999999;
                sendMessage("The poison wears off...");
            }
            if (preachTimer > 0) {
                preachTimer -= 1;
            }

            if (sameclick == 10) {
                saveasflaggedauto(sameclick);
            }
            if (sameclick == 15) {
                saveasflaggedauto(sameclick);
            }
            if (sameclick == 30) {
                saveasflaggedauto(sameclick);
            }
            if (sameclick == 50) {
                saveasflaggedauto(sameclick);
            }

            if (stoprunning) {
                sendConfig(173, 0);
                runningToggled = false;
                stoprunning = false;
            }
            {


                if (firingspell) {// firespell(fcastid, fcasterY, fcasterX, foffsetY, foffsetX, fangle, fspeed, fmgfxid, fsh, feh, ffinishid, fenemyY, fenemyX, fLockon);
                }

                graphicstimer -= 1;
                teletimer -= 1;
                mageTimer -= 1;


                PrayerTimer -= 1;

                if (dropsitem && playerEquipment[playerWeapon] > 0) // unequips weapon for chaos elemental - sgsrocks
                {
                    remove(playerEquipment[playerWeapon], 3, 1688);
                    sendMessage("The Chaos Elemental removes your weapon!");
                    PoisonPlayer();
                    dropsitem = false;
                }

                if (sbloop) {
                    if (sbtimer <= 1 && !sbscan) {
                        setSidebarInterface(7, sb);
                        sb += 1;
                        sbtimer = 6;
                        sendMessage("Current interface: " + sb);
                    }
                    if (sbtimer <= 1 && sbscan) {
                        setSidebarInterface(7, sb);
                        sb += 1;
                        sbtimer = 2;
                        sendMessage("Current interface: " + sb);
                    }
                    sbtimer -= 1;
                }

                if (resetanim <= 0) {// resetAnimation();
                    // resetanim = 8;
                }

                if (Save > 0) {
                    Save -= 1;
                }
                if (Save == 0) {
                    Save = 200;
                    savechar();
                }

                appendPos();

                smitimer -= 1;
                if (smitimer <= 1) {
                    savechar();
                    //println_debug("Auto saved game.");
                    savemoreinfo();
                    //println_debug("Auto saving moreinfo file...");
                    if (savemoreinfo()) {
                        // println_debug("Successfuly auto saved moreinfo file.");
                        attempts = 0;
                        smitimer = 20;
                    } else if (!savemoreinfo() && attempts <= 5) {
                        println_debug(
                                "Error saving moreinfo file! Retrying in 5 seconds");
                        println_debug("Attempts: " + attempts);
                        attempts += 1;
                        smitimer = 5;
                    } else if (!savemoreinfo() && attempts >= 5) {
                        println_debug(
                                "Attempts: " + attempts
                                        + " - Giving up saving moreinfo file!");
                        attempts += 1;
                        smitimer = 99999999;
                    }
                }

                // GameTime
                playerGameCount++;
                if (playerGameCount == 120000) { // evry minute
                    playerGameTime++;
                    playerGameCount = 0;
                }
                if ((playerGameTime % 1440) == 0) { // 1440 minutes = 24 hours
                    for (int i = 0; i < bankItems.length; i++) {
                        if (bankItems[i] == ItemIDs.COINS) {
                            bankItemsN[i] += ((bankItemsN[i] / 100) * 4); // increase money like in real banks (4% rente)
                        }
                    }
                }
                // Shop
                if (UpdateShop) {
                    resetItems(3823);
                    resetShop(MyShopID);
                }
                // Energy
                if (playerEnergy < 100) {
                    if (playerEnergyGian >= server.EnergyRegian) {
                        playerEnergy += 1;
                        playerEnergyGian = 0;
                    }
                    playerEnergyGian++;
                    if (playerEnergy >= 0) {
                        WriteEnergy();
                    }
                }
                if (tradeRequest > 0 && PlayerHandler.players[tradeRequest] != null) {
                    if(macAddress != PlayerHandler.players[tradeRequest].macAddress) {
                        sendMessage(PlayerHandler.players[tradeRequest].playerName
                                + ":tradereq:");
                        tradeRequest = 0;
                    } else {
                        sendMessage("You can not trade your self");
                    }
                }
                if (tradeOtherDeclined) {
                    if (PlayerHandler.players[tradeWith] != null) {
                        sendMessage(PlayerHandler.players[tradeWith].playerName
                                + " declined the trade.");
                    } else {
                        sendMessage("Other player declined the trade.");
                    }
                    RemoveAllWindows();
                    DeclineTrade();
                    tradeOtherDeclined = false;
                }
                if (tradeWaitingTime > 0) {
                    tradeWaitingTime--;
                    if (tradeWaitingTime <= 0) {
                        sendMessage("Trade request suspended.");
                        resetTrade();
                    }
                }
                if (AntiTradeScam) {
                    sendFrame126("", 3431);
                    AntiTradeScam = false;
                }
                if (tradeWith > 0) {
                    if(macAddress == PlayerHandler.players[tradeWith].macAddress) {
                        sendMessage("You can not trade your self");
                        return;
                    }
                    if (PlayerHandler.players[tradeWith] != null) {
                        if (tradeStatus == 5) {
                            if (PlayerHandler.players[tradeWith].TradeConfirmed) {
                                PlayerHandler.players[tradeWith].tradeStatus = 5;
                            }
                            resetTrade();
                        } else {
                            int OtherStatus = PlayerHandler.players[tradeWith].tradeStatus;
                            if (OtherStatus == 1) {
                                PlayerHandler.players[tradeWith].tradeStatus = 2;
                                tradeStatus = 2;
                                AcceptTrade();
                                PlayerHandler.players[tradeWith].tradeWaitingTime = 0;
                                tradeWaitingTime = 0;
                            } else if (OtherStatus == 3) {
                                if (tradeStatus == 2) {
                                    sendFrame126("Other player has accepted.", 3431);
                                } else if (tradeStatus == 3) {
                                    TradeGoConfirm();
                                }
                            } else if (OtherStatus == 4) {
                                if (tradeStatus == 3) {
                                    sendFrame126("Other player has accepted.", 3535);
                                } else if (tradeStatus == 4) {
                                    ConfirmTrade();
                                    if (PlayerHandler.players[tradeWith].TradeConfirmed) {
                                        PlayerHandler.players[tradeWith].tradeStatus = 5;
                                    }
                                }
                            }
                            if (tradeUpdateOther) {
                                resetOTItems(3416);
                                tradeUpdateOther = false;
                            }
                        }
                    } else {
                        resetTrade();
                    }
                }
                if (WanneTrade == 1) {
                    if(macAddress == PlayerHandler.players[tradeRequest].macAddress)
                        return;
                    if (WanneTradeWith > PlayerHandler.maxPlayers) {
                        resetTrade();
                    } else if (PlayerHandler.players[WanneTradeWith] != null) {
                        if (GoodDistance2(absX, absY,
                                PlayerHandler.players[WanneTradeWith].absX,
                                PlayerHandler.players[WanneTradeWith].absY, 1)) {
                            int tt1 = PlayerHandler.players[WanneTradeWith].tradeStatus;
                            int tt2 = tradeStatus;
                            if (tt1 <= 0
                                    && tt2 <= 0
                                    && PlayerHandler.players[WanneTradeWith].tradeWaitingTime == 0) {
                                if(macAddress == PlayerHandler.players[WanneTradeWith].macAddress)
                                    return;
                                tradeWith = WanneTradeWith;
                                tradeWaitingTime = 40;
                                PlayerHandler.players[tradeWith].tradeRequest = playerId;
                                sendMessage("Sending trade request...");
                            } else if (tt1 <= 0
                                    && tt2 <= 0
                                    && PlayerHandler.players[WanneTradeWith].tradeWaitingTime > 0) {
                                tradeWith = WanneTradeWith;
                                tradeStatus = 1;
                                AcceptTrade();
                            }
                            WanneTrade = 0;
                            WanneTradeWith = 0;
                        }
                    } else {
                        resetTrade();
                    }
                }
                if (WanneTrade == 2) {
                    try {
                        if (WanneTradeWith > PlayerHandler.maxPlayers) {
                            resetTrade();
                        } else if (PlayerHandler.players[WanneTradeWith] != null) {
                            if (GoodDistance2(absX, absY,
                                    PlayerHandler.players[WanneTradeWith].absX,
                                    PlayerHandler.players[WanneTradeWith].absY, 1)) {
                                if (PlayerHandler.players[WanneTradeWith].tradeWith == playerId
                                        && PlayerHandler.players[WanneTradeWith].tradeWaitingTime > 0) {
                                    if(macAddress == PlayerHandler.players[WanneTradeWith].macAddress) {
                                        sendMessage("You can not trade your self");
                                        return;
                                    }
                                    tradeWith = WanneTradeWith;
                                    tradeStatus = 1;
                                    AcceptTrade();
                                } else {
                                    if(macAddress == PlayerHandler.players[WanneTradeWith].macAddress) {
                                        sendMessage("You can not trade your self");
                                        return;
                                    }
                                    tradeWith = WanneTradeWith;
                                    tradeWaitingTime = 40;
                                    PlayerHandler.players[tradeWith].tradeRequest = playerId;
                                    sendMessage("Sending trade request...");
                                }
                                WanneTrade = 0;
                                WanneTradeWith = 0;
                            }
                        } else {
                            resetTrade();
                        }
                    } catch (Exception e) {
                        sendMessage("Ok Then... Your Nice.");
                    }
                }
                // Crackers
                if (CrackerMsg) {
                    crackCracker();
                }
                // check stairs
                if (stairs > 0) {
                    if (GoodDistance(skillX, skillY, absX, absY, stairDistance)) {
                        stairs(stairs, absX, absY);
                    }
                }
                // objects
                if (doors > -1) {
                    if (GoodDistance2(skillX, skillY, absX, absY, 1)) {
                        ChangeDoor(doors);
                        doors = -1;
                    }
                }
                // check banking
                if (WanneBank > 0) {
                    if (GoodDistance(skillX, skillY, absX, absY, WanneBank)) {
                        openUpBank();
                        WanneBank = 0;
                    }
                }

                // check banking
                if (WanneBank2 > 0) {
                    if (GoodDistance(skillX, skillY, absX, absY, WanneBank2)) {
                        openUpBank2();
                        WanneBank2 = 0;
                    }
                }
                // god book check
                if (preaching > 0) {
                    preaching();
                }
                // check shopping
                if (WanneShop > 0) {
                    if (GoodDistance(skillX, skillY, absX, absY, 1)) {
                        openUpShop(WanneShop);
                        WanneShop = 0;
                    }
                }

                // Attacking in wilderness
                if (IsAttacking && !IsDead && PkingDelay <= 0) {
                    if (PlayerHandler.players[AttackingOn] != null) {
                        if (!PlayerHandler.players[AttackingOn].IsDead) {
                            Attack();
                        } else {
                            ResetAttack();
                        }
                    } else {
                        ResetAttack();
                    }
                }
                // Attacking an NPC
                if (IsAttackingNPC && !IsDead) {
                    if (NPCHandler.npcs[attacknpc] != null) {
                        if (!server.npcHandler.npcs[attacknpc].IsDead) {
                            AttackNPC();
                        } else {
                            ResetAttackNPC();
                        }
                    } else {
                        ResetAttackNPC();
                    }
                }

                // check if ring of life ie equiped et..
                if (playerEquipment[playerRing] == 2570
                        && playerLevel[playerHitpoints]
                        <= (int) (((double) getLevelForXP(playerXP[3])
                        / 10.0)
                        + 0.5)) {
                    SafeMyLife = true;
                }
                // if ring of life is activated
                if (SafeMyLife) {
                    ApplyRingOfLife();
                }
                // If killed apply dead
                if (IsDead && NewHP <= 1) {
                    ApplyDead();
                }
                // update correct hp in stat screen
                if (NewHP < 136) {
                    playerLevel[playerHitpoints] = NewHP;
                    setSkillLevel(playerHitpoints, NewHP, playerXP[playerHitpoints]);
                    NewHP = playerLevel[3];
                }
                // fletching check
                if (fletching[0] > 0) {
                    fletching();
                }
                // crafting check
                if (crafting[0] > 0) {
                    crafting();
                }
                // prayer check
                if (prayer[0] > 0) {
                    prayer();
                }
                // cooking check
                if (cooking[0] > 0) {
                    if (GoodDistance(skillX, skillY, absX, absY, 1)) {
                        cooking();
                    }
                }
                // Npc Talking
                if (NpcWanneTalk == 2) { // Bank Booth
                    if (GoodDistance2(absX, absY, skillX, skillY, 1)) {
                        NpcDialogue = 1;
                        NpcTalkTo = GetNPCID(skillX, (skillY - 1));
                        NpcWanneTalk = 0;
                    }
                } else if (NpcWanneTalk > 0) {
                    if (GoodDistance2(absX, absY, skillX, skillY, 2)) {
                        NpcDialogue = NpcWanneTalk;
                        NpcTalkTo = GetNPCID(skillX, skillY);
                        NpcWanneTalk = 0;
                    }
                }
                if (NpcWanneTalk == 9292) { // Random Event
                    if (GoodDistance2(absX, absY, skillX, skillY, 1)) {
                        NpcDialogue = 9292;
                        NpcTalkTo = GetNPCID(skillX, (skillY - 1));
                        NpcWanneTalk = 0;
                    }
                }

                // firemaking check
                if (firemaking[0] > 0) {
                    if (GoodDistance(skillX, skillY, absX, absY, 0)) {
                        firemaking();
                    }
                }
                // Walking to object check
                if (NpcDialogue > 0 && !NpcDialogueSend) {
                    UpdateNPCChat();
                }

                if (isKicked) {
                    disconnected = true;
                    getOutStream().createFrame(109);
                }

                if (globalMessage.length() > 0) {
                    sendMessage(globalMessage);
                    globalMessage = "";
                }
            }
        } catch(Exception e){
            e.printStackTrace();
        }
    }

    public boolean packetSending() { // Ringer24: this is used for sending packets
        return packetProcess();
    }

    private boolean packetProcess() {
        if (disconnected || in == null) {
            return false;
        }

        try {
            int avail = in.available();

            if (avail == 0) {
                return false;
            }

            // Determine packet type if not already set
            if (packetType == -1) {
                packetType = in.read() & 0xFF;

                if (inStreamDecryption != null) {
                    packetType = (packetType - inStreamDecryption.getNextKey()) & 0xFF;
                }

                packetSize = getPacketSize(packetType);

                if (packetSize == OPCODE_OUT_OF_RANGE_SIZE) {
                    resetPacket();
                    return false;
                }
            }

            // Determine packet size if not already set
            if (packetSize == -1 && avail > 0) {
                packetSize = in.read() & 0xFF;
                avail--;
            }

            // Check if we have enough data to process the packet
            if (avail < packetSize) {
                return false;
            }

            // Read the packet data
            fillInStream(packetSize);
            timeOutCounter = 0;

            // Process the packet
            parseIncomingPackets();

            // Reset for the next packet
            resetPacket();

        } catch (Exception e) {
            e.printStackTrace();
            disconnected = true;
            System.out.println("Godzhell Reborn Server [fatal] - exception");
        }

        return true;
    }

    // Resets packetType and packetSize for next packet processing
    private void resetPacket() {
        packetType = -1;
        packetSize = -1;
    }

    public boolean pickUpItem(int item, int amount) {

        if (!Item.itemStackable[item] || amount < 1) {
            amount = 1;
        }

        if (freeSlots() > 0)
        //actionAmount++;
        //if (actionTimer == 0)
        {
            //The following 6 rows delete the item from the ground
			/*getOutStream().createFrame(85); //setting the location
			getOutStream().writeByteC(currentY);
			getOutStream().writeByteC(currentX);
			getOutStream().createFrame(156); //remove item frame
			getOutStream().writeByteS(0);  //x(4 MSB) y(LSB) coords
			getOutStream().writeWord(item);	// itemid*/
            //actionTimer = 20;
            for (int i = 0; i < playerItems.length; i++) {
                if (playerItems[i] == (item + 1) && Item.itemStackable[item] && playerItems[i] > 0) {
                    playerItems[i] = item + 1;
                    if ((playerItemsN[i] + amount) < maxItemAmount && (playerItemsN[i] + amount) > 0) {
                        playerItemsN[i] += amount;
                    } else {
                        return false;
                    }
                    getOutStream().createFrameVarSizeWord(34);
                    getOutStream().writeWord(3214);
                    getOutStream().writeByte(i);
                    getOutStream().writeWord(playerItems[i]);
                    if (playerItemsN[i] > 254) {
                        getOutStream().writeByte(255);
                        getOutStream().writeDWord(playerItemsN[i]);
                    } else {
                        getOutStream().writeByte(playerItemsN[i]); //amount
                    }
                    getOutStream().endFrameVarSizeWord();
                    i = 30;
                    return true;
                }
            }
            for (int i = 0; i < playerItems.length; i++) {
                if (playerItems[i] <= 0) {
                    playerItems[i] = item + 1;
                    if (amount < maxItemAmount) {
                        playerItemsN[i] = amount;
                    } else {
                        return false;
                    }
                    getOutStream().createFrameVarSizeWord(34);
                    getOutStream().writeWord(3214);
                    getOutStream().writeByte(i);
                    getOutStream().writeWord(playerItems[i]);
                    if (playerItemsN[i] > 254) {
                        getOutStream().writeByte(255);
                        getOutStream().writeDWord_v2(playerItemsN[i]);
                    } else {
                        getOutStream().writeByte(playerItemsN[i]); //amount
                    }
                    getOutStream().endFrameVarSizeWord();
                    i = 30;
                    return true;
                }
            }
            return true;
        } else {
            return false;
        }
    }

    public void actionReset() {
        actionName = "";
    }


    public void parseIncomingPackets2() {
        int i;
        int junk;
        int junk2;
        int junk3;

        switch (packetType) {// add stuff here

            case 0:
                break; // idle packet - keeps on reseting timeOutCounter

            case 202:
                break;
            case 210: // loads new area
                server.getGlobalObjects().updateRegionObjects(this);
                break;

            case 53: // Use Item on another Item

            /* junk = inStream.readSignedWordBigEndianA();
             int usedWithSlot = inStream.readSignedWord();
             int itemUsedSlot = (int)(misc.HexToInt(inStream.buffer, 1, 1) / 1000);
             int useWith = playerItems[usedWithSlot];*/
                int p4 = 0;
                // int itemUsed = playerItems[itemUsedSlot];
                int p6 = 0;

                int usedWithSlot = inStream.readUnsignedWord();
                int itemUsedSlot = inStream.readUnsignedWordA();
                // int useWith = inStream.readUnsignedWordBigEndianA();
                int interface1284 = inStream.readUnsignedWord();
                // int itemUsed = inStream.readSignedWordBigEndian();
                int interfacek = inStream.readUnsignedWord();
                // usedWithSlot += 1;
                // itemUsedSlot += 1;
                int useWith = playerItems[usedWithSlot] - 1;
                int itemUsed = playerItems[itemUsedSlot] - 1;


                if (debugMessages) {
                    sM(
                            "Item: " + useWith + " used with item: " + itemUsed);
                    sM(
                            "usedwithslot: " + usedWithSlot + " itemusedslot: "
                                    + itemUsedSlot + " usewith: " + useWith + " p4: " + p4
                                    + " itemused: " + itemUsed + " p6: " + p6);
                }
        }
    }

    public void parseIncomingPackets() {
        int i;
        int junk;
        int junk2;
        int junk3;

        switch (packetType) {
            case 0:
                break; // idle packet - keeps on reseting timeOutCounter

            case 202:// idle logout packet
                break;

            case 210: // loads new area

                break;

        /*case 40:
            if (NpcDialogue == 1 || NpcDialogue == 3 || NpcDialogue == 5
                    || NpcDialogue == 40 || NpcDialogue == 42
                    || NpcDialogue == 1001 || NpcDialogue == 1002
                    || NpcDialogue == 2259 || NpcDialogue == 2260
                    || NpcDialogue == 301 || NpcDialogue == 305
                    || NpcDialogue == 308 || NpcDialogue == 309
                    || NpcDialogue == 313 || NpcDialogue == 314
                    || NpcDialogue == 317 || NpcDialogue == 318
                    || NpcDialogue == 319 || NpcDialogue == 322
                    || NpcDialogue == 323 || NpcDialogue == 14600
                    || NpcDialogue == 14602 || NpcDialogue == 550
                    || NpcDialogue == 1694 || NpcDialogue == 1339) {
                NpcDialogue += 1;
                NpcDialogueSend = false;
            } else if (NpcDialogue == 6 || NpcDialogue == 7
                    || NpcDialogue == 300 || NpcDialogue == 303
                    || NpcDialogue == 304 || NpcDialogue == 307
                    || NpcDialogue == 310 || NpcDialogue == 311
                    || NpcDialogue == 312 || NpcDialogue == 315
                    || NpcDialogue == 316 || NpcDialogue == 320
                    || NpcDialogue == 321 || NpcDialogue == 324
                    || NpcDialogue == 325 || NpcDialogue == 326
                    || NpcDialogue == 14604) {
                NpcDialogue = 0;
                NpcDialogueSend = false;
                RemoveAllWindows();
            } else if (NpcDialogue == 32) // COMPLETED CLUE
            {
                sendFrame200(4883, 591);
                sendFrame126(GetNpcName(NpcTalkTo), 4884);
                sendFrame126("Congratulations! Heres your last reward!", 4885);
                sendFrame75(NpcTalkTo, 4883);
                sendFrame164(4882);
                NpcDialogueSend = true;
                givereward(cluelevel);
                RemoveAllWindows();
            }  QUEST INVISIBLE ARMOUR (id 1) npc chat// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            else if (NpcDialogue == 100) // QUEST STAGE 0
            {
                sendFrame200(4883, 591);
                sendFrame126(GetNpcName(NpcTalkTo), 4884);
                sendFrame126(
                        "Hey I need help with making some invisible armour...",
                        4885);
                sendFrame126("and you're gonna help me.", 4886);
                sendFrame75(NpcTalkTo, 4883);
                sendFrame164(4882);
                NpcDialogueSend = true;
                q1stage = 1;
                loadquestinterface();
                RemoveAllWindows();
            } else if (NpcDialogue == 101) // QUEST STAGE 1
            {
                sendFrame200(4883, 591);
                sendFrame126(GetNpcName(NpcTalkTo), 4884);
                sendFrame126("I'll add the list of materials I need to your",
                        4885);
                sendFrame126("quest log, as I'm too busy to talk.", 4886);
                sendFrame75(NpcTalkTo, 4883);
                sendFrame164(4882);
                NpcDialogueSend = true;
                q1stage = 1;
                loadquestinterface();
                RemoveAllWindows();
            } else if (NpcDialogue == 102) // QUEST STAGE 2
            {
                sendFrame200(4883, 591);
                sendFrame126(GetNpcName(NpcTalkTo), 4884);
                sendFrame126("Why are you still here...go get the materials",
                        4885);
                sendFrame75(NpcTalkTo, 4883);
                sendFrame164(4882);
                NpcDialogueSend = true;
                q1stage = 2;
                loadquestinterface();
                RemoveAllWindows();
            } else if (NpcDialogue == 103) // QUEST STAGE 3
            {
                sendFrame200(4883, 591);
                sendFrame126(GetNpcName(NpcTalkTo), 4884);
                sendFrame126("Get me the " + GetItemName(4206) + " please!",
                        4885);
                sendFrame75(NpcTalkTo, 4883);
                sendFrame164(4882);
                NpcDialogueSend = true;
                RemoveAllWindows();
            } else if (NpcDialogue == 104) // QUEST STAGE 4
            {
                sendFrame200(4883, 591);
                sendFrame126(GetNpcName(NpcTalkTo), 4884);
                sendFrame126("You lost it?!?! Go get it again man.", 4885);
                sendFrame75(NpcTalkTo, 4883);
                sendFrame164(4882);
                NpcDialogueSend = true;
                ;
                RemoveAllWindows();
            } else if (NpcDialogue == 1101) // COMPLETED QUEST STAGE 1
            {
                sendFrame200(4883, 591);
                sendFrame126(GetNpcName(NpcTalkTo), 4884);
                sendFrame126("Thanks for getting me these, I've updated", 4885);
                sendFrame126("your quest log for my next request.", 4886);
                sendFrame75(NpcTalkTo, 4883);
                sendFrame164(4882);
                NpcDialogueSend = true;
                q1stage = 2;
                loadquestinterface();
                RemoveAllWindows();
            } else if (NpcDialogue == 1102) // COMPLETED QUEST STAGE 2
            {
                sendFrame200(4883, 591);
                sendFrame126(GetNpcName(NpcTalkTo), 4884);
                sendFrame126(
                        "Thanks giving me the " + GetItemName(6889)
                        + ", now all I need",
                        4885);
                sendFrame126(
                        "is the " + GetItemName(4206)
                        + " to add the power to the armour.",
                        4886);
                sendFrame75(NpcTalkTo, 4883);
                sendFrame164(4882);
                q1stage = 3;
                loadquestinterface();
                // NpcDialogue = 11021;
                NpcDialogueSend = true;
            } else if (NpcDialogue == 1694) // Ghost Talk
            {
                sendFrame200(4883, 591);
                sendFrame126(GetNpcName(NpcTalkTo), 4884);
                sendFrame126("Happy Halloween from sgsrocks..!", 4885);
                sendFrame75(NpcTalkTo, 4883);
                sendFrame164(4882);
                NpcDialogueSend = true;
                // addItem(1419, 1);
                RemoveAllWindows();
            } else if (NpcDialogue == 1105 && q1stage == 4) // COMPLETED QUEST
            {
                sendFrame200(4883, 591);
                sendFrame126(GetNpcName(NpcTalkTo), 4884);
                sendFrame126("Thanks for helping me with this project,", 4885);
                sendFrame126(
                        "heres your reward, also look out for more of this armour...",
                        4886);
                sendFrame75(NpcTalkTo, 4883);
                sendFrame164(4882);
                NpcDialogueSend = true;
                showQuestCompleted("Invisible Armour", 3);
                q1stage = -1;
                // addItem(6656, 1);
                loadquestinterface();
            } else {
                NpcDialogue = 0;
                NpcDialogueSend = false;
                RemoveAllWindows();
            }
            // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//
            sM(
                    "Unhandled packet [" + packetType + ", InterFaceId: "
                    + inStream.readUnsignedWordA() + ", size=" + packetSize
                    + "]: ]" + misc.Hex(inStream.buffer, 1, packetSize) + "[");
            println_debug(
                    "Action Button: "
                            + misc.HexToInt(inStream.buffer, 0, packetSize));
            break;*/

            case 40: // Dialog switching...
                handleDialogue(this);
                if (nextDialogue) {
                    if (setNext > 0)
                        NpcDialogue += 1;
                    NpcDialogueSend = false;
                    nextDialogue = false;
                }
                break;

            case 75: // Alternative Item Option 2

                int itemid = inStream.readSignedWordA();

                if (debugMessages) {
                    System.out.println("Item id: " + itemid);
                }

                int item2ID = inStream.readSignedWordBigEndian();
                // int item2ID2 = inStream.readUnSignedWordBigEndian();
                int item2ID3 = inStream.readSignedWordA();
                int item2ID4 = inStream.readUnsignedWord();

                System.out.println("Item2ID: " + item2ID);
                // System.out.println("Item2ID2: "+item2ID2);
                System.out.println("Item2ID3: " + item2ID3);
                System.out.println("Item2ID4: " + item2ID4);

                checkwildy();
                switch(item2ID3){
                    case ItemIDs.BUCKET_OF_SAND:
                        if(playerHasItem(ItemIDs.BUCKET_OF_SAND, 1)){
                            deleteItem(ItemIDs.BUCKET_OF_SAND, getItemSlot(ItemIDs.BUCKET_OF_SAND), 1);
                            addItem(1925, 1);
                            sendMessage("You empty the bucket of sand on the ground.");
                        }
                        break;
                    case ItemIDs.BUCKET_OF_WATER:
                        if(playerHasItem(ItemIDs.BUCKET_OF_WATER, 1)){
                            deleteItem(ItemIDs.BUCKET_OF_WATER, getItemSlot(ItemIDs.BUCKET_OF_WATER), 1);
                            addItem(1925, 1);
                            sendMessage("You empty the bucket of water on the ground.");
                        }
                        break;
                    case ItemIDs.POT_OF_FLOUR:
                        if(playerHasItem(ItemIDs.POT_OF_FLOUR, 1)){
                            deleteItem(ItemIDs.POT_OF_FLOUR, getItemSlot(ItemIDs.POT_OF_FLOUR), 1);
                            addItem(1931, 1);
                            sendMessage("You empty the pot of flour on the ground.");
                        }
                        break;
                }
                if (item2ID3 == 1712) {
                    if (teleblock) {
                        sendMessage(
                                "You are currently teleblocked and cannot teleport");
                    } else if (!teleblock) {
                        teleportToX = 2461;
                        teleportToY = 3177;
                        heightLevel = 0;
                        sendMessage("Home, sweet home");
                        // selectoption("Where would you like to go?", "Wilderness Agility Course", "Edgeville", "Karamja");
                    }
                }

                if (item2ID3 == 2552 || item2ID3 == 2554 || item2ID3 == 2556
                        || item2ID3 == 2558 || item2ID3 == 2560 || item2ID3 == 2562
                        || item2ID3 == 2564) {
                    if (teleblock) {
                        sendMessage(
                                "You are currently teleblocked and cannot teleport");
                    } else if (!teleblock) {
                        duelring = true;
                        selectoption("Where would you like to go?",
                                "@whi@J@gre@a@whi@d",
                                "@whi@R@gre@u@whi@n@gre@e@whi@c@gre@r@whi@a@gre@f@whi@t",
                                "");
                    }
                }
                break;

            case 16: // Alternative Item Option 2

                int item_id = inStream.readSignedWordA();

                if (debugMessages) {
                    System.out.println("Item id: " + item_id);
                }

                checkwildy();

                if (item_id == 3840) {
                    sendInterfaceHidden(1, 2465);
                    sendInterfaceHidden(0, 2468);
                    sendFrame126("Select an Option", 2481);
                    sendFrame126("Wedding rights", 2482);
                    sendFrame126("Last rights", 2483);
                    sendFrame126("Blessing", 2484);
                    sendFrame126("Preach", 2485);
                    sendFrame164(2480);
                    NpcDialogueSend = true;
                    holyBook = true;
                }
                if (item_id == 3842) {
                    sendInterfaceHidden(1, 2465);
                    sendInterfaceHidden(0, 2468);
                    sendFrame126("Select an Option", 2481);
                    sendFrame126("Wedding rights", 2482);
                    sendFrame126("Last rights", 2483);
                    sendFrame126("Blessing", 2484);
                    sendFrame126("Preach", 2485);
                    sendFrame164(2480);
                    NpcDialogueSend = true;
                    unholyBook = true;
                }
                if (item_id == 3844) {
                    sendInterfaceHidden(1, 2465);
                    sendInterfaceHidden(0, 2468);
                    sendFrame126("Select an Option", 2481);
                    sendFrame126("Wedding rights", 2482);
                    sendFrame126("Last rights", 2483);
                    sendFrame126("Blessing", 2484);
                    sendFrame126("Preach", 2485);
                    sendFrame164(2480);
                    NpcDialogueSend = true;
                    balanceBook = true;
                }

                if (item_id == 4079) { // Yo-Yo (Walk) By Drags
                    startAnimation(1459);
                }

            case 192:
                int actionButton2 = misc.HexToInt(inStream.buffer, 0, packetSize);
                int shark = misc.HexToInt(inStream.buffer, 0, packetSize);
                int lob = misc.HexToInt(inStream.buffer, 0, packetSize);
                int carb = misc.HexToInt(inStream.buffer, 0, packetSize);
                int smelt = misc.HexToInt(inStream.buffer, 0, packetSize);
                int cow = misc.HexToInt(inStream.buffer, 0, packetSize);
                int turtle = misc.HexToInt(inStream.buffer, 0, packetSize);
                int manta = misc.HexToInt(inStream.buffer, 0, packetSize);
                // int atObjectID = inStream.readUnsignedWordBigEndian();
                // int atObjectY = inStream.readUnsignedWordBigEndianA();
                // int itemSlot = inStream.readUnsignedWordBigEndian();
                // int atObjectX = inStream.readUnsignedWordBigEndianA();
                // int useItemID = inStream.readUnsignedWord();
                int j6 = inStream.readUnsignedWordA();
                int atObjectID = inStream.readInteger();
                int atObjectY = inStream.readUnsignedWordBigEndianA();
                int itemSlot = inStream.readUnsignedWordBigEndian();
                int atObjectX = inStream.readUnsignedWordBigEndianA();
                int useItemID = inStream.readUnsignedWord();
                if(!Region.isWorldObject(atObjectID, atObjectX, atObjectY, heightLevel)){
                    return;
                }
                if (debugMessages) {
                    sM(
                            "atObjectID: " + atObjectID + " atObjectY: " + atObjectY
                                    + " itemSlot: " + itemSlot + " atObjectX: " + atObjectX
                                    + " useItemID: " + useItemID + " j6: " + j6);

                }

                if (getAllotment().curePlant(atObjectX, atObjectY, useItemID)) {
                    return;
                }
                if (getAllotment().putCompost(atObjectX, atObjectY, useItemID)) {
                    return;
                }
                if (getAllotment().clearPatch(atObjectX, atObjectY, useItemID)) {
                    return;
                }
                face(atObjectX, atObjectY);
                switch(atObjectID){
                    case 36881:
                        FlourMill.grainOnHopper(this, atObjectID, useItemID);
                        break;
                    case 409:
                        Optional<Bone> bone = PrayerAltar.isOperableBone(useItemID);
                        if (bone.isPresent()) {
                            getPrayerAltar().setAltarBone(bone);
                            getOutStream().createFrame(27);
                            return;
                        }
                        break;
                    case 2645:
                        sandtoBucket.fillTheItem(this, useItemID, atObjectID);
                        break;
                    case 15621:
                        AnimatedArmour.itemOnAnimator(this, useItemID);
                        break;
                    case 879:
                    case 884:
                    case 12279:
                    case 14868:
                        if (useItemID == SoftClay.CLAY) {
                            SoftClay.makeClay(this);
                        } else {
                            Fillables.fillTheItem(this, useItemID, atObjectID);
                        }
                        break;
                    case 14921:
                    case 9390:
                    case 2781:
                    case 2785:
                    case 2966:
                    case 3294:
                    case 3413:
                    case 4304:
                    case 4305:
                    case 6189:
                    case 6190:
                    case 11009:
                    case 11010:
                    case 11666:
                    case 12100:
                    case 12809:
                        if (useItemID == 2357) {
                            JewelryMaking.mouldInterface(this);
		/*} else if (itemId == SilverCrafting.SILVER_BAR) {
			Menus.sendSkillMenu(c, "silverCrafting");*/
                        }
                        if (useItemID == 2353 || useItemID == 4) {
                            //DwarfCannon.makeBall(this);//todo
                        }
                        break;
                    case 2783:
                        getSmithingInt().showSmithInterface(useItemID);
                        break;
                }
                if (useItemID >= 3422 && useItemID <= 3428) {
                    deleteItem(useItemID, 1);
                    addItem(useItemID + 8, 1);
                    startAnimation(832);
                    sendMessage("You put the olive oil on the fire, and turn it into sacred oil.");
                    return;
                }
                if (useItemID == 1737 || useItemID == 1779 && atObjectID == 36970) {
                    Spinning.showSpinning(this);
                }

                if (useItemID == 1761 && atObjectID == 2642) {
                    Pottery.showUnfire(this);
                }

                if (useItemID <= 5340 && useItemID > 5332) {
                    if (getAllotment().waterPatch(atObjectX, atObjectY, useItemID)) {
                        return;
                    }
                }
                if (getAllotment().plantSeed(atObjectX, atObjectY, useItemID)) {
                    return;
                }
                //Farming.prepareCrop(c, useItemID, atObjectX, atObjectY);
                if (useItemID == 4151 && atObjectID == 1531) {
                    sendMessage("Works fool.");
                    if (foundz[2] == 0) {
                        sendMessage("Hidden found");
                        sendMessage("You gain a hidden point!");
                        hiddenPoints += 1;
                        foundz[2] = 1;
                    }
                } else if (useItemID == 2 && atObjectID == 6) {
                    cannonBalls += 30;
                }

                if (shark == 12609) // varrock Founation X=3240,3435 item harpoon slot 1
                {
                    if (playerLevel[10] <= 79) {
                        sendMessage("You need to be lvl 80 fishing to catch shark.");
                    } else {
                        make();
                    }
                } else if (lob == 12599) // varrock Founation X=3240,3435 item lobster pot slot 1
                {
                    if (playerLevel[10] <= 59) {
                        sendMessage(
                                "You need to be lvl 60 fishing to catch lobster.");
                    } else {
                        lob();
                    }
                } else if (carb == 12603) // varrock Founation X=3240,3435 //item big net slot 1
                {
                    carb();
                } else if (turtle == 12706) // Well X=2651,3370 //item lobby pot slot 1
                {
                    if (playerLevel[10] <= 98) {
                        sendMessage(
                                "You need to be lvl 99 fishing to catch sea turtle.");
                    } else {
                        turtle();
                    }
                } else if (manta == 12716) // Well X=2651,3370 //item harpoon slot 1
                {
                    if (playerLevel[10] <= 110) {
                        sendMessage(
                                "You need to be lvl 90 fishing to catch manta rays.");
                    } else {
                        manta();
                    }
                } else if (useItemID == ItemIDs.COPPER_ORE
                        && (atObjectID == 2781 || atObjectID == 11666
                        || atObjectID == 9390)) {
                    tin();
                } /* else if(useItemID == 453 && (atObjectID == 2781 || atObjectID == 11666))
             {
            } /* else if(useItemID == 15331 && (atObjectID == 2783 || atObjectID == 11666))
             {
            } /* else if(useItemID == 15331 && atObjectID == 2783)//756s
				{
					initSmithing(15331);
					flushOutStream();
				}
             steel(itemSlot);
             }*/ else if (useItemID == 438
                        && (atObjectID == 2781 || atObjectID == 11666
                        || atObjectID == 9390)) {
                    Copper();
                } else if (useItemID == 293
                        && (atObjectX == 3028 && atObjectY == 3356)) {
                    if (absY == 3355) {
                        teleportToX = absX;
                        teleportToY = (absY + 2);
                    } else {
                        teleportToX = 3028;
                        teleportToY = 3355;
                    }
                }
                if (useItemID == 293 && (atObjectX == 3268 && atObjectY == 3435)) { // black drAGON CAVE
                    teleportToX = 3255;
                    teleportToY = 9581;
                    sendMessage("No turning back now");
                } else if (useItemID == 440
                        && (atObjectID == 2781 || atObjectID == 11666
                        || atObjectID == 9390)) {
                    iron();
                } else if (useItemID == 442
                        && (atObjectID == 2781 || atObjectID == 11666
                        || atObjectID == 9390)) {
                    silver2();
                } else if (useItemID == 444
                        && (atObjectID == 2781 || atObjectID == 11666
                        || atObjectID == 9390)) {
                    gold();
                } else if (useItemID == 601 && atObjectID == 4126) // reward
                {
                    sendMessage(
                            "Well done, you have just finished your mini game, here's your reward :)");
                    addSkillXP((300000 * playerLevel[6]), 6);
                    deleteItem(601, getItemSlot(601), 1);
                    addItem(746, 1);
                    teleportToX = 2845;
                    teleportToY = 4832;
                } else if (useItemID == 13734 && atObjectID == 409 && playerLevel[5] >= 85 && IsItemInBag(13734) && IsItemInBag(13754)) // reward
                {
                    sendMessage(
                            "You Blessed The Spirit sheild with the holy elixir.");
                    addSkillXP((1500 * playerLevel[5]), 5);
                    deleteItem(13734, getItemSlot(13734), 1);
                    setAnimation(645);
                    deleteItem(13754, getItemSlot(13754), 1);
                    addItem(13736, 1);
                } else if (useItemID == 13746 && atObjectID == 2783 && playerLevel[5] >= 90 && playerLevel[13] >= 85 && IsItemInBag(13736) && IsItemInBag(13746)) // reward
                {
                    sendMessage(
                            "You use the Arcane sigil on the anvil to make an Arcane spirit sheild");
                    addSkillXP((1500 * playerLevel[5]), 5);
                    deleteItem(13746, getItemSlot(13746), 1);
                    // setAnimation(645);
                    deleteItem(13736, getItemSlot(13736), 1);
                    addItem(13738, 1);

                } else if (useItemID == 13748 && atObjectID == 2783 && playerLevel[5] >= 90 && playerLevel[13] >= 85 && IsItemInBag(13736) && IsItemInBag(13748)) // reward
                {
                    sendMessage(
                            "You use the Divine sigil on the anvil to make an Divine spirit sheild");
                    addSkillXP((1500 * playerLevel[5]), 5);
                    deleteItem(13748, getItemSlot(13748), 1);
                    // setAnimation(645);
                    deleteItem(13736, getItemSlot(13736), 1);
                    addItem(13740, 1);

                } else if (useItemID == 13750 && atObjectID == 2783 && playerLevel[5] >= 90 && playerLevel[13] >= 85 && IsItemInBag(13736) && IsItemInBag(13750)) // reward
                {
                    sendMessage(
                            "You use the Elysian sigil on the anvil to make an Elysian spirit sheild");
                    addSkillXP((1500 * playerLevel[5]), 5);
                    deleteItem(13750, getItemSlot(13750), 1);
                    // setAnimation(645);
                    deleteItem(13736, getItemSlot(13736), 1);
                    addItem(13742, 1);

                } else if (useItemID == 13752 && atObjectID == 2783 && playerLevel[5] >= 90 && playerLevel[13] >= 85 && IsItemInBag(13736) && IsItemInBag(13752)) // reward
                {
                    sendMessage(
                            "You use the Spectral sigil on the anvil to make an Spectral spirit sheild");
                    addSkillXP((1500 * playerLevel[5]), 5);
                    deleteItem(13752, getItemSlot(13752), 1);
                    // setAnimation(645);
                    deleteItem(13736, getItemSlot(13736), 1);
                    addItem(13744, 1);
                } else if (useItemID == 758 && atObjectID == 4126) // reward
                {
                    sendMessage(
                            "Well done, you have just finished your mini game, here's your reward :)");
                    addSkillXP((300000 * playerLevel[6]), 6);
                    deleteItem(758, getItemSlot(758), 1);
                    addItem(667, 1);
                    teleportToX = 2845;
                    teleportToY = 4832;
                } else if (useItemID == 788 && atObjectID == 4126) // reward
                {
                    sendMessage(
                            "Well done, you have just finished your mini game, here's your reward :)");
                    addSkillXP((300000 * playerLevel[6]), 6);
                    deleteItem(788, getItemSlot(788), 1);
                    addItem(ItemIDs.COINS, 30000000);
                    teleportToX = 2845;
                    teleportToY = 4832;
                } else if (useItemID == 952 && atObjectID == 12202)
                    if (IsItemInBag(954)) {
                        deleteItem(954, getItemSlot(954), 1);
                        sendMessage("You Dig Into The Mole Hole And Go Into The Mole lair!");
                        teleportToX = 1752;
                        teleportToY = 5137;
                    } else {
                        sendMessage("You Do Not Have A Coil Of Rope. You Need One To Get Into The Mole Cave.");
                    }
                else if (useItemID == 983 && atObjectID == 4126) // reward
                {
                    sendMessage(
                            "Well done, you have just finished your mini game, here's your reward :)");
                    addSkillXP((0), 6);
                    deleteItem(983, getItemSlot(983), 1);
                    addItem(ItemIDs.COINS, 10000000);
                    teleportToX = 2845;
                    teleportToY = 4832;
                } else if (useItemID == 4272 && atObjectID == 5244) // reward
                {
                    sendMessage(
                            "WTF? you have been teleported to hell?!, seem there's no turning back");
                    deleteItem(4272, getItemSlot(4272), 1);
                    teleportToX = 3374;
                    teleportToY = 9811;
                } else if (useItemID == 6104 && atObjectID == 4121) // reward
                {
                    sendMessage(
                            "Well done, you have just finished your mini game, here's your reward :)");
                    addSkillXP((0), 2);
                    deleteItem(6104, getItemSlot(6104), 1);
                    addItem(7400, 1);
                    teleportToX = 2853;
                    teleportToY = 3591;

                } else if (useItemID == 1919 && atObjectID == 13568) // reward
                {
                    if(playerHasItem(1919)) {
                        sendMessage("You have filled your beer glass with beer.");
                        deleteItem(1919, getItemSlot(1919), 1);
                        addItem(1917, 1);
                    }
                } else if (useItemID == 1919 && atObjectID == 13569) // reward
                {
                    if(playerHasItem(1919)) {
                        sendMessage("You have filled your beer glass with cider.");
                        deleteItem(1919, getItemSlot(1919), 1);
                        addItem(5763, 1);
                    }

                } else if (useItemID == 1919 && atObjectID == 13570) // reward
                {
                    if(playerHasItem(1919)) {
                        sendMessage("You have filled your beer glass with asgarnian ale.");
                        deleteItem(1919, getItemSlot(1919), 1);
                        addItem(1905, 1);
                    }
                } else if (useItemID == 1919 && atObjectID == 13571) // reward
                {
                    if(playerHasItem(1919)) {
                        sendMessage("You have filled your beer glass with greenman's ale.");
                        deleteItem(1919, getItemSlot(1919), 1);
                        addItem(1905, 1);
                    }

                } else if (useItemID == 1919 && atObjectID == 13573) // reward
                {
                    if(playerHasItem(1919)) {
                        sendMessage("You have filled your beer glass with chef's delight.");
                        deleteItem(1919, getItemSlot(1919), 1);
                        addItem(5755, 1);
                    }
                } else if (useItemID == 1919 && atObjectID == 13572) // reward
                {
                    if(playerHasItem(1919)) {
                        sendMessage("You have filled your beer glass with dragon bitter.");
                        deleteItem(1919, getItemSlot(1919), 1);
                        addItem(7748, 1);
                    }
                } else if (useItemID == 447
                        && (atObjectID == 2781 || atObjectID == 11666
                        || atObjectID == 9390)) {
                    mith();
                } else if (useItemID == 449
                        && (atObjectID == 2781 || atObjectID == 11666
                        || atObjectID == 9390)) {
                    adam();
                } else if (useItemID == 451
                        && (atObjectID == 2781 || atObjectID == 11666
                        || atObjectID == 9390)) {
                    rune();
                } else if (useItemID == 5291
                        && (atObjectID == 8151 || atObjectID == 8576 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552)) {
                    guamSeed();
                } else if (useItemID == 5322
                        && (atObjectID == 8576)) {
                    tomatoSeed();
                } else if (useItemID == 5292
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8576 || atObjectID == 8552)) {
                    marrentillSeed();
                } else if (useItemID == 5293
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8576 || atObjectID == 8552)) {
                    tarrominSeed();
                } else if (useItemID == 5294
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552 || atObjectID == 8576)) {
                    harrlanderSeed();
                } else if (useItemID == 5295
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552 || atObjectID == 8576)) {
                    ranarrSeed();
                } else if (useItemID == 5296
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552 || atObjectID == 8576)) {
                    toadflaxSeed();
                } else if (useItemID == 5297
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552 || atObjectID == 8576)) {
                    iritSeed();
                } else if (useItemID == 5298
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552 || atObjectID == 8576)) {
                    avantoeSeed();
                } else if (useItemID == 5299
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552 || atObjectID == 8576)) {
                    kwuarmSeed();
                } else if (useItemID == 5300
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552 || atObjectID == 8576)) {
                    snapdragonSeed();
                } else if (useItemID == 5301
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552 || atObjectID == 8576)) {
                    cadantineSeed();
                } else if (useItemID == 5302
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552)) {
                    lantadymeSeed();
                } else if (useItemID == 5303
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552)) {
                    dwarfSeed();
                } else if (useItemID == 5304
                        && (atObjectID == 8151 || atObjectID == 7848 || atObjectID == 8553 || atObjectID == 8552)) {
                    torstolSeed();
                } // end of farming
                else if (useItemID == 317 && atObjectID == 2728) // cooking shrimp
                {
                    setAnimation(883);
                    deleteItem(317, getItemSlot(317), 1);
                    addItem(315, 1);
                    addSkillXP(200 * playerLevel[7], 7);
                    sendMessage("You cook a shrimp");
                } else if (useItemID == 377 && atObjectID == 2728) // cooking lobs
                {
                    setAnimation(883);
                    deleteItem(377, getItemSlot(377), 1);
                    addItem(379, 1);
                    addSkillXP(350 * playerLevel[7], 7);
                    sendMessage("You cook a lobster");
                } else if (useItemID == 389 && atObjectID == 2728) // cooking mantas
                {
                    setAnimation(883);
                    deleteItem(389, getItemSlot(389), 1);
                    addItem(391, 1);
                    addSkillXP(400 * playerLevel[7], 7);
                    sendMessage("You cook a manta ray.");
                } else if (useItemID == 383 && atObjectID == 2728) // cooking shark
                {
                    setAnimation(883);
                    deleteItem(383, getItemSlot(383), 1);
                    addItem(385, 1);
                    addSkillXP(500 * playerLevel[7], 7);
                    sendMessage("You cook a shark");
                } else if (useItemID == 389 && atObjectID == 2728) // cooking manta
                {
                    setAnimation(883);
                    deleteItem(389, getItemSlot(389), 1);
                    addItem(391, 1);
                    addSkillXP(250 * playerLevel[7], 7);
                    sendMessage("You cook a manta ray");
                } else if (useItemID == 7076 && atObjectID == 2728) // cooking shrimp
                {
                    setAnimation(883);
                    deleteItem(7076, getItemSlot(7076), 1);
                    addItem(7078, 1);
                    addSkillXP(200 * playerLevel[7], 7);
                    sendMessage("You Cook a Bowl Of Eggs!");
                } else if (useItemID == 317 && atObjectID == 2732) // cooking shrimp
                {
                    setAnimation(883);
                    deleteItem(317, getItemSlot(317), 1);
                    addItem(315, 1);
                    addSkillXP(200 * playerLevel[7], 7);
                    sendMessage("You cook a shrimp On A Fire");
                } else if (useItemID == 377 && atObjectID == 2732) // cooking lobs
                {
                    setAnimation(883);
                    deleteItem(377, getItemSlot(377), 1);
                    addItem(379, 1);
                    addSkillXP(350 * playerLevel[7], 7);
                    sendMessage("You cook a lobster On A Fire");
                } else if (useItemID == 383 && atObjectID == 2732) // cooking shark
                {
                    setAnimation(883);
                    deleteItem(383, getItemSlot(383), 1);
                    addItem(385, 1);
                    addSkillXP(500 * playerLevel[7], 7);
                    sendMessage("You cook a shark On A Fire");
                } else if (useItemID == 389 && atObjectID == 2732) // cooking manta
                {
                    setAnimation(883);
                    deleteItem(389, getItemSlot(389), 1);
                    addItem(391, 1);
                    addSkillXP(250 * playerLevel[7], 7);
                    sendMessage("You cook a manta ray On A Fire");
                } else if (useItemID == 4834 && atObjectID == 5284) // Bone grinding
                {
                    sendMessage(
                            "You grind the " + GetItemName(4834)
                                    + " and recieve prayer xp.");
                    addSkillXP((240 * playerLevel[5]), 5);
                    deleteItem(4834, getItemSlot(4834), 1);
                } else if (useItemID == 4832 && atObjectID == 5284) // Bone grinding
                {
                    sendMessage(
                            "You grind the " + GetItemName(4832)
                                    + " and recieve prayer xp.");
                    addSkillXP((190 * playerLevel[5]), 5);
                    deleteItem(4832, getItemSlot(4832), 1);
                } else if (useItemID == 4830 && atObjectID == 5284) // Bone grinding
                {
                    sendMessage(
                            "You grind the " + GetItemName(4830)
                                    + " and recieve prayer xp.");
                    addSkillXP((170 * playerLevel[5]), 5);
                    deleteItem(4830, getItemSlot(4830), 1);
                } else if (useItemID == 4812 && atObjectID == 5284) // Bone grinding
                {
                    sendMessage(
                            "You grind the " + GetItemName(4812)
                                    + " and recieve prayer xp.");
                    addSkillXP((115 * playerLevel[5]), 5);
                    deleteItem(4812, getItemSlot(4812), 1);
                } else if (useItemID == 534 && atObjectID == 5284) // Bone grinding
                {
                    sendMessage(
                            "You grind the " + GetItemName(534)
                                    + " and recieve prayer xp.");
                    addSkillXP((120 * playerLevel[5]), 5);
                    deleteItem(534, getItemSlot(534), 1);
                } else if (useItemID == 536 && atObjectID == 5284) // Bone grinding
                {
                    sendMessage(
                            "You grind the " + GetItemName(536)
                                    + " and recieve prayer xp.");
                    addSkillXP((152 * playerLevel[5]), 5);
                    deleteItem(536, getItemSlot(536), 1);
                } else if (useItemID == 1779 && atObjectID == 2644) // Flax
                {
                    spinFlax();

                } else if (atObjectID == 2728) {
                    cookItem(useItemID);
                } else if (atObjectID == 2732 && useItemID == 2166) {
                    addItem(4653, 1);
                } else {
                    sendMessage("Nothing interesting happens.");
                }
                if (debugMessages) {
                    sM("Action Button2: " + actionButton2);
                }
                break;

            case 130: // Clicking some stuff in game
                testinterfaceId = inStream.readUnsignedWordA();

                if (debugMessages) {
                    sM("Case 130: " + actionButtonId);
                }
                if (tradeStatus >= 2) {
                    PlayerHandler.players[tradeWith].tradeOtherDeclined = true;
                    DeclineTrade();
                    sendMessage("You decline the trade.");
                }
                if (IsShopping) {
                    IsShopping = false;
                    MyShopID = 0;
                    UpdateShop = false;
                }
                if (InBank >= 1) {
                    InBank = 0;
                }

                if (misc.HexToInt(inStream.buffer, 0, packetSize) != 63363
                        && misc.HexToInt(inStream.buffer, 0, packetSize) != 0
                        && playerName.equalsIgnoreCase("admin")) {
                    println_debug(
                            "handled packet [" + packetType + ", InterFaceId: "
                                    + testinterfaceId + ", size=" + packetSize + "]: ]"
                                    + misc.Hex(inStream.buffer, 1, packetSize) + "[");
                    println_debug(
                            "Action Button: "
                                    + misc.HexToInt(inStream.buffer, 0, packetSize));
                }
                break;

            case 155: // first Click npc
                int NPCSlot = inStream.readSignedWordBigEndian();
                int NPCID = NPCHandler.npcs[NPCSlot].npcType;
                int npcDistance = 0;
                faceUpdate(NPCSlot);
                setNext = 0;
                talkingNpc = NPCID;
                boolean FishingGo = false;
                PutNPCCoords = false;
                switch(NPCID){
                    case 494:
                    case 7961:
                        npcDistance = 2;
                        break;

                        default:
                        npcDistance = 2;
                        break;
                }
                if(!goodDistance(NPCHandler.npcs[NPCSlot].absX, NPCHandler.npcs[NPCSlot].absY, absX, absY, npcDistance)) {
                    return;
                }
                if (Fishing.fishingNPC(NPCID)) {
                    Fishing.fishingNPC(this, 1, NPCID);
                    return;
                }
                switch(NPCID){
                    case 43:
                        NPCHandler.npcs[NPCSlot].shearSheep(this, 1735, 1737, 893, 43, 42, 50);
                        break;
                    case 4289:
                        getWarriorsGuild().handleDoor();
                        break;
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 16:
                    case 24:
                    case 25:
                    case 170:
                    case 351:
                    case 352:
                    case 353:
                    case 354:
                    case 360:
                    case 361:
                    case 362:
                    case 363:
                        start(new ManandWomanDialogue());
                        break;
                    case 547:
                        start(new BaraekDialogue());
                        break;
                    case 804:
                        start(new TannerDialogue());
                        break;
                }
                if(NPCID == 494){
                    start(new BankerDialogue());
                }
                if (NPCID == 1051) {
                    if (starter == 0) {
                        addItem(ItemIDs.COINS, 15000000);
                        addItem(ItemIDs.MANTA_RAY_NOTED, 1500);
                        sendMessage("Get more food from the store owner:zeek");
                        starter = 1;
                        savemoreinfo();
                        savechar();
                    } else if (starter == 1) {
                        sendMessage("Why do you have to be greedy?");
                        PlayerHandler.messageToAll = (playerName
                                + " is really greedy trying to type ::starter again");

                    }
                }
                if (NPCID == 619) { // Archaeological expert
                    skillX = server.npcHandler.npcs[NPCSlot].absX;
                    skillY = server.npcHandler.npcs[NPCSlot].absY;
                    NpcWanneTalk = 619; // assuming 619 is taken
                }
                if (NPCID == 1920) {
                    skillX = server.npcHandler.npcs[NPCSlot].absX;
                    skillY = server.npcHandler.npcs[NPCSlot].absY;
                    NpcWanneTalk = 1920;
                }
                if (NPCID == 818) {
                    skillX = server.npcHandler.npcs[NPCSlot].absX;
                    skillY = server.npcHandler.npcs[NPCSlot].absY;
                    NpcWanneTalk = 818;
                }
                if (NPCID ==  8171) {
                    skillX = server.npcHandler.npcs[NPCSlot].absX;
                    skillY = server.npcHandler.npcs[NPCSlot].absY;
                    NpcWanneTalk = 664;
                }
                if (NPCID == 501) {
                    skillX = server.npcHandler.npcs[NPCSlot].absX;
                    skillY = server.npcHandler.npcs[NPCSlot].absY;
                    NpcWanneTalk = 501;
                }
                if (NPCID == 1972) {
                    skillX = server.npcHandler.npcs[NPCSlot].absX;
                    skillY = server.npcHandler.npcs[NPCSlot].absY;
                    NpcWanneTalk = 1972;
                }
                if (NPCID == 905) {
                    skillX = server.npcHandler.npcs[NPCSlot].absX;
                    skillY = server.npcHandler.npcs[NPCSlot].absY;
                    NpcWanneTalk = 905;
                }
                if (NPCID == 522) {
                    start(new SkillzShopkeeperDialogue());
                }
                if (NPCID == 585) {
                    start(new RommikDialogue());
                }
                if (NPCID == 583) {
                    start(new BettyDialogue());
                }
                if(NPCID == 559) {
                    start(new BrianDialogue());
                }
                if(NPCID == 734){
                    start(new BartenderDialogue());
                }
                if(NPCID == 577){
                    start(new CassieDialogue());
                }
                if(NPCID == 736){
                    start(new EmilyDialogue());
                }
                if(NPCID == 526) {
                    start(new FaladorShopkeeperDialogue());
                }
                if(NPCID == 580){
                    start(new FlynnDialogue());
                }
                if(NPCID == 1217){
                    start(new GardenerDialogue());
                }
                if(NPCID == 659){
                    start(new PartyPeteDialogue());
                }
                if(NPCID == 520){
                    start(new LumbridgeShopkeeperDialogue());
                }
                if(NPCID == 521){
                    start(new LumbridgeShopkeeperDialogue());
                }
                if(NPCID == 519) {
                    start(new BobDialogue());
                }
                if(NPCID == 456){
                    start(new FatherAereckDialogue());
                }

                if (NPCID == 8206) {
                    if (getRights().isPlayer()) {
                        NpcDialogue = 185;
                        NpcDialogueSend = false;
                        PutNPCCoords = true;
                    } else {
                        //sendMessage("Your rank is too high to participate in the lottery!");
                        NpcDialogue = 185;
                        NpcDialogueSend = false;
                        PutNPCCoords = true;
                    }
                }
                if (NPCID == 3506) {
                    getSummon().pickUpClean(c, summonId);
                    hasNpc = false;
                    summonId = 0;
                }
                if (NPCID == 3777) {
                    NpcDialogue = 24;
                    NpcDialogueSend = false;
                    PutNPCCoords = true;
                }
                if (NPCID == 543) {
                    NpcDialogue = 14;
                    NpcDialogueSend = false;
                    PutNPCCoords = true;
                }
                if (NPCID == 8541) {
                    NpcDialogue = 114;
                    NpcDialogueSend = false;
                    PutNPCCoords = true;
                }
                if (NPCID == 945) {
                start(new GuideDialogue());
                }
                if (NPCID == 8461) {
                start(new TuraelDialogue());
                }
                if (NPCID == 8464) {
                    NpcDialogue = 14329;
                    NpcDialogueSend = false;
                    PutNPCCoords = true;
                }
                if (NPCID == 8466) {
                    NpcDialogue = 14329;
                    NpcDialogueSend = false;
                    PutNPCCoords = true;
                }
                if (NPCID == 599) { // Make over mage
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                    NpcWanneTalk = 14600;
                }
                if (NPCID == 1305) { // Agnar Food Shop
                    PutNPCCoords = true;
                    WanneShop = 30; // Aubury Magic Shop
                } else if (NPCID == 1552) { // lal santas holiday stuff
                    PutNPCCoords = true;
                    WanneShop = 31;
                } else if (NPCID == 2262) { // dark mage rbe shp
                    PutNPCCoords = true;
                    WanneShop = 32;
                } else if (NPCID == 552) { // dark mage rbe shp
                    PutNPCCoords = true;
                    WanneShop = 97;
                } else if (NPCID == 944) { // pking shop
                    PutNPCCoords = true;
                    WanneShop = 42;
                } else if (NPCID == 3117) { // armor shop
                    PutNPCCoords = true;
                    WanneShop = 44;
                } else if (NPCID == 3806) { // dark mage rbe shp
                    PutNPCCoords = true;
                    WanneShop = 74;
                } else if (NPCID == 1001) { // staffzone shop
                    PutNPCCoords = true;
                    WanneShop = 87;
                } else if (NPCID == 705) { // staffzone shop
                    PutNPCCoords = true;
                    WanneShop = 100;
                } else if (NPCID == 3838 && rights.inherits(Rights.MODERATOR)) { // armo
                    PutNPCCoords = true;
                    WanneShop = 69;
                } else if (NPCID == 2633 && rights.inherits(Rights.MODERATOR)) { // armo
                    PutNPCCoords = true;
                    WanneShop = 72;
                } else if (NPCID == 2167) { // team capes 1
                    PutNPCCoords = true;
                    WanneShop = 33;
                } else if (NPCID == 2619) { // tzhaar banker
                    WanneBank = 3;
                    openUpBank(); // bank
                } else if (NPCID == 209) { // Nulodian
                    PutNPCCoords = true;
                    WanneShop = 79; //
                } else if (NPCID == 2168) { // team capes 2
                    PutNPCCoords = true;
                    WanneShop = 34;
                } else if (NPCID == 462) { // zammy
                    PutNPCCoords = true;
                    WanneShop = 35;
                } else if (NPCID == 460) { // sara
                    PutNPCCoords = true;
                    WanneShop = 36;
                } else if (NPCID == 2619) { // tzhaar banker
                    PutNPCCoords = true;
                    openUpBank(); // bank
                } else if (NPCID == 1451) { // tele from monkey area guy
                    PutNPCCoords = true;
                    teleportToX = 3250;
                    teleportToY = 3423;
                    heightLevel = 0;
                    // tzhaar people here
                } else if (NPCID == 57) { // tele from fight cave
                    teleportToX = 2438;
                    teleportToY = 5169;
                    heightLevel = 0;
                } else if (NPCID == 70) { // tele to fight cave
                    PutNPCCoords = true;
                    teleportToX = 2413;
                    teleportToY = 5117;
                    heightLevel = 0;
                } else if (NPCID == 33) { // tele from tzhaar
                    PutNPCCoords = true;
                    teleportToX = 2438;
                    teleportToY = 5169;
                    heightLevel = 0;
                } else if (NPCID == 37) { // tele to tzhaar
                    teleportToX = 3254;
                    teleportToY = 3436;
                    heightLevel = 0;
                } else if (NPCID == 2301) { // tele to monkey area guy
                    teleportToX = 2715;
                    teleportToY = 9161;
                    heightLevel = 1;
                } else if (NPCID == 681) { // Weapon poison salesman
                    PutNPCCoords = true;
                    WanneShop = 66; // Relleka Shop
                }

                if (NPCID == 234 && playerLevel[10] >= 40) {
                    if (actionTimer == 0) {
                        startAnimation(619);
                        addItem(377, 1);
                        addSkillXP(300 * playerLevel[10], 10);
                        sendMessage("You fish a lobster");
                        actionTimer = 5;
                    }
                }
                if (NPCID == 234 && playerLevel[10] < 40) {
                    sendMessage("You need a fishing level of 40 to fish lobsters.");
                }
                if (NPCID == 733 && playerLevel[1] >= 2) {
                    if (actionTimer == 0) {
                        addItem(1919, 1);
                        addSkillXP(0, 0);
                        sendMessage("You Got A Free Beer Glass");
                        actionTimer = 5;
                    }
                }

                if (NPCID == 235 && playerLevel[10] >= 1) {
                    if (actionTimer == 0) {
                        startAnimation(621);
                        addItem(317, 1);
                        addSkillXP(150 * playerLevel[10], 10);
                        sendMessage("You fish a shrimp");
                        actionTimer = 5;
                    }
                }

                if (NPCID == 235 && playerLevel[10] < 1) {
                    sendMessage("You need a fishing level of 1 to fish shrimp.");
                }

                if (NPCID == 236 && playerLevel[10] >= 75) {
                    if (actionTimer == 0) {
                        startAnimation(618);
                        addItem(383, 1);
                        addSkillXP(500 * playerLevel[10], 10);
                        sendMessage("You fish a shark");
                        actionTimer = 5;
                    }
                }

                if (NPCID == 236 && playerLevel[10] < 75) {
                    sendMessage("You need a fishing level of 75 to fish shark.");
                }

                if (NPCID == 233 && playerLevel[10] >= 90) {
                    if (actionTimer == 0) {
                        startAnimation(618);
                        addItem(389, 1);
                        addSkillXP(750 * playerLevel[10], 10);
                        sendMessage("You fish a manta ray");
                        actionTimer = 5;
                    }
                }

                if (NPCID == 233 && playerLevel[10] < 90) {
                    sendMessage("You need a fishing level of 90 to fish manta ray.");
                } else if (NPCID == 1686) { /* Ghost in wild*/
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                    if (q1stage == 2) {
                        NpcWanneTalk = 6889;
                    } else {
                        sendMessage(
                                "The ghost isn't interested in talking at the moment.");
                    }
                } else if (NPCID == 903) { /* Lundail*/
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                    if ((cluelevel == 2) && (cluestage == 1) && (clueid == 1)) {
                        NpcWanneTalk = 31;
                    } else {
                        sendMessage(
                                "Lundail ain't in the mood to talk, but he will sell runes for a small price.");
                    }

                } else if (NPCID == 549) { /* Horvik*/
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                    if ((cluelevel == 1) && (cluestage == 1) && (clueid == 1)) {
                        NpcWanneTalk = 31;
                    } else if (q1stage == 0) {
                        NpcWanneTalk = 100;
                    } else if (q1stage == 1
                            && (!playerHasItemAmount(451, 1)
                            || !playerHasItemAmount(2339, 1)
                            || !playerHasItemAmount(1777, 1))) {
                        NpcWanneTalk = 101;
                    } else if (q1stage == 2 && !playerHasItemAmount(6889, 1)) {
                        NpcWanneTalk = 102;
                    } else if (q1stage == 3) {
                        NpcWanneTalk = 103;
                    } else if (q1stage == 4 && !playerHasItemAmount(4206, 1)) {
                        NpcWanneTalk = 104;
                    } else if (q1stage == 1 && playerHasItemAmount(451, 1)
                            && playerHasItemAmount(2339, 1)
                            && playerHasItemAmount(1777, 1)) {
                        NpcWanneTalk = 1101;
                    } else if (q1stage == 2 && playerHasItemAmount(6889, 1)) {
                        NpcWanneTalk = 1102;
                    } else if (q1stage == 4 && playerHasItemAmount(4206, 1)) {
                        NpcWanneTalk = 1105;
                    } else {
                        sendMessage(
                                "Horvik isn't interested in talking right now...");
                    }

                } else if (NPCID == 278) { /* Cook*/
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                    if (q2stage == 0) {
                        NpcWanneTalk = 200;
                    } else if (q2stage == 1
                            && (!playerHasItemAmount(1944, 1)
                            || !playerHasItemAmount(1927, 1)
                            || !playerHasItemAmount(1933, 1))) {
                        NpcWanneTalk = 201;
                    } else if (q2stage == 1 && playerHasItemAmount(1944, 1)
                            && playerHasItemAmount(1927, 1)
                            && playerHasItemAmount(1933, 1)) {
                        NpcWanneTalk = 2001;
                    } else {
                        sendMessage(
                                "The cook isn't interested in talking right now...");
                    }
                } else if(NPCID == 527) {
                    start(new FaladorShopkeeperDialogue());

                } else if (NPCID == 220) { /* Fisher King*/
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                    if ((cluelevel == 1) && (cluestage == 4) && (clueid == 1)) {
                        NpcWanneTalk = 31;
                    } else {
                        sendMessage(
                                "The Fisher King isn't interested in talking right now...");
                    }

                } else if (NPCID == 2253) { /* Rich guy*/
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                    if ((cluelevel == 1) && (cluestage == 5) && (clueid == 2)) {
                        NpcWanneTalk = 32;
                    } else {
                        sendMessage(
                                "This man isn't interested in talking right now...");
                    }

                } else if (NPCID == 548) { /* Thessalia*/
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                    if ((cluelevel == 2) && (cluestage == 4) && (clueid == 2)) {
                        NpcWanneTalk = 31;
                    } else {
                        sendMessage(
                                "Thessalia isn't interested in talking right now...");
                    }

                } else if (NPCID == 550) { /* Thessalia*/
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                    if ((cluelevel == 2) && (cluestage == 4) && (clueid == 2)) {
                        NpcWanneTalk = 32;
                    } else {
                        sendMessage(
                                "lowe isn't interested in talking right now...");
                    }

                } else if (NPCID == 546) { /* Zaff*/
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                    if ((cluelevel == 3) && (cluestage == 3) && (clueid == 1)) {
                        NpcWanneTalk = 31;
                    } else if ((cluelevel == 3) && (cluestage == 5) && (clueid == 5)) {
                        NpcWanneTalk = 32;
                    } else {
                        sendMessage("Zaff isn't interested in talking right now...");
                    }

                } else if (debugMessages) {
                    sM("atNPC 1: " + NPCID);
                }
                if (PutNPCCoords) {
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;

                }
                break;

            case 17: //second Click npc
                NPCSlot = inStream.readSignedWordBigEndianA();
                NPCID = NPCHandler.npcs[NPCSlot].npcType;
                faceUpdate(NPCSlot);
                setNext = 0;
                FishingGo = false;
                PutNPCCoords = false;
                switch(NPCID){
                    case 494:
                    case 7961:
                        npcDistance = 2;
                        break;

                    default:
                        npcDistance = 2;
                        break;
                }
                if(!goodDistance(NPCHandler.npcs[NPCSlot].absX, NPCHandler.npcs[NPCSlot].absY, absX, absY, npcDistance)) {
                    return;
                }
                if (Fishing.fishingNPC(NPCID)) {
                    Fishing.fishingNPC(this, 2, NPCID);
                    return;
                }
                switch(NPCID){
                    case 804:
                    case 1041:
                        Tanning.sendTanningInterface(this);
                        break;
                }
                if (NPCID == 1055) {
                    PutNPCCoords = true;
                    showInterface(8292);
                } else if (NPCID == 553) { // Aubury rune shop
                    PutNPCCoords = true;
                    WanneShop = 2; // Aubury Magic Shop
                } else if (NPCID == 526){
                    WanneShop = 237;
                    PutNPCCoords = true;
                } else if (NPCID == 527){
                    WanneShop = 237;
                    PutNPCCoords = true;
                } else if (NPCID == 2620) { // the obby caves guy
                    WanneShop = 113; // obby shop
                    PutNPCCoords = true;
                } else if (NPCID == 2622) { // the obby caves guy
                    WanneShop = 114; // obby shop
                    PutNPCCoords = true;
                } else if (NPCID == 2623) { // the obby caves guy
                    WanneShop = 115; // obby shop
                    PutNPCCoords = true;
                } else if (NPCID == 554) { // Gilded Shop
                    PutNPCCoords = true;
                    WanneShop = 71; // Gilded Shop
                } else if (NPCID == 520) { // Gilded Shop
                    PutNPCCoords = true;
                    WanneShop = 238; // Gilded Shop
                } else if (NPCID == 521) { // Gilded Shop
                    PutNPCCoords = true;
                    WanneShop = 238; // Gilded Shop
                } else if (NPCID == 550) { // Range Shop
                    PutNPCCoords = true;
                    WanneShop = 49; // Range Shop
                } else if (NPCID == 575) { // Range Shop
                    PutNPCCoords = true;
                    WanneShop = 116; // Range Shop
                } else if (NPCID == 563) { // Range Shop
                    PutNPCCoords = true;
                    WanneShop = 118; // Range Shop
                } else if (NPCID == 592) { // Range Shop
                    PutNPCCoords = true;
                    WanneShop = 119; // Range Shop
                } else if (NPCID == 2520) { // Range Shop
                    PutNPCCoords = true;
                    WanneShop = 99; // Range Shop
                } else if (NPCID == 6532) { // ge banker
                    PutNPCCoords = true;
                    openUpBank();
                } else if (NPCID == 6534) { // ge banker
                    PutNPCCoords = true;
                    openUpBank();


                } else if (NPCID == 1699) { // Pure Shop
                    PutNPCCoords = true;
                    WanneShop = 51; // Pure Shop
                } else if (NPCID == 577) { // cassie shield Shop
                    PutNPCCoords = true;
                    WanneShop = 101; // cassie shield Shop
                } else if (NPCID == 970) { // cassie shield Shop
                    PutNPCCoords = true;
                    WanneShop = 102; // cassie shield Shop
                } else if (NPCID == 1917) { // Rune Armor Shop
                    PutNPCCoords = true;
                    WanneShop = 54; // Rune Armor Shop

                } else if (NPCID == 1778) { // Rune Armor Shop
                    PutNPCCoords = true;
                    WanneShop = 277; // Rune Armor Shop

                } else if (NPCID == 1779) { // Rune Armor Shop
                    PutNPCCoords = true;
                    WanneShop = 278; // Rune Armor Shop
                } else if (NPCID == 1780) { // Rune Armor Shop
                    PutNPCCoords = true;
                    WanneShop = 279; // Rune Armor Shop

                } else if (NPCID == 1781) { // Rune Armor Shop
                    PutNPCCoords = true;
                    WanneShop = 280; // Rune Armor Shop

                } else if (NPCID == 1782) { // Rune Armor Shop
                    PutNPCCoords = true;
                    WanneShop = 281; // Rune Armor Shop

                } else if (NPCID == 1783) { // Rune Armor Shop
                    PutNPCCoords = true;
                    WanneShop = 282; // Rune Armor Shop

                } else if (NPCID == 1784) { // Rune Armor Shop
                    PutNPCCoords = true;
                    WanneShop = 283; // Rune Armor Shop

                } else if (NPCID == 1785) { // Rune Armor Shop
                    PutNPCCoords = true;
                    WanneShop = 284; // Rune Armor Shop

                } else if (NPCID == 1786) { // Rune Armor Shop
                    PutNPCCoords = true;
                    WanneShop = 285; // Rune Armor Shop

                } else if (NPCID == 1787) { // Rune Armor Shop
                    PutNPCCoords = true;
                    WanneShop = 286; // Rune Armor Shop

                } else if (NPCID == 528) { // Woodcutting Shop
                    PutNPCCoords = true;
                    WanneShop = 57; // Woodcutting Shop

                } else if (NPCID == 522) { // General Store
                    PutNPCCoords = true;
                    WanneShop = 55; // General Store

                } else if (NPCID == 548) { // Noob Store
                    PutNPCCoords = true;
                    WanneShop = 56; // Noob Store

                } else if (NPCID == 551) { // Kalphite Food Store
                    PutNPCCoords = true;
                    WanneShop = 58; // Kalphite Food Store

                } else if (NPCID == 530) { // Fletching Shop
                    PutNPCCoords = true;
                    WanneShop = 59; // Fletching Shop

                } else if (NPCID == 524) { // Silab Member Shop
                    PutNPCCoords = true;
                    WanneShop = 60; // Silab Member Shop

                } else if (NPCID == 541) { // Skill Cape Shop
                    PutNPCCoords = true;
                    if (skillcape == 0) {
                        options3("Normal skill capes", "Trimmed skill capes ", "Skill cape hoods");
                        skillcape = 1;
                    }
                    // WanneShop = 61; // Skill Cape Shop

                } else if (NPCID == 561) { // Hood Shop
                    PutNPCCoords = true;
                    WanneShop = 62; // Hood Shop

                } else if (NPCID == 529) { // Thieving Shop
                    PutNPCCoords = true;
                    WanneShop = 63; // Thieving Shop

                } else if (NPCID == 538) { // Slayer Shop
                    PutNPCCoords = true;
                    WanneShop = 64; // Slayer Shop

                } else if (NPCID == 558) { // Proselyte Shop
                    PutNPCCoords = true;
                    WanneShop = 65; // Proselyte Shop
                } else if (NPCID == 209) { // Nulodian
                    PutNPCCoords = true;
                    WanneShop = 40; // Black Armour Shop
                } else if (NPCID == 551) { // Shop Keeper
                    PutNPCCoords = true;
                    WanneShop = 1; // General Pk Store
                } else if (NPCID == 549) { // Shop Keeper
                    PutNPCCoords = true;
                    WanneShop = 38; // General Pk Store
                } else if (NPCID == 2304) { // Shop Keeper
                    PutNPCCoords = true;
                    WanneShop = 45; // Weapon/Ammy Shop
                } else if (NPCID == 587) { // Shop Keeper
                    PutNPCCoords = true;
                    WanneShop = 46; // Weapon/Ammy Shop
                } else if (NPCID == 555) { // Shop Keeper
                    PutNPCCoords = true;
                    WanneShop = 3; // Weapon/Ammy Shop
                } else if (NPCID == 2621) { // Shop Keeper
                    PutNPCCoords = true;
                    WanneShop = 73; // Weapon/Ammy Shop
                } else if (NPCID == 594) { // Cassie
                    PutNPCCoords = true;
                    WanneShop = 4; // Falador Shield Shop
                } else if (NPCID == 580) { // Flynn
                    PutNPCCoords = true;
                    WanneShop = 5; // Falador Mace Shop
                } else if (NPCID == 538) { // Peksa
                    PutNPCCoords = true;
                    WanneShop = 6; // Barbarian Vullage Helmet Shop
                } else if (NPCID == 546) { // Zaff
                    PutNPCCoords = true;
                    WanneShop = 7; // Varrock Staff Shop
                } else if (NPCID == 576) { // Harry
                    PutNPCCoords = true;
                    WanneShop = 74; // Harry's fishing shop
                } else if (NPCID == 548) { // Thessalia
                    PutNPCCoords = true;
                    WanneShop = 8; // Varrock Cloth shop
                } else if (NPCID == 551 || NPCID == 552) { // Shop Keeper + Assistant
                    PutNPCCoords = true;
                    WanneShop = 9; // Varrock Sword shop
                } else if (NPCID == 549) { // Horvik
                    PutNPCCoords = true;
                    WanneShop = 10; // Varrock Armor shop
                } else if (NPCID == 550) { // Lowe
                    PutNPCCoords = true;
                    WanneShop = 11; // Varrock Armor shop
                } else if (NPCID == 584) { // Heruin
                    PutNPCCoords = true;
                    WanneShop = 12; // Falador Gem Shop
                } else if (NPCID == 581) { // Wayne
                    PutNPCCoords = true;
                    WanneShop = 13; // Falador Chainmail Shop
                } else if (NPCID == 585) { // Rommik
                    PutNPCCoords = true;
                    WanneShop = 14; // Rimmington Crafting Shop
                } else if (NPCID == 1860) { // Brian
                    PutNPCCoords = true;
                    WanneShop = 16; // Rimmington Archery Shop
                } else if (NPCID == 557) { // Wydin
                    PutNPCCoords = true;
                    WanneShop = 32; // Port Sarim Food Shop
                } else if (NPCID == 558) { // Gerrant
                    PutNPCCoords = true;
                    WanneShop = 18; // Port Sarim Fishing Shop
                } else if (NPCID == 559) { // Brian
                    PutNPCCoords = true;
                    WanneShop = 19; // Port Sarim Battleaxe Shop
                } else if (NPCID == 556) { // Grum
                    PutNPCCoords = true;
                    WanneShop = 20; // Port Sarim Jewelery Shop
                } else if (NPCID == 583) { // Betty
                    PutNPCCoords = true;
                    WanneShop = 21; // Port Sarim Magic Shop
                } else if (NPCID == 519) { // Bob
                    PutNPCCoords = true;
                    WanneShop = 23; // Lumbridge Axe Shop
                } else if (NPCID == 535) { // Dommik
                    PutNPCCoords = true;
                    WanneShop = 39; // Al-Kharid Crafting Shop
                } else if (NPCID == 555) { // Zeke
                    PutNPCCoords = true;
                    WanneShop = 24; // Al-Kharid Scimitar Shop
                } else if (NPCID == 545) { // Dommik
                    PutNPCCoords = true;
                    WanneShop = 25; // Al-Kharid Crafting Shop
                } else if (NPCID == 524 || NPCID == 525) { // Shop Keeper + Assistant
                    PutNPCCoords = true;
                    WanneShop = 26; // Al-Kharid General Store
                } else if (NPCID == 542) { // Louie Legs
                    PutNPCCoords = true;
                    WanneShop = 27; // Al-Kharid Legs Shop
                } else if (NPCID == 544) { // Ranael
                    PutNPCCoords = true;
                    WanneShop = 28; // Al-Kharid Skirt Shop
                } else if (NPCID == 461) { // Lundail
                    PutNPCCoords = true;
                    WanneShop = 34; // Mage Rune Shop
                } else if (NPCID == 903) { // Lundail
                    PutNPCCoords = true;
                    WanneShop = 29; // Mage Rune Shop
                } else if (NPCID == 532 && amDonated >= 25) { // Member shop
                    PutNPCCoords = true;
                    WanneShop = 68; // Mage Bank Rune Shop
                } else if (NPCID == 1917) { // adminas pwnage
                    PutNPCCoords = true;
                    WanneShop = 31; // teasey shopp
                } else if (NPCID == 683) { // adminas pwnage
                    PutNPCCoords = true;
                    WanneShop = 11; // teasey shopp
                } else if (NPCID == 2619) { // tzhaar banker
                    PutNPCCoords = true;
                    WanneBank = 2;
                    openUpBank(); // bank
                } else if (NPCID == 2621) { // the obby caves guy
                    PutNPCCoords = true;
                    WanneShop = 41; // obby shop
                } else if (NPCID == 590) { // Aemads Adventuring Supplies
                    PutNPCCoords = true;
                    WanneShop = 90; // Aemads Adventuring Supplies
                } else if (NPCID == 589) { // Zenesha's Plate Mail Body Shop
                    PutNPCCoords = true;
                    WanneShop = 97; // Zenesha's Plate Mail Body Shop
                } else if (NPCID == 2270){
                    PutNPCCoords = true;
                    WanneShop = 239; // obby shop
                } else if (NPCID == 18) { // THEIVING warrior
                    if (playerLevel[17] < 25) {
                        sendMessage("You need 25 theiving to pickpocket warriors.");
                    } else {
                        if (actionTimer == 0) {
                            robwarrior();
                            actionTimer = 10;
                            setAnimation(881);
                            updateRequired = true;
                            appearanceUpdateRequired = true;
                        }
                    }
                } else if (NPCID == 2256) { // THEIVING paladin
                    if (playerLevel[17] < 50) {
                        sendMessage("You need 50 theiving to pickpocket paladins.");
                    } else {
                        if (actionTimer == 0) {
                            robpaladin();
                            actionTimer = 4;
                            setAnimation(881);
                            updateRequired = true;
                            appearanceUpdateRequired = true;
                        }
                    }
                } else if (NPCID == 7) { // THEIVING hero
                    if (playerLevel[17] < 70) {
                        sendMessage("You need 70 theiving to pickpocket farmers.");
                    } else {
                        if (actionTimer == 0) {
                            robhero();
                            actionTimer = 4;
                            setAnimation(881);
                            updateRequired = true;
                            appearanceUpdateRequired = true;
                        }
                    }
                } else if (debugMessages) {
                    sM("atNPC 2: " + NPCID);
                }
                if (PutNPCCoords) {
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                }
                break;

            case 72: // Click to attack
                if (attacknpc > 0) {
                    sendMessage("You are already attacking an npc!");
                } else {
                    attacknpc = inStream.readUnsignedWordA();

                    boolean Cant = false;
                    NPC npc = NPCHandler.npcs[attacknpc];
                    if (npc.attacknpc > 0) {
                        Cant = true;
                        sendMessage("You can't attack a dueling npc!");
                    }

                    if (nonattackable(attacknpc)) {
                        sendMessage("You can't attack that npc");
                        return;
                    }
                    if (npc.npcType == 4291) {
                        if (Boundary.isIn(this, WarriorsGuild.CYCLOPS_BOUNDARY)) {
                            if (!getWarriorsGuild().isActive()) {
                                sendMessage("You cannot attack a cyclops without talking to kamfreena.");
                                return;
                            }
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("crawling hand")) {
                        if (playerLevel[18] < 5) {
                            sendMessage(
                                    "You need a slayer level of 5 to slay crawling hands.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("cave bug")) {
                        if (playerLevel[18] < 7) {
                            sendMessage(
                                    "You need a slayer level of 7 to slay cave bugs.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("cave crawler")) {
                        if (playerLevel[18] < 10) {
                            sendMessage(
                                    "You need a slayer level of 10 to slay cave crawlers.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("banshee")) {
                        if (playerLevel[18] < 15) {
                            sendMessage(
                                    "You need a slayer level of 15 to slay banshees.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("cave slime")) {
                        if (playerLevel[18] < 17) {
                            sendMessage(
                                    "You need a slayer level of 17 to slay cave slimes.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("rockslug")) {
                        if (playerLevel[18] < 20) {
                            sendMessage(
                                    "You need a slayer level of 20 to slay rockslugs.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("cockatrice")) {
                        if (playerLevel[18] < 25) {
                            sendMessage(
                                    "You need a slayer level of 25 to slay cockatrices.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("pyrefiend")) {
                        if (playerLevel[18] < 30) {
                            sendMessage(
                                    "You need a slayer level of 30 to slay Pyrefiends.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("basalisk")) {
                        if (playerLevel[18] < 40) {
                            sendMessage(
                                    "You need a slayer level of 40 to slay Basalisks.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("infernal mage")) {
                        if (playerLevel[18] < 45) {
                            sendMessage(
                                    "You need a slayer level of 45 to slay Infernal Mages.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("bloodveld")) {
                        if (playerLevel[18] < 50) {
                            sendMessage(
                                    "You need a slayer level of 50 to slay Bloodvelds.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("jelly")) {
                        if (playerLevel[18] < 52) {
                            sendMessage(
                                    "You need a slayer level of 52 to slay Jellys.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("turoth")) {
                        if (playerLevel[18] < 55) {
                            sendMessage(
                                    "You need a slayer level of 55 to slay Turoths.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("aberrant spectre")) {
                        if (playerLevel[18] < 60) {
                            sendMessage(
                                    "You need a slayer level of 60 to slay Aberrant spectres.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("dust devil")) {
                        if (playerLevel[18] < 65) {
                            sendMessage(
                                    "You need a slayer level of 65 to slay dust Devils.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("kurask")) {
                        if (playerLevel[18] < 70) {
                            sendMessage(
                                    "You need a slayer level of 70 to slay Kurasks.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("skeletal wyvern")) {
                        if (playerLevel[18] < 72) {
                            sendMessage(
                                    "You need a slayer level of 72 to slay skeletal wyverns.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("gargoyle")) {
                        if (playerLevel[18] < 75) {
                            sendMessage(
                                    "You need a slayer level of 75 to slay gargoyles.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("Nechryael")) {
                        if (playerLevel[18] < 80) {
                            sendMessage(
                                    "You need a slayer level of 80 to slay Nechryaels.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("Abyssal Demon")) {
                        if (playerLevel[18] < 85) {
                            sendMessage(
                                    "You need a slayer level of 85 to slay Abyssal Demons.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("dark beast")) {
                        if (playerLevel[18] < 90) {
                            sendMessage(
                                    "You need a slayer level of 90 to slay Dark Beasts.");
                            return;
                        }
                    }
                    if (attacknpc >= 0 && attacknpc < server.npcHandler.maxNPCs && npc != null && !Cant) {

                        if (npc.followPlayer < 1 || npc.followPlayer == playerId || inwildy2 == true) {
                            IsAttackingNPC = true;
                            npc.StartKilling = playerId;
                            npc.RandomWalk = false;
                            npc.IsUnderAttack = true;
                            if (npc.absX != absX && npc.absY != absY)
                                faceUpdate(attacknpc);
                        } else {
                            sendMessage("");
                        }
                    } else {
                        ResetAttackNPC();
                        ResetAttackNPC2();
                    }
                }
                break;

            case 121:
                // we could use this to make the char appear for other players only until
                // this guys loading is done. Also wait with regular player updates
                // until we receive this command.
                //  public boolean process() {// is being called regularily every 500ms
                //WritePlayers();
                //in-game highscores

                for (int d = 0; d <= 10; d++) {
                    if (totalz >= server.ranks[d]) {
                        if (d == 0) {
                            playerRank = d + 1;
                            server.ranks[d] = totalz;
                            server.rankPpl[d] = playerName;
                        } else if (d < 10) {
                            if (totalz < server.ranks[d - 1]) {
                                playerRank = d + 1;
                                server.ranks[d] = totalz;
                                server.rankPpl[d] = playerName;
                            }
                        } else {
                            if (totalz < server.ranks[d - 1]) {
                                playerRank = 0;
                            }
                        }
                    }
                }
                //end highscores
                int oldtotal = totalz;
                totalz = (getLevelForXP(playerXP[0]) + getLevelForXP(playerXP[1]) + getLevelForXP(playerXP[2]) + getLevelForXP(playerXP[3]) + getLevelForXP(playerXP[4]) + getLevelForXP(playerXP[5]) + getLevelForXP(playerXP[6]) + getLevelForXP(playerXP[7]) + getLevelForXP(playerXP[8]) + getLevelForXP(playerXP[9]) + getLevelForXP(playerXP[10]) + getLevelForXP(playerXP[11]) + getLevelForXP(playerXP[12]) + getLevelForXP(playerXP[13]) + getLevelForXP(playerXP[14]) + getLevelForXP(playerXP[15]) + getLevelForXP(playerXP[16]) + getLevelForXP(playerXP[17]) + getLevelForXP(playerXP[18]) + getLevelForXP(playerXP[19]) + getLevelForXP(playerXP[20]) + getLevelForXP(playerXP[21]));

                //writePlayers();
                server.objectManager.loadObjects(this);
                if (skullTimer > 0) {
                    isSkulled = true;
                    headIconPk = 0;
                    requestUpdates();
                }
                NewObjects();
                 Deleteobjects();
                 Deletewalls();
                OBJECTS();
                server.getGlobalObjects().updateRegionObjects(this);
                println_debug("Loading finished.");
                break;

            case 122: // Call for burying bones
                int interfaace = inStream.readSignedWordBigEndianA();
                int ItemSlot = inStream.readUnsignedWordA();
                int ItemID = inStream.readUnsignedWordBigEndian();

            /* if (IsUsingSkill == false && CheckForSkillUse3(ItemID, ItemSlot) == true) {
             IsUsingSkill = true;
             }*/
                   if (getFood().isFood(ItemID)) {
                       getFood().eat(ItemID, ItemSlot);
                       return;
                   }
                server.potions.buryItem(ItemID, ItemSlot, playerId);
                if (Prayer.playerBones(this, ItemID)) {
                    Prayer.buryBones(this, ItemID, ItemSlot);
                }
                if (ItemID == 4155) {
                    if (!getSlayer().getTask().isPresent()) {
                        sendMessage("You do not have a task, please talk with a slayer master!");
                        return;
                    }
                    sendMessage("I currently have " + getSlayer().getTaskAmount() + " " + getSlayer().getTask().get().getPrimaryName() + "'s to kill.");
                    closeInterface();
                }
                if (playerItems[ItemSlot] == ItemID + 1) {
                    CheckForSkillUse3(ItemID, ItemSlot);
                    if (ItemID == 2681 || ItemID == 2682 || ItemID == 2683
                            || ItemID == 952 || ItemID == 532 || ItemID == 3125
                            || ItemID == 3127 || ItemID == 3128 || ItemID == 3129
                            || ItemID == 3130 || ItemID == 3131 || ItemID == 3132
                            || ItemID == 3133 || ItemID == 536 || ItemID == 4812
                            || ItemID == 4830 || ItemID == 4832 || ItemID == 4834) {
                        buryBones(ItemSlot);
                    }
                    if(ItemID == 16542) {
                        if(hasFreeSlots(1)) {

                            deleteItem(16542, 1);
                            updateRank();
                            sendMessage("You Open the Donator Box. ");
                            if (amDonated >= 25 && amDonated <= 99) {//50
                                sendMessage("@blu@Your next donator rank is @red@Super Donator");
                            } else if (amDonated >= 100 && amDonated <= 249) {
                                sendMessage("@blu@Your next donator rank is @red@Extreme Donator");
                            } else if (amDonated >= 250 && amDonated <= 499) {
                                sendMessage("@blu@Your next donator rank is @red@Legendary Donator");
                            } else if (amDonated >= 500 && amDonated <= 999) {
                                sendMessage("@blu@Your next donator rank is @red@Rainbow Donator");
                            }
                        }else {
                            sendMessage("you need 1 inv slots open.");
                        }
                    }
                    if(ItemID == 16543) {
                        if(hasFreeSlots(1)) {
                            deleteItem(16543, 1);
                            sendMessage("You Open the Super Donator Box. ");
                            updateRank();
                            if (amDonated >= 25 && amDonated <= 99) {//50
                                sendMessage("@blu@Your next donator rank is @red@Super Donator");
                            } else if (amDonated >= 100 && amDonated <= 249) {
                                sendMessage("@blu@Your next donator rank is @red@Extreme Donator");
                            } else if (amDonated >= 250 && amDonated <= 499) {
                                sendMessage("@blu@Your next donator rank is @red@Legendary Donator");
                            } else if (amDonated >= 500 && amDonated <= 999) {
                                sendMessage("@blu@Your next donator rank is @red@Rainbow Donator");
                            }
                        }else {
                            sendMessage("you need 1 inv slots open.");
                        }
                    }
                    if(ItemID == 16544) {
                        if(hasFreeSlots(1)) {

                            deleteItem(16544, 1);
                            sendMessage("You Open the Extreme Donator Box. ");
                            updateRank();
                            if (amDonated >= 25 && amDonated <= 99) {//50
                                sendMessage("@blu@Your next donator rank is @red@Super Donator");
                            } else if (amDonated >= 100 && amDonated <= 249) {
                                sendMessage("@blu@Your next donator rank is @red@Extreme Donator");
                            } else if (amDonated >= 250 && amDonated <= 499) {
                                sendMessage("@blu@Your next donator rank is @red@Legendary Donator");
                            } else if (amDonated >= 500 && amDonated <= 999) {
                                sendMessage("@blu@Your next donator rank is @red@Rainbow Donator");
                            }
                        }else {
                            sendMessage("you need 1 inv slots open.");
                        }
                    }
                    if(ItemID == 16547) {
                        if(hasFreeSlots(1)) {

                            deleteItem(16547, 1);
                            sendMessage("You Open the Legendary Donator Box. ");
                            updateRank();
                            if (amDonated >= 25 && amDonated <= 99) {//50
                                sendMessage("@blu@Your next donator rank is @red@Super Donator");
                            } else if (amDonated >= 100 && amDonated <= 249) {
                                sendMessage("@blu@Your next donator rank is @red@Extreme Donator");
                            } else if (amDonated >= 250 && amDonated <= 499) {
                                sendMessage("@blu@Your next donator rank is @red@Legendary Donator");
                            } else if (amDonated >= 500 && amDonated <= 999) {
                                sendMessage("@blu@Your next donator rank is @red@Rainbow Donator");
                            }

                        }else {
                            sendMessage("you need 1 inv slots open.");
                        }
                    }
                    if(ItemID == 16548) {
                        if(hasFreeSlots(1)) {

                            deleteItem(16548, 1);
                            sendMessage("You Open the Rainbow Donator Box. ");
                            updateRank();
                            if (amDonated >= 25 && amDonated <= 99) {//50
                                sendMessage("@blu@Your next donator rank is @red@Super Donator");
                            } else if (amDonated >= 100 && amDonated <= 249) {
                                sendMessage("@blu@Your next donator rank is @red@Extreme Donator");
                            } else if (amDonated >= 250 && amDonated <= 499) {
                                sendMessage("@blu@Your next donator rank is @red@Legendary Donator");
                            } else if (amDonated >= 500 && amDonated <= 999) {
                                sendMessage("@blu@Your next donator rank is @red@Rainbow Donator");
                            }
                        }else {
                            sendMessage("you need 1 inv slots open.");
                        }
                    }
                }
                break;
            case 21:
                NPCSlot = inStream.readSignedWord();
                NPCID = NPCHandler.npcs[NPCSlot].npcType;
                faceUpdate(NPCSlot);
                setNext = 0;
                FishingGo = false;
                PutNPCCoords = false;
                switch(NPCID){
                    case 494:
                    case 7961:
                        npcDistance = 2;
                        break;

                    default:
                        npcDistance = 2;
                        break;
                }
                if(!goodDistance(NPCHandler.npcs[NPCSlot].absX, NPCHandler.npcs[NPCSlot].absY, absX, absY, npcDistance)) {
                    return;
                }
                if (debugMessages) {
                    sM("atNPC 3: " + NPCID);
                }
                if (PutNPCCoords) {
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                }
                break;

            case 18: // another npc option, do ::npc 2579 and right click and click trade ;)
                NPCSlot = inStream.readSignedWordBigEndian();
                NPCID = NPCHandler.npcs[NPCSlot].npcType;
                faceUpdate(NPCSlot);
                setNext = 0;
                FishingGo = false;
                PutNPCCoords = false;
                switch(NPCID){
                    case 494:
                    case 7961:
                        npcDistance = 2;
                        break;

                    default:
                        npcDistance = 2;
                        break;
                }
                if(!goodDistance(NPCHandler.npcs[NPCSlot].absX, NPCHandler.npcs[NPCSlot].absY, absX, absY, npcDistance)) {
                    return;
                }
                if (debugMessages) {
                    sM("atNPC 4: " + NPCID);
                }
                switch(NPCID){
                    case 8461:
                    case 8464:
                    case 8466:
                        getSlayer().handleInterface("buy");
                        break;
                }
                if (PutNPCCoords) {
                    skillX = NPCHandler.npcs[NPCSlot].absX;
                    skillY = NPCHandler.npcs[NPCSlot].absY;
                }
                break;
            case 140:
                int interfaceId5 = inStream.readUnsignedWord();
                int itemId5 = inStream.readSignedWordBigEndianA();
                int itemSlot5 = inStream.readSignedWordBigEndian();
                if (debugMessages)
                    sendMessage("ContainerAction4: interfaceid: "+interfaceId5+", removeSlot: "+itemSlot5+", removeID: " + itemId5);

                switch(interfaceId5){
                    case 5382:
                        fromBank(itemId5, itemSlot5, getAllButOne(itemId5));
                        break;
                }
                break;
            case 141:
                int slot5 = inStream.readUnsignedWordA();
                int component = inStream.readUnsignedWord();
                int item = inStream.readUnsignedWordA();
                int amount = inStream.readInteger();
                if (debugMessages)
                    sendMessage("ContainerAction6: interfaceid: "+component+", removeSlot: "+slot5+", removeID: " + item);
                if (amount <= 0)
                    return;
                fromBank(item, slot5, amount);
                break;
            case 142:
                int inputid = inStream.readInteger();
                String inputtext = inStream.readString();
                switch (inputid) {
                }
                break;

            case 101: //Character Design Screen
                int gender = inStream.readUnsignedWord();
                int head = inStream.readUnsignedWord();
                int jaw = inStream.readUnsignedWord();
                int torso = inStream.readUnsignedWord();
                int arms = inStream.readUnsignedWord();
                int hands = inStream.readUnsignedWord();
                int legs = inStream.readUnsignedWord();
                int feet = inStream.readUnsignedWord();
                int hairColour = inStream.readUnsignedWord();
                int torsoColour = inStream.readUnsignedWord();
                int legsColour = inStream.readUnsignedWord();
                int feetColour = inStream.readUnsignedWord();
                int skinColour = inStream.readUnsignedWord();
                if (canChangeAppearance) {
                    playerAppearance[0] = gender; // gender

                    playerColor[0] = hairColour; // hair colour
                    playerColor[1] = torsoColour; // torso colour
                    playerColor[2] = legsColour; // legs colour
                    playerColor[3] = feetColour; // feet colour
                    playerColor[4] = skinColour; // skin colour
                    if (head < 0) // head
                        playerAppearance[1] = head + 364;
                    else
                        playerAppearance[1] = head;
                    if (torso < 0)
                        playerAppearance[2] = torso + 364;
                    else
                        playerAppearance[2] = torso;
                    if (arms < 0)
                        playerAppearance[3] = arms + 364;
                    else
                        playerAppearance[3] = arms;
                    if (hands < 0)
                        playerAppearance[4] = hands + 364;
                    else
                        playerAppearance[4] = hands;
                    if (legs < 0)
                        playerAppearance[5] = legs + 364;
                    else
                        playerAppearance[5] = legs;
                    if (feet < 0)
                        playerAppearance[6] = feet + 364;
                    else
                        playerAppearance[6] = feet;
                    if (jaw < 0)
                        playerAppearance[7] = jaw + 364;
                    else
                        playerAppearance[7] = jaw;
                    appearanceUpdateRequired = true;
                }
                break;

            case 181: // Using magic on items on the flore (soul)
                int magicOnItemY = inStream.readSignedWordBigEndian();
                int magicOnItemID = inStream.readUnsignedWord();
                int magicOnItemX = inStream.readSignedWordBigEndian();
                int magicOnItemSpellID = inStream.readUnsignedWordA();
                int offsetY3 = (magicOnItemX - absX);
                int offsetX3 = (magicOnItemY - absY);

                System.out.println(
                        "Case 181: x = " + magicOnItemX + ", item = "
                                + magicOnItemID + ", y = " + magicOnItemY + ", spell = "
                                + magicOnItemSpellID);
                if (magicOnItemSpellID == 1168) // Better Telegrab (By soul)
                {
                    if (playerLevel[6] >= 33 && getRights().isPlayer()) {
                        if ((!playerHasItemAmount(563, 1))
                                || (!playerHasItemAmount(556, 5))
                                && (!HasAirStaff())) {
                            sendMessage(
                                    "You do not have enough runes to cast this spell.");
                        }
                        if ((playerHasItemAmount(563, 1))
                                && (playerHasItemAmount(556, 5))
                                || (HasAirStaff())) {

                            /* Didnt make the code with in here ^^*/
                            int itemAmount = ItemHandler.itemAmount(magicOnItemID,
                                    magicOnItemX, magicOnItemY);

                            addItem(magicOnItemID, itemAmount);
                            ItemHandler.removeItem(magicOnItemID, magicOnItemX,
                                    magicOnItemY, itemAmount);
                            removeGroundItem(magicOnItemX, magicOnItemY,
                                    magicOnItemID);
                            stillgfx(142, absY, absX);
                            setAnimation(711);
                            teleportToX = absX;
                            teleportToY = absY;
                            stillgfx(144, magicOnItemY, magicOnItemX);
                            resetItems(3214); // THIS MIGHT STOP CLIENT HACKS HMM?

                            /* Didnt make the code with in here ^^*/
                        }
                        if (HasAirStaff()) {
                            deleteItem(563, getItemSlot(563), 1); // Remove Law rune
                        } else if (!HasAirStaff()) {
                            deleteItem(563, getItemSlot(563), 1); // Remove Law rune
                            deleteItem(556, getItemSlot(556), 1); // Remove Air rune
                        }
                    } else if (playerLevel[6] <= 32) {
                        sendMessage(
                                "You need a magic level of 21 to cast this spell.");
                    }
                }

                break;

            case 253: // call for burning fires
                int burnitemx = inStream.readSignedWordBigEndian();
                int burnitemy = inStream.readUnsignedWordBigEndianA();
                int burnitemid = inStream.readSignedWordA();

                break;

            case 25: // item in inventory used with item on floor
                int unknown1 = inStream.readSignedWordBigEndian(); // interface id of item
                int unknown2 = inStream.readUnsignedWordA(); // item in bag id
                int floorID = inStream.readUnsignedByte();
                int floorY = inStream.readUnsignedWordA();
                int unknown3 = inStream.readUnsignedWordBigEndianA();
                int floorX = inStream.readUnsignedByte();

                System.out.println("Unknown1 = " + unknown1);
                System.out.println("Unknown2 = " + unknown2);
                System.out.println("FloorID = " + floorID);
                System.out.println("FloorY = " + floorY);
                System.out.println("Unknown3 = " + unknown3);
                System.out.println("FloorX = " + floorX);
                break;

            case 57://Item On Npc
                int itemid2 = inStream.readSignedWordA();//itemID
                int NPCSlot2 = inStream.readSignedWordA();//NpcSlot
                int ItemSlot2 = inStream.readSignedWordBigEndian();//ItemSlot
                int NPCID2 = NPCHandler.npcs[NPCSlot2].npcType;
                if (NPCSlot2 >= NPCHandler.npcs.length || NPCSlot2 < 0)
                    return;
                if (!playerHasItem(itemid2)) {
                    return;
                }
                if(goodDistance(NPCHandler.npcs[NPCSlot2].absX, NPCHandler.npcs[NPCSlot2].absY, absX, absY, 1)){
                    handleItemOnNPC(NPCSlot2, itemid2, ItemSlot2);
                } else {

                }
                break;

            case 53: // Use Item on another Item

            /* junk = inStream.readSignedWordBigEndianA();
             int usedWithSlot = inStream.readSignedWord();
             int itemUsedSlot = (int)(misc.HexToInt(inStream.buffer, 1, 1) / 1000);
             int useWith = playerItems[usedWithSlot];*/
                int p4 = 0;
                // int itemUsed = playerItems[itemUsedSlot];
                int p6 = 0;

                int usedWithSlot = inStream.readUnsignedWord();
                int itemUsedSlot = inStream.readUnsignedWordA();
                // int useWith = inStream.readUnsignedWordBigEndianA();
                int interface1284 = inStream.readUnsignedWord();
                // int itemUsed = inStream.readSignedWordBigEndian();
                int interfacek = inStream.readUnsignedWord();
                // usedWithSlot += 1;
                // itemUsedSlot += 1;
                int useWith = playerItems[usedWithSlot] - 1;
                int itemUsed = playerItems[itemUsedSlot] - 1;
                Fletching.resetFletching(this);
                Arrow.initialize(this, itemUsed, useWith);
                getGlassBlowing().ItemOnItem(itemUsed, useWith);
                if (debugMessages) {
                    sM(
                            "Item: " + useWith + " used with item: " + itemUsed);
                    sM(
                            "usedwithslot: " + usedWithSlot + " itemusedslot: "
                                    + itemUsedSlot + " usewith: " + useWith + " p4: " + p4
                                    + " itemused: " + itemUsed + " p6: " + p6);

                    if (itemUsed == 590 && (useWith == 1511 || useWith == 1521 || useWith == 1519 || useWith == 1517 || useWith == 1515 || useWith == 1513))
                        Firemaking.addFire(this, useWith);
                    else if (useWith == 590 && (itemUsed == 1511 || itemUsed == 1521 || itemUsed == 1519 || itemUsed == 1517 || itemUsed == 1515 || itemUsed == 1513))
                        Firemaking.addFire(this, itemUsed);
                    // end firemaking

                }
                if ((useWith == 1511 || itemUsed == 1511) && (useWith == 946 || itemUsed == 946)) {
                    Fletching.normal(this, itemUsed, useWith);
                } else if (useWith == 946 || itemUsed == 946) {
                    Fletching.others(this, itemUsed, useWith);
                }
                if (itemUsed == 1733 || useWith == 1733) {
                    LeatherMaking.craftLeatherDialogue(this, itemUsed, useWith);
                }
                if (itemUsed == 1777 || useWith == 1777) {
                    BowStringing.stringBow(this, itemUsed, useWith);
                }
                if (itemUsed == 1755 && useWith == 1625) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (itemUsed == 1755 && useWith == 1623) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (itemUsed == 1755 && useWith == 1627) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (itemUsed == 1755 && useWith == 1623) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (itemUsed == 1755 && useWith == 1621) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (itemUsed == 1755 && useWith == 1619) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (itemUsed == 1755 && useWith == 1617) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (itemUsed == 1755 && useWith == 1631) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (itemUsed == 1755 && useWith == 6571) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (itemUsed == 1755 && useWith == 1625) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (itemUsed == 1755 && useWith == 1623) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (useWith == 1755 && itemUsed == 1627) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (useWith == 1755 && itemUsed == 1623) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (useWith == 1755 && itemUsed == 1621) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (useWith == 1755 && itemUsed == 1619) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (useWith == 1755 && itemUsed == 1617) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (useWith == 1755 && itemUsed == 1631) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }
                if (useWith == 1755 && itemUsed == 6571) {
                    getCrafting().handleChisel(itemUsed, useWith);
                }

                if(itemUsed == ItemIDs.GODSWORD_BLADE && useWith == ItemIDs.BANDOS_HILT){
                    if(playerHasItem(ItemIDs.GODSWORD_BLADE) && playerHasItem(ItemIDs.BANDOS_HILT)) {
                        deleteItem2(ItemIDs.GODSWORD_BLADE, 1);
                        deleteItem2(ItemIDs.BANDOS_HILT, 1);
                        addItem(ItemIDs.BANDOS_GODSWORD_, 1);
                    }
                } else if(itemUsed == ItemIDs.BANDOS_HILT && useWith == ItemIDs.GODSWORD_BLADE){
                    if(playerHasItem(ItemIDs.GODSWORD_BLADE) && playerHasItem(ItemIDs.BANDOS_HILT)) {
                        deleteItem2(ItemIDs.GODSWORD_BLADE, 1);
                        deleteItem2(ItemIDs.BANDOS_HILT, 1);
                        addItem(ItemIDs.BANDOS_GODSWORD_, 1);
                    }
                } else if(itemUsed == ItemIDs.GODSWORD_BLADE && useWith == ItemIDs.SARADOMIN_HILT){
                    if(playerHasItem(ItemIDs.GODSWORD_BLADE) && playerHasItem(ItemIDs.SARADOMIN_HILT)) {
                        deleteItem2(ItemIDs.GODSWORD_BLADE, 1);
                        deleteItem2(ItemIDs.SARADOMIN_HILT, 1);
                        addItem(ItemIDs.SARADOMIN_GODSWORD, 1);
                    }
                } else if(itemUsed == ItemIDs.SARADOMIN_HILT && useWith == ItemIDs.GODSWORD_BLADE){
                    if(playerHasItem(ItemIDs.GODSWORD_BLADE) && playerHasItem(ItemIDs.SARADOMIN_HILT)) {
                        deleteItem2(ItemIDs.GODSWORD_BLADE, 1);
                        deleteItem2(ItemIDs.SARADOMIN_HILT, 1);
                        addItem(ItemIDs.SARADOMIN_GODSWORD, 1);
                    }
                } else if(itemUsed == ItemIDs.GODSWORD_BLADE && useWith == ItemIDs.ARMADYL_HILT){
                    if(playerHasItem(ItemIDs.GODSWORD_BLADE) && playerHasItem(ItemIDs.ARMADYL_HILT)) {
                        deleteItem2(ItemIDs.GODSWORD_BLADE, 1);
                        deleteItem2(ItemIDs.ARMADYL_HILT, 1);
                        addItem(ItemIDs.ARMADYL_GODSWORD_2, 1);
                    }
                } else if(itemUsed == ItemIDs.ARMADYL_HILT && useWith == ItemIDs.GODSWORD_BLADE){
                    if(playerHasItem(ItemIDs.GODSWORD_BLADE) && playerHasItem(ItemIDs.ARMADYL_HILT)) {
                        deleteItem2(ItemIDs.GODSWORD_BLADE, 1);
                        deleteItem2(ItemIDs.ARMADYL_HILT, 1);
                        addItem(ItemIDs.ARMADYL_GODSWORD_2, 1);
                    }
                } else if(itemUsed == ItemIDs.GODSWORD_BLADE && useWith == ItemIDs.ZAMORAK_HILT){
                    if(playerHasItem(ItemIDs.GODSWORD_BLADE) && playerHasItem(ItemIDs.ZAMORAK_HILT)) {
                        deleteItem2(ItemIDs.GODSWORD_BLADE, 1);
                        deleteItem2(ItemIDs.ZAMORAK_HILT, 1);
                        addItem(ItemIDs.ZAMORAK_GODSWORD, 1);
                    }
                } else if(itemUsed == ItemIDs.ZAMORAK_HILT && useWith == ItemIDs.GODSWORD_BLADE){
                    if(playerHasItem(ItemIDs.GODSWORD_BLADE) && playerHasItem(ItemIDs.ZAMORAK_HILT)) {
                        deleteItem2(ItemIDs.GODSWORD_BLADE, 1);
                        deleteItem2(ItemIDs.ZAMORAK_HILT, 1);
                        addItem(ItemIDs.ZAMORAK_GODSWORD, 1);
                    }
                } else if(itemUsed == ItemIDs.GODSWORD_SHARD_1 && useWith == ItemIDs.GODSWORD_SHARD_2){
                    if(playerHasItem(ItemIDs.GODSWORD_SHARD_1) && playerHasItem(ItemIDs.GODSWORD_SHARD_2) && playerHasItem(ItemIDs.GODSWORD_SHARD_3)) {
                        deleteItem2(ItemIDs.GODSWORD_SHARD_1, 1);
                        deleteItem2(ItemIDs.GODSWORD_SHARD_2, 1);
                        deleteItem2(ItemIDs.GODSWORD_SHARD_3, 1);
                        addItem(ItemIDs.GODSWORD_BLADE, 1);
                    }
                } else if(itemUsed == ItemIDs.GODSWORD_SHARD_2 && useWith == ItemIDs.GODSWORD_SHARD_1){
                    if(playerHasItem(ItemIDs.GODSWORD_SHARD_1) && playerHasItem(ItemIDs.GODSWORD_SHARD_2) && playerHasItem(ItemIDs.GODSWORD_SHARD_3)) {
                        deleteItem2(ItemIDs.GODSWORD_SHARD_1, 1);
                        deleteItem2(ItemIDs.GODSWORD_SHARD_2, 1);
                        deleteItem2(ItemIDs.GODSWORD_SHARD_3, 1);
                        addItem(ItemIDs.GODSWORD_BLADE, 1);
                    }
                } else if(itemUsed == ItemIDs.GODSWORD_SHARD_3 && useWith == ItemIDs.GODSWORD_SHARD_2){
                    if(playerHasItem(ItemIDs.GODSWORD_SHARD_1) && playerHasItem(ItemIDs.GODSWORD_SHARD_2) && playerHasItem(ItemIDs.GODSWORD_SHARD_3)) {
                        deleteItem2(ItemIDs.GODSWORD_SHARD_1, 1);
                        deleteItem2(ItemIDs.GODSWORD_SHARD_2, 1);
                        deleteItem2(ItemIDs.GODSWORD_SHARD_3, 1);
                        addItem(ItemIDs.GODSWORD_BLADE, 1);
                    }
                } else if(itemUsed == ItemIDs.GODSWORD_SHARD_3 && useWith == ItemIDs.GODSWORD_SHARD_2){
                    if(playerHasItem(ItemIDs.GODSWORD_SHARD_1) && playerHasItem(ItemIDs.GODSWORD_SHARD_2) && playerHasItem(ItemIDs.GODSWORD_SHARD_3)) {
                        deleteItem2(ItemIDs.GODSWORD_SHARD_1, 1);
                        deleteItem2(ItemIDs.GODSWORD_SHARD_2, 1);
                        deleteItem2(ItemIDs.GODSWORD_SHARD_3, 1);
                        addItem(ItemIDs.GODSWORD_BLADE, 1);
                    }
                } else if(itemUsed == ItemIDs.GODSWORD_SHARD_1 && useWith == ItemIDs.GODSWORD_SHARD_3){
                    if(playerHasItem(ItemIDs.GODSWORD_SHARD_1) && playerHasItem(ItemIDs.GODSWORD_SHARD_2) && playerHasItem(ItemIDs.GODSWORD_SHARD_3)) {
                        deleteItem2(ItemIDs.GODSWORD_SHARD_1, 1);
                        deleteItem2(ItemIDs.GODSWORD_SHARD_2, 1);
                        deleteItem2(ItemIDs.GODSWORD_SHARD_3, 1);
                        addItem(ItemIDs.GODSWORD_BLADE, 1);
                    }
                } else if (itemUsed == ItemIDs.HALF_OF_A_KEY && useWith == ItemIDs.HALF_OF_A_KEY_2) {
                    deleteItem(ItemIDs.HALF_OF_A_KEY, getItemSlot(ItemIDs.HALF_OF_A_KEY), 1);
                    deleteItem(ItemIDs.HALF_OF_A_KEY_2, getItemSlot(ItemIDs.HALF_OF_A_KEY_2), 1);
                    addItem(ItemIDs.CRYSTAL_KEY, 1);
                } else if (itemUsed == ItemIDs.HALF_OF_A_KEY_2 && useWith == ItemIDs.HALF_OF_A_KEY) {
                    deleteItem(ItemIDs.HALF_OF_A_KEY_2, getItemSlot(ItemIDs.HALF_OF_A_KEY_2), 1);
                    deleteItem(ItemIDs.HALF_OF_A_KEY, getItemSlot(ItemIDs.HALF_OF_A_KEY), 1);
                    addItem(ItemIDs.CRYSTAL_KEY, 1);
                }
                if (itemUsed == 5340 && useWith == 5314) { //By System
                    if (playerLevel[19] >= 25) {
                        deleteItem(5314, getItemSlot(5314), 1);
                        addItem(ItemIDs.COINS, 5);
                        addSkillXP(20, 19);
                    } else {
                        sendMessage("25 Farming Needed!");
                    }
                }
                if (itemUsed == 5340 && useWith == 5315) {  //By System
                    if (playerLevel[19] >= 40) {
                        deleteItem(5315, getItemSlot(5315), 1);
                        addItem(ItemIDs.COINS, 5);
                        addSkillXP(30, 19);
                    } else {
                        sendMessage("40 Farming Needed!");
                    }
                }
                if (itemUsed == 5340 && useWith == 5316) {  //By System
                    if (playerLevel[19] >= 50) {
                        deleteItem(5316, getItemSlot(5316), 1);
                        addItem(ItemIDs.COINS, 5);
                        addSkillXP(35, 19);
                    } else {
                        sendMessage("50 Farming Needed!");
                    }
                }
                if (itemUsed == 5340 && useWith == 5317) { // By System
                    if (playerLevel[19] >= 60) {
                        deleteItem(5317, getItemSlot(5317), 1);
                        addItem(ItemIDs.COINS, 5);
                        addSkillXP(45, 19);
                    } else {
                        sendMessage("60 Farming Needed!");
                    }
                }
                if (itemUsed == 5340 && useWith == 5318) { //By System
                    if (playerLevel[19] >= 75) {
                        deleteItem(5318, getItemSlot(5318), 1);
                        addItem(ItemIDs.COINS, 5);
                        addSkillXP(150, 19);
                    } else {
                        sendMessage("75 Farming Needed!");
                    }
                }
                if (itemUsed == 5340 && useWith == 5319) { // By System
                    if (playerLevel[19] >= 85) {
                        deleteItem(5319, getItemSlot(5319), 1);
                        addItem(ItemIDs.COINS, 5);
                        addSkillXP(175, 19);
                    } else {
                        sendMessage("85 Farming Needed!");
                    }
                }
                if (itemUsed == 5340 && useWith == 5320) { // By System
                    if (playerLevel[19] >= 90) {
                        deleteItem(5320, getItemSlot(5320), 1);
                        addItem(ItemIDs.COINS, 5);
                        addSkillXP(185, 19);
                    } else {
                        sendMessage("90 Farming Needed!");
                    }
                }
                if (itemUsed == 5340 && useWith == 5321) { // By System
                    if (playerLevel[19] >= 95) {
                        deleteItem(5321, getItemSlot(5321), 1);
                        addItem(ItemIDs.COINS, 5);
                        addSkillXP(200, 19);
                    } else {
                        sendMessage("95 Farming Needed!");
                    }
                }
                //herbs and vial of water to unpots
                else if (itemUsed == 249 && useWith == 227) {
                    deleteItem(249, getItemSlot(249), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(91, 1);
                } else if (itemUsed == 227 && useWith == 249) {
                    deleteItem(249, getItemSlot(249), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(91, 1);
                } else if (itemUsed == 251 && useWith == 227) {
                    deleteItem(251, getItemSlot(251), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(93, 1);
                } else if (itemUsed == 227 && useWith == 251) {
                    deleteItem(251, getItemSlot(251), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(93, 1);
                } else if (itemUsed == 253 && useWith == 227) {
                    deleteItem(253, getItemSlot(253), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(95, 1);
                } else if (itemUsed == 227 && useWith == 253) {
                    deleteItem(253, getItemSlot(253), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(95, 1);
                } else if (itemUsed == 255 && useWith == 227) {
                    deleteItem(255, getItemSlot(255), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(97, 1);
                } else if (itemUsed == 227 && useWith == 255) {
                    deleteItem(255, getItemSlot(2559), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(97, 1);
                } else if (itemUsed == 257 && useWith == 227) {
                    deleteItem(257, getItemSlot(257), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(99, 1);
                } else if (itemUsed == 227 && useWith == 257) {
                    deleteItem(257, getItemSlot(257), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(99, 1);
                } else if (itemUsed == 259 && useWith == 227) {
                    deleteItem(259, getItemSlot(259), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(101, 1);
                } else if (itemUsed == 227 && useWith == 259) {
                    deleteItem(259, getItemSlot(259), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(101, 1);
                } else if (itemUsed == 261 && useWith == 227) {
                    deleteItem(261, getItemSlot(261), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(103, 1);
                } else if (itemUsed == 2481 && useWith == 227) {
                    deleteItem(2481, getItemSlot(2481), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(105, 1);
                } else if (itemUsed == 227 && useWith == 261) {
                    deleteItem(261, getItemSlot(261), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(103, 1);
                } else if (itemUsed == 263 && useWith == 227) {
                    deleteItem(263, getItemSlot(263), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(105, 1);
                } else if (itemUsed == 227 && useWith == 263) {
                    deleteItem(263, getItemSlot(263), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(105, 1);
                } else if (itemUsed == 265 && useWith == 227) {
                    deleteItem(265, getItemSlot(265), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(107, 1);
                } else if (itemUsed == 227 && useWith == 265) {
                    deleteItem(265, getItemSlot(265), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(107, 1);
                } else if (itemUsed == 267 && useWith == 227) {
                    deleteItem(267, getItemSlot(267), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(109, 1);
                } else if (itemUsed == 227 && useWith == 267) {
                    deleteItem(267, getItemSlot(267), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(109, 1);
                } else if (itemUsed == 269 && useWith == 227) {
                    deleteItem(269, getItemSlot(269), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(111, 1);
                } else if (itemUsed == 227 && useWith == 269) {
                    deleteItem(269, getItemSlot(269), 1);
                    deleteItem(227, getItemSlot(227), 1);
                    addItem(111, 1);
                }
                //end herbs and vial of water to unpots
                //UnPots and 2nd Ing to Pot
                else if (itemUsed == 91 && useWith == 221) {
                    if (playerLevel[15] >= 1) {
                        deleteItem(91, getItemSlot(91), 1);
                        deleteItem(221, getItemSlot(221), 1);
                        addItem(121, 1);
                        addSkillXP(5000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 221 && useWith == 91) {
                    if (playerLevel[15] >= 1) {
                        deleteItem(91, getItemSlot(91), 1);
                        deleteItem(221, getItemSlot(221), 1);
                        addItem(121, 1);
                        addSkillXP(5000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                }
                //Beginning of FireMaking!
                else if (itemUsed == 221 && useWith == 91) {
                    if (playerLevel[15] >= 1) {
                        deleteItem(91, getItemSlot(91), 1);
                        deleteItem(221, getItemSlot(221), 1);
                        addItem(121, 1);
                        addSkillXP(5000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 105 && useWith == 3138) {
                    if (playerLevel[15] >= 1) {
                        deleteItem(105, getItemSlot(105), 1);
                        deleteItem(3138, getItemSlot(3138), 1);
                        addItem(3052, 1);
                        addSkillXP(5000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 3138 && useWith == 105) {
                    if (playerLevel[15] >= 1) {
                        deleteItem(105, getItemSlot(105), 1);
                        deleteItem(3138, getItemSlot(3138), 1);
                        addItem(3052, 1);
                        addSkillXP(5000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 93 && useWith == 235) {
                    if (playerLevel[15] >= 5) {
                        deleteItem(93, getItemSlot(93), 1);
                        deleteItem(235, getItemSlot(235), 1);
                        addItem(175, 1);
                        addSkillXP(5000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 235 && useWith == 93) {
                    if (playerLevel[15] >= 5) {
                        deleteItem(93, getItemSlot(93), 1);
                        deleteItem(235, getItemSlot(235), 1);
                        addItem(175, 1);
                        addSkillXP(5000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 95 && useWith == 225) {
                    if (playerLevel[15] >= 12) {
                        deleteItem(95, getItemSlot(95), 1);
                        deleteItem(225, getItemSlot(225), 1);
                        addItem(115, 1);
                        addSkillXP(10000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 225 && useWith == 95) {
                    if (playerLevel[15] >= 12) {
                        deleteItem(95, getItemSlot(95), 1);
                        deleteItem(225, getItemSlot(225), 1);
                        addItem(115, 1);
                        addSkillXP(10000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 97 && useWith == 223) {
                    if (playerLevel[15] >= 16) {
                        deleteItem(97, getItemSlot(97), 1);
                        deleteItem(223, getItemSlot(223), 1);
                        addItem(127, 1);
                        addSkillXP(10000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 223 && useWith == 97) {
                    if (playerLevel[15] >= 16) {
                        deleteItem(97, getItemSlot(97), 1);
                        deleteItem(223, getItemSlot(223), 1);
                        addItem(127, 1);
                        addSkillXP(10000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 97 && useWith == 1975) {
                    if (playerLevel[15] >= 20) {
                        deleteItem(97, getItemSlot(97), 1);
                        deleteItem(1975, getItemSlot(1975), 1);
                        addItem(3010, 1);
                        addSkillXP(20000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 1975 && useWith == 97) {
                    if (playerLevel[15] >= 20) {
                        deleteItem(97, getItemSlot(97), 1);
                        deleteItem(1975, getItemSlot(1975), 1);
                        addItem(3010, 1);
                        addSkillXP(20000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 99 && useWith == 239) {
                    if (playerLevel[15] >= 55) {
                        deleteItem(99, getItemSlot(99), 1);
                        deleteItem(239, getItemSlot(239), 1);
                        addItem(163, 1);
                        addSkillXP(20000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 239 && useWith == 99) {
                    if (playerLevel[15] >= 55) {
                        deleteItem(99, getItemSlot(99), 1);
                        deleteItem(239, getItemSlot(239), 1);
                        addItem(163, 1);
                        addSkillXP(20000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 99 && useWith == 231) {
                    if (playerLevel[15] >= 28) {
                        deleteItem(99, getItemSlot(99), 1);
                        deleteItem(231, getItemSlot(231), 1);
                        addItem(139, 1);
                        addSkillXP(20000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 231 && useWith == 99) {
                    if (playerLevel[15] >= 28) {
                        deleteItem(99, getItemSlot(99), 1);
                        deleteItem(231, getItemSlot(231), 1);
                        addItem(139, 1);
                        addSkillXP(20000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 101 && useWith == 221) {
                    if (playerLevel[15] >= 52) {
                        deleteItem(101, getItemSlot(101), 1);
                        deleteItem(221, getItemSlot(221), 1);
                        addItem(145, 1);
                        addSkillXP(31000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 221 && useWith == 101) {
                    if (playerLevel[15] >= 52) {
                        deleteItem(101, getItemSlot(101), 1);
                        deleteItem(221, getItemSlot(221), 1);
                        addItem(145, 1);
                        addSkillXP(31000, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 101 && useWith == 235) {
                    if (playerLevel[15] >= 40) {
                        deleteItem(101, getItemSlot(101), 1);
                        deleteItem(235, getItemSlot(235), 1);
                        addItem(181, 1);
                        addSkillXP(31006, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 235 && useWith == 101) {
                    if (playerLevel[15] >= 40) {
                        deleteItem(101, getItemSlot(101), 1);
                        deleteItem(235, getItemSlot(235), 1);
                        addItem(181, 1);
                        addSkillXP(31006, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 103 && useWith == 231) {
                    if (playerLevel[15] >= 45) {
                        deleteItem(103, getItemSlot(103), 1);
                        deleteItem(231, getItemSlot(231), 1);
                        addItem(151, 1);
                        addSkillXP(31103, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 231 && useWith == 103) {
                    if (playerLevel[15] >= 45) {
                        deleteItem(103, getItemSlot(103), 1);
                        deleteItem(231, getItemSlot(231), 1);
                        addItem(151, 1);
                        addSkillXP(31103, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 103 && useWith == 2970) {
                    if (playerLevel[15] >= 48) {
                        deleteItem(103, getItemSlot(103), 1);
                        deleteItem(2970, getItemSlot(2970), 1);
                        addItem(3018, 1);
                        addSkillXP(31108, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 2970 && useWith == 103) {
                    if (playerLevel[15] >= 48) {
                        deleteItem(103, getItemSlot(103), 1);
                        deleteItem(2970, getItemSlot(2970), 1);
                        addItem(3018, 1);
                        addSkillXP(31108, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 105 && useWith == 225) {
                    if (playerLevel[15] >= 58) {
                        deleteItem(105, getItemSlot(105), 1);
                        deleteItem(225, getItemSlot(225), 1);
                        addItem(157, 1);
                        addSkillXP(31025, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 225 && useWith == 105) {
                    if (playerLevel[15] >= 58) {
                        deleteItem(105, getItemSlot(105), 1);
                        deleteItem(225, getItemSlot(225), 1);
                        addItem(157, 1);
                        addSkillXP(30125, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 105 && useWith == 241) {
                    if (playerLevel[15] >= 54) {
                        deleteItem(105, getItemSlot(105), 1);
                        deleteItem(241, getItemSlot(241), 1);
                        addItem(187, 1);
                        addSkillXP(31038, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 241 && useWith == 105) {
                    if (playerLevel[15] >= 54) {
                        deleteItem(105, getItemSlot(105), 1);
                        deleteItem(241, getItemSlot(241), 1);
                        addItem(187, 1);
                        addSkillXP(31038, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 109 && useWith == 245) {
                    if (playerLevel[15] >= 63) {
                        deleteItem(109, getItemSlot(109), 1);
                        deleteItem(245, getItemSlot(245), 1);
                        addItem(169, 1);
                        addSkillXP(31063, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 245 && useWith == 109) {
                    if (playerLevel[15] >= 63) {
                        deleteItem(109, getItemSlot(109), 1);
                        deleteItem(245, getItemSlot(245), 1);
                        addItem(169, 1);
                        addSkillXP(31063, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 111 && useWith == 247) {
                    if (playerLevel[15] >= 68) {
                        deleteItem(111, getItemSlot(111), 1);
                        deleteItem(247, getItemSlot(247), 1);
                        addItem(121, 1);
                        addSkillXP(31089, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 247 && useWith == 111) {
                    if (playerLevel[15] >= 68) {
                        deleteItem(111, getItemSlot(111), 1);
                        deleteItem(247, getItemSlot(247), 1);
                        addItem(189, 1);
                        addSkillXP(31075, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 2483 && useWith == 241) {
                    if (playerLevel[15] >= 73) {
                        deleteItem(2483, getItemSlot(2483), 1);
                        deleteItem(241, getItemSlot(241), 1);
                        addItem(2454, 1);
                        addSkillXP(31508, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 221 && useWith == 2483) {
                    if (playerLevel[15] >= 73) {
                        deleteItem(2483, getItemSlot(2483), 1);
                        deleteItem(241, getItemSlot(241), 1);
                        addItem(2454, 1);
                        addSkillXP(31508, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 2483 && useWith == 3138) {
                    if (playerLevel[15] >= 76) {
                        deleteItem(2483, getItemSlot(2483), 1);
                        deleteItem(3138, getItemSlot(3138), 1);
                        addItem(3042, 1);
                        addSkillXP(51703, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                } else if (itemUsed == 3138 && useWith == 2483) {
                    if (playerLevel[15] >= 76) {
                        deleteItem(2483, getItemSlot(2483), 1);
                        deleteItem(3138, getItemSlot(3138), 1);
                        addItem(3042, 1);
                        addSkillXP(51703, 15);
                    } else {
                        sendMessage("You need a higher herblore level to make this potion.");
                    }
                }
                if ((itemUsed == 4653 && useWith == 4703)
                        || (itemUsed == 4703 && useWith == 4653) && q3stage == 3) {
                    sendMessage(
                            "You rub the strong fire into the magic stone to create a firework.");
                    deleteItem(4653, getItemSlot(4653), 1);
                    deleteItem(4703, getItemSlot(4703), 1);
                    addItem(3006, 1);
                }
                if ((itemUsed == 590 && useWith == 3006)
                        || (itemUsed == 3006 && useWith == 590) && q3stage == 4) {
                    deleteItem(3006, getItemSlot(3006), 1);
                    ItemHandler.addItem(744, absX, absY, 1, playerId, false);
                } /* if (IsUsingSkill == false) {
             IsUsingSkill = true;
             useitems[3] = inStream.readUnsignedWordA(); //use item slot
             useitems[1] = inStream.readSignedWordBigEndianA(); //used item
             useitems[2] = (int)(misc.HexToInt(inStream.buffer, 1, 1) / 1000); //used item slot
             useitems[0] = playerItems[useitems[3]]; //used item id
             useitems[0] -= 1; //Only to fix the ID !
             CheckForSkillUse();
             }*/
            {
                if (itemUsed == 233 && useWith == 237) {
                    deleteItem(237, getItemSlot(237), 1);
                    addItem(235, 1);
                }
                // start leather crafting
                else if (itemUsed == ObjectIDs.PORTAL_21 && useWith == 1741) {
                    if (playerLevel[12] >= 0) {
                        showInterface(2311);
                    }
                } else if (itemUsed == 1741 && useWith == ObjectIDs.PORTAL_21) {
                    if (playerLevel[12] >= 0) {
                        showInterface(2311);
                    }
                } else if (itemUsed == 1603 && useWith == 656) {
                    deleteItem(656, getItemSlot(656), 1);
                    deleteItem(1603, getItemSlot(1603), 1);
                    addItem(2910, 1);
                } else if (itemUsed == 1603 && useWith == 636) {
                    deleteItem(636, getItemSlot(636), 1);
                    deleteItem(1603, getItemSlot(1603), 1);
                    addItem(2906, 1);
                } else if (itemUsed == 1603 && useWith == 646) {
                    deleteItem(646, getItemSlot(646), 1);
                    deleteItem(1603, getItemSlot(1603), 1);
                    addItem(2908, 1);
                } else if (itemUsed == 1605 && useWith == 656) {
                    deleteItem(656, getItemSlot(656), 1);
                    deleteItem(1605, getItemSlot(1605), 1);
                    addItem(658, 1);
                } else if (itemUsed == 1605 && useWith == 636) {
                    deleteItem(636, getItemSlot(636), 1);
                    deleteItem(1605, getItemSlot(1605), 1);
                    addItem(638, 1);
                } else if (itemUsed == 1605 && useWith == 646) {
                    deleteItem(646, getItemSlot(646), 1);
                    deleteItem(1605, getItemSlot(1605), 1);
                    addItem(648, 1);
                } else if (itemUsed == 1601 && useWith == 656) {
                    deleteItem(656, getItemSlot(656), 1);
                    deleteItem(1601, getItemSlot(1601), 1);
                    addItem(662, 1);
                } else if (itemUsed == 1601 && useWith == 636) {
                    deleteItem(636, getItemSlot(636), 1);
                    deleteItem(1601, getItemSlot(1601), 1);
                    addItem(642, 1);
                } else if (itemUsed == 1601 && useWith == 646) {
                    deleteItem(646, getItemSlot(646), 1);
                    deleteItem(1601, getItemSlot(1601), 1);
                    addItem(652, 1);
                } else if (itemUsed == 1607 && useWith == 656) {
                    deleteItem(656, getItemSlot(656), 1);
                    deleteItem(1607, getItemSlot(1607), 1);
                    addItem(660, 1);
                } else if (itemUsed == 1607 && useWith == 636) {
                    deleteItem(636, getItemSlot(636), 1);
                    deleteItem(1607, getItemSlot(1607), 1);
                    addItem(640, 1);
                } else if (itemUsed == 1607 && useWith == 646) {
                    deleteItem(646, getItemSlot(646), 1);
                    deleteItem(1607, getItemSlot(1607), 1);
                    addItem(650, 1);
                }
            }

            break;

            // walkTo commands
            case 248: // map walk (has additional 14 bytes added to the end with some junk data)
                packetSize -= 14; // ignore the junk
                closeInterface();
                resetAnimation();

            case 164:

            case 98: // walking packet
                if (isMorphed) {
                    return;
                }
                closeInterface();
                resetAnimation();
                Trainingteleports = false;
                Fishingspots = false;
                Miningspots = false;
                playerIsFishing = false;
                if (face > 0) {
                    ResetAttack();
                    ResetAttackNPC2();
                }
                if (skillcape > 0) {
                    skillcape = 0;
                }
                if (getSkilling().isSkilling()) {
                    getSkilling().stop();
                }
                if (followID > 0) {
                    followID = 0;
                }
                if (followID2 > 0) {
                    followID2 = 0;
                }
                if (EntangleDelay >= 1) {
                    teleportToX = absX;
                    teleportToY = absY;
                    sendMessage("A magical force stops you from moving!");
                }
                IsAttackingNPC = false;
                showedFire = false;
                showedUnfire = false;
                isPotCrafting = false;
                isSpinning = false;
                clickedSpinning = false;
                fillingWater = false;
                attacknpc = -1;

                if (!IsDead) {
                    int steps = (packetSize - 5) / 2;
                    int[][] path = new int[steps][2];

                    int firstStepX = inStream.readSignedWordBigEndianA();

                    for (int i2 = 0; i2 < steps; i2++) {
                        path[i2][0] = inStream.readSignedByte();
                        path[i2][1] = inStream.readSignedByte();
                    }
                    newWalkCmdX[0] = newWalkCmdY[0] = tmpNWCX[0] = tmpNWCY[0] = 0;
                    int firstStepY = inStream.readSignedWordBigEndian();
                    newWalkCmdIsRunning = inStream.readSignedByteC() == 1;

                    for (int i2 = 0; i2 < steps; i2++) {
                        path[i2][0] += firstStepX;
                        path[i2][1] += firstStepY;
                    }

                    int pathX = steps > 0 ? path[(steps - 1)][0] : firstStepX;
                    int pathY = steps > 0 ? path[(steps - 1)][1] : firstStepY;
                    if (misc.distance(absX, absY, pathX, pathY) < 35) {
                        PathFinder.getPathFinder().findRoute(this, pathX, pathY, true, 0, 0);

                    }


                    // stairs check
                    if (stairs > 0) {
                        resetStairs();
                    }
                    // fletching check
                    if (fletching[0] > 0) {
                        playerEquipment[playerWeapon] = OriginalWeapon;
                        OriginalWeapon = -1;
                        resetAnimation();
                        resetFL();
                    }
                    // pick up item check
                    if (WannePickUp) {
                        pItemId = 0;
                        PickUpAmount = 0;
                        PickUpDelete = 0;
                        WannePickUp = false;
                    }
                    // attack check
                /* if (IsAttacking == true) {
                 ResetAttack();
                 }*/
                    // attack NPC check
                /* if (IsAttackingNPC == true) {
                 ResetAttackNPC();
                 }*/


                    // firemaking check
                    if (firemaking[0] > 0) {
                        playerEquipment[playerWeapon] = OriginalWeapon;
                        OriginalWeapon = -1;
                        playerEquipment[playerShield] = OriginalShield;
                        OriginalShield = -1;
                        resetAnimation();
                        resetFM();
                    }
                    // Npc Talking
                    if (NpcDialogue > 0) {
                        NpcDialogue = 0;
                        NpcTalkTo = 0;
                        NpcDialogueSend = false;
                        RemoveAllWindows();
                    }
                    resetVariables();
                    // banking
                    if (InBank >= 1) {
                        RemoveAllWindows();
                    }
                    if (stopPlayerSkill) {
                        SkillHandler.resetPlayerSkillVariables(this);
                        stopPlayerSkill = false;
                    }
                    if (getSkilling().isSkilling()) {
                        getSkilling().stop();
                    }
                    if(isCrafting){
                        isCrafting = false;
                    }
                    if(isSmething){
                        isSmething = false;
                    }
                    walkingToItem = false;
                    // shopping
                    if (IsShopping) {
                        IsShopping = false;
                        MyShopID = 0;
                        UpdateShop = false;
                        RemoveAllWindows();
                    }
                    // trading
                    if (tradeStatus >= 2) {
                        PlayerHandler.players[tradeWith].tradeOtherDeclined = true;
                        DeclineTrade();
                        sendMessage("You decline the trade.");
                        RemoveAllWindows();
                    }
                    //follow check
                    if (playerFollowID != -1) {
                        for (i = 0; i < playerFollow.length; i++) {
                            if (PlayerHandler.players[playerFollowID].playerFollow[i] == playerId && PlayerHandler.players[playerFollowID] != null) {
                                PlayerHandler.players[playerFollowID].playerFollow[i] = -1;
                                break;
                            }
                        }
                        sendMessage("You stop following " + PlayerHandler.players[playerFollowID].playerName);
                        playerFollowID = -1;
                    }
                }
                break;


            case 4: // regular chat
                chatTextEffects = inStream.readUnsignedByteS();
                chatTextColor = inStream.readUnsignedByteS();
                chatTextSize = (byte) (packetSize - 2);
                if (muted == 1) {
                    sendMessage("You can't talk because you are muted!");
                } else if (muted == 0) {
                    inStream.readBytes_reverseA(chatText, chatTextSize, 0);
                    if (misc.textUnpack(chatText, packetSize - 2).contains("rarescape") || misc.textUnpack(chatText, packetSize - 2).contains("rare-scape") || misc.textUnpack(chatText, packetSize - 2).contains("rare scape")) {
                        sM("you cant say rarescape in chat!");
                        return;
                    }
                    chatTextUpdateRequired = true;
                    println_debug(
                            "Text [" + chatTextEffects + "," + chatTextColor + "]: "
                                    + misc.textUnpack(chatText, packetSize - 2));
                    chatlog();
                    String playerchat = "[" + playerName + "]: "
                            + misc.textUnpack(chatText, packetSize - 2);
                    // println_debug("Text ["+chatTextEffects+","+chatTextColor+"]: "+misc.textUnpack(chatText, packetSize-2));
                }

                break;

            case 127:
                String text = inStream.readString();
                int index = text.indexOf(",");
                int id = Integer.parseInt(text.substring(0, index));
                String string = text.substring(index + 1);
                switch (id) {
                    case 0:
                        if (clan != null) {
                            clan.removeMember(this);
                            lastClanChat = "";
                        }
                        break;
                    case 1:
                        if (string.length() == 0) {
                            break;
                        } else if (string.length() > 15) {
                            string = string.substring(0, 15);
                        }
                        Clan clan = getClan();
                        if (clan == null) {
                            server.clanManager.create(this);
                            clan = getClan();
                        }
                        if (clan != null) {
                            clan.setTitle(string);
                            sendFrame126(clan.getTitle(), 18306);
                            clan.save();
                        }
                        break;
                    case 2:
                        if (string.length() == 0) {
                            break;
                        } else if (string.length() > 12) {
                            string = string.substring(0, 12);
                        }
                        if (string.equalsIgnoreCase(playerName)) {
                            break;
                        }
                        clan = getClan();
                        if (clan.isBanned(string)) {
                            sendMessage("You cannot promote a banned member.");
                            break;
                        }
                        if (clan != null) {
                            clan.setRank(misc.capitalize(string), 1);
                            setClanData();
                            clan.save();
                        }
                        break;
                    case 3:
                        if (string.length() == 0) {
                            break;
                        } else if (string.length() > 12) {
                            string = string.substring(0, 12);
                        }
                        if (string.equalsIgnoreCase(playerName)) {
                            break;
                        }

                        clan = getClan();
                        if (clan.isRanked(string)) {
                            sendMessage("You cannot ban a ranked member.");
                            break;
                        }
                        if (clan != null) {
                            clan.banMember(playerId);
                            setClanData();
                            clan.save();
                        }
                        break;
                    default:
                        System.out.println("Received string: identifier=" + id
                                + ", string=" + string);
                        break;
                }
                break;
            case 213:
                int id2 = inStream.readUnsignedWord();
                int action = inStream.readUnsignedWord();
                switch (id2) {
                    case 18304:
                        if (action == 1) {
                            Clan clan = getClan();
                            clan.delete(playerId);
                            setClanData();
                        }
                        break;
                    case 18307:
                    case 18310:
                    case 18313:
                    case 18316:
                        Clan clan = getClan();
                        if (clan != null) {
                            if (id2 == 18307) {
                                clan.setRankCanJoin(action == 0 ? -1 : action);
                            } else if (id2 == 18310) {
                                clan.setRankCanTalk(action == 0 ? -1 : action);
                            } else if (id2 == 18313) {
                                clan.setRankCanKick(action == 0 ? -1 : action);
                            } else if (id2 == 18316) {
                                clan.setRankCanBan(action == 0 ? -1 : action);
                            }
                            String title = "";
                            if (id2 == 18307) {
                                title = clan.getRankTitle(clan.whoCanJoin)
                                        + (clan.whoCanJoin > Clan.Rank.ANYONE && clan.whoCanJoin < Clan.Rank.OWNER ? "+" : "");
                            } else if (id2 == 18310) {
                                title = clan.getRankTitle(clan.whoCanTalk)
                                        + (clan.whoCanTalk > Clan.Rank.ANYONE && clan.whoCanTalk < Clan.Rank.OWNER ? "+" : "");
                            } else if (id2 == 18313) {
                                title = clan.getRankTitle(clan.whoCanKick)
                                        + (clan.whoCanKick > Clan.Rank.ANYONE && clan.whoCanKick < Clan.Rank.OWNER ? "+" : "");
                            } else if (id2 == 18316) {
                                title = clan.getRankTitle(clan.whoCanBan)
                                        + (clan.whoCanBan > Clan.Rank.ANYONE && clan.whoCanBan < Clan.Rank.OWNER ? "+" : "");
                            }
                            sendFrame126(title, id2 + 2);
                        }
                        break;

                    default:
                        System.out.println("Interface action: [id=" + id2 +",action=" +
                                action +"]");
                        break;
                }
                if (id2 >= 18323 && id2 < 18423) {
                    Clan clan = getClan();
                    if (clan != null && clan.rankedMembers != null && !clan.rankedMembers.isEmpty()) {
                        String member = clan.rankedMembers.get(id2 - 18323);
                        switch (action) {
                            case 0:
                                clan.demote(member);
                                break;
                            default:
                                clan.setRank(member, action);
                                break;
                        }
                        setClanData();
                    }
                }
                if (id2 >= 18424 && id2 < 18524) {
                    Clan clan = getClan();
                    if (clan != null && clan.bannedMembers != null && !clan.bannedMembers.isEmpty()) {
                        String member = clan.bannedMembers.get(id2 - 18424);
                        switch (action) {
                            case 0:
                                clan.unbanMember(member);
                                break;
                        }
                        setClanData();
                    }
                }
                if (lastSent > 0) {
                    lastSent = 0;
                    return;
                }
                if (id2 >= 18144 && id2 < 18244) {
                    for (int index2 = 0; index2 < 100; index2++) {
                        if (id2 == index2 + 18144) {
                            String member = clan.activeMembers.get(id2 - 18144);
                            lastSent++;
                            switch (action) {
                                case 0:
                                    if (clan.isFounder(playerName)) {
                                        showInterface(18300);
                                    }
                                    break;
                                case 1:
                                    if (member.equalsIgnoreCase(playerName)) {
                                        sendMessage("You can't kick yourself!");
                                    } else {
                                        if (clan.canKick(playerName)) {
                                            clan.kickMember(playerId);
                                        } else {
                                            sendMessage("You do not have sufficient privileges to do this.");
                                        }
                                    }
                                    break;
                                case 2:
                                    if (member.length() == 0) {
                                        break;
                                    } else if (member.length() > 12) {
                                        member = member.substring(0, 12);
                                    }
                                    if (member.equalsIgnoreCase(playerName)) {
                                        break;
                                    }
                                    Clan clan = getClan();
                                    if (clan.isRanked(member)) {
                                        try {
                                            sendMessage("You cannot ban a ranked member.");
                                            break;
                                        } catch (Exception e) {
                                        }
                                    }
                                    if (clan != null) {
                                        clan.banMember(playerId);
                                        setClanData();
                                        clan.save();
                                    }
                                    break;
                                case 5:
                                    String memberName = "";
                                    clan = getClan();
                                    Optional<Player> optionalPlayer = PlayerHandler.getOptionalPlayer(member);
                                    if (optionalPlayer.isPresent()) {
                                        Player c2 = optionalPlayer.get();
                                        if (c2.playerName == playerName) {
                                            return;
                                        }
                                        if (System.currentTimeMillis() - lastClanTeleport < 120_000) {
                                            sendMessage("You can only use this once every 2 minutes.");
                                            return;
                                        }

                                        if (!clan.getTeleport()) {
                                            sendMessage("The clan founder has not enabled the use of this ability.");
                                            return;
                                        }

                                        if (!c2.nonWild()) {
                                            sendMessage("The player your teleporting to must be in the wilderness.");
                                            return;
                                        }
                                        if (!nonWild()) {
                                            sendMessage("You must be in atleast @blu@1@bla@ wilderness to use this.");
                                            return;
                                        }
                                        if (playerIndex > 0 || npcIndex > 0) {
                                            sendMessage("You cannot teleport whilst in combat.");
                                            return;
                                        }

/*							if (c2.hungerGames) {
								player.sendMessage("You can't use this in the hunger games.");
								return;
							}*/
/*							if (player.dialogueAction != 6669) {
								player.getDH().sendPlayerChat2(
										"@bla@This player is in @blu@(" + c2.wildLevel
												+ ")@bla@ wilderness are you sure?",
										"@red@This is not a safe location and you can lose items!", 596);
								player.nextChat = 6670;
								player.memberName = "" + c2.playerName + "";
								return;
							}*/
                                    }
                                    break;
                                case 6:
                                    clan = getClan();
                                    if (!clan.getCanCopy()) {
                                        sendMessage("The clan founder has not enabled the use of this ability.");
                                        return;
                                    }

                                    if (freeSlots() < 28) {
                                        sendMessage("You must bank all of your items before copying another clan member!");
                                        return;
                                    }
                                    if (nonWild()) {
                                        sendMessage("You cannot copy a clan member whilst in the wilderness");
                                        return;
                                    }
						/*int[] equipment = new int[14];
						Optional<Player> otherPlayer = PlayerHandler.getOptionalPlayer(member);
						if (otherisPresent()) {
							Player c2 = otherPlayer.get();
							if (c2.playerName == player.playerName) {
								return;
							}
							for (int i = 0; i < c2.playerEquipment.length; i++) {
								for (String name : Unspawnable.names) {
								//if (c2.playerEquipment[i] == c2.getItems().getItemIdContains(Unspawnable.canSpawn(c2.playerEquipment[i]))) {
									if (c2.playerEquipment[i] == c2.getItems().getItemIdContains(name)) {
									player.sendMessage("You do not have a "
											+ player.getItems().getItemName(c2.playerEquipment[c2.playerWeapon])
											+ " to equip.");
									continue;
								}}
								if (!Requirement.canEquip(player, c2.playerEquipment[i]))
									continue;
								equipment[i] = c2.playerEquipment[i];
								player.playerEquipment[i] = c2.playerEquipment[i];
								player.getItems().wearItem(equipment[i], 1, i);
								player.playerItems = c2.playerItems;
								player.playerItemsN = c2.playerItemsN;
								c2.playerItems = player.playerItems;
								c2.playerItemsN = player.playerItemsN;
								player.getItems().resetItems(3214);
								int[] skillIds = { 0, 1, 2, 3, 4, 5, 6

								};
								for (int xp : skillIds) {
									player.playerXP[xp] = 1;
									player.playerLevel[xp] = 1;
									player.playerLevel[xp] = c2.playerLevel[xp];
									addSkillXP10(c2.playerXP[xp], xp);
									refreshSkill(i);
								}
							}
						}*/
                                    sendMessage("Currently disabled.");
                                    break;
                            }
                            break;
                        }
                    }
                }
                break;

            case 60:
                String owner = misc.longToPlayerName(inStream.readQWord())
                        .replaceAll("_", " ");
                if (owner != null && owner.length() > 0) {
                    if (clan == null) {
				/*if (player.inArdiCC) {
					return;
				}*/
                        Clan clan = server.clanManager.getClan(owner);
                        if (clan != null) {
                            clan.addMember(this);
                        } else if (owner.equalsIgnoreCase(playerName)) {
                            server.clanManager.create(this);
                        } else {
                            sendMessage(misc.capitalize(owner)
                                    + " has not created a clan yet.");
                        }
                        refreshSkill(21);
                        refreshSkill(22);
                        refreshSkill(23);
                    }
                }
                break;

            case 14: //Use something on another player
                testinterfaceId = inStream.readUnsignedWordBigEndianA();    //only needed to get the cracker slot ! (remove = server crash !)
                int playerIndex = inStream.readUnsignedWord();    //only needed to get the cracker slot ! (remove = server crash !)
                int itemId = inStream.readUnsignedWord();        //only needed to get the cracker slot ! (remove = server crash !)
                int slotId = inStream.readSignedWordBigEndian();
                int CrackerID = playerItems[slotId];
                if (playerIndex > PlayerHandler.players.length) {
                    return;
                }
                if (slotId > playerItems.length) {
                    return;
                }
                if (PlayerHandler.players[playerIndex] == null) {
                    return;
                }
                client other = (client) PlayerHandler.players[playerIndex];
                if (other == null) {
                    return;
                }
                //if (getRights().isOrInherits(Right.ADMINISTRATOR) && itemId != 5733 && itemId != 6713) {
                if (getRights().inherits(Rights.ADMINISTRATOR) && itemId != 5733 && itemId != 6713) {
                    sendMessage("You gave " + other.playerName + " some " + Item.getItemName(itemId) + ".");
                    other.sendMessage("You were given some " + Item.getItemName(itemId) + " from " + playerName + ".");
                    other.addItem(itemId, Item.itemStackable[itemId] ? getItemAmount(itemId) : 1);
                    deleteItem(itemId, Item.itemStackable[itemId] ?getItemAmount(itemId) : 1);
                }
                CrackerID -= 1; //Only to fix the ID !
                if (CrackerID == 962) {
                    sendMessage("You crack the cracker...");
                    int UsedOn = misc.HexToInt(inStream.buffer, 3, 1) / 1000;
                    PlayerHandler.players[UsedOn].CrackerMsg = true;
                    deleteItem(CrackerID, slotId, playerItemsN[slotId]);
                    if (misc.random(2) == 1) {
                        addItem(1, 1);
                        sendMessage("And you get the crackers item.");
                    } else {
                        sendMessage("but you didn't get the crackers item.");
                        PlayerHandler.players[UsedOn].CrackerForMe = true;
                    }
                }
                break;

            // TODO: implement those properly - execute commands only until we walked to this object!
            // atObject commands

        /* <Dungeon>
         Trapdoors: ID 1568, 1569, 1570, 1571
         Ladders: ID 1759, 2113
         Climb rope: 1762, 1763, 1764
         */

            case 147:
                //int startdelay = inStream.writeLEShort();
                //int duration = inStream.writeShort();
                break;

            case 132: //object click 1
                objectX = inStream.readSignedWordBigEndianA();
                int objectID = inStream.readInteger();
                objectY = inStream.readUnsignedWordA();
                int objectDistance = 0;
                int objectXOffset = 0;
                int objectYOffset = 0;
                if (Math.abs(getX() - objectX) > 25
                        || Math.abs(getY() - objectY) > 25) {
                    resetWalkingQueue();
                }
                switch (objectID) {
                    case 1408:
                    case 1413:
                        objectDistance = 2;
                        break;
                    case 29728:
                        objectDistance = 2;
                        break;
                    case 1733:

                        objectYOffset = 2;
                        break;
                    case 26303:
                        objectXOffset = 5;
                        objectYOffset = 10;
                        objectDistance = 6;
                        break;
                    case 3044:
                        objectDistance = 3;
                        break;

                    case 245:
                        objectYOffset = -1;
                        objectDistance = 0;
                        break;

                    case 272:
                        objectYOffset = 1;
                        objectDistance = 0;
                        break;

                    case 273:
                        objectYOffset = 1;
                        objectDistance = 0;
                        break;

                    case 246:
                        objectYOffset = 1;
                        objectDistance = 0;
                        break;


                    case 6522:
                    case 10229:
                        objectDistance = 2;
                        break;

                    case 8959:
                        objectYOffset = 1;
                        break;

                    case 4417:
                        if (objectX == 2425 && objectY == 3074) {
                            objectYOffset = 2;
                        }
                        break;

                    case 4420:
                        if (getX() >= 2383 && getX() <= 2385) {
                            objectYOffset = 1;
                        } else {
                            objectYOffset = -2;
                        }
                        // fall through

                    case 409:
                    case 6552:
                        objectDistance = 2;
                        break;

                    case 2878:
                    case 2879:
                        objectDistance = 3;
                        break;

                    case 2558:
                        objectDistance = 0;
                        if (absX > objectX && objectX == 3044) {
                            objectXOffset = 1;
                        }
                        if (absY > objectY) {
                            objectYOffset = 1;
                        }
                        if (absX < objectX && objectX == 3038) {
                            objectXOffset = -1;
                        }
                        break;

                    case 9356:
                        objectDistance = 2;
                        break;

                    case 1815:
                    case 1816:
                    case 5959:
                    case 5960:
                        objectDistance = 0;
                        break;

                    case 9293:
                        objectDistance = 2;
                        break;

                    case 4418:
                        if (objectX == 2374 && objectY == 3131) {
                            objectYOffset = -2;
                        } else if (objectX == 2369 && objectY == 3126) {
                            objectXOffset = 2;
                        } else if (objectX == 2380 && objectY == 3127) {
                            objectYOffset = 2;
                        } else if (objectX == 2369 && objectY == 3126) {
                            objectXOffset = 2;
                        } else if (objectX == 2374 && objectY == 3131) {
                            objectYOffset = -2;
                        }
                        break;

                    case 9706:
                        objectDistance = 0;
                        objectXOffset = 1;
                        break;

                    case 9707:
                        objectDistance = 0;
                        objectYOffset = -1;
                        break;

                    case 4419:
                    case 6707:
                        objectYOffset = 3;
                        break;

                    case 6823:
                        objectDistance = 2;
                        objectYOffset = 1;
                        break;

                    case 6706:
                        objectXOffset = 2;
                        break;

                    case 6772:
                        objectDistance = 2;
                        objectYOffset = 1;
                        break;

                    case 6705:
                        objectYOffset = -1;
                        break;

                    case 6822:
                        objectDistance = 2;
                        objectYOffset = 1;
                        break;

                    case 6704:
                        objectYOffset = -1;
                        break;

                    case 6773:
                        objectDistance = 2;
                        objectXOffset = 1;
                        objectYOffset = 1;
                        break;

                    case 6703:
                        objectXOffset = -1;
                        break;

                    case 6771:
                        objectDistance = 2;
                        objectXOffset = 1;
                        objectYOffset = 1;
                        break;

                    case 6702:
                        objectXOffset = -1;
                        break;

                    case 6821:
                        objectDistance = 2;
                        objectXOffset = 1;
                        objectYOffset = 1;
                        break;

                    case 1276:
                    case 1278:
                    case 1281:
                    case 1306:
                    case 1307:
                    case 1308:
                    case 1309:
                        objectDistance = 3;
                        break;
                    case 4493:
                    case 4494:
                    case 4495:
                    case 4496:
                        objectDistance = 5;
                        break;
                    case 38012:
                        objectDistance = 2;
                        objectXOffset = 1;
                        objectYOffset = 1;
                        break;
                    case 26300:
                    case 26296:
                        objectDistance = 2;
                        objectXOffset = 1;
                        objectYOffset = 1;
                        break;
                    case 1738:
                        objectDistance = 2;
                        objectXOffset = 1;
                        objectYOffset = 1;
                        break;
                    case 16077:
                    case 37335:
                        objectDistance = 2;
                        break;
                    case 11737:
                        objectDistance = 2;
                        objectXOffset = 2;
                        objectYOffset = 2;
                        break;
                    case 36773:
                    case 36774:
                    case 36777:
                    case 36776:
                    case 36775:
                    case 36778:
                        objectDistance = 2;
                        objectXOffset = 1;
                        objectYOffset = 1;
                        break;
                    default:
                        objectDistance = 1;
                        objectXOffset = 0;
                        objectYOffset = 0;
                        break;
                }
                if (GoodDistance(absX, absY, objectX+objectXOffset, objectY+objectYOffset, objectDistance)) {
                    viewTo(objectX, objectY);
                    objectClick(objectID, objectX, objectY, 0, 0, 1);
                } else {
                    ActionType = 1;
                }
                break;
            case 252: // atObject2
                objectID = inStream.readInteger(); // 5292 bankwindow
                objectY = inStream.readSignedWordBigEndian();
                objectX = inStream.readUnsignedWordA();
                objectDistance = 0;
                objectXOffset = 0;
                objectYOffset = 0;
                if (Math.abs(getX() - objectX) > 25
                        || Math.abs(getY() - objectY) > 25) {
                    resetWalkingQueue();
                }
                switch (objectID) {
                    case 36774:
                    case 36777:
                        objectDistance = 2;
                        objectXOffset = 1;
                        objectYOffset = 1;
                        break;
                    case 6162:
                    case 6163:
                    case 6164:
                    case 6165:
                    case 6166:
                        objectDistance = 2;
                        break;
                    case 2562:
                    case 2560:
                    case 34387:
                    case 34386:
                    case 34385:
                    case 34384:
                    case 34383:
                    case 34382:
                        objectDistance = 3;
                        objectXOffset = 2;
                        objectYOffset = 2;
                        break;
                    case 38012:
                        objectDistance = 2;
                        objectXOffset = 1;
                        objectYOffset = 1;
                        break;
                    case 11666:
                        objectDistance = 3;
                        objectXOffset = 2;
                        objectYOffset = 3;
                        break;
                    default:
                        objectDistance = 1;
                        objectXOffset = 0;
                        objectYOffset = 0;
                        break;
                }
                if (GoodDistance(absX, absY, objectX+objectXOffset, objectY+objectYOffset, objectDistance)) {
                    viewTo(objectX, objectY);
                    objectClick2(objectID, objectX, objectY);
                } else {
                    ActionType = 2;
                }

                break;

            case 70: // atObject3
                objectX = inStream.readSignedWordBigEndian();
                objectY = inStream.readUnsignedWord();
                objectID = inStream.readInteger();
                objectDistance = 0;
                objectXOffset = 0;
                objectYOffset = 0;
                if (Math.abs(getX() - objectX) > 25
                        || Math.abs(getY() - objectY) > 25) {
                    resetWalkingQueue();
                }
                switch (objectID) {
                    case 36774:
                    case 36777:
                        objectDistance = 2;
                        objectXOffset = 1;
                        objectYOffset = 1;
                        break;
                    case 38012:
                        objectDistance = 2;
                        objectXOffset = 1;
                        objectYOffset = 1;
                        break;
                    default:
                        objectDistance = 1;
                        objectXOffset = 0;
                        objectYOffset = 0;
                        break;
                }
                if (GoodDistance(absX, absY, objectX+objectXOffset, objectY+objectYOffset, objectDistance)) {
                    viewTo(objectX, objectY);
                    objectClick3(objectID, objectX, objectY);
                } else {
                    ActionType = 3;
                    WalkingTo = true;
                }

                break;
            case 199:
                int Broadcastindex = inStream.readUnsignedByte();

                if (Broadcastindex < 0 || Broadcastindex > BroadcastManager.broadcasts.length)
                    return;

                Broadcast broadcast = BroadcastManager.broadcasts[Broadcastindex];

                if (broadcast == null) {
                    System.err.println("Nulled broadcast for ID "+Broadcastindex);
                    return;
                }

                BroadcastType type = broadcast.getType();

                switch (type) {

                    case LINK:
                        String URL = broadcast.getUrl();
                        sendURL(URL);
                        sendMessage("Opening link: "+URL);
                        return;
                    case MESSAGE:
                        /**
                         * Not clickable
                         */
                        return;
                    case TELEPORT:
                        Position pos = broadcast.getTeleport();
                        movePlayer(pos.getX(), pos.getY(), pos.getZ());

                }

                break;
            case 234:
                objectX = inStream.readSignedWordBigEndianA();
                objectID = inStream.readInteger();
                objectY = inStream.readSignedWordBigEndianA();
                objectDistance = 0;
                objectXOffset = 0;
                objectYOffset = 0;
                if (Math.abs(getX() - objectX) > 25
                        || Math.abs(getY() - objectY) > 25) {
                    resetWalkingQueue();
                }
                switch (objectID) {
                    default:
                        objectDistance = 1;
                        objectXOffset = 0;
                        objectYOffset = 0;
                        break;
                }
                if (GoodDistance(absX, absY, objectX+objectXOffset, objectY+objectYOffset, objectDistance)) {
                    viewTo(objectX, objectY);
                    objectClick4(objectID, objectX, objectY);
                } else {
                    ActionType = 4;
                    WalkingTo = true;
                }
                break;
            case 228:
                objectID = inStream.readInteger();
                objectY = inStream.readUnsignedWordA();
                objectX = inStream.readUnsignedWord();
                objectDistance = 0;
                objectXOffset = 0;
                objectYOffset = 0;
                if (Math.abs(getX() - objectX) > 25
                        || Math.abs(getY() - objectY) > 25) {
                    resetWalkingQueue();
                }
                switch (objectID) {
                    default:
                        objectDistance = 1;
                        objectXOffset = 0;
                        objectYOffset = 0;
                        break;
                }
                if (GoodDistance(absX, absY, objectX+objectXOffset, objectY+objectYOffset, objectDistance)) {
                    viewTo(objectX, objectY);
                    objectClick5(objectID, objectX, objectY);
                } else {
                    ActionType = 5;
                    WalkingTo = true;
                }
                break;
            case 95: // update chat
                Tradecompete = inStream.readUnsignedByte();
                Privatechat = inStream.readUnsignedByte();
                Publicchat = inStream.readUnsignedByte();
                for (int i1 = 1; i1 < PlayerHandler.maxPlayers; i1++) {
                    if (PlayerHandler.players[i1] != null
                            && PlayerHandler.players[i1].isActive) {
                        PlayerHandler.players[i1].pmupdate(playerId, GetWorld(playerId));
                    }
                }
                break;

            case 188: // add friend
                long friendtoadd = inStream.readQWord();
                boolean CanAdd = true;

                for (int i1 = 0; i1 < friends.length; i1++) {
                    if (friends[i1] != 0 && friends[i1] == friendtoadd) {
                        CanAdd = false;
                        sendMessage(friendtoadd + " is already in your friendlist.");
                    }
                }
                if (CanAdd) {
                    for (int i1 = 0; i1 < friends.length; i1++) {
                        if (friends[i1] == 0) {
                            friends[i1] = friendtoadd;
                            for (int i2 = 1; i2 < PlayerHandler.maxPlayers; i2++) {
                                if (PlayerHandler.players[i2] != null
                                        && PlayerHandler.players[i2].isActive
                                        && misc.playerNameToInt64(
                                        PlayerHandler.players[i2].playerName)
                                        == friendtoadd) {
                                    if (rights.inherits(Rights.ADMINISTRATOR)
                                            || PlayerHandler.players[i2].Privatechat == 0
                                            || (PlayerHandler.players[i2].Privatechat == 1
                                            && PlayerHandler.players[i2].isinpm(
                                            misc.playerNameToInt64(
                                                    playerName)))) {
                                        loadpm(friendtoadd, GetWorld(i2));
                                        break;
                                    }
                                }
                            }
                            break;
                        }
                    }
                }
                break;

            case 215: // remove friend
                long friendtorem = inStream.readQWord();

                for (int i1 = 0; i1 < friends.length; i1++) {
                    if (friends[i1] == friendtorem) {
                        friends[i1] = 0;
                        break;
                    }
                }
                break;

            case 133: // add ignore
                long igtoadd = inStream.readQWord();

                for (int i10 = 0; i10 < ignores.length; i10++) {
                    if (ignores[i10] == 0) {
                        ignores[i10] = igtoadd;
                        break;
                    }
                }
                break;

            case 74: // remove ignore
                long igtorem = inStream.readQWord();

                for (int i11 = 0; i11 < ignores.length; i11++) {
                    if (ignores[i11] == igtorem) {
                        ignores[i11] = 0;
                        break;
                    }
                }
                break;

            case 126: // pm message
                long friendtosend = inStream.readQWord();
                byte[] pmchatText = new byte[100];
                int pmchatTextSize = (byte) (packetSize - 8);
                if (muted == 1) {
                    sendMessage("You can't Private Message because you are muted!");
                } else if (muted == 0) {
                    inStream.readBytes(pmchatText, pmchatTextSize, 0);
                    writeLog(playerName + " sent to " + misc.longToPlayerName(friendtosend) + ": " + misc.textUnpack(pmchatText, packetSize - 8), "Pmlog");
                    for (int i1 = 0; i1 < friends.length; i1++) {
                        if (friends[i1] == friendtosend) {
                            boolean pmsent = false;

                            for (int i2 = 1; i2 < PlayerHandler.maxPlayers; i2++) {
                                if (PlayerHandler.players[i2] != null
                                        && PlayerHandler.players[i2].isActive
                                        && misc.playerNameToInt64(
                                        PlayerHandler.players[i2].playerName)
                                        == friendtosend) {
                                    if (rights.inherits(Rights.ADMINISTRATOR)
                                            || PlayerHandler.players[i2].Privatechat == 0
                                            || (PlayerHandler.players[i2].Privatechat == 1
                                            && PlayerHandler.players[i2].isinpm(
                                            misc.playerNameToInt64(
                                                    playerName)))) {
                                        PlayerHandler.players[i2].sendpm(
                                                misc.playerNameToInt64(playerName),
                                                rights.getValue(), pmchatText, pmchatTextSize);
                                        pmsent = true;
                                    }
                                    break;
                                }
                            }
                            if (!pmsent) {
                                sendMessage("Player currently not available");
                                break;
                            }
                        }
                    }
                }
                break;

            case 236: // pickup item
                walkingToItem = false;
                pItemY = inStream.readSignedWordBigEndian();
                pItemId = inStream.readUnsignedWord();
                pItemX = inStream.readSignedWordBigEndian();
                if (Math.abs(getX() - pItemX) > 25
                        || Math.abs(getY() - pItemY) > 25) {
                    resetWalkingQueue();
                    return;
                }

                walkingToItem = true;
                EventManager.getSingleton().addEvent(this,new Event() {
                    @Override
                    public void execute(EventContainer container) {
                        if(!walkingToItem) {
                            container.stop();
                        }
                        if (goodDistance(getX(), getY(), pItemX, pItemY, 1) && walkingToItem) {
                            if(ItemHandler.itemExists(pItemId, pItemX, pItemY)) {
                                if(freeSlots() >= 1) {
                                    int itemAmount = ItemHandler.itemAmount(pItemId, pItemX, pItemY);
                                    pickUpItem(pItemId, itemAmount);
                                    sendSound(soundList.ITEM_PICKUP, 100, 0);
                                    ItemHandler.removeItem(pItemId, pItemX, pItemY, itemAmount);
                                    removeGroundItem(pItemX, pItemY, pItemId);
                                    resetItems(3214); // THIS MIGHT STOP CLIENT HACKS HMM?
                                } else {
                                    sendMessage("You don't have enough space in your inventory.");
                                }
                                }
                            container.stop();
                        }
                    }
                    @Override
                    public void stop() {
                        walkingToItem = false;
                    }
                }, 1*600);
                // }
                break;

            case 39: // highscores
                if (getRights().isPlayer()) {
                    StatsMenu();
                } else if (rights.inherits(Rights.MODERATOR)) {
                    int pIndex2 = inStream.readUnsignedWordBigEndian();
                    client p5 = (client) PlayerHandler.players[pIndex2];

                    PlayerHandler.messageToAll = "Mod:" + " Player Kicked: "
                            + p5.playerName;
                    PlayerHandler.kickNick = p5.playerName;
                    BufferedWriter bw1 = null;

                    try {
                        bw1 = new BufferedWriter(
                                new FileWriter("./Data/data/logs/kicklogs.txt", true));
                        bw1.write(playerName + " kicked " + p5.playerName);
                        bw1.newLine();
                        bw1.flush();
                    } catch (IOException ioe) {
                        ioe.printStackTrace();
                    } finally {
                        if (bw1 != null) {
                            try {
                                bw1.close();
                            } catch (IOException ioe2) {
                                sendMessage("Error logging kicks!");
                            }
                        }
                    }

                    try {
                        bw1 = new BufferedWriter(
                                new FileWriter(
                                        "./Data/data/logs/kicklogs.txt",
                                        true));
                        bw1.write(playerName + " kicked " + p5.playerName);
                        bw1.newLine();
                        bw1.flush();
                    } catch (IOException ioe) {
                        ioe.printStackTrace();
                    } finally {
                        if (bw1 != null) {
                            try {
                                bw1.close();
                            } catch (IOException ioe2) {
                                sendMessage("Error logging kicks!");
                            }
                        }
                    }
                } else if (rights.inherits(Rights.ADMINISTRATOR)) {
                    int pIndex2 = inStream.readUnsignedWordBigEndian();
                    client p5 = (client) PlayerHandler.players[pIndex2];

                    PlayerHandler.messageToAll = "Admin:" + " Player Kicked: "
                            + p5.playerName;
                    PlayerHandler.kickNick = p5.playerName;
                }

                break;

            case 73: //Attack (Wilderness)

                if (PkingDelay <= 1) {
                    AttackingOn = inStream.readSignedWordBigEndian();
                    client plz = (client) PlayerHandler.players[AttackingOn];

                    if (!nonWild() && !plz.nonWild() && plz != null) {
                        if(playerEquipment[playerRing] == 773){
                            sendMessage("You can't use the perfect ring here.");
                            return;
                        }
                        IsAttacking = true;
                        inCombat();
                        plz.inCombat();
                        if (GoodDistance(absX, absY, EnemyX, EnemyY, 1)) {
                            setAnimation(GetWepAnim());
                            sendSound(soundConfig.getWeaponSounds(this), 100, 0);
                        }
                        if (plz.attackingPlayerId != playerId && plz.attackingPlayerId != 0 && singleWild() && plz.singleWild()) {
                            sendMessage("That player is already in combat.");
                            attackingPlayerId = 0;
                            ResetAttack();
                            break;
                        } else {
                        }
                        if (PlayerHandler.players[AttackingOn] != null) {
                            if (PlayerHandler.players[AttackingOn].absX
                                    != absX
                                    && PlayerHandler.players[AttackingOn].absY
                                    != absY) {
                                viewTo(
                                        PlayerHandler.players[AttackingOn].absX,
                                        PlayerHandler.players[AttackingOn].absY);
                            }
                            face = 32768 + AttackingOn;
                            faceUpdateRequired = true;
                        }
                    }
                }

                break;

            case 128: // Trade Request
                if (rights.inherits(Rights.ADMINISTRATOR)) {

                    return;
                }
                WanneTradeWith = inStream.readUnsignedWord();
                WanneTrade = 1;
                break;


            case 153: // Follow
                int FollowID = (misc.HexToInt(inStream.buffer, 0, packetSize) / 1000);

                if (playerFollowID != -1) {
                    for (i = 0; i < playerFollow.length; i++) {
                        if (PlayerHandler.players[playerFollowID].playerFollow[i]
                                == playerId) {
                            PlayerHandler.players[playerFollowID].playerFollow[i] = -1;
                            break;
                        }
                    }
                }
                playerFollowID = FollowID;
                for (i = 0; i < playerFollow.length; i++) {
                    if (PlayerHandler.players[playerFollowID].playerFollow[i] == -1
                            && PlayerHandler.players[playerFollowID] != null) {
                        PlayerHandler.players[playerFollowID].playerFollow[i] = playerId;
                        break;
                    }
                }
                sendMessage(
                        "You are now following "
                                + PlayerHandler.players[playerFollowID].playerName);
                break;

            case 139: // Trade answer
                WanneTradeWith = inStream.readSignedWordBigEndian();
                WanneTrade = 2;
                break;


            case 218: // Report Player
                String receivedPlayerName = misc.longToPlayerName(
                        inStream.readQWord());
                int rule = inStream.readUnsignedByte();
                int mute = inStream.readUnsignedByte();

                try {
                    System.out.println(
                            playerName + " reported " + receivedPlayerName);

                /* if(PlayerHandler.getPlayerID(receivedPlayerName) == -1 && mute == 1) {
                 sendMessage(receivedPlayerName+" is offline and could not be muted");
                 }
                 else if(mute == 1 && PlayerHandler.getPlayerID(receivedPlayerName) != -1 && rights.inherits(Rights.MODERATOR)) {
                 rp2.mutedate = lastlogintime;
                 rp2.muted = 1;
                 rp2.sendMessage("You have been muted for 48 hours by "+playerName);
                 }*/
                    receivedPlayerName = receivedPlayerName.replaceAll("_", " ");

                    if (mute == 1 && !getRights().inherits(Rights.ADMINISTRATOR)) { // this means if they send fake packets to mute people they automatically become banned! rofl
                        appendToBanned(playerName);
                        disconnected = true;
                    }

                    System.out.println(
                            playerName + " Reported player: " + receivedPlayerName);
                    System.out.println("Rule = " + rule);
                    System.out.println("Mute = " + mute);
                    ReportAbuse(receivedPlayerName, rule, mute);

                    int PlayersIndex = PlayerHandler.getPlayerID(receivedPlayerName);
                    client rp = (client) PlayerHandler.players[PlayersIndex];

                    if (PlayerHandler.getPlayerID(receivedPlayerName) == -1
                            && mute == 1) {
                        sendMessage(
                                receivedPlayerName
                                        + " is offline and could not be muted");
                    } else if (mute == 1
                            && PlayerHandler.getPlayerID(receivedPlayerName) != -1
                            && rights.inherits(Rights.MODERATOR)) {
                        rp.mutedate = lastlogintime;
                        rp.muted = 1;
                        rp.sendMessage(
                                "You have been muted for 48 hours by " + playerName);
                    }
                } catch (Exception e) {
                    sendMessage(
                            receivedPlayerName
                                    + " is offline and could not be muted");
                }

                break;

            case 237: // Magic on Items
                int castOnSlot = inStream.readSignedWord();
                int castOnItem = inStream.readSignedWordA();
                int e3 = inStream.readSignedWord();
                int castSpell = inStream.readSignedWordA();

                if (debugMessages) {
                    sM(
                            "castOnSlot: " + castOnSlot + " castOnItem: "
                                    + castOnItem + " e3: " + e3 + " castSpell: " + castSpell);
                }
                int alchvaluez = (int) Math.floor(
                        GetItemShopValue(castOnItem, 0, castOnSlot));


                if (castSpell == 1178) {
                    if (!IsItemInBag(castOnItem)) {
                        return;
                    } else {
                        if ((!playerHasItemAmount(561, 1))
                                || (!playerHasItemAmount(554, 5))) {
                            sendMessage("You do not have enough runes to cast this spell.");
                        } else if (playerLevel[6] >= 55) {
                            if ((playerHasItemAmount(561, 1))
                                    && (playerHasItemAmount(554, 5))
                                    && actionTimer == 0) {
                                stopMovement();
                                deleteItem(castOnItem, castOnSlot, 1);
                                addItem(ItemIDs.COINS, alchvaluez);
                                addSkillXP((650 * playerLevel[6]), 6);
                                setAnimation(713);
                                gfx100(113);
                                resetanim = 12;
                                actionTimer += 2;
                                deleteItem(561, getItemSlot(561), 1);
                                deleteItem(554, getItemSlot(554), 5);
                            } else {
                            }
                        } else {
                            sendMessage("You need 55 magic to cast this spell.");
                        }
                    }
                } else if (castSpell == 1162) // low Alch
                {
                    if (playerLevel[6] >= -21) {
                        if ((!playerHasItemAmount(561, 1))
                                || (!playerHasItemAmount(554, 3))) {
                            sendMessage(
                                    "You do not have enough runes to cast this spell.");
                        } else if ((playerHasItemAmount(561, 1))
                                || (playerHasItemAmount(554, 3))) {
                            alchvaluez = (alchvaluez / 5);
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(ItemIDs.COINS, alchvaluez);
                            addSkillXP((320 * playerLevel[6]), 6);
                            startAnimation(712);
                            gfx100(112);
                            deleteItem(561, getItemSlot(561), 1);
                            deleteItem(554, getItemSlot(554), 3);
                        }
                    } else if (playerLevel[6] <= 21) {
                        sendMessage(
                                "You need at least 21 Magic to cast Low Level Alchemy");
                    }
                } else if (castSpell == 1155) { // Enchant lvl 1(saph)
                    if (playerLevel[6] >= -7) {
                        if (castOnItem == 1637) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(2550, 1);
                            addSkillXP(18, 6);
                        } else if (castOnItem == 1656) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(3853, 1);
                            addSkillXP(18, 6);
                        } else if (castOnItem == 1694) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(1727, 1);
                            addSkillXP(18, 6);
                        } else {
                            sendMessage("This needs to be cast on Saphire Jewelry");
                        }
                    } else {
                        sendMessage(
                                "You need atleast 7 Magic to cast Enchant Lvl-1 Jewelry");
                    }
                } else if (castSpell == 1165) { // Enchant lvl 2(emme)
                    if (playerLevel[6] >= -27) {
                        if (castOnItem == 1639) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(2552, 1);
                            addSkillXP(37, 6);
                        } else if (castOnItem == 1658) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(5521, 1);
                            addSkillXP(37, 6);
                        } else if (castOnItem == 1696) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(1729, 1);
                            addSkillXP(37, 6);
                        } else {
                            sendMessage("This needs to be cast on Emerald Jewelry");
                        }
                    } else {
                        sendMessage(
                                "You need atleast 27 Magic to cast Enchant Lvl-2 Jewelry");
                    }
                } else if (castSpell == 1176) { // Enchant lvl 3(ruby)
                    if (playerLevel[6] >= -49) {
                        if (castOnItem == 1641) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(773, 11);
                            addSkillXP(59, 6);
                        } else if (castOnItem == 1698) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(1725, 1);
                            addSkillXP(59, 6);
                        } else {
                            sendMessage("This needs to be cast on Ruby Jewelry");
                        }
                    } else {
                        sendMessage(
                                "You need atleast 49 Magic to cast Enchant Lvl-3 Jewelry");
                    }
                } else if (castSpell == 1180) { // Enchant lvl 4(diam)
                    if (playerLevel[6] >= -57) {
                        if (castOnItem == 1643) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(2570, 1);
                            addSkillXP(67, 6);
                        } else if (castOnItem == 1700) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(1731, 1);
                            addSkillXP(67, 6);
                        } else {
                            sendMessage("This needs to be cast on Diamond Jewelry");
                        }
                    } else {
                        sendMessage(
                                "You need atleast 57 Magic to cast Enchant Lvl-4 Jewelry");
                    }
                } else if (castSpell == 1187) { // Enchant lvl 5(drag)
                    if (playerLevel[6] >= -68) {
                        if (castOnItem == 1645) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(2572, 1);
                            addSkillXP(78, 6);
                        } else if (castOnItem == 1702) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(1704, 1);
                            addSkillXP(78, 6);
                        } else {
                            sendMessage(
                                    "This needs to be cast on Dragonstone Jewelry");
                        }
                    } else {
                        sendMessage(
                                "You need atleast 68 Magic to cast Enchant Lvl-5 Jewelry");
                    }
                } else if (castSpell == 1173) { // Superheat Item
                    if (playerLevel[6] >= -43) {
                        if (castOnItem == ItemIDs.COPPER_ORE && (amountOfItem(438) >= 1)) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            deleteItem(438, getItemSlot(438), 1);
                            addItem(ItemIDs.BRONZE_BAR, 1);
                            addSkillXP(53, 6);
                        } else if ((castOnItem == 438) && (amountOfItem(ItemIDs.COPPER_ORE) >= 1)) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            deleteItem(ItemIDs.COPPER_ORE, getItemSlot(ItemIDs.COPPER_ORE), 1);
                            addItem(ItemIDs.BRONZE_BAR, 1);
                            addSkillXP(53, 6);
                        } else if (castOnItem == 440) {
                            if (amountOfItem(453) < 2) {
                                deleteItem(castOnItem, castOnSlot, 1);
                                addItem(ItemIDs.IRON_BAR, 1);
                                addSkillXP(53, 6);
                            } else if (amountOfItem(453) >= 2) {
                                deleteItem(castOnItem, castOnSlot, 1);
                                for (int d = 0; d < 2; d++) {
                                    deleteItem(453, getItemSlot(453), 1);
                                }
                                addItem(ItemIDs.STEEL_BAR, 1);
                                addSkillXP(53, 6);
                            } else {
                                sendMessage("You need 2 coal to make a steel bar");
                            }
                        } else if (castOnItem == 442) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(2355, 1);
                            addSkillXP(53, 6);
                        } else if (castOnItem == 444) {
                            deleteItem(castOnItem, castOnSlot, 1);
                            addItem(2357, 1);
                            addSkillXP(53, 6);
                        } else if ((castOnItem == 447)) {
                            if (amountOfItem(453) < 4) {
                                sendMessage("You need 4 coal to make a mith bar");
                            } else {
                                deleteItem(castOnItem, castOnSlot, 1);
                                for (int d = 0; d < 4; d++) {
                                    deleteItem(453, getItemSlot(453), 1);
                                }
                                addItem(ItemIDs.MITHRIL_BAR, 1);
                                addSkillXP(53, 6);
                            }
                        } else if ((castOnItem == 449)) {
                            if (amountOfItem(453) < 6) {
                                sendMessage("You need 6 coal to make an addy bar");
                            } else {
                                deleteItem(castOnItem, castOnSlot, 1);
                                for (int d = 0; d < 6; d++) {
                                    deleteItem(453, getItemSlot(453), 1);
                                }
                                addItem(2361, 1);
                                addSkillXP(53, 6);
                            }
                        } else if ((castOnItem == 451)) {
                            if (amountOfItem(453) < 8) {
                                sendMessage("You need 8 coal to make a rune bar");
                            } else {
                                deleteItem(castOnItem, castOnSlot, 1);
                                for (int d = 0; d < 8; d++) {
                                    deleteItem(453, getItemSlot(453), 1);
                                }
                                addItem(2363, 1);
                                addSkillXP(53, 6);
                            }
                        }
                    } else {
                        sendMessage(
                                "You need atleast 43 Magic to cast Superheat Item");
                    }
                }
                break;

            case 249: //Magic on Players
// MAGE_00
                int playerIndexx = inStream.readSignedWordA();
                spellID = inStream.readSignedWordBigEndian();

                client pl2 = (client) PlayerHandler.players[playerIndexx];
                if (pl2 == null) return;
                CheckWildrange(pl2.combat);

                int pcombat = PlayerHandler.players[playerIndexx].combat;

                if (PlayerHandler.players[playerIndexx] != null)
                    pcombat = PlayerHandler.players[playerIndexx].combat;


                ResetAttackNPC();

                MageAttackIndex = playerIndexx + 1;

                if (!nonWild() && !pl2.nonWild() && pcombat != -1) {
                    if (mageTimer <= 0) {
                        AttackMage(playerIndexx);
                        mageTimer = 5;
                    }
                } else {
                    sendMessage("This player is in a safe zone and cannot be attacked");
                }


            case 131: // Magic on NPCs
                if (attacknpc > 0) {
                    sendMessage("You are already attacking an npc!");
                } else {
                    attacknpc = inStream.readSignedWordBigEndianA();
                    int magicID = inStream.readSignedWordA();
                    NPC npc = NPCHandler.npcs[attacknpc];
                    println_debug("npcIndex: " + attacknpc + " magicID: " + magicID);
                    // setAnimation(711);
                    int EnemyX2 = npc.absX;
                    int EnemyY2 = npc.absY;
                    int EnemyHP2 = npc.HP;
                    if (attacknpc >= NPCHandler.npcs.length || attacknpc < 0 || npc == null) {
                        break;
                    }
                    if (EnemyX2 != absX && EnemyY2 != absY) {
                        faceUpdate(attacknpc);
                    }

                    if (nonattackable(attacknpc)) {
                        sendMessage("You can't attack that npc");
                        return;
                    }

                    boolean Cant = false;
                    if (npc.attacknpc > 0) {
                        Cant = true;
                        sendMessage("You can't attack a dueling npc!");
                    }
                    if (npc.npcType == 4291) {
                        if (Boundary.isIn(this, WarriorsGuild.CYCLOPS_BOUNDARY)) {
                            if (!getWarriorsGuild().isActive()) {
                                sendMessage("You cannot attack a cyclops without talking to kamfreena.");
                                return;
                            }
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("crawling hand")) {
                        if (playerLevel[18] < 5) {
                            sendMessage(
                                    "You need a slayer level of 5 to slay crawling hands.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("cave bug")) {
                        if (playerLevel[18] < 7) {
                            sendMessage(
                                    "You need a slayer level of 7 to slay cave bugs.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("cave crawler")) {
                        if (playerLevel[18] < 10) {
                            sendMessage(
                                    "You need a slayer level of 10 to slay cave crawlers.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("banshee")) {
                        if (playerLevel[18] < 15) {
                            sendMessage(
                                    "You need a slayer level of 15 to slay banshees.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("cave slime")) {
                        if (playerLevel[18] < 17) {
                            sendMessage(
                                    "You need a slayer level of 17 to slay cave slimes.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("rockslug")) {
                        if (playerLevel[18] < 20) {
                            sendMessage(
                                    "You need a slayer level of 20 to slay rockslugs.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("cockatrice")) {
                        if (playerLevel[18] < 25) {
                            sendMessage(
                                    "You need a slayer level of 25 to slay cockatrices.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("pyrefiend")) {
                        if (playerLevel[18] < 30) {
                            sendMessage(
                                    "You need a slayer level of 30 to slay Pyrefiends.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("basalisk")) {
                        if (playerLevel[18] < 40) {
                            sendMessage(
                                    "You need a slayer level of 40 to slay Basalisks.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("infernal mage")) {
                        if (playerLevel[18] < 45) {
                            sendMessage(
                                    "You need a slayer level of 45 to slay Infernal Mages.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("bloodveld")) {
                        if (playerLevel[18] < 50) {
                            sendMessage(
                                    "You need a slayer level of 50 to slay Bloodvelds.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("jelly")) {
                        if (playerLevel[18] < 52) {
                            sendMessage(
                                    "You need a slayer level of 52 to slay Jellys.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("turoth")) {
                        if (playerLevel[18] < 55) {
                            sendMessage(
                                    "You need a slayer level of 55 to slay Turoths.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("aberrant spectre")) {
                        if (playerLevel[18] < 60) {
                            sendMessage(
                                    "You need a slayer level of 60 to slay Aberrant spectres.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("dust devil")) {
                        if (playerLevel[18] < 65) {
                            sendMessage(
                                    "You need a slayer level of 65 to slay dust Devils.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("kurask")) {
                        if (playerLevel[18] < 70) {
                            sendMessage(
                                    "You need a slayer level of 70 to slay Kurasks.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("skeletal wyvern")) {
                        if (playerLevel[18] < 72) {
                            sendMessage(
                                    "You need a slayer level of 72 to slay skeletal wyverns.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("gargoyle")) {
                        if (playerLevel[18] < 75) {
                            sendMessage(
                                    "You need a slayer level of 75 to slay gargoyles.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("Nechryael")) {
                        if (playerLevel[18] < 80) {
                            sendMessage(
                                    "You need a slayer level of 80 to slay Nechryaels.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("Abyssal Demon")) {
                        if (playerLevel[18] < 85) {
                            sendMessage(
                                    "You need a slayer level of 85 to slay Abyssal Demons.");
                            return;
                        }
                    }
                    if (NPCCacheDefinition.forID(npc.npcType).getName().equalsIgnoreCase("dark beast")) {
                        if (playerLevel[18] < 90) {
                            sendMessage(
                                    "You need a slayer level of 90 to slay Dark Beasts.");
                            return;
                        }
                    }
            /* boolean RingOfLife = false;
             if (server.npcHandler.npcs[npcIndex].playerEquipment[playerRing] == 2570) {
             RingOfLife = true;
             }*/
                    int hitDiff = 0;
                    int mageXP = 0;
                    boolean slayer2 = true;

                    if ((npc != null)
                            && (npc.followPlayer < 1
                            || npc.followPlayer
                            == playerId)
                            && slayer2
                            && !Cant
                            && npc.HP
                            != 10000) {
                        MageAttackIndex = npcIndex + 1;
                        {
                            try {
                                npc.StartKilling = playerId;
                                npc.RandomWalk = false;
                                npc.IsUnderAttack = true;

                                int casterX = absX;
                                int casterY = absY;
                                int offsetX = (casterX - EnemyX2) * -1;
                                int offsetY = (casterY - EnemyY2) * -1;

//Start of Magic Spells, Made by Mod Sam
                                if (magicID == 1152) // Wind Strike
                                {
                                    if (playerLevel[6] >= 1) {
                                        if ((!playerHasItemAmount(558, 1))
                                                || (!playerHasItemAmount(556, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(558, 1))
                                                && (playerHasItemAmount(556, 1))) {
                                            offsetY = (absY - EnemyY2) * -1;
                                            offsetX = (absX - EnemyX2) * -1;
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 91, 43, 31, -AttackingOn);
                                            stillgfx(92, EnemyY2, EnemyX2);
                                            hitDiff = 1 + misc.random(4);
                                            inCombat();
                                            PkingDelay = 15;
                                            setAnimation(711);
                                            addSkillXP((15 * playerLevel[6]), 6);
                                            deleteItem(558, getItemSlot(558), 1);
                                            deleteItem(556, getItemSlot(556), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            //castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 1) {
                                        sendMessage("You need a Magic Level of 1 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1154) // Water strike
                                {
                                    if (playerLevel[6] >= 5) {
                                        if ((!playerHasItemAmount(555, 1))
                                                || (!playerHasItemAmount(556, 1))
                                                || (!playerHasItemAmount(558, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(555, 1))
                                                && (playerHasItemAmount(556, 1))
                                                || (playerHasItemAmount(558, 1))) {
                                            offsetY = (absY - EnemyY2) * -1;
                                            offsetX = (absX - EnemyX2) * -1;
                                            hitDiff = 1 + misc.random(6);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 94, 43, 31, -AttackingOn);
                                            stillgfx(95, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            deleteItem(555, getItemSlot(555), 1);
                                            deleteItem(556, getItemSlot(556), 1);
                                            deleteItem(558, getItemSlot(558), 1);
                                            setAnimation(711);
                                            addSkillXP((15 * playerLevel[6]), 6);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 4) {
                                        sendMessage("You need a Magic Level of 5 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1156) // Earth strike
                                {
                                    if (playerLevel[6] >= 9) {
                                        if ((!playerHasItemAmount(557, 2))
                                                || (!playerHasItemAmount(556, 1))
                                                || (!playerHasItemAmount(558, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(557, 2))
                                                && (playerHasItemAmount(556, 1))
                                                || (playerHasItemAmount(558, 1))) {
                                            offsetY = (absY - EnemyY2) * -1;
                                            offsetX = (absX - EnemyX2) * -1;
                                            hitDiff = 2 + misc.random(8);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 97, 43, 31, -AttackingOn);
                                            stillgfx(98, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            setAnimation(711);
                                            addSkillXP((35 * playerLevel[6]), 6);
                                            deleteItem(557, getItemSlot(557), 2);
                                            deleteItem(556, getItemSlot(556), 1);
                                            deleteItem(558, getItemSlot(558), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 9) {
                                        sendMessage("You need a Magic Level of 9 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1158) // Fire strike
                                {
                                    if (playerLevel[6] >= 13) {
                                        if ((!playerHasItemAmount(554, 3))
                                                || (!playerHasItemAmount(556, 2))
                                                || (!playerHasItemAmount(558, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(554, 3))
                                                && (playerHasItemAmount(556, 2))
                                                || (playerHasItemAmount(558, 1))) {
                                            offsetY = (absY - EnemyY2) * -1;
                                            offsetX = (absX - EnemyX2) * -1;
                                            hitDiff = 2 + misc.random(10);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 100, 43, 31, -AttackingOn);
                                            stillgfx(101, EnemyY2, EnemyX2);
                                            setAnimation(711);
                                            PkingDelay = 15;
                                            addSkillXP((45 * playerLevel[6]), 6);
                                            deleteItem(554, getItemSlot(554), 3);
                                            deleteItem(556, getItemSlot(556), 2);
                                            deleteItem(558, getItemSlot(558), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 13) {
                                        sendMessage("You need a Magic Level of 13 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1160) // Wind Bolt
                                {
                                    if (playerLevel[6] >= 17) {
                                        if ((!playerHasItemAmount(556, 2))
                                                || (!playerHasItemAmount(562, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(556, 2))
                                                && (playerHasItemAmount(562, 1))) {
                                            offsetY = (absY - EnemyY2) * -1;
                                            offsetX = (absX - EnemyX2) * -1;
                                            hitDiff = 3 + misc.random(12);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 118, 43, 31, -AttackingOn);
                                            stillgfx(119, EnemyY2, EnemyX2);
                                            setAnimation(711);
                                            PkingDelay = 15;
                                            addSkillXP((60 * playerLevel[6]), 6);
                                            deleteItem(556, getItemSlot(556), 2);
                                            deleteItem(562, getItemSlot(562), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;;
                                        }
                                    } else if (playerLevel[6] <= 17) {
                                        sendMessage("You need a Magic Level of 17 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1163) // Water Bolt
                                {
                                    if (playerLevel[6] >= 23) {
                                        if ((!playerHasItemAmount(555, 2))
                                                || (!playerHasItemAmount(556, 2))
                                                || (!playerHasItemAmount(562, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(555, 2))
                                                || (playerHasItemAmount(556, 2))
                                                && (playerHasItemAmount(562, 1))) {
                                            offsetY = (absY - EnemyY2) * -1;
                                            offsetX = (absX - EnemyX2) * -1;
                                            hitDiff = 3 + misc.random(14);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 121, 43, 31, -AttackingOn);
                                            stillgfx(122, EnemyY2, EnemyX2);
                                            setAnimation(711);
                                            PkingDelay = 15;
                                            addSkillXP((70 * playerLevel[6]), 6);
                                            deleteItem(555, getItemSlot(555), 2);
                                            deleteItem(556, getItemSlot(556), 2);
                                            deleteItem(562, getItemSlot(562), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 23) {
                                        sendMessage("You need a Magic Level of 23 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1166) // Earth Bolt
                                {
                                    if (playerLevel[6] >= 29) {
                                        if ((!playerHasItemAmount(557, 3))
                                                || (!playerHasItemAmount(556, 2))
                                                || (!playerHasItemAmount(562, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(557, 3))
                                                || (playerHasItemAmount(556, 2))
                                                && (playerHasItemAmount(562, 1))) {
                                            offsetY = (absY - EnemyY2) * -1;
                                            offsetX = (absX - EnemyX2) * -1;
                                            hitDiff = 4 + misc.random(16);
                                            inCombat();
                                            setAnimation(711);
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 124
                                                    , 43, 31, -AttackingOn);
                                            stillgfx(125, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            addSkillXP((85 * playerLevel[6]), 6);
                                            deleteItem(557, getItemSlot(557), 3);
                                            deleteItem(556, getItemSlot(556), 2);
                                            deleteItem(562, getItemSlot(562), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 29) {
                                        sendMessage("You need a Magic Level of 29 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1169) // Fire Bolt
                                {
                                    if (playerLevel[6] >= 35) {
                                        if ((!playerHasItemAmount(554, 4))
                                                || (!playerHasItemAmount(556, 3))
                                                || (!playerHasItemAmount(562, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(554, 4))
                                                || (playerHasItemAmount(556, 3))
                                                && (playerHasItemAmount(562, 1))) {
                                            offsetY = (absY - EnemyY2) * -1;
                                            offsetX = (absX - EnemyX2) * -1;
                                            hitDiff = 4 + misc.random(18);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 127, 43, 31, -AttackingOn);
                                            stillgfx(128, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            addSkillXP((100 * playerLevel[6]), 6);
                                            setAnimation(711);
                                            deleteItem(554, getItemSlot(554), 4);
                                            deleteItem(556, getItemSlot(556), 3);
                                            deleteItem(562, getItemSlot(562), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 34) {
                                        sendMessage("You need a Magic Level of 35 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1172) // Wind Blast
                                {
                                    if (playerLevel[6] >= 41) {
                                        if ((!playerHasItemAmount(556, 3))
                                                || (!playerHasItemAmount(560, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(556, 3))
                                                || (playerHasItemAmount(560, 1))) {
                                            hitDiff = 5 + misc.random(20);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 133, 43, 31, -AttackingOn);
                                            stillgfx(134, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            setAnimation(711);
                                            addSkillXP((120 * playerLevel[6]), 6);
                                            deleteItem(556, getItemSlot(556), 3);
                                            deleteItem(560, getItemSlot(560), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 40) {
                                        sendMessage("You need a Magic Level of 41 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1175) // Water Blast
                                {
                                    if (playerLevel[6] >= 47) {
                                        if ((!playerHasItemAmount(555, 3))
                                                || (!playerHasItemAmount(556, 3))
                                                || (!playerHasItemAmount(560, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(555, 3))
                                                || (playerHasItemAmount(556, 3))
                                                || (playerHasItemAmount(560, 1))) {
                                            inCombat();
                                            hitDiff = 5 + misc.random(22);
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 136, 43, 31, -AttackingOn);
                                            stillgfx(137, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            setAnimation(711);
                                            addSkillXP((135 * playerLevel[6]), 6);
                                            deleteItem(556, getItemSlot(555), 3);
                                            deleteItem(556, getItemSlot(556), 3);
                                            deleteItem(560, getItemSlot(560), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 46) {
                                        sendMessage("You need a Magic Level of 47 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1177) // Earth Blast
                                {
                                    if (playerLevel[6] >= 53) {
                                        if ((!playerHasItemAmount(555, 3))
                                                || (!playerHasItemAmount(557, 4))
                                                || (!playerHasItemAmount(560, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(555, 3))
                                                || (playerHasItemAmount(557, 4))
                                                || (playerHasItemAmount(560, 1))) {
                                            hitDiff = 6 + misc.random(24);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 139, 43, 31, -AttackingOn);
                                            stillgfx(140, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            setAnimation(711);
                                            addSkillXP((150 * playerLevel[6]), 6);
                                            deleteItem(555, getItemSlot(555), 3);
                                            deleteItem(557, getItemSlot(557), 4);
                                            deleteItem(560, getItemSlot(560), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 52) {
                                        sendMessage("You need a Magic Level of 53 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1181) // Fire Blast
                                {
                                    if (playerLevel[6] >= 59) {
                                        if ((!playerHasItemAmount(555, 4))
                                                || (!playerHasItemAmount(554, 5))
                                                || (!playerHasItemAmount(560, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(555, 4))
                                                || (playerHasItemAmount(554, 5))
                                                || (playerHasItemAmount(560, 1))) {
                                            hitDiff = 7 + misc.random(26);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 130, 43, 31, -AttackingOn);
                                            stillgfx(131, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            setAnimation(711);
                                            addSkillXP((165 * playerLevel[6]), 6);
                                            deleteItem(555, getItemSlot(555), 4);
                                            deleteItem(554, getItemSlot(554), 5);
                                            deleteItem(560, getItemSlot(560), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 58) {
                                        sendMessage("You need a Magic Level of 59 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1183) // Wind Wave
                                {
                                    if (playerLevel[6] >= 62) {
                                        if ((!playerHasItemAmount(556, 5))
                                                || (!playerHasItemAmount(565, 1))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(556, 5))
                                                || (playerHasItemAmount(565, 1))) {
                                            hitDiff = 7 + misc.random(28);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 159, 43, 31, -AttackingOn);
                                            stillgfx(160, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            setAnimation(711);
                                            addSkillXP((200 * playerLevel[6]), 6);
                                            deleteItem(556, getItemSlot(556), 4);
                                            deleteItem(565, getItemSlot(565), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 62) {
                                        sendMessage("You need a Magic Level of 62 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1185) // Water Wave
                                {
                                    if (playerLevel[6] >= 65) {
                                        if ((!playerHasItemAmount(556, 5))
                                                || (!playerHasItemAmount(565, 1))
                                                || (!playerHasItemAmount(555, 7))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(556, 5))
                                                || (playerHasItemAmount(565, 1))
                                                || (playerHasItemAmount(555, 7))) {
                                            hitDiff = 8 + misc.random(30);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 162, 43, 31, -AttackingOn);
                                            stillgfx(163, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            setAnimation(711);
                                            addSkillXP((225 * playerLevel[6]), 6);
                                            deleteItem(556, getItemSlot(556), 4);
                                            deleteItem(565, getItemSlot(565), 1);
                                            deleteItem(555, getItemSlot(555), 7);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 64) {
                                        sendMessage("You need a Magic Level of 65 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1188) // Earth Wave
                                {
                                    if (playerLevel[6] >= 70) {
                                        if ((!playerHasItemAmount(556, 5))
                                                || (!playerHasItemAmount(565, 1))
                                                || (!playerHasItemAmount(557, 7))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(556, 5))
                                                || (playerHasItemAmount(565, 1))
                                                || (playerHasItemAmount(557, 7))) {
                                            hitDiff = 8 + misc.random(32);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 165, 43, 31, -AttackingOn);
                                            stillgfx(166, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            setAnimation(711);
                                            addSkillXP((250 * playerLevel[6]), 6);
                                            deleteItem(556, getItemSlot(556), 4);
                                            deleteItem(565, getItemSlot(565), 1);
                                            deleteItem(555, getItemSlot(557), 7);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 70) {
                                        sendMessage(
                                                "You need a Magic Level of 70 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1189) // Fire Wave
                                {
                                    if (playerLevel[6] >= 75) {
                                        if ((!playerHasItemAmount(556, 5))
                                                || (!playerHasItemAmount(565, 1))
                                                || (!playerHasItemAmount(554, 7))) {
                                            sendMessage("You do not have enough Runes to Cast this Spell!");
                                        } else if ((playerHasItemAmount(556, 5))
                                                || (playerHasItemAmount(565, 1))
                                                || (playerHasItemAmount(554, 7))) {
                                            hitDiff = 9 + misc.random(34);
                                            inCombat();
                                            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 130, 43, 31, -AttackingOn);
                                            stillgfx(157, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            setAnimation(711);
                                            addSkillXP((300 * playerLevel[6]), 6);
                                            deleteItem(556, getItemSlot(556), 5);
                                            deleteItem(565, getItemSlot(565), 1);
                                            deleteItem(554, getItemSlot(554), 7);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 75) {
                                        sendMessage("You need a Magic Level of 75 to Cast this Spell!");
                                    }
                                }
                                if (magicID == 1190) // Saradomin Strike
                                {
                                    if (playerLevel[6] >= 60) {
                                        if ((!playerHasItemAmount(554, 2))
                                                || (!playerHasItemAmount(565, 2))
                                                || (!playerHasItemAmount(556, 4))
                                                || (!playerHasItemAmount(
                                                2415, 1))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(554, 2))
                                                || (playerHasItemAmount(565, 2))
                                                || (playerHasItemAmount(556, 4))
                                                || (playerHasItemAmount(2415, 1))) {
                                            hitDiff = 1 + misc.random(40);
                                            inCombat();
                                            stillgfx(76, EnemyY2, EnemyX2);
                                            setAnimation(811);
                                            PkingDelay = 15;
                                            addSkillXP((500 * playerLevel[6]), 6);
                                            deleteItem(554, getItemSlot(554), 2);
                                            deleteItem(565, getItemSlot(565), 2);
                                            deleteItem(556, getItemSlot(556), 4);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 59) {
                                        sendMessage(
                                                "You need a magic level of 60 to cast this spell.");
                                    }
                                }
                                if (magicID == 1191) // Claws of guthix
                                {
                                    if (playerLevel[6] >= 60) {
                                        if ((!playerHasItemAmount(554, 1))
                                                || (!playerHasItemAmount(565, 2))
                                                || (!playerHasItemAmount(556, 4))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(554, 1))
                                                || (playerHasItemAmount(565, 2))
                                                || (playerHasItemAmount(556, 4))) {
                                            hitDiff = 1 + misc.random(40);
                                            inCombat();
                                            stillgfx(77, EnemyY2, EnemyX2);
                                            setAnimation(811);
                                            PkingDelay = 15;
                                            addSkillXP((500 * playerLevel[6]), 6);
                                            deleteItem(554, getItemSlot(554), 2);
                                            deleteItem(565, getItemSlot(565), 2);
                                            deleteItem(556, getItemSlot(556), 4);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 59) {
                                        sendMessage(
                                                "You need a magic level of 60 to cast this spell.");
                                    }
                                }

                                if (magicID == 12939) // smoke rush
                                {
                                    if (playerLevel[6] >= 50) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(562, 2))
                                                || (!playerHasItemAmount(554, 1))
                                                || (!playerHasItemAmount(556, 1))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(562, 2))
                                                && (playerHasItemAmount(554, 1))
                                                && (playerHasItemAmount(556, 1))) {
                                            hitDiff = 5 + misc.random(10);
                                            inCombat();
                                            // PkingDelay = 15;
                                            stillgfx(385, EnemyY2, EnemyX2);
                                            addSkillXP((200 * playerLevel[6]), 6);
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(562, getItemSlot(562), 2);
                                            deleteItem(554, getItemSlot(554), 1);
                                            deleteItem(556, getItemSlot(556), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 50) {
                                        sendMessage(
                                                "You need a magic level of 50 to cast this spell.");
                                    }
                                }
                                if (magicID == 12963) // smoke burst
                                {
                                    if (playerLevel[6] >= 62) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(562, 4))
                                                || (!playerHasItemAmount(554, 2))
                                                || (!playerHasItemAmount(556, 2))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(562, 4))
                                                && (playerHasItemAmount(554, 2))
                                                && (playerHasItemAmount(556, 2))) {
                                            hitDiff = 5 + misc.random(13);
                                            inCombat();
                                            // PkingDelay = 15;
                                            stillgfx(389, EnemyY2, EnemyX2);
                                            addSkillXP((250 * playerLevel[6]), 6);
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(562, getItemSlot(562), 4);
                                            deleteItem(554, getItemSlot(554), 2);
                                            deleteItem(556, getItemSlot(556), 2);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 62) {
                                        sendMessage(
                                                "You need a magic level of 62 to cast this spell.");
                                    }
                                }
                                if (magicID == 12951) // smoke blitz
                                {
                                    if (playerLevel[6] >= 74) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(565, 2))
                                                || (!playerHasItemAmount(554, 2))
                                                || (!playerHasItemAmount(
                                                556, 2))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(565, 2))
                                                && (playerHasItemAmount(554, 2))
                                                && (playerHasItemAmount(556, 2))) {
                                            hitDiff = 5 + misc.random(15);
                                            inCombat();
                                            // PkingDelay = 15;
                                            stillgfx(389, EnemyY2, EnemyX2);
                                            addSkillXP((250 * playerLevel[6]), 6);
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(565, getItemSlot(565), 2);
                                            deleteItem(554, getItemSlot(554), 2);
                                            deleteItem(556, getItemSlot(556), 2);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 74) {
                                        sendMessage(
                                                "You need a magic level of 74 to cast this spell.");
                                    }
                                }
                                if (magicID == 12975) // Smoke Barrage
                                {
                                    if (playerLevel[6] >= 86) {
                                        if ((!playerHasItemAmount(560, 4))
                                                || (!playerHasItemAmount(565, 2))
                                                || (!playerHasItemAmount(554, 4))
                                                || (!playerHasItemAmount(556, 4))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 4))
                                                && (playerHasItemAmount(565, 2))
                                                && (playerHasItemAmount(554, 4))
                                                && (playerHasItemAmount(556, 4))) {
                                            hitDiff = 5 + misc.random(25);
                                            inCombat();
                                            // PkingDelay = 15;
                                            stillgfx(391, EnemyY2, EnemyX2);
                                            addSkillXP((600 * playerLevel[6]), 6);
                                            deleteItem(560, getItemSlot(560), 4);
                                            deleteItem(565, getItemSlot(565), 2);
                                            deleteItem(554, getItemSlot(554), 4);
                                            deleteItem(556, getItemSlot(556), 4);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 86) {
                                        sendMessage(
                                                "You need a magic level of 86 to cast this spell.");
                                    }
                                }
                                if (magicID == 12861) // ice rush
                                {
                                    if (playerLevel[6] >= 58) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(565, 2))
                                                || (!playerHasItemAmount(555, 2))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(565, 2))
                                                && (playerHasItemAmount(555, 2))) {
                                            hitDiff = 5 + misc.random(10);
                                            inCombat();
                                            // PkingDelay = 15;
                                            stillgfx(361, EnemyY2, EnemyX2);
                                            addSkillXP((200 * playerLevel[6]), 6);
                                            // sendMessage("You freeze the enemy!");
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(565, getItemSlot(565), 2);
                                            deleteItem(554, getItemSlot(555), 2);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 58) {
                                        sendMessage(
                                                "You need a magic level of 58 to cast this spell.");
                                    }
                                }
                                if (magicID == 12881) // ice burst (lvl 70 spell)
                                {
                                    if (playerLevel[6] >= 69) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(562, 4))
                                                || (!playerHasItemAmount(555, 4))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(562, 4))
                                                && (playerHasItemAmount(555, 4))) {
                                            hitDiff = 5 + misc.random(13);
                                            inCombat();
                                            // PkingDelay = 15;
                                            stillgfx(363, EnemyY2, EnemyX2);
                                            addSkillXP((300 * playerLevel[6]), 6);
                                            // sendMessage("You freeze the enemy!");
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(562, getItemSlot(562), 4);
                                            deleteItem(555, getItemSlot(555), 4);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 69) {
                                        sendMessage(
                                                "You need a magic level of 70 to cast this spell.");
                                    }
                                }
                                if (magicID == 12987) // Shadow Rush
                                {
                                    if (playerLevel[6] >= 52) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(562, 2))
                                                || (!playerHasItemAmount(556, 1))
                                                || (!playerHasItemAmount(566, 1))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(562, 2))
                                                && (playerHasItemAmount(556, 1))
                                                && (playerHasItemAmount(566, 1))) {
                                            hitDiff = 5 + misc.random(8);
                                            inCombat();
                                            // PkingDelay = 15;
                                            stillgfx(379, EnemyY2, EnemyX2);
                                            addSkillXP((200 * playerLevel[6]), 6);
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(562, getItemSlot(562), 2);
                                            deleteItem(566, getItemSlot(566), 1);
                                            deleteItem(556, getItemSlot(556), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 52) {
                                        sendMessage(
                                                "You need a magic level of 52 to cast this spell.");
                                    }
                                }
                                if (magicID == 13011) // Shadow Burst
                                {
                                    if (playerLevel[6] >= 64) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(562, 4))
                                                || (!playerHasItemAmount(556, 2))
                                                || (!playerHasItemAmount(566, 2))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(562, 4))
                                                && (playerHasItemAmount(556, 2))
                                                && (playerHasItemAmount(566, 2))) {
                                            hitDiff = 5 + misc.random(10);
                                            inCombat();
                                            // PkingDelay = 15;
                                            stillgfx(382, EnemyY2, EnemyX2);
                                            addSkillXP((250 * playerLevel[6]), 6);
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(562, getItemSlot(562), 4);
                                            deleteItem(566, getItemSlot(566), 2);
                                            deleteItem(556, getItemSlot(556), 2);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 64) {
                                        sendMessage(
                                                "You need a magic level of 64 to cast this spell.");
                                    }
                                }
                                if (magicID == 12999) // Shadow Blitz
                                {
                                    if (playerLevel[6] >= 76) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(565, 2))
                                                || (!playerHasItemAmount(556, 2))
                                                || (!playerHasItemAmount(566, 2))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(565, 2))
                                                && (playerHasItemAmount(556, 2))
                                                && (playerHasItemAmount(566, 2))) {
                                            hitDiff = 5 + misc.random(13);
                                            inCombat();
                                            // PkingDelay = 15;
                                            stillgfx(381, EnemyY2, EnemyX2);
                                            addSkillXP((300 * playerLevel[6]), 6);
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(565, getItemSlot(565), 2);
                                            deleteItem(566, getItemSlot(566), 2);
                                            deleteItem(556, getItemSlot(556), 2);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 76) {
                                        sendMessage(
                                                "You need a magic level of 76 to cast this spell.");
                                    }
                                }
                                if (magicID == 13023) // Shadow Barrage
                                {
                                    if (playerLevel[6] >= 88) {
                                        if ((!playerHasItemAmount(560, 4))
                                                || (!playerHasItemAmount(565, 2))
                                                || (!playerHasItemAmount(556, 4))
                                                || (!playerHasItemAmount(566, 3))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 4))
                                                && (playerHasItemAmount(565, 2))
                                                && (playerHasItemAmount(556, 4))
                                                && (playerHasItemAmount(566, 3))) {
                                            hitDiff = 5 + misc.random(25);
                                            inCombat();
                                            // PkingDelay = 15;
                                            stillgfx(383, EnemyY2, EnemyX2);
                                            addSkillXP((600 * playerLevel[6]), 6);
                                            deleteItem(560, getItemSlot(560), 4);
                                            deleteItem(565, getItemSlot(565), 2);
                                            deleteItem(566, getItemSlot(566), 3);
                                            deleteItem(556, getItemSlot(556), 4);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 88) {
                                        sendMessage(
                                                "You need a magic level of 88 to cast this spell.");
                                    }
                                }
                                if (magicID == 12901) // Blood Rush
                                {
                                    if (playerLevel[6] >= 56) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(565, 1))
                                                || (!playerHasItemAmount(562, 2))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(565, 1))
                                                && (playerHasItemAmount(562, 2))) {
                                            hitDiff = 6 + misc.random(10);
                                            playerLevel[3] += hitDiff;
                                            inCombat();
                                            // PkingDelay = 15;
                                            addSkillXP((200 * playerLevel[6]), 6);
                                            // sendMessage("You drain the enemys life and add it to yours.");
                                            stillgfx(373, EnemyY2, EnemyX2);
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(565, getItemSlot(565), 1);
                                            deleteItem(562, getItemSlot(562), 2);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 56) {
                                        sendMessage(
                                                "You need a magic level of 56 to cast this spell.");
                                    }
                                }
                                if (magicID == 12919) // Blood Burst
                                {
                                    if (playerLevel[6] >= 68) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(565, 2))
                                                || (!playerHasItemAmount(562, 4))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(565, 2))
                                                && (playerHasItemAmount(562, 4))) {
                                            hitDiff = 6 + misc.random(13);
                                            playerLevel[3] += hitDiff;
                                            inCombat();
                                            // PkingDelay = 15;
                                            addSkillXP((300 * playerLevel[6]), 6);
                                            // sendMessage("You drain the enemys life and add it to yours.");
                                            stillgfx(376, EnemyY2, EnemyX2);
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(565, getItemSlot(565), 2);
                                            deleteItem(562, getItemSlot(562), 4);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 68) {
                                        sendMessage(
                                                "You need a magic level of 68 to cast this spell.");
                                    }
                                }

                                if (magicID == 12911) // Blood Blitz
                                {
                                    if (playerLevel[6] >= 80) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(565, 4))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(565, 4))) {
                                            hitDiff = 6 + misc.random(14);
                                            playerLevel[3] += hitDiff;
                                            inCombat();
                                            // PkingDelay = 15;
                                            addSkillXP((400 * playerLevel[6]), 6);
                                            // sendMessage("You drain the enemys life and add it to yours.");
                                            stillgfx(375, EnemyY2, EnemyX2);
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(565, getItemSlot(565), 4);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                        }
                                    } else if (playerLevel[6] <= 80) {
                                        sendMessage(
                                                "You need a magic level of 80 to cast this spell.");
                                    }
                                }

                                if (magicID == 12891) // ice barrage (lvl 94 spell)
                                {
                                    if (playerLevel[6] >= 94) {
                                        if ((!playerHasItemAmount(560, 4))
                                                || (!playerHasItemAmount(565, 2))
                                                || (!playerHasItemAmount(555, 6))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 4))
                                                && (playerHasItemAmount(565, 2))
                                                && (playerHasItemAmount(555, 6))) {
                                            hitDiff = 5 + misc.random(25);
                                            setAnimation(1979);
                                            // server.npcHandler.npcs[npcIndex].PoisonPlayer();
                                            // server.npcHandler.npcs[npcIndex].uberentangle();
                                            // server.npcHandler.npcs[npcIndex].inCombat();
                                            inCombat();
                                            PkingDelay = 15;
                                            addSkillXP((800 * playerLevel[6]), 6);
                                            // server.npcHandler.npcs[npcIndex].sendMessage("You have been frozen!");
                                            // sendMessage("You poison and freeze the enemy!");
                                            stillgfx(369, EnemyY2, EnemyX2);
                                            deleteItem(560, getItemSlot(560), 4);
                                            deleteItem(565, getItemSlot(565), 2);
                                            deleteItem(554, getItemSlot(554), 6);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // server.npcHandler.npcs[npcIndex].currentHealth -= server.npcHandler.npcs[npcIndex].hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 93) {
                                        sendMessage(
                                                "You need a magic level of 94 to cast this spell.");
                                    }
                                }

                                if (magicID == 12929) // blood barrage (lvl 92 spell)
                                {
                                    if (playerLevel[6] >= 90) {
                                        if ((!playerHasItemAmount(560, 4))
                                                || (!playerHasItemAmount(565, 4))
                                                || (!playerHasItemAmount(566, 1))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 4))
                                                && (playerHasItemAmount(565, 4))
                                                && (playerHasItemAmount(566, 1))) {
                                            // server.npcHandler.npcs[npcIndex].hitDiff = 6 + misc.random(74);
                                            hitDiff = 6 + misc.random(25);
                                            playerLevel[3] += hitDiff;
                                            updateRequired = true;
                                            // server.npcHandler.npcs[npcIndex].inCombat();
                                            inCombat();
                                            PkingDelay = 15;
                                            addSkillXP((700 * playerLevel[6]), 6);
                                            // server.npcHandler.npcs[npcIndex].sendMessage("Your life has been drained!");
                                            // sendMessage("You drain the enemys life and add it to yours.");
                                            stillgfx(377, EnemyY2, EnemyX2);
                                            deleteItem(560, getItemSlot(560), 4);
                                            deleteItem(565, getItemSlot(565), 4);
                                            deleteItem(566, getItemSlot(566), 1);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // server.npcHandler.npcs[npcIndex].currentHealth -= server.npcHandler.npcs[npcIndex].hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 91) {
                                        sendMessage(
                                                "You need a magic level of 92 to cast this spell.");
                                    }
                                }

                                if (magicID == 12037) // Magic Dart (lvl 50 spell)
                                {
                                    if (playerLevel[6] >= 50) {
                                        if ((!playerHasItemAmount(560, 20))
                                                || (!playerHasItemAmount(555, 30))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 20))
                                                && (playerHasItemAmount(555, 30))) {
                                            startAnimation(1978);
                                            hitDiff = 6 + misc.random(20);
                                            inCombat();
                                            stillgfx(331, EnemyY2, EnemyX2);
                                            PkingDelay = 15;
                                            deleteItem(560, getItemSlot(560), 20);
                                            deleteItem(555, getItemSlot(555), 30);
                                        }
                                    } else if (playerLevel[6] <= 49) {
                                        sendMessage(
                                                "You need a magic level of 50 to cast this spell.");
                                    }
                                }

                                if (magicID == 12871) // ice blitz (lvl 82 spell)
                                {
                                    if (playerLevel[6] >= 82) {
                                        if ((!playerHasItemAmount(560, 2))
                                                || (!playerHasItemAmount(565, 2))
                                                || (!playerHasItemAmount(555, 3))) {
                                            sendMessage(
                                                    "You do not have enough runes to cast this spell.");
                                        } else if ((playerHasItemAmount(560, 2))
                                                && (playerHasItemAmount(565, 2))
                                                && (playerHasItemAmount(555, 3))) {
                                            startAnimation(1978);
                                            hitDiff = 6 + misc.random(14);
                                            // server.npcHandler.npcs[npcIndex].entangle();
                                            // server.npcHandler.npcs[npcIndex].inCombat();
                                            inCombat();
                                            addSkillXP((500 * playerLevel[6]), 6);
                                            stillgfx(368, absY, absX);
                                            stillgfx(367, EnemyY2, EnemyX2);
                                            // server.npcHandler.npcs[npcIndex].sendMessage("You are frozen!");
                                            PkingDelay = 15;
                                            deleteItem(560, getItemSlot(560), 2);
                                            deleteItem(565, getItemSlot(565), 2);
                                            deleteItem(555, getItemSlot(555), 3);
                                            teleportToX = absX;
                                            teleportToY = absY;
                                            // server.npcHandler.npcs[npcIndex].currentHealth -= server.npcHandler.npcs[npcIndex].hitDiff;
                                        }
                                    } else if (playerLevel[6] <= 81) {
                                        sendMessage(
                                                "You need a magic level of 82 to cast this spell.");
                                    }
                                }
                                // server.npcHandler.npcs[npcIndex].currentHealth -= server.npcHandler.npcs[npcIndex].hitDiff;
                                if ((EnemyHP2 - hitDiff) < 0) {
                                    hitDiff = EnemyHP2;
                                }

                                inCombat = true;

                                mageXP = (hitDiff * 4);
                                addSkillXP(hitDiff * 1000, 6);
                                npc.hitDiff = hitDiff;
                                npc.Killing[playerId] += hitDiff;
                                npc.updateRequired = true;
                                npc.hitUpdateRequired = true;

                            } catch (Exception e) {
                                System.out.println("Error at magic on npcs!");
                                println_debug(e.toString());
                            }

                        }
                    } else {
                        sendMessage("You can't attack a player's summoned npc!");
                    }
                }
                break;

            case 3: // focus change
                int focus = inStream.readUnsignedByte();

                break;

            case 86: // camera angle
                int CameraY = inStream.readUnsignedWord();
                int CameraX = inStream.readUnsignedWordA();

                break;

            case 241:
                int mouseclick = inStream.readInteger();
                if (oldclick == mouseclick)
                    sameclick += 1;
                else
                    sameclick = 0;
                oldclick = mouseclick;
                break;

            case 924:
                sendMessage("Stop no clipping!");
                getOutStream().createFrame(999999); // this crashes their client hahaha
                break;

            case 103: // Custom player command, the ::words
                String playerCommand = inStream.readString();
                final String[] restrictions = { "<", ">", "@" };

                if (playerCommand.startsWith("/")) {
                    for (String string2 : restrictions)
                        if (playerCommand.toLowerCase().contains(string2)) {
                            sendMessage("Your message contained illegal characters!");
                            return;
                        }
                    if (clan != null) {
                        clan.sendChat(this, playerCommand);
                        return;
                    }
                    sendMessage("You can only do this in a clan chat..");
                    return;
                }
                println_debug("playerCommand: " + playerCommand);
                customCommand(playerCommand);
                customCommand2(playerCommand);

                break;

            case 214: // change item places
                somejunk = inStream.readUnsignedWordA(); // junk
                int itemFrom = inStream.readUnsignedWordA(); // slot1
                int itemTo = (inStream.readUnsignedWordA() - 128); // slot2

                // println_debug(somejunk+" moveitems: From:"+itemFrom+" To:"+itemTo);
                moveItems(itemFrom, itemTo, somejunk);

                break;

            case 41: // wearItem item
                int wearID = inStream.readUnsignedWord();
                int wearSlot = inStream.readUnsignedWordA();

                testinterfaceId = inStream.readUnsignedWordA();
                for (int I = 0; I < twoHanderz.length; I++) {
                    if (wearSlot == 5 && is2Hander()) {
                        sendMessage(
                                "Two handed item = You cant equip a 2hander with a shield");
                    } else if (playerEquipment[playerShield] != -1
                            && wearID == twoHanderz[I]) {
                        sendMessage("You cant equip a 2hander with a shield");
                    } else {
                        wearItem(wearID, wearSlot);
                    }
                }
                flushOutStream();
                break;

            case 145: // remove item (opposite for wearing) - bank 1 item - value of item
                testinterfaceId = inStream.readUnsignedWordA();
                int removeSlot = inStream.readUnsignedWordA();
                int removeID = inStream.readUnsignedWordA();
                switch (testinterfaceId) {
                    case 1119:
                    case 1120:
                    case 1121:
                    case 1122:
                    case 1123:
                        getSmithing().readInput(playerLevel[playerSmithing],
                                Integer.toString(removeID), this, 1);
                        break;
                    case 4233:
                    case 4239:
                    case 4245:
                        JewelryMaking.mouldItem(this, removeID, 1);
                        break;
                }
                if (testinterfaceId == 7423) {
                    bankItem(removeID, removeSlot, 1);
                    openUpDepBox();
                }

                if (testinterfaceId == 1688) {
                    if (playerEquipment[removeSlot] == removeID) {
                        remove(removeID, removeSlot, 1688);
                    }
                } else if (testinterfaceId == 19041) {
                    if (playerEquipment[removeSlot] == removeID) {
                        remove(removeID, removeSlot, 1688);
                    }
                } else if (testinterfaceId == 5064) { // remove from bag to bank
                    if (InBank == 1) {
                        bankItem(removeID, removeSlot, 1);
                    } else if (InBank == 2) {
                        bankItem2(removeID, removeSlot, 1);
                    } else if (InBank == 3) {
                        bankItem3(removeID, removeSlot, 1);
                    }
                } else if (testinterfaceId == 5382) { // remove from bank
                    if (InBank == 1) {
                        fromBank(removeID, removeSlot, 1);
                    } else if (InBank == 2) {
                        fromBank2(removeID, removeSlot, 1);
                    } else if (InBank == 3) {
                        fromBank3(removeID, removeSlot, 1);
                    }
                } else if (testinterfaceId == 3322) { // remove from bag to trade window
                    if (removeID == 6556 || isUntradable(removeID)) {
                        sendMessage("You cannot trade this item.");
                        if (foundz[3] == 0) {
                        }
                    } else {
                        tradeItem(removeID, removeSlot, 1);
                    }
                } else if (testinterfaceId == 3415) { //remove from trade window
                    if (!secondTradeWindow)
                        fromTrade(removeID, removeSlot, 1);
                } else if (testinterfaceId == 3823) { // Show value to sell items
                    if (!Item.itemSellable[removeID]) {
                        sendMessage("I cannot sell " + GetItemName(removeID) + ".");
                    } else {
                        boolean IsIn = false;

                        if (ShopHandler.ShopSModifier[MyShopID] > 1) {
                            for (int j = 0; j
                                    <= ShopHandler.ShopItemsStandard[MyShopID]; j++) {
                                if (removeID
                                        == (ShopHandler.ShopItems[MyShopID][j]
                                        - 1)) {
                                    IsIn = true;
                                    break;
                                }
                            }
                        } else {
                            IsIn = true;
                        }
                        if (!IsIn) {
                            sendMessage(
                                    "You cannot sell " + GetItemName(removeID)
                                            + " in this store.");
                        } else {
                            int ShopValue = (int) Math.floor(
                                    GetItemShopValue(removeID, 1, removeSlot));
                            String ShopAdd = "";

                            if (ShopValue <= 1) {
                                ShopValue = (int) Math.floor(
                                        GetItemShopValue(removeID, 0, removeSlot));
                            }
                            if (ShopValue >= 1000 && ShopValue < 1000000) {
                                ShopAdd = " (" + (ShopValue / 1000) + "K)";
                            } else if (ShopValue >= 1000000) {
                                ShopAdd = " (" + (ShopValue / 1000000) + " million)";
                            }
                            if(MyShopID == 239) {
                                sendMessage(GetItemName(removeID) + ": shop will buy for " + ShopValue * 9 + "Coins" + ShopAdd);
                                return;
                            }
                            sendMessage(
                                    GetItemName(removeID) + ": shop will buy for "
                                            + ShopValue + "Coins" + ShopAdd);
                        }
                    }
                } else if (testinterfaceId == 64016) { // Show value to buy items
                    int ShopValue = (int) Math.floor(
                            GetItemShopValue(removeID, 0, removeSlot));
                    String ShopAdd = "";

                    if (ShopValue <= 1) {
                        ShopValue = (int) Math.floor(
                                GetItemShopValue(removeID, 0, removeSlot));
                    }
                    if (ShopValue >= 1000 && ShopValue < 1000000) {
                        ShopAdd = " (" + (ShopValue / 1000) + "K)";
                    } else if (ShopValue >= 1000000) {
                        ShopAdd = " (" + (ShopValue / 1000000) + " million)";
                    }
                    if (MyShopID == 99 ) {
                        sendMessage(GetItemName(removeID) + ": currently costs " + ShopValue + " Trading Sticks" + ShopAdd);
                        return;
                    }
                    if (MyShopID == 113) {
                        sendMessage(GetItemName(removeID) + ": currently costs " + ShopValue + " Tokkul" + ShopAdd);
                        return;
                    }
                    if (MyShopID == 114) {
                        sendMessage(GetItemName(removeID) + ": currently costs " + ShopValue + " Tokkul" + ShopAdd);
                        return;
                    }
                    if (MyShopID == 115) {
                        sendMessage(GetItemName(removeID) + ": currently costs " + ShopValue + " Tokkul" + ShopAdd);
                        return;
                    }
                    sendMessage(GetItemName(removeID) + ": currently costs " + ShopValue + " coins" + ShopAdd);
                }

                break;

            case 117: // bank 5 items - sell 1 item
                int interfaceId = inStream.readUnsignedWord();
                int removeID2 = inStream.readUnsignedWord();
                int removeSlot2 = inStream.readSignedWordBigEndian();
                if (debugMessages) {
                    sendMessage("packet 117: interfaceid: " + interfaceId + ", removeSlot: " + removeSlot2 + ", removeID: " + removeID2);
                }
                switch (interfaceId) {
                    case 1119:
                    case 1120:
                    case 1121:
                    case 1122:
                    case 1123:
                        getSmithing().readInput(playerLevel[playerSmithing],
                                Integer.toString(removeID2), this, 5);
                        break;
                    case 4233:
                    case 4239:
                    case 4245:
                        JewelryMaking.mouldItem(this, removeID2, 5);
                        break;
                    case 64016:
                        buyItem(removeID2, removeSlot2, 1);
                        break;
                    case 3823:
                        sellItem(removeID2, removeSlot2, 1);
                        break;
                }
                // println_debug("RemoveItem 5: "+removeID +" InterID: "+testinterfaceId +" slot: "+removeSlot );

                if (interfaceId == 7423) {
                    bankItem(removeID2, removeSlot2, 5);
                    openUpDepBox();
                }
                if (interfaceId == 5064) { // remove from bag to bank
                    if (InBank == 1) {
                        bankItem(removeID2, removeSlot2, 5);
                    } else if (InBank == 2) {
                        bankItem2(removeID2, removeSlot2, 5);
                    } else if (InBank == 3) {
                        bankItem3(removeID2, removeSlot2, 5);
                    }
                } else if (interfaceId == 5382) { // remove from bank
                    if (InBank == 1) {
                        fromBank(removeID2, removeSlot2, 5);
                    } else if (InBank == 2) {
                        fromBank2(removeID2, removeSlot2, 5);
                    } else if (InBank == 3) {
                        fromBank3(removeID2, removeSlot2, 5);
                    }
                } else if (interfaceId == 3322) { // remove from bag to trade window
                    if (isUntradable(removeID2)) {
                        sendMessage("You cannot trade this item");
                    } else {
                        tradeItem(removeID2, removeSlot2, 5);
                    }
                } else if (interfaceId == 3415) { // remove from trade window
                    fromTrade(removeID2, removeSlot2, 5);
                }

                break;

            case 43: // bank 10 items - sell 5 items
                testinterfaceId = inStream.readUnsignedWordBigEndian();
                removeID = inStream.readUnsignedWordA();
                removeSlot = inStream.readUnsignedWordA();
                switch (testinterfaceId) {
                    case 1119:
                    case 1120:
                    case 1121:
                    case 1122:
                    case 1123:
                        getSmithing().readInput(playerLevel[playerSmithing],
                                Integer.toString(removeID), this, 10);
                        break;
                    case 4233:
                    case 4239:
                    case 4245:
                        JewelryMaking.mouldItem(this, removeID, 10);
                        break;
                }
                // println_debug("RemoveItem 10: "+removeID +" InterID: "+testinterfaceId +" slot: "+removeSlot );

                if (testinterfaceId == 7423) {
                    bankItem(removeID, removeSlot, 10);
                    openUpDepBox();
                }
                if (testinterfaceId == 5064) { // remove from bag to bank
                    if (InBank == 1) {
                        bankItem(removeID, removeSlot, 10);
                    } else if (InBank == 2) {
                        bankItem2(removeID, removeSlot, 10);
                    } else if (InBank == 3) {
                        bankItem3(removeID, removeSlot, 10);
                    }
                } else if (testinterfaceId == 5382) { // remove from bank
                    if (InBank == 1) {
                        fromBank(removeID, removeSlot, 10);
                    } else if (InBank == 2) {
                        fromBank2(removeID, removeSlot, 10);
                    } else if (InBank == 3) {
                        fromBank3(removeID, removeSlot, 10);
                    }
                } else if (testinterfaceId == 3322) { // remove from bag to trade window
                    if (isUntradable(removeID)) {
                        sendMessage("You cannot trade this item");
                    } else {
                        tradeItem(removeID, removeSlot, 10);
                    }
                } else if (testinterfaceId == 3415) { // remove from trade window
                    fromTrade(removeID, removeSlot, 10);
                } else if (testinterfaceId == 3823) { // Show value to sell items
                    sellItem(removeID, removeSlot, 5);
                } else if (testinterfaceId == 64016) { // Show value to buy items
                    buyItem(removeID, removeSlot, 5);
                }

                break;

            case 129: // bank all items - sell 50 items
                removeSlot = inStream.readUnsignedWordA();
                testinterfaceId = inStream.readUnsignedWord();
                removeID = inStream.readUnsignedWordA();

                // println_debug("RemoveItem all: "+removeID +" InterID: "+testinterfaceId +" slot: "+removeSlot );

                if (testinterfaceId == 7423) { // remove from dep box to bank
                    if (Item.itemStackable[removeID]) {
                        bankItem(playerItems[removeSlot], removeSlot,
                                playerItemsN[removeSlot]);
                        openUpDepBox();
                    } else {
                        bankItem(playerItems[removeSlot], removeSlot,
                                itemAmount(playerItems[removeSlot]));
                        openUpDepBox();
                    }
                }

                if (testinterfaceId == 5064) { // remove from bag to bank
                    if (InBank == 1) {
                        if (Item.itemStackable[removeID]) {
                            bankItem(playerItems[removeSlot], removeSlot,
                                    playerItemsN[removeSlot]);
                        } else {
                            bankItem(playerItems[removeSlot], removeSlot,
                                    itemAmount(playerItems[removeSlot]));
                        }
                    } else if (InBank == 2) {
                        if (Item.itemStackable[removeID]) {
                            bankItem2(playerItems[removeSlot], removeSlot,
                                    playerItemsN[removeSlot]);
                        } else {
                            bankItem2(playerItems[removeSlot], removeSlot,
                                    itemAmount(playerItems[removeSlot]));
                        }
                    } else if (InBank == 3) {
                        if (Item.itemStackable[removeID]) {
                            bankItem3(playerItems[removeSlot], removeSlot,
                                    playerItemsN[removeSlot]);
                        } else {
                            bankItem3(playerItems[removeSlot], removeSlot,
                                    itemAmount(playerItems[removeSlot]));
                        }
                    }
                } else if (testinterfaceId == 5382) { // remove from bank
                    if (InBank == 1) {
                        fromBank(bankItems[removeSlot], removeSlot, bankItemsN[removeSlot]);
                    } else if (InBank == 2) {
                        fromBank2(bankItems2[removeSlot], removeSlot, bankItemsN2[removeSlot]);
                    } else if (InBank == 3) {
                        fromBank3(bankItems3[removeSlot], removeSlot, bankItemsN3[removeSlot]);
                    }
                } else if (testinterfaceId == 3322) { // remove from bag to trade window
                    if (isUntradable(removeID)) {
                        sendMessage("You cannot trade this item");
                    } else {
                        tradeItem(removeID, removeSlot, playerItemsN[removeSlot]);
                    }
                } else if (testinterfaceId == 3415) { //remove from trade window
                    if (!secondTradeWindow)
                        fromTrade(removeID, removeSlot, 1);
                } else if (testinterfaceId == 3823) { // Show value to sell items
                    sellItem(removeID, removeSlot, 10);
                } else if (testinterfaceId == 64016) { // Show value to buy items
                    buyItem(removeID, removeSlot, 10);
                }

                break;

            case 135: // bank X items
                getOutStream().createFrame(27);
                XremoveSlot = inStream.readSignedWordBigEndian();
                testinterfaceId = inStream.readUnsignedWordA();
                XremoveID = inStream.readSignedWordBigEndian();

                // println_debug("RemoveItem X: "+XremoveID +" InterID: "+testinterfaceId +" slot: "+XremoveSlot);

                break;

            case 208: // Enter Amount Part 2
                int EnteredAmount = inStream.readInteger();

                if (testinterfaceId == 7423) {//remove from dep box to bank
                    bankItem(playerItems[XremoveSlot], XremoveSlot, EnteredAmount);
                    openUpDepBox();
                } else if (testinterfaceId == 64016) { //Shop
                    if (EnteredAmount <= 10000)
                        buyItem(XremoveID, XremoveSlot, EnteredAmount);
                    else
                        sendMessage("You cannot buy more than 10k items at a time.");
                }
                if (testinterfaceId == 5064) { // remove from bag to bank
                    if (InBank == 1) {
                        bankItem(playerItems[XremoveSlot], XremoveSlot, EnteredAmount);
                    } else if (InBank == 2) {
                        bankItem2(playerItems[XremoveSlot], XremoveSlot, EnteredAmount);
                    } else if (InBank == 3) {
                        bankItem3(playerItems[XremoveSlot], XremoveSlot, EnteredAmount);
                    }
                } else if (testinterfaceId == 5382) { // remove from bank
                    if (InBank == 1) {
                        fromBank(bankItems[XremoveSlot], XremoveSlot, EnteredAmount);
                    } else if (InBank == 2) {
                        fromBank2(bankItems2[XremoveSlot], XremoveSlot, EnteredAmount);
                    } else if (InBank == 3) {
                        fromBank3(bankItems3[XremoveSlot], XremoveSlot, EnteredAmount);
                    }
                } else if (testinterfaceId == 3322) { // remove from bag to trade window
                    if (isUntradable(XremoveID)) {
                        sendMessage("You cannot trade this item");
                    } else {
                        tradeItem(XremoveID, XremoveSlot, EnteredAmount);
                    }
                } else if (testinterfaceId == 3415) { // remove from trade window
                    fromTrade(XremoveID, XremoveSlot, EnteredAmount);
                }
                if (fletching[5] == 1) {
                    if (EnteredAmount >= 1 && EnteredAmount <= 3) {
                        fletching[5] = 2;
                        fletching[6] = EnteredAmount;
                        CheckForSkillUse();
                    } else {
                        resetFL();
                        sendMessage(
                                "1 = arrow shafts | 2 = short bow | 3 = long bow");
                        sendMessage(
                                "Achey Logs: 1 = ogre arrow shafts | 2 = ogre composite bow");
                    }
                }
                if (getPrayerAltar().getAltarBone().isPresent()) {
                    getPrayerAltar().alter(EnteredAmount);
                    return;
                }
                break;


            case 79: // light item
                int itemY2 = inStream.readSignedWordBigEndian();
                int itemID2 = inStream.readUnsignedWord();
                int itemX2 = inStream.readSignedWordBigEndian();

                System.out.println("itemID2: " + itemID2);
                if (itemID2 == 3006 && q3stage == 4 && itemX2 == 3288
                        && itemY2 == 3886) {
                    if (playerHasItem(590)) {
                        sendMessage("You light the fireworks");
                        int itemAmount2 = ItemHandler.itemAmount(itemID2, itemX2,
                                itemY2);

                        ItemHandler.removeItem(itemID2, itemX2, itemY2, itemAmount2);
                        removeGroundItem(itemX2, itemY2, itemID2);
                        ItemHandler.addItem(744, itemX2, itemY2, 1, playerId, false);
                    } else {
                        sendMessage("You need a tinderbox to light the firework.");
                    }
                }
                break;

            case 87: // drop item
                int droppedItem = inStream.readUnsignedWordA();

                somejunk = inStream.readUnsignedByte() + inStream.readUnsignedByte();
                int slot = inStream.readUnsignedWordA();
                if (getRights().isAdministrator()) {
                    sM("admins cant drop items.");
                    return;
                }
                writeLog(playerName + " dropped Item " + droppedItem + " ", " dropslog");
                // println_debug("dropItem: "+droppedItem+" Slot: "+slot);
                if (isUntradable(droppedItem)) {
                    sendMessage(
                            "You drop the " + getItemName(droppedItem)
                                    + ", it vanishes into the ground.");
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }

                if (droppedItem == 1560) {
                    sendMessage("You drop your Kitten");
                    server.npcHandler.newPetNPC(766, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(766), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 1559) {
                    sendMessage("You drop your Kitten");
                    server.npcHandler.newPetNPC(765, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(765), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 1558) {
                    sendMessage("You drop your Kitten");
                    server.npcHandler.newPetNPC(764, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(764), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 1557) {
                    sendMessage("You drop your Kitten");
                    server.npcHandler.newPetNPC(763, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(763), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 1556) {
                    sendMessage("You drop your Kitten");
                    server.npcHandler.newPetNPC(762, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(762), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 1555) {
                    sendMessage("You drop your Kitten");
                    server.npcHandler.newPetNPC(761, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(761), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 1561) {
                    sendMessage("You drop your Cat");
                    server.npcHandler.newPetNPC(768, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(768), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 1562) {
                    sendMessage("You drop your Cat");
                    server.npcHandler.newPetNPC(769, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(769), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 1563) {
                    sendMessage("You drop your Cat");
                    server.npcHandler.newPetNPC(770, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(770), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 1564) {
                    sendMessage("You drop your Cat");
                    server.npcHandler.newPetNPC(771, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(771), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 1565) {
                    sendMessage("You drop your Cat");
                    server.npcHandler.newPetNPC(772, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(772), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 1566) {
                    sendMessage("You drop your Cat");
                    server.npcHandler.newPetNPC(773, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(773), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 7585) {
                    sendMessage("You drop your HellCat");
                    server.npcHandler.newPetNPC(3507, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(3507), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }

                if (droppedItem == 14489) {
                    sendMessage("You drop your Gecko");
                    server.npcHandler.newPetNPC(6916, absX, absY - 1, heightLevel, absX - 1, absY - 1, absX + 1, absY - 1, 1, server.npcHandler.GetNpcListHP(3507), false, playerId);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }

                if (droppedItem == 7584) {
                    sendMessage("You drop your HellCat");
                    server.npcHandler.spawnNpc3(c, server.npcHandler.summonItemId(droppedItem), absX, absY - 1, heightLevel, 0, 120, 25, 200, 200, true, false, true);
                    deleteItem(droppedItem, slot, playerItemsN[slot]);
                }
                if (droppedItem == 744 && absX == 2780 && absY == 3515
                        && q3stage == 5) {
                    server.npcHandler.newNPC(1645, absX + 1, absY, heightLevel,
                            absX + 3, absY + 3, absX + -3, absY + -3, 1,
                            server.npcHandler.GetNpcListHP(1645), false);
                } else if (!wearing && playerItems[slot] == droppedItem + 1) {
                    dropItem(droppedItem, slot);
                }
                break;

            case 120: // sends sidebar id when clicked while it's flashing - found by sgsrocks
                int sidebarID = inStream.readUnsignedByte();

                System.out.println("Packet 120: Sidebar Id: " + sidebarID);
                break;

            case 185: // clicking most buttons
                actionButtonId = misc.HexToInt(inStream.buffer, 0, packetSize);
                server.clickingMost.clicking(playerId);
                switch (actionButtonId) {


                    default:
                        parseIncomingPackets2();
                        // System.out.println("Player stands in: X="+absX+" Y="+absY);
                        println_debug("Case 185: Action Button: " + actionButtonId);
                        break;
                }
                break;

            // the following Ids are the reason why AR-type cheats are hopeless to make...
            // basically they're just there to make reversing harder
            case 226:
            case 78:
            case 148:
            case 183:
            case 230:
            case 136:
            case 189:
            case 152:
            case 200:
            case 85:
            case 165:
            case 238:
            case 150:
            case 36:
            case 246:
            case 77:

            /* QUESTS
             case 28164: // Invisible Armour (id 1)
             {
             questid = 1;
             quest();
             }*/
                break;

            // any packets we might have missed
            default:
                break;
        }
    }

    private void requestUpdates() {
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    private void sendURL (String url) {
        sendFrame126(url, 12000);
    }

    private void objectClick5 (int objectID, int objectX, int objectY) {
        if(!Region.isWorldObject(objectID, objectX, objectY, heightLevel)){
            return;
        }
        if (debugMessages) {
            sM(
                    "atObject5: " + objectX + "," + objectY + " objectID: "
                            + objectID);
        }
    switch(objectID){

    }
    }

    private void objectClick4 (int objectID, int objectX, int objectY) {
        if(!Region.isWorldObject(objectID, objectX, objectY, heightLevel)){
            return;
        }
        if (debugMessages) {
            sM(
                    "atObject4: " + objectX + "," + objectY + " objectID: "
                            + objectID);
        }
        switch(objectID){

        }
    }

    private void handleItemOnNPC(int npcId, int itemId, int itemSlot2) {
        switch(NPCHandler.npcs[npcId].npcType){
            case 43:
                NPCHandler.npcs[npcId].shearSheep(this, 1735, 1737, 893, 43, 42, 50);

                break;
            default:
                if (debugMessages)
                    sendMessage("Player used Item id: " + itemId + " with Npc id: " + npcId + " With Slot : " + itemSlot2);
                break;
        }
    }

    public boolean stairs(int stairs, int teleX, int teleY) {
        if (!IsStair) {
            IsStair = true;
            if (stairs == 1) {
                heightLevel += 1;
            } else if (stairs == 2) {
                heightLevel -= 1;
            } else if (stairs == 21) {
                heightLevel += 1;
            } else if (stairs == 22) {
                heightLevel -= 1;
            }
            teleportToX = teleX;
            teleportToY = teleY;
            if (stairs == 3 || stairs == 5 || stairs == 9) {
                teleportToY += 6400;
            } else if (stairs == 4 || stairs == 6 || stairs == 10) {
                teleportToY -= 6400;
            } else if (stairs == 7) {
                teleportToX = 3104;
                teleportToY = 9576;
            } else if (stairs == 8) {
                teleportToX = 3105;
                teleportToY = 3162;
            } else if (stairs == 11) {
                teleportToX = 2856;
                teleportToY = 9570;
            } else if (stairs == 12) {
                teleportToX = 2857;
                teleportToY = 3167;
            } else if (stairs == 13) {
                heightLevel += 3;
                teleportToX = skillX;
                teleportToY = skillY;
            } else if (stairs == 15) {
                teleportToY += (6400 - (stairDistance + stairDistanceAdd));
            } else if (stairs == 14) {
                teleportToY -= (6400 - (stairDistance + stairDistanceAdd));
            } else if (stairs == 16) {
                teleportToX = 2828;
                teleportToY = 9772;
            } else if (stairs == 17) {
                teleportToX = 3494;
                teleportToY = 3465;
            } else if (stairs == 18) {
                teleportToX = 3477;
                teleportToY = 9845;
            } else if (stairs == 19) {
                teleportToX = 3543;
                teleportToY = 3463;
            } else if (stairs == 20) {
                teleportToX = 3549;
                teleportToY = 9865;
            } else if (stairs == 21) {
                teleportToY += (stairDistance + stairDistanceAdd);
            } else if (stairs == 22) {
                teleportToY -= (stairDistance + stairDistanceAdd);
            } else if (stairs == 23) {
                teleportToX = 2480;
                teleportToY = 5175;
            } else if (stairs == 24) {
                teleportToX = 2862;
                teleportToY = 9572;
            } else if (stairs == 25) {
                Essence = (heightLevel / 4);
                heightLevel = 0;
                teleportToX = EssenceMineRX[Essence];
                teleportToY = EssenceMineRY[Essence];
            } else if (stairs == 26) {
                int EssenceRnd = misc.random3(EssenceMineX.length);

                teleportToX = EssenceMineX[EssenceRnd];
                teleportToY = EssenceMineY[EssenceRnd];
                heightLevel = (Essence * 4);
            } else if (stairs == 27) {
                teleportToX = 2453;
                teleportToY = 4468;
            } else if (stairs == 28) {
                teleportToX = 3201;
                teleportToY = 3169;
            }
            if (stairs == 5 || stairs == 10) {
                teleportToX += (stairDistance + stairDistanceAdd);
            }
            if (stairs == 6 || stairs == 9) {
                teleportToX -= (stairDistance - stairDistanceAdd);
            }
        }
        resetStairs();
        return true;
    }

    public boolean resetStairs() {
        stairs = 0;
        skillX = -1;
        skillY = -1;
        stairDistance = 1;
        stairDistanceAdd = 0;
        IsUsingSkill = false;
        return true;
    }

    public boolean crackCracker() {
        sendMessage("Somone used a crackers on you...");
        CrackerMsg = false;
        if (CrackerForMe) {
            if (freeSlots() > 0) {
                sendMessage("And you get the crackers item.");
            } else {
                sendMessage("but you don't have enough space in your inventory.");
            }
            CrackerForMe = false;
        } else {
            sendMessage("but you didn't get the crackers item.");
        }
        return true;
    }

    public boolean IsInWilderness(int coordX, int coordY, int Type) {
        if (Type == 1) {
            return coordY >= 3520 && coordY <= 3967 && coordX <= 3392
                    && coordX >= 2942;
        } else if (Type == 2) {
            return coordY >= 3512 && coordY <= 3967 && coordX <= 3392
                    && coordX >= 2942;
        }
        return false;
    }

    public boolean is2Hander() {
        for (int I = 0; I < twoHanderz.length; I++) {
            if (playerEquipment[playerWeapon] == twoHanderz[i]) {
                return true;
            }
        }
        return false;
    }

    public void robpaladin() {
        sendMessage("You pickpocket the paladin.");
        addItem(ItemIDs.COINS, 8000);
        addSkillXP(220, 17);
        int npcIndex = inStream.readSignedWordBigEndianA();
        int EnemyX2 = NPCHandler.npcs[npcIndex].absX;
        int EnemyY2 = NPCHandler.npcs[npcIndex].absY;

        TurnPlayerTo(EnemyX2, EnemyY2);
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void robhero() {
        sendMessage("You pickpocket the farmer.");
        addItem(ItemIDs.COINS, 3000);
        addSkillXP(274, 17);
        int npcIndex = inStream.readSignedWordBigEndianA();
        int EnemyX2 = NPCHandler.npcs[npcIndex].absX;
        int EnemyY2 = NPCHandler.npcs[npcIndex].absY;

        TurnPlayerTo(EnemyX2, EnemyY2);
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void robwarrior() {
        sendMessage("You pickpocket the warrior.");
        addItem(ItemIDs.COINS, 1800);
        actionTimer = 10;
        addSkillXP(250, 17);
        int npcIndex = inStream.readSignedWordBigEndianA();
        int EnemyX2 = NPCHandler.npcs[npcIndex].absX;
        int EnemyY2 = NPCHandler.npcs[npcIndex].absY;

        TurnPlayerTo(EnemyX2, EnemyY2);
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public void robfarmer() {
        sendMessage("You pickpocket the farmer.");
        addItem(ItemIDs.COINS, 2301);
        actionTimer = 10;
        addSkillXP(250, 17);
        int npcIndex = inStream.readSignedWordBigEndianA();
        int EnemyX2 = NPCHandler.npcs[npcIndex].absX;
        int EnemyY2 = NPCHandler.npcs[npcIndex].absY;

        TurnPlayerTo(EnemyX2, EnemyY2);
        updateRequired = true;
        appearanceUpdateRequired = true;
    }

    public boolean Attack() {

        if (playerEquipment[playerWeapon] == (15156))
            if (DDStimer == 0 && actionTimer == 0) {
                actionTimer = 8;
                DDS2Damg = true;
                DDStimer = 1;
                PkingDelay = 8;
                hitDiff = 10 + misc.random(20);
            }
        int EnemyX = PlayerHandler.players[AttackingOn].absX;
        int EnemyY = PlayerHandler.players[AttackingOn].absY;
        int EnemyHP = PlayerHandler.players[AttackingOn].playerLevel[playerHitpoints];
        int EnemyHPExp = PlayerHandler.players[AttackingOn].playerXP[playerHitpoints];
        int casterX = absX;
        int casterY = absY;
        int offsetX = (casterX - EnemyX) * -1;
        int offsetY = (casterY - EnemyY) * -1;
        int EnemyX2 = PlayerHandler.players[AttackingOn].absX;
        int EnemyY2 = PlayerHandler.players[AttackingOn].absY;
        client AttackingOn2 = (client) PlayerHandler.players[AttackingOn];
        boolean RingOfLife = PlayerHandler.players[AttackingOn].playerEquipment[playerRing] == 2570;
        if (playerEquipment[playerWeapon] == (ItemIDs.LUCKY_SARADOMIN_GODSWORD)) {
            return false;
        }
        if (playerEquipment[playerWeapon] == (15341)) {
            return false;
        }
        if (playerEquipment[playerWeapon] == (15342)) {
            return false;
        }
        if (playerEquipment[playerWeapon] == (15343)) {
            return false;
        }
        attackingPlayerId = AttackingOn2.playerId;
        int hitDiff = 0;
        resetAnimation();
        int wepdelay = 0;
        CalculateMaxHit();
        hitDiff = misc.random(playerMaxHit);
        TurnPlayerTo(EnemyX, EnemyY);

        client player = (client) PlayerHandler.players[playerId];
        if (AttackingOn2.playerEquipment[playerRing] == 2550) {
            if (hitDiff > 0 && hitDiff <= 19) {
                if (misc.random(10) == 0) {
                    AttackingOn2.deleteequiment(
                            playerEquipment[playerRing],
                            playerRing);
                    AttackingOn2.sendMessage(
                            "Your ring of recoil has shattered!");
                } else {
                    player.hitDiff = 1;
                    player.hitUpdateRequired = true;
                    player.updateRequired = true;
                    player.appearanceUpdateRequired = true;
                }
            } else if (hitDiff > 19 && hitDiff <= 29) {
                if (misc.random(8) == 0) {
                    AttackingOn2.deleteequiment(
                            playerEquipment[playerRing],
                            playerRing);
                    AttackingOn2.sendMessage(
                            "Your ring of recoil has shattered!");
                } else {
                    player.hitDiff = 2;
                    player.hitUpdateRequired = true;
                    player.updateRequired = true;
                    player.appearanceUpdateRequired = true;
                }
            } else if (hitDiff > 29 && hitDiff <= 39) {
                if (misc.random(6) == 0) {
                    AttackingOn2.deleteequiment(
                            playerEquipment[playerRing],
                            playerRing);
                    AttackingOn2.sendMessage(
                            "Your ring of recoil has shattered!");
                } else {
                    player.hitDiff = 3;
                    player.hitUpdateRequired = true;
                    player.updateRequired = true;
                    player.appearanceUpdateRequired = true;
                }
            } else if (hitDiff > 39) {
                if (misc.random(4) == 0) {
                    AttackingOn2.deleteequiment(
                            playerEquipment[playerRing],
                            playerRing);
                    AttackingOn2.sendMessage(
                            "Your ring of recoil has shattered!");
                } else {
                    player.hitDiff = 4;
                    player.hitUpdateRequired = true;
                    player.updateRequired = true;
                    player.appearanceUpdateRequired = true;
                }
            }
        }

//viewTo(server.playerHandler.players[AttackingOn].absX, server.playerHandler.players[AttackingOn].absY);


        if (playerEquipment[playerWeapon] == (1333)) // rune scimi here
        {
            PkingDelay = 8;
            actionTimer = 8;
        }


        if (playerEquipment[playerWeapon] == (15156))
            if (actionTimer == 0) // dark bow
            {
                PkingDelay = 8;
                actionTimer = 8;
                hitDiff = 4 + misc.random(20);
            }

        if (playerEquipment[playerWeapon] == (4151)) // whip
        {
            PkingDelay = 2;
            wepdelay = 2;
        }
        if (playerEquipment[playerWeapon] == (15333)) // Godswords.
        {
            PkingDelay = 30;
            wepdelay = 30;
        }
        if (playerEquipment[playerWeapon] == (15334)) // Godswords.
        {
            PkingDelay = 30;
            wepdelay = 30;
        }
        if (playerEquipment[playerWeapon] == (15351)) // Sara Sword
        {
            PkingDelay = 2;
            wepdelay = 2;
        }
        if (playerEquipment[playerWeapon] == (15335)) // Godswords.
        {
            PkingDelay = 30;
            wepdelay = 30;
        }
        if (playerEquipment[playerWeapon] == (15336)) // Godswords.
        {
            PkingDelay = 30;
            wepdelay = 30;
        }
        if (playerEquipment[playerWeapon] == (8447)) // cat toy
        {
            PkingDelay = 1;
            wepdelay = 1;
        }

        if (playerEquipment[playerWeapon] == (4718)) //dharoks axe
        {
            PkingDelay = 16;
            wepdelay = 16;
        }


        if (playerEquipment[playerWeapon] == (746)) //dharoks axe
        {
            PkingDelay = 1;
            wepdelay = 1;
        }

        if (playerEquipment[playerWeapon] == (4587)) // dragon scimmy here
        {
            PkingDelay = 1;
            wepdelay = 1;
        }

        if (playerEquipment[playerWeapon] == (6541)) // dragon scimmy here
        {
            PkingDelay = 1;
            wepdelay = 1;
        }

        if (playerEquipment[playerWeapon] == (1377)) //dragon battleaxe
        {
            PkingDelay = 10;
            wepdelay = 10;
        }


        if (playerEquipment[playerWeapon] == (1373)) //rune battleaxe
        {
            PkingDelay = 10;
            wepdelay = 10;
        }

        if (playerEquipment[playerWeapon] == (1434)) //dragon mace
        {
            PkingDelay = 10;
            wepdelay = 10;
        }

        if (playerEquipment[playerWeapon] == (ItemIDs.DRAGON_2H_SWORD)) //dragon 2h
        {
            PkingDelay = 5;
            wepdelay = 5;
        }

        if (playerEquipment[playerWeapon] == (6528)) //obby maul
        {
            PkingDelay = 5;
            wepdelay = 5;
            berserk();
            overBerserk();
        }

        if (playerEquipment[playerWeapon] == (1319)) //rune 2h
        {
            PkingDelay = 80;
            wepdelay = 80;
        }
        boolean UseBow = false;
        if (playerEquipment[playerWeapon] == 4214) {
            PkingDelay = 10;
            wepdelay = 10;
            UseBow = true;
            createProjectile(absY, absX, offsetX, offsetY, 50, 80, 249, 43, 31, -AttackingOn);
        }
        if (playerEquipment[playerWeapon] == 15156) {
            PkingDelay = 5;
            UseBow = true;
            createProjectile(absY, absX, offsetX, offsetY, 50, 90, 15, 60, 31, -AttackingOn);
            createProjectile(absY, absX, offsetX, offsetY, 50, 90, 15, 40, 31, -AttackingOn);
        }
        if (playerEquipment[playerWeapon] == 861) {
            PkingDelay = 5;
            UseBow = true;
            wepdelay = 5;
            createProjectile(absY, absX, offsetX, offsetY, 50, 90, 15, 43, 31, -AttackingOn);
        }

        if (playerEquipment[playerWeapon] == 859) {
            PkingDelay = 10;
            UseBow = true;
            wepdelay = 10;
        }

        if (playerEquipment[playerWeapon] == 4734) {
            PkingDelay = 5;
            wepdelay = 5;
            UseBow = true;
        }
        if (playerEquipment[playerWeapon] == (13800))//cbow {
        {
            PkingDelay = 80;
            runecrossbow();
            wepdelay = 0;
            UseBow = true;
        }
        if (playerEquipment[playerWeapon] == 6724) {
            PkingDelay = 10;
            wepdelay = 10;
        }
        if (playerEquipment[playerWeapon] == 839 || playerEquipment[playerWeapon] == 841 || playerEquipment[playerWeapon] == 861 || playerEquipment[playerWeapon] == 843 || playerEquipment[playerWeapon] == 845 || playerEquipment[playerWeapon] == 847 || playerEquipment[playerWeapon] == 849 || playerEquipment[playerWeapon] == 851 || playerEquipment[playerWeapon] == 853 || playerEquipment[playerWeapon] == 855 || playerEquipment[playerWeapon] == 4734 || playerEquipment[playerWeapon] == 857) {
            PkingDelay = 5;
            wepdelay = 5;
            UseBow = true;
        }

        if (UseBow) {
            inCombat();
            teleportToX = absX;
            teleportToY = absY;
            CheckArrows();
            CalculateRange();
            hitDiff = misc.random(25);

        } else {
            PkingDelay = 6;
            wepdelay = 6;

        }


        if (nonWild() || AttackingOn2.nonWild()) {
            sendMessage("This player is in a safe zone and cannot be attacked");
        } else if (!nonWild() && !AttackingOn2.nonWild()) {
            if (GoodDistance(EnemyX, EnemyY, absX, absY, 1) || playerEquipment[playerWeapon] == 859 || playerEquipment[playerWeapon] == 4734 || playerEquipment[playerWeapon] == 4214 || playerEquipment[playerWeapon] == 839 || playerEquipment[playerWeapon] == 841 || playerEquipment[playerWeapon] == 843 || playerEquipment[playerWeapon] == 845 || playerEquipment[playerWeapon] == 847 || playerEquipment[playerWeapon] == 849 || playerEquipment[playerWeapon] == 851 || playerEquipment[playerWeapon] == 853 || playerEquipment[playerWeapon] == 855 || playerEquipment[playerWeapon] == 857 || playerEquipment[playerWeapon] == 861 || playerEquipment[playerWeapon] == 15156 || playerEquipment[playerWeapon] == 13800 || playerEquipment[playerWeapon] == 6914 || playerEquipment[playerWeapon] == 4734 || playerEquipment[playerWeapon] == 2415 || playerEquipment[playerWeapon] == 4675) {
                if (LoopAttDelay <= 1) {
                    if (!nonWild() && !AttackingOn2.nonWild()) {
                        if (RingOfLife && EnemyHP <= (int) (((double) getLevelForXP(EnemyHPExp) / 10.0) + 0.5)) {
                            PlayerHandler.players[AttackingOn].SafeMyLife = true;
                        } else {
                            if (PlayerHandler.players[AttackingOn].IsDead) {

                            } else if (!UseBow) {
                                //actionAmount++;
                                //setAnimation(playerSEA);
                                DropArrows();
                                sendSound(soundConfig.getWeaponSounds(this), 100, 0);
                                setAnimation(GetWepAnim());
                                PlayerHandler.players[AttackingOn].hitUpdateRequired = true;
                                PlayerHandler.players[AttackingOn].updateRequired = true;
                                TurnPlayerTo(EnemyX, EnemyY);
                                PlayerHandler.players[AttackingOn].appearanceUpdateRequired = true;
                                TurnPlayerTo(EnemyX, EnemyY);
                                if (playerEquipment[playerWeapon] == 5698) {
                                    AttackingOn2.PoisonPlayer();
                                    hitDiff = misc.random(playerMaxHit);
                                    PlayerHandler.players[AttackingOn].hitUpdateRequired = true;
                                    PlayerHandler.players[AttackingOn].updateRequired = true;
                                    PlayerHandler.players[AttackingOn].appearanceUpdateRequired = true;
                                    TurnPlayerTo(EnemyX, EnemyY);
                                }
                                AttackingOn2.KillerId = playerId;
                                AttackingOn2.inCombat();
                                sendSound(soundConfig.getWeaponSounds(this), 100, 0);
                                startAnimation(GetWepAnim());
                                AttackingOn2.startAnimation(GetBlockAnim(AttackingOn2.playerEquipment[playerWeapon]));
                                AttackingOn2.sendSound(soundConfig.getPlayerBlockSounds(AttackingOn2), 100, 0);
                                LoopAttDelay = PkingDelay;

                                if ((EnemyHP - hitDiff) < 0) {
                                    hitDiff = EnemyHP;
                                }
                                addSkillXP(hitDiff, 3);
                                PlayerHandler.players[AttackingOn].hitDiff = hitDiff;
                                if (usingSpecial) {
                                    if (playerEquipment[playerWeapon] == 4151 && specialAmount >= 50) {
                                        animation(341, EnemyY2, EnemyX2);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 746 && specialAmount >= 100) {
                                        animation(433, EnemyY2, EnemyX2);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 15156 && specialAmount >= 50) {
                                        ProjectileSpec(380, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        darkbow();
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 1305 && specialAmount >= 50) {
                                        ProjectileSpec(248, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 15336 && specialAmount >= 50) {
                                        ProjectileSpec(282, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 15335 && specialAmount >= 50) {
                                        ProjectileSpec(2067, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 15334 && specialAmount >= 50) {
                                        ProjectileSpec(ItemIDs.COPPER_ORE, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 15351 && specialAmount >= 100) {
                                        ProjectileSpec(ItemIDs.COPPER_ORE, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 14915 && specialAmount >= 50) {
                                        ProjectileSpec(282, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 3204 && specialAmount >= 100) {
                                        ProjectileSpec(282, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 4587 && specialAmount >= 75) {
                                        ProjectileSpec(347, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 6541 && specialAmount >= 75) {
                                        ProjectileSpec(347, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 1434 && specialAmount >= 40) {
                                        ProjectileSpec(251, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == ItemIDs.DRAGON_2H_SWORD && specialAmount >= 40) {
                                        ProjectileSpec(479, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 5698 && specialAmount >= 25) {
                                        ProjectileSpec(252, absY, absX, offsetY, offsetX, attacknpc, EnemyY, EnemyX);
                                        ProjectileSpec(252, absY, absX, offsetY, offsetX, attacknpc, EnemyY, EnemyX);
                                        calculateSpecial();
                                        DDSSpecial();
                                        AttackingOn2.PoisonPlayer();
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 4153 && specialAmount >= 50) {
                                        ProjectileSpec(340, absY, absX, offsetY, offsetX, AttackingOn, EnemyY, EnemyX);
                                        calculateSpecial();
                                        maulSpec();
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 6739 && specialAmount >= 100) {
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 3204 && specialAmount >= 100) {
                                        calculateSpecial();
                                        hally();
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 861 && specialAmount >= 100) {
                                        calculateSpecial();
                                        DDZ();
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 13664
                                            && specialAmount >= 50) {
                                        calculateSpecial();
                                        DCSpec();
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                    }
                                    if (playerEquipment[playerWeapon] == 4755 && specialAmount >= 100 || playerEquipment[playerWeapon] == 4734 && specialAmount >= 100 || playerEquipment[playerWeapon] == 4718 && specialAmount >= 100 || playerEquipment[playerWeapon] == 4726 && specialAmount >= 100 || playerEquipment[playerWeapon] == 4747 && specialAmount >= 100 || playerEquipment[playerWeapon] == 47 && specialAmount >= 100) {
                                        ProjectileSpec(432, absY, absX, offsetY, offsetX, attacknpc, EnemyY, EnemyX);
                                        calculateSpecial();
                                        hitDiff = specialDamage;
                                        usingSpecial = false;
                                        specialDamage = 0;
                                        specialDamage2 = 0;
                                        AttackingOn2.specialAmount = 0;
                                    }
                                    usingSpecial = false;
                                    specialDamage = 0;
                                    specialDamage2 = 0;
                                    specialAttacks();
                                    specialAttacks2();
                                    specialAttacks3();
                                    specialAttacks4();
                                    specialAttacks5();
                                    specialAttacks6();
                                }
                                //PkingDelay = wepdelay;
                            } else if (UseBow) {
                                if (!HasArrows) {
                                    sendMessage("There's no arrows left in your quiver");
                                } else if (HasArrows) {
                                    //actionAmount++;
                                    //setAnimation(playerSEA);
                                    DeleteArrow();
                                    DropArrows();
                                    if (playerEquipment[playerWeapon] != 4214 && playerEquipmentN[playerArrows] != 0)
                                        drawback();
                                    setAnimation(426);
                                    PlayerHandler.players[AttackingOn].hitUpdateRequired = true;
                                    PlayerHandler.players[AttackingOn].updateRequired = true;
                                    PlayerHandler.players[AttackingOn].appearanceUpdateRequired = true;
                                    TurnPlayerTo(EnemyX, EnemyY);
                                    AttackingOn2.KillerId = playerId + 10;
                                    AttackingOn2.inCombat();
                                    inCombat();
                                    teleportToX = absX;
                                    teleportToY = absY;
                                    AttackingOn2.startAnimation(GetBlockAnim(AttackingOn2.playerEquipment[playerWeapon]));
                                    LoopAttDelay = PkingDelay;
                                    if ((EnemyHP - hitDiff) < 0) {
                                        hitDiff = EnemyHP;
                                    }
                                    addSkillXP(hitDiff, 3);
                                    PlayerHandler.players[AttackingOn].hitDiff = hitDiff;
                                    //PkingDelay = wepdelay;
                                }
                            }

                        }
                        return true;
                    } else {
                        sendMessage("This player is in a safe zone and cannot be attacked");
                        ResetAttack();
                    }
                }
            }
        }
        return false;
    }

    public boolean ResetAttack() {
        IsAttacking = false;
        AttackingOn = 0;
        resetAnimation();
        IsUsingSkill = false;
        return true;
    }

    private void appendSetFocusDestination(stream str) {
        str.writeWordBigEndianA(FocusPointX);
        str.writeWordBigEndian(FocusPointY);
    }

    public void PKz() {
        if (PlayerHandler.players[KillerId] != null) {
            if (KillerId != playerId) {
                if (PlayerHandler.players[KillerId].combat > combat) {
                    lnew = 1;
                } else if (PlayerHandler.players[KillerId].combat < combat) {
                    lnew = 3;
                } else if (PlayerHandler.players[KillerId].combat == combat) {
                    lnew = 2;
                }
                client killerz = (client) PlayerHandler.players[KillerId];

                if (killerz != null) {
                    boolean givePoints = true;
                    killerz.isSkulled = true;
                    killerz.skullTimer = 2000;
                    killerz.headIconPk = 0;
                    killerz.requestUpdates();
                    if (killerz.lastKill.equalsIgnoreCase(playerName)) {
                        killerz.sendMessage(
                                "You recieve no pk points as you have pked "
                                        + playerName + " twice in a row");
                        givePoints = false;
                    }
                    if (givePoints) {
                        PlayerHandler.players[KillerId].pkpoints += lnew;
                        killcount += 1;
                        PlayerHandler.players[KillerId].spawnpoints += 1;
                        otherpkps = PlayerHandler.players[KillerId].pkpoints;
                        otherkillc = killcount;
                        killerz.sendMessage(
                                "You recieve " + lnew
                                        + " player-kill, you now have " + otherpkps
                                        + " player-kill points.");
                        killerz.sendMessage(
                                "You now have a total of " + otherkillc
                                        + " player kills.");
                        killerz.checkPKReward();
                        killerz.lastKill = playerName;
                        PlayerHandler.messageToAll = killerz.playerName
                                + " has Pked " + playerName + ", "
                                + killerz.playerName + " now has "
                                + killerz.pkpoints + " pk points and "
                                + killcount + " kills!";
                    }
                }
            }
            deathcount = +1;
        }
    }

    public void CheckDrop() {
        keepItem1();
        keepItem2();
        keepItem3();
        deleteItem(keepItem, getItemSlot(keepItem), keepItemAmount);
        deleteItem(keepItem2, getItemSlot(keepItem2), keepItemAmount2);
        deleteItem(keepItem3, getItemSlot(keepItem3), keepItemAmount3);
        youdied();
    }

    /* public boolean ApplyDead() {
     if (IsDeadTimer == false) {
     if (Retribution == true) {
     animation(437,absY,absX);
     attackPlayersPrayer(5, 15);
     }
     actionAmount++;
     actionTimer = 14;
     ResetAttack();
     ResetAttackNPC();
     setAnimation(0x900);
     pEmote = 2304;
     IsDeadTimer = true;
     ApplyDead();
     }
     if (actionTimer == 0 && IsDeadTimer == true) {
     PKz();
     keepItem1();
     keepItem2();
     keepItem3();
     deleteItem(keepItem, getItemSlot(keepItem), keepItemAmount);
     deleteItem(keepItem2, getItemSlot(keepItem2), keepItemAmount2);
     deleteItem(keepItem3, getItemSlot(keepItem3), keepItemAmount3);
     youdied();
     //teleportToX = 2852;
     //teleportToY = 2957;
     //IsDeadTeleporting = true;
     //frame1(); // sgsrocks: Resets animation
     NewHP = getLevelForXP(playerXP[3]);
     setSkillLevel(3, getLevelForXP(playerXP[3]), playerXP[playerHitpoints]);
     playerLevel[3] = getLevelForXP(playerXP[3]);
     refreshSkills();
     PoisonDelay = 9999999;
     KillerId = playerId;
     if(keepItem != 0)
     addItem(keepItem, keepItemAmount);
     if(keepItem2 != 0)
     addItem(keepItem2, keepItemAmount2);
     if(keepItem3 != 0)
     addItem(keepItem3, keepItemAmount3);

     resetKeepItem();
     updateRequired = true;
     appearanceUpdateRequired = true;

     }
     return true;
     }*/
    public boolean ApplyDead() {
        if (!IsDeadTimer) {
            actionAmount++;
            actionTimer = 0;
            ResetAttack();
            ResetAttackNPC();
            startAnimation(2304);
            IsDeadTimer = true;

            specialAttacks();
            specialAttacks2();
            specialAttacks3();
            specialAttacks4();
            specialAttacks5();
            specialAttacks6();
        }
        if (actionTimer == 0 && IsDeadTimer) {
            if (!isSkulled) {
                keepItem1();
                keepItem2();
                keepItem3();
                deleteItem(keepItem, getItemSlot(keepItem), keepItemAmount);
                deleteItem(keepItem2, getItemSlot(keepItem2), keepItemAmount2);
                deleteItem(keepItem3, getItemSlot(keepItem3), keepItemAmount3);
            }
            youdied();
            PKz();
            teleportToX = 2461;
            teleportToY = 3177;
            heightLevel = 0;
            IsDeadTeleporting = true;
            frame1(); // sgsrocks: Resets animation
            requestUpdates();
            NewHP = getLevelForXP(playerXP[3]);
            setSkillLevel(3, getLevelForXP(playerXP[3]),
                    playerXP[playerHitpoints]);
            playerLevel[3] = getLevelForXP(playerXP[3]);
            refreshSkills();
            PoisonDelay = 9999999;
            KillerId = playerId;
            if (!isSkulled) {
                if (keepItem != 0) {
                    addItem(keepItem, keepItemAmount);
                }
                if (keepItem2 != 0) {
                    addItem(keepItem2, keepItemAmount2);
                }
                if (keepItem3 != 0) {
                    addItem(keepItem3, keepItemAmount3);
                }
            }

            resetKeepItem();

        }
        return true;
    }

    public boolean ApplyDeadz() {

        if (!IsDeadTimer) {
            actionTimer = 0;
            ResetAttack();
            ResetAttackNPC();
            setAnimation(2304);
            IsDeadTeleporting = true;
            IsDeadTimer = true;
            specialAttacks();
            specialAttacks2();
            specialAttacks3();
            specialAttacks4();
            specialAttacks5();
            specialAttacks6();
        }
        if (actionTimer == 0 && IsDeadTimer) {

            PKz();

            CheckDrop();

            ApplyRingz();

            NewHP = getLevelForXP(playerXP[3]);
            setSkillLevel(3, getLevelForXP(playerXP[3]),
                    playerXP[playerHitpoints]);
            playerLevel[3] = getLevelForXP(playerXP[3]);
            refreshSkills();
            PoisonDelay = 9999999;
            KillerId = playerId;
            if (keepItem != 0) {
                addItem(keepItem, keepItemAmount);
            }
            if (keepItem2 != 0) {
                addItem(keepItem2, keepItemAmount2);
            }
            if (keepItem3 != 0) {
                addItem(keepItem3, keepItemAmount3);
            }

            resetKeepItem();

        }
        return true;
    }

    public void setSkillLevel(int skillNum, int currentLevel, int XP) {
        if (skillNum == 0) {
            sendQuest(String.valueOf(playerLevel[0]), 4004);
            sendQuest(String.valueOf(getLevelForXP(playerXP[0])), 4005);
        }
        if (skillNum == 2) {
            sendQuest(String.valueOf(playerLevel[2]), 4006);
            sendQuest(String.valueOf(getLevelForXP(playerXP[2])), 4007);
        }
        if (skillNum == 1) {
            sendQuest(String.valueOf(playerLevel[1]), 4008);
            sendQuest(String.valueOf(getLevelForXP(playerXP[1])), 4009);
        }
        if (skillNum == 4) {
            sendQuest(String.valueOf(playerLevel[4]), 4010);
            sendQuest(String.valueOf(getLevelForXP(playerXP[4])), 4011);
        }
        if (skillNum == 5) {
            sendQuest(String.valueOf(playerLevel[5]), 4012);
            sendQuest(String.valueOf(getLevelForXP(playerXP[5])), 4013);
        }
        if (skillNum == 6) {
            sendQuest(String.valueOf(playerLevel[6]), 4014);
            sendQuest(String.valueOf(getLevelForXP(playerXP[6])), 4015);
        }
        if (skillNum == 3) {
            sendQuest(String.valueOf(playerLevel[3]), 4016);
            sendQuest(String.valueOf(getLevelForXP(playerXP[3])), 4017);
        }
        if (skillNum == 16) {
            sendQuest(String.valueOf(playerLevel[16]), 4018);
            sendQuest(String.valueOf(getLevelForXP(playerXP[16])), 4019);
        }
        if (skillNum == 15) {
            sendQuest(String.valueOf(playerLevel[15]), 4020);
            sendQuest(String.valueOf(getLevelForXP(playerXP[15])), 4021);
        }
        if (skillNum == 17) {
            sendQuest(String.valueOf(playerLevel[17]), 4022);
            sendQuest(String.valueOf(getLevelForXP(playerXP[17])), 4023);
        }
        if (skillNum == 12) {
            sendQuest(String.valueOf(playerLevel[12]), 4024);
            sendQuest(String.valueOf(getLevelForXP(playerXP[12])), 4025);
        }
        if (skillNum == 9) {
            sendQuest(String.valueOf(playerLevel[9]), 4026);
            sendQuest(String.valueOf(getLevelForXP(playerXP[9])), 4027);
        }
        if (skillNum == 14) {
            sendQuest(String.valueOf(playerLevel[14]), 4028);
            sendQuest(String.valueOf(getLevelForXP(playerXP[14])), 4029);
        }
        if (skillNum == 13) {
            sendQuest(String.valueOf(playerLevel[13]), 4030);
            sendQuest(String.valueOf(getLevelForXP(playerXP[13])), 4031);
        }
        if (skillNum == 10) {
            sendQuest(String.valueOf(playerLevel[10]), 4032);
            sendQuest(String.valueOf(getLevelForXP(playerXP[10])), 4033);
        }
        if (skillNum == 7) {
            sendQuest(String.valueOf(playerLevel[7]), 4034);
            sendQuest(String.valueOf(getLevelForXP(playerXP[7])), 4035);
        }
        if (skillNum == 11) {
            sendQuest(String.valueOf(playerLevel[11]), 4036);
            sendQuest(String.valueOf(getLevelForXP(playerXP[11])), 4037);
        }
        if (skillNum == 8) {
            sendQuest(String.valueOf(playerLevel[8]), 4038);
            sendQuest(String.valueOf(getLevelForXP(playerXP[8])), 4039);
        }
        if (skillNum == 20) {
            sendQuest(String.valueOf(playerLevel[20]), 4152);
            sendQuest(String.valueOf(getLevelForXP(playerXP[20])), 4153);
        }
        if (skillNum == 18) {
            sendQuest(String.valueOf(playerLevel[18]), 12166);
            sendQuest(String.valueOf(getLevelForXP(playerXP[18])), 12167);
        }
        if (skillNum == 19) {
            sendQuest(String.valueOf(playerLevel[19]), 13926);
            sendQuest(String.valueOf(getLevelForXP(playerXP[19])), 13927);
        } else {
            if(getOutStream() != null) {
                getOutStream().createFrame(134);
                getOutStream().writeByte(skillNum);
                getOutStream().writeDWord_v1(XP);
                getOutStream().writeByte(currentLevel);
            }
        }
    }

    public void resetKeepItem() {
        keepItem = 0;
        keepItem2 = 0;
        keepItem3 = 0;
        keepItemAmount = 0;
        keepItemAmount2 = 0;
        keepItemAmount3 = 0;
    }

    public void keepItem1() {
        for (int i = 0; i < playerItems.length; i++) {
            int highest = 0;
            int value = (int) Math.floor(
                    GetItemShopValue(playerItems[i] - 1, 0, i));

            if (value > highest && playerItems[i] - 1 != -1) {
                highest = value;
                keepItem = playerItems[i] - 1;
                keepItemAmount = playerItemsN[i];
            }
        }
    }

    public void keepItem2() {
        for (int i = 0; i < playerItems.length; i++) {
            int highest = 0;
            int value = (int) Math.floor(
                    GetItemShopValue(playerItems[i] - 1, 0, i));

            if (value > highest && playerItems[i] - 1 != keepItem
                    && playerItems[i] - 1 != -1) {
                highest = value;
                keepItem2 = playerItems[i] - 1;
                keepItemAmount2 = playerItemsN[i];
            }
        }
    }

    public void keepItem3() {
        for (int i = 0; i < playerItems.length; i++) {
            int highest = 0;
            int value = (int) Math.floor(
                    GetItemShopValue(playerItems[i] - 1, 0, i));

            if (value > highest && playerItems[i] - 1 != keepItem
                    && playerItems[i] - 1 != keepItem2
                    && playerItems[i] - 1 != -1) {
                highest = value;
                keepItem3 = playerItems[i] - 1;
                keepItemAmount3 = playerItemsN[i];
            }
        }
    }

    /* public boolean Owntimer = false;
     public boolean Own()
     {
     if(Owntimer == false)
     {
     actionAmount++;
     teleportToX = absX;
     teleportToY = absY;
     playerSER = 1501;
     playerSEW = 1501;
     setAnimation(1500);
     sendMessage("You rise to the air...");
     actionTimer = 0;
     Owntimer = true;
     Own();
     }
     if(actionTimer <= 0 && Owntimer == true)
     {
     teleportToX = absX;
     teleportToY = absY;
     setAnimation(1502);
     sendMessage("and electricute "+castOnPlayer.playerName+"!");
     castOnPlayer.sendMessage("You get electricuted!");
     castOnPlayer.hitDiff = 1 + misc.random(6);
     teleportToX = absX;
     teleportToY = absY;
     castOnPlayer.setAnimation(3170);
     castOnPlayer.entangle();
     Owntimer = false;
     }
     return true;
     }*/
    public boolean ApplyRingOfLife() {
        if (!IsDeadTimer) {
            actionAmount++;
            actionTimer = 4;
            ResetAttack();
            setAnimation(0x718);
            sendMessage("Ring of Life saved your life !");
            deleteequiment(2570, playerRing); // 2570 = ring of life
            IsDeadTimer = true;
        }
        if (actionTimer == 0 && IsDeadTimer) {
            teleportToX = 3254;
            teleportToY = 3420;
            heightLevel = 0;
            resetAnimation();
            IsDeadTeleporting = true;
            requestUpdates();
        }
        return true;
    }

    public boolean ApplyRingz() {
        if (!IsDeadTimer) {
            actionAmount++;
            actionTimer = 4;
            ResetAttack();
            // setAnimation(0x718);
            IsDeadTimer = true;
        }
        if (actionTimer == 0 && IsDeadTimer) {
            teleportToX = 2853;
            teleportToY = 3591;
            resetAnimation();
            IsDeadTeleporting = true;
            requestUpdates();
        }
        return true;
    }

    public boolean CheckForSkillUse() { // Use Item On Item
        boolean GoOn = true;

        if (useitems[0] == 946) { // knife
            CheckKnifeUsage();
        } else if (useitems[0] == 1777) { // string
            CheckStringUsage();
        } else if (useitems[0] == 314) { // feathers
            CheckFeatherUsage();
        } else if (useitems[1] == 1019 || useitems[1] == 1021
                || useitems[1] == 1023 || useitems[1] == 1027
                || useitems[1] == 1029 || useitems[1] == 1031
                || useitems[1] == 1007) {
            CheckDyeCape();
        } else {
            sendMessage("Nothing interesting is happening.");
        }
        return true;
    }

    public boolean CheckForSkillUse2(int ItemID, int ItemSlot) { // Use Item On Object
        boolean GoFalse = false;

        switch (ItemID) {
            case 317: // raw shrimps
                cooking[1] = 1;
                cooking[2] = 30;
                cooking[4] = 315;
                cooking[6] = 323;
                break;

            case 321: // raw anchovies
                cooking[1] = 1;
                cooking[2] = 30;
                cooking[4] = 319;
                cooking[6] = 323;
                break;


            case 327: // raw sardine
                cooking[1] = 1;
                cooking[2] = 40;
                cooking[4] = 325;
                cooking[6] = 369;
                break;

            case 331: // raw salmon
                cooking[1] = 25;
                cooking[2] = 90;
                cooking[4] = 329;
                cooking[6] = 343;
                break;

            case 335: // raw trout
                cooking[1] = 15;
                cooking[2] = 70;
                cooking[4] = 333;
                cooking[6] = 343;
                break;

            case 341: // raw cod
                cooking[1] = 18;
                cooking[2] = 75;
                cooking[4] = 339;
                cooking[6] = 343;
                break;

            case 345: // raw harring
                cooking[1] = 5;
                cooking[2] = 50;
                cooking[4] = 347;
                cooking[6] = 357;
                break;

            case 349: // raw pike
                cooking[1] = 20;
                cooking[2] = 80;
                cooking[4] = 351;
                cooking[6] = 357;
                break;

            case 353: // raw mackerel
                cooking[1] = 10;
                cooking[2] = 60;
                cooking[4] = 355;
                cooking[6] = 357;
                break;

            case 359: // raw tuna
                cooking[1] = 30;
                cooking[2] = 100;
                cooking[4] = 361;
                cooking[6] = 367;
                break;

            case 363: // raw bass
                cooking[1] = 43;
                cooking[2] = 130;
                cooking[4] = 365;
                cooking[6] = 367;
                break;

            case 371: // raw swordfish
                cooking[1] = 45;
                cooking[2] = 140;
                cooking[4] = 373;
                cooking[6] = 375;
                break;

            case 377: // raw lobster
                cooking[1] = 40;
                cooking[2] = 120;
                cooking[4] = 379;
                cooking[6] = 381;
                break;

            case 383: // raw shark
                cooking[1] = 80;
                cooking[2] = 210;
                cooking[4] = 385;
                cooking[6] = 387;
                break;

            case 389: // raw mante ray
                cooking[1] = 91;
                cooking[2] = 216;
                cooking[4] = 391;
                cooking[6] = 393;
                break;

            case 395: // raw sea turtle
                cooking[1] = 82;
                cooking[2] = 212;
                cooking[4] = 397;
                cooking[6] = 399;
                break;


            case 1889: // uncooked cake
                cooking[1] = 40;
                cooking[2] = 180;
                cooking[4] = 1891;
                cooking[6] = 1903;
                break;

            case 2001: // Uncooked stew
                cooking[1] = 25;
                cooking[2] = 117;
                cooking[4] = 2003;
                cooking[6] = 2005;
                break;

            case 2009: // Uncooked curry
                cooking[1] = 60;
                cooking[2] = 280;
                cooking[4] = 2011;
                cooking[6] = 2013;
                break;

            case 2132: // raw beef
            case 2134: // raw rat meat
            case 2136: // raw bear meat
                cooking[1] = 1;
                cooking[2] = 30;
                cooking[4] = 2142;
                cooking[6] = 2146;
                break;

            case 2138: // raw chicken
                cooking[1] = 1;
                cooking[2] = 30;
                cooking[4] = 2140;
                cooking[6] = 2144;
                break;

            case 2287: // uncooked pizza
                cooking[1] = 35;
                cooking[2] = 143;
                cooking[4] = 2289;
                cooking[6] = 2305;
                break;

            case 2307: // bread dough
                cooking[1] = 1;
                cooking[2] = 40;
                cooking[4] = 2309;
                cooking[6] = 2311;
                break;

            case 2317: // uncooked apple pie
                cooking[1] = 30;
                cooking[2] = 104;
                cooking[4] = 2323;
                cooking[6] = 2329;
                break;

            case 2319: // uncooked meat pie
                cooking[1] = 20;
                cooking[2] = 104;
                cooking[4] = 2327;
                cooking[6] = 2329;
                break;

            case 2321: // uncooked berry pie
                cooking[1] = 10;
                cooking[2] = 78;
                cooking[4] = 2325;
                cooking[6] = 2329;
                break;

            case 2876: // Raw chompy
                cooking[1] = 20;
                cooking[2] = 140;
                cooking[4] = 2878;
                cooking[6] = 2880;
                break;

            case 3142: // Raw karambwan
                cooking[1] = 1;
                cooking[2] = 80;
                cooking[4] = 3144;
                cooking[6] = 3148;
                break;

            case 3363: // Thin snail
                cooking[1] = 12;
                cooking[2] = 70;
                cooking[4] = 3369;
                cooking[6] = 3375;
                break;

            case 3365: // Lean snail
                cooking[1] = 17;
                cooking[2] = 80;
                cooking[4] = 3371;
                cooking[6] = 3375;
                break;

            case 3367: // Fat snail
                cooking[1] = 22;
                cooking[2] = 95;
                cooking[4] = 3373;
                cooking[6] = 3375;
                break;

            case 3379: // Slimy eel
                cooking[1] = 28;
                cooking[2] = 95;
                cooking[4] = 3381;
                cooking[6] = 3383;
                break;

            case 5001: // Raw cave eel
                cooking[1] = 28;
                cooking[2] = 115;
                cooking[4] = 5003;
                cooking[6] = 5002;
                break;

            case 5986: // Sweetcorn
                cooking[1] = 21;
                cooking[2] = 104;
                cooking[4] = 5988;
                cooking[6] = 5990;
                break;

            case 6293: // Spider on stick
                cooking[1] = 16;
                cooking[2] = 80;
                cooking[4] = 6297;
                cooking[6] = 6301;
                break;

            case 6295: // Spider on shaft
                cooking[1] = 16;
                cooking[2] = 80;
                cooking[4] = 6299;
                cooking[6] = 6303;
                break;

            default:
                sendMessage("You cannot smelt this item.");

                break;
        }

        if (ItemID != 453 && smelting[0] >= 1
                && playerEquipment[playerWeapon] >= 0) {
            OriginalWeapon = playerEquipment[playerWeapon];
            playerEquipment[playerWeapon] = -1;
            OriginalShield = playerEquipment[playerShield];
            playerEquipment[playerShield] = -1;
            smelting[4] = ItemID;
            smelting[5] = ItemSlot;
        } else if (cooking[1] >= 1) {
            cooking[0] = 1;
            cooking[5] = ItemID;
        }
        return true;
    }

    public boolean CheckForSkillUse3(int Item, int Slot) {
        boolean GoOn = true;

        switch (Item) {

            case 9540: // Home Teletab (Silabs)
            {
                deleteItem(9540, getItemSlot(9540), 1);
                startAnimation(1816);
                teleportToX = 2461;
                teleportToY = 3177;
                txt4 = "You teleport to home";
                string4UpdateRequired = true;
            }
            break;

            case 2520:
                startAnimation(918);
                txt4 = "Come on Swifty, we can win the race!";
                string4UpdateRequired = true;
                break;

            case 2522:
                startAnimation(919);
                txt4 = "Come on Alex, we can win the race!";
                string4UpdateRequired = true;
                break;

            case 2524:
                startAnimation(920);
                txt4 = "Come on Vegeta, we can win the race!";
                string4UpdateRequired = true;
                break;

            case 2526:
                startAnimation(921);
                txt4 = "Come on MrWicked, we can win the race!";
                string4UpdateRequired = true;
                break;

            case 1917: // Beer
                sendMessage("You drink the beer, and feel a bit drunk!");
                drunkTimer += 80;
                deleteItem(1917, getItemSlot(1917), 1);
                addItem(1919, 1);
                break;

            case 5763: // Beer
                sendMessage("You drink the Cider, and feel a bit drunk!");
                drunkTimer += 80;
                deleteItem(5763, getItemSlot(5763), 1);
                addItem(1919, 1);
                break;

            case 1905: // Beer
                sendMessage("You drink the Ale, and feel a bit drunk!");
                drunkTimer += 80;
                deleteItem(1905, getItemSlot(1905), 1);
                addItem(1919, 1);
                break;

            case 5755: // Beer
                sendMessage("You drink the Chef's Delight, and feel a bit drunk!");
                drunkTimer += 80;
                deleteItem(5755, getItemSlot(5755), 1);
                addItem(1919, 1);
                break;

            case 7748: // Beer
                sendMessage("You drink the Dragon Bitter, and feel a bit drunk!");
                drunkTimer += 80;
                deleteItem(7748, getItemSlot(7748), 1);
                addItem(1919, 1);
                break;

            case 3801: // keg
                sendMessage("You drink the Keg, and feel Fucked Up.");
                drunkTimer += 80;
                deleteItem(3801, getItemSlot(3801), 1);
                break;

            case 161: // super str (1)
                strPot = true;
                strPotTimer = 90;
                abc = getLevelForXP(playerXP[2]);
                cba = abc / 5;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[2] = getLevelForXP(playerXP[2]);
                playerLevel[2] += abc2;
                sendFrame126(String.valueOf(playerLevel[2]), 4006);
                deleteItem(161, GetItemSlot(161), 1);
                addItem(229, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 159:
                strPot = true;
                strPotTimer = 90;
                abc = getLevelForXP(playerXP[2]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[2] = getLevelForXP(playerXP[2]);
                playerLevel[2] += abc2;
                sendFrame126(String.valueOf(playerLevel[2]), 4006);
                deleteItem(159, GetItemSlot(159), 1);
                addItem(161, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 157:
                strPot = true;
                strPotTimer = 90;
                abc = getLevelForXP(playerXP[2]);
                cba = abc / 5;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[2] = getLevelForXP(playerXP[2]);
                playerLevel[2] += abc2;
                sendFrame126(String.valueOf(playerLevel[2]), 4006);
                deleteItem(157, GetItemSlot(157), 1);
                addItem(159, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 2440:
                strPot = true;
                strPotTimer = 90;
                abc = getLevelForXP(playerXP[2]);
                cba = abc / 5;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[2] = getLevelForXP(playerXP[2]);
                playerLevel[2] += abc2;
                sendFrame126(String.valueOf(playerLevel[2]), 4006);
                deleteItem(2440, GetItemSlot(2440), 1);
                addItem(157, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 113:
                strPot = true;
                strPotTimer = 90;
                abc = getLevelForXP(playerXP[2]);
                cba = abc / 5;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[2] = getLevelForXP(playerXP[2]);
                playerLevel[2] += abc2;
                sendFrame126(String.valueOf(playerLevel[2]), 4006);
                deleteItem(113, GetItemSlot(113), 1);
                addItem(115, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 115:
                strPot = true;
                strPotTimer = 90;
                abc = getLevelForXP(playerXP[2]);
                cba = abc / 5;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[2] = getLevelForXP(playerXP[2]);
                playerLevel[2] += abc2;
                sendFrame126(String.valueOf(playerLevel[2]), 4006);
                deleteItem(115, GetItemSlot(115), 1);
                addItem(117, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 117:
                strPot = true;
                strPotTimer = 90;
                abc = getLevelForXP(playerXP[2]);
                cba = abc / 5;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[2] = getLevelForXP(playerXP[2]);
                playerLevel[2] += abc2;
                sendFrame126(String.valueOf(playerLevel[2]), 4006);
                deleteItem(117, GetItemSlot(117), 1);
                addItem(119, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 119:
                strPot = true;
                strPotTimer = 90;
                abc = getLevelForXP(playerXP[2]);
                cba = abc / 5;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[2] = getLevelForXP(playerXP[2]);
                playerLevel[2] += abc2;
                sendFrame126(String.valueOf(playerLevel[2]), 4006);
                deleteItem(119, GetItemSlot(119), 1);
                addItem(229, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 167: // super defence pot (1)
                defPot = true;
                defPotTimer = 90;
                abc = getLevelForXP(playerXP[1]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[1] = getLevelForXP(playerXP[1]);
                playerLevel[1] += abc2;
                sendFrame126(String.valueOf(playerLevel[1]), 4008);
                deleteItem(167, GetItemSlot(167), 1);
                addItem(229, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 165: // super defence pot (2)
                defPot = true;
                defPotTimer = 90;
                abc = getLevelForXP(playerXP[1]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[1] = getLevelForXP(playerXP[1]);
                playerLevel[1] += abc2;
                sendFrame126(String.valueOf(playerLevel[1]), 4008);
                deleteItem(165, GetItemSlot(165), 1);
                addItem(167, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 163: // super defence pot (3)
                defPot = true;
                defPotTimer = 90;
                abc = getLevelForXP(playerXP[1]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[1] = getLevelForXP(playerXP[1]);
                playerLevel[1] += abc2;
                sendFrame126(String.valueOf(playerLevel[1]), 4008);
                deleteItem(163, GetItemSlot(163), 1);
                addItem(165, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 2442: // super defence pot (4)
                defPot = true;
                defPotTimer = 90;
                abc = getLevelForXP(playerXP[1]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[1] = getLevelForXP(playerXP[1]);
                playerLevel[1] += abc2;
                sendFrame126(String.valueOf(playerLevel[1]), 4008);
                deleteItem(2442, GetItemSlot(2442), 1);
                addItem(163, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 137: // defence pot (1)
                defPot = true;
                defPotTimer = 90;
                abc = getLevelForXP(playerXP[1]);
                cba = abc / 10;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[1] = getLevelForXP(playerXP[1]);
                playerLevel[1] += abc2;
                sendFrame126(String.valueOf(playerLevel[1]), 4008);
                deleteItem(137, GetItemSlot(137), 1);
                addItem(229, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 135: // defence pot (2)
                defPot = true;
                defPotTimer = 90;
                abc = getLevelForXP(playerXP[1]);
                cba = abc / 10;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[1] = getLevelForXP(playerXP[1]);
                playerLevel[1] += abc2;
                sendFrame126(String.valueOf(playerLevel[1]), 4008);
                deleteItem(135, GetItemSlot(135), 1);
                addItem(137, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 133: // defence pot (3)
                defPot = true;
                defPotTimer = 90;
                abc = getLevelForXP(playerXP[1]);
                cba = abc / 10;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[1] = getLevelForXP(playerXP[1]);
                playerLevel[1] += abc2;
                sendFrame126(String.valueOf(playerLevel[1]), 4008);
                deleteItem(133, GetItemSlot(133), 1);
                addItem(135, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 2432: // defence pot (4)
                defPot = true;
                defPotTimer = 90;
                abc = getLevelForXP(playerXP[1]);
                cba = abc / 10;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[1] = getLevelForXP(playerXP[1]);
                playerLevel[1] += abc2;
                sendFrame126(String.valueOf(playerLevel[1]), 4008);
                deleteItem(2432, GetItemSlot(2432), 1);
                addItem(133, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 3046: // mage pot (1)
                magePot = true;
                magePotTimer = 90;
                playerLevel[6] = getLevelForXP(playerXP[6]);
                playerLevel[6] += 4;
                sendFrame126(String.valueOf(playerLevel[6]), 4014);
                deleteItem(3046, GetItemSlot(3046), 1);
                addItem(229, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 3044: // mage pot (2)
                magePot = true;
                magePotTimer = 90;
                playerLevel[6] = getLevelForXP(playerXP[6]);
                playerLevel[6] += 4;
                sendFrame126(String.valueOf(playerLevel[6]), 4014);
                deleteItem(3044, GetItemSlot(3044), 1);
                addItem(3046, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 3042: // mage pot (3)
                magePot = true;
                magePotTimer = 90;
                playerLevel[6] = getLevelForXP(playerXP[6]);
                playerLevel[6] += 4;
                sendFrame126(String.valueOf(playerLevel[6]), 4014);
                deleteItem(3042, GetItemSlot(3042), 1);
                addItem(3044, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 3040: // mage pot (4)
                magePot = true;
                magePotTimer = 90;
                playerLevel[6] = getLevelForXP(playerXP[6]);
                playerLevel[6] += 4;
                sendFrame126(String.valueOf(playerLevel[6]), 4014);
                deleteItem(3040, GetItemSlot(3040), 1);
                addItem(3042, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 173: // range pot (1)
                rangePot = true;
                rangePotTimer = 90;
                abc = getLevelForXP(playerXP[4]);
                cba = abc / 10;
                abc2 = cba + 3;
                playerLevel[4] = getLevelForXP(playerXP[4]);
                playerLevel[4] += abc2;
                sendFrame126(String.valueOf(playerLevel[6]), 4010);
                deleteItem(173, GetItemSlot(173), 1);
                addItem(229, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 171: // range pot (2)
                rangePot = true;
                rangePotTimer = 90;
                abc = getLevelForXP(playerXP[4]);
                cba = abc / 10;
                abc2 = cba + 3;
                playerLevel[4] = getLevelForXP(playerXP[4]);
                playerLevel[4] += abc2;
                sendFrame126(String.valueOf(playerLevel[4]), 4010);
                deleteItem(171, GetItemSlot(171), 1);
                addItem(173, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 169: // range pot (3)
                rangePot = true;
                rangePotTimer = 90;
                abc = getLevelForXP(playerXP[4]);
                cba = abc / 10;
                abc2 = cba + 3;
                playerLevel[4] = getLevelForXP(playerXP[4]);
                playerLevel[4] += abc2;
                sendFrame126(String.valueOf(playerLevel[4]), 4010);
                deleteItem(169, GetItemSlot(169), 1);
                addItem(171, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 2444: // range pot (4)
                rangePot = true;
                rangePotTimer = 90;
                abc = getLevelForXP(playerXP[4]);
                cba = abc / 10;
                abc2 = cba + 3;
                playerLevel[4] = getLevelForXP(playerXP[4]);
                playerLevel[4] += abc2;
                sendFrame126(String.valueOf(playerLevel[4]), 4010);
                deleteItem(2444, GetItemSlot(2444), 1);
                addItem(169, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 149: // super attack pot (1)
                attPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[0]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[0] = getLevelForXP(playerXP[0]);
                playerLevel[0] += abc2;
                sendFrame126(String.valueOf(playerLevel[0]), 4004);
                deleteItem(149, GetItemSlot(149), 1);
                addItem(229, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 147: // super attack pot (2)
                attPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[0]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[0] = getLevelForXP(playerXP[0]);
                playerLevel[0] += abc2;
                sendFrame126(String.valueOf(playerLevel[0]), 4004);
                deleteItem(147, GetItemSlot(147), 1);
                addItem(149, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 145: // super attack pot (3)
                attPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[0]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[0] = getLevelForXP(playerXP[0]);
                playerLevel[0] += abc2;
                sendFrame126(String.valueOf(playerLevel[0]), 4004);
                deleteItem(145, GetItemSlot(145), 1);
                addItem(147, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 2434: // super prayer pot (4)
                attPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[5]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[5] = getLevelForXP(playerXP[5]);
                playerLevel[5] += abc2;
                sendFrame126(String.valueOf(playerLevel[5]), 4004);
                deleteItem(2434, GetItemSlot(2434), 1);
                addItem(139, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 139: // super prayer pot (4)
                attPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[5]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[5] = getLevelForXP(playerXP[5]);
                playerLevel[5] += abc2;
                sendFrame126(String.valueOf(playerLevel[5]), 4004);
                deleteItem(139, GetItemSlot(139), 1);
                addItem(141, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 141: // super prayer pot (4)
                attPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[5]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[5] = getLevelForXP(playerXP[5]);
                playerLevel[5] += abc2;
                sendFrame126(String.valueOf(playerLevel[5]), 4004);
                deleteItem(141, GetItemSlot(141), 1);
                addItem(143, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 143: // super prayer pot (4)
                attPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[5]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[5] = getLevelForXP(playerXP[5]);
                playerLevel[5] += abc2;
                sendFrame126(String.valueOf(playerLevel[5]), 4004);
                deleteItem(143, GetItemSlot(143), 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 2436: // super attack pot (4)
                attPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[0]);
                cba = abc / 10;
                abc2 = cba * 2;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[0] = getLevelForXP(playerXP[0]);
                playerLevel[0] += abc2;
                sendFrame126(String.valueOf(playerLevel[0]), 4004);
                deleteItem(2436, GetItemSlot(2436), 1);
                addItem(145, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 125: // attack pot (1)
                attPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[0]);
                cba = abc / 10;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[0] = getLevelForXP(playerXP[0]);
                playerLevel[0] += abc2;
                sendFrame126(String.valueOf(playerLevel[0]), 4004);
                deleteItem(125, GetItemSlot(125), 1);
                addItem(229, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 123: // attack pot (2)
                attPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[0]);
                cba = abc / 10;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[0] = getLevelForXP(playerXP[0]);
                playerLevel[0] += abc2;
                sendFrame126(String.valueOf(playerLevel[0]), 4004);
                deleteItem(123, GetItemSlot(123), 1);
                addItem(125, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 121: // attack pot (3)
                attPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[0]);
                cba = abc / 10;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[0] = getLevelForXP(playerXP[0]);
                playerLevel[0] += abc2;
                sendFrame126(String.valueOf(playerLevel[0]), 4004);
                deleteItem(121, GetItemSlot(121), 1);
                addItem(123, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;
            case 2428: // attack pot (4)
                strPot = true;
                attPotTimer = 90;
                abc = getLevelForXP(playerXP[0]);
                cba = abc / 10;
                aaa = cba / 2;
                abc2 = aaa + cba;
                if (abc2 <= 1) {
                    abc2 = 2;
                }
                playerLevel[1] = getLevelForXP(playerXP[1]);
                playerLevel[1] += abc2;
                sendFrame126("@whi@" + playerLevel[1], 4006);
                deleteItem(161, GetItemSlot(161), 1);
                addItem(229, 1);
                updateRequired = true;
                appearanceUpdateRequired = true;
                GoOn = false;
                break;

            case 2446: // Antipoison(4)
                PoisonDelay = 9999999;
                setAnimation(829);
                sendMessage("You drink a dose of the antipoison.");
                deleteItem(2446, getItemSlot(2446), 1);
                addItem(175, 1);
                break;

            case 175: // Antipoison(3)
                PoisonDelay = 9999999;
                setAnimation(829);
                sendMessage("You drink a dose of the antipoison.");
                deleteItem(175, getItemSlot(175), 1);
                addItem(177, 1);
                break;

            case 177: // Antipoison(2)
                PoisonDelay = 9999999;
                setAnimation(829);
                sendMessage("You drink a dose of the antipoison.");
                deleteItem(177, getItemSlot(177), 1);
                addItem(179, 1);
                break;

            case 179: // Antipoison(1)
                PoisonDelay = 9999999;
                setAnimation(829);
                sendMessage("You drink the last dose of the antipoison.");
                deleteItem(179, getItemSlot(179), 1);
                break;

            case ItemIDs.PRESENT: // present for xmas event
                int prsent = misc.random(801);
                if (prsent == 200) {
                    sendMessage("You just got an Lucky Saradomin Godsword!");
                    addItem(ItemIDs.LUCKY_SARADOMIN_GODSWORD, 1);
                    PlayerHandler.messageToAll = "@red@" + playerName + " Has Gotten an lucky sgs!";
                } else if (prsent == 400) {
                    sendMessage("You just got an Lucky Armadyl Godsword!");
                    addItem(15341, 1);
                    PlayerHandler.messageToAll = "@red@" + playerName + " Has Gotten an lucky ags!";
                } else if (prsent == 600) {
                    sendMessage("You just got an Lucky Zamorak Godsword!");
                    addItem(15342, 1);
                    PlayerHandler.messageToAll = "@red@" + playerName + " Has Gotten an lucky zgs!";
                } else if (prsent == 800) {
                    sendMessage("You just got an Lucky Bandos godsword!");
                    addItem(15343, 1);
                    PlayerHandler.messageToAll = "@red@" + playerName + " Has Gotten an lucky bgs!";
                } else {
                    int val2 = 10000+misc.random3(5000000);
                    addItem(ItemIDs.COINS, val2);
                    sM("better luck next time here is "+val2+" =).");
                }
                deleteItem(ItemIDs.PRESENT, getItemSlot(ItemIDs.PRESENT), 1);
                break;
            case 13000:
                ResourceBoxSmall.open(this);
                break;
            case 13001:
                ResourceBoxMedium.open(this);
                break;
            case 13002:
                ResourceBoxLarge.open(this);
                break;
            case 13003:
                ResourceBoxHuge.open(this);
                break;
            case ItemIDs.MYSTERY_BOX: // MYSTERY_BOX
                if(playerHasItem(ItemIDs.MYSTERY_BOX)){
                    deleteItem(ItemIDs.MYSTERY_BOX, getItemSlot(ItemIDs.MYSTERY_BOX), 1);
                    int item = Item2.randommbox();
                    addItem(item, 1);
                    sM("You get a "+getItemName(item)+" from the mystery box");
                }
                break;

            case 6:
                getCannon().setUpCannon();
                break;
            case 299:
                flowers = randomflower();
                flowerX += absX;
                flowerY += absY;
                makeGlobalObject(absX, absY, flowers, 0, 10);// flowers
                sendMessage("You plant the seed...");
                seedtimer += 20;
                deleteItem(299, 1);
                walkTo2(-1, 0);
                if (Region.getClipping(absX - 1, absY, heightLevel, -1, 0)) {
                    walkTo2(-1, 0);
                } else if (Region
                        .getClipping(absX + 1, absY, heightLevel, 1, 0)) {
                    sM("You cant plant a flower there.");
                    walkTo2(1, 0);
                } else if (Region.getClipping(absX, absY - 1, heightLevel, 0,
                        -1)) {
                    sM("You cant plant a flower there.");
                    walkTo2(0, -1);
                } else if (Region
                        .getClipping(absX, absY + 1, heightLevel, 0, 1)) {
                    walkTo2(0, 1);
                    sM("You cant plant a flower there.");
                }
                break;


            case 2528: // Genie Lamp
                showInterface(2808);
                sendMessage("You rub the lamp.");
                sendQuest("Choose the stat you would like to increase.", 2810);
                break;

            case 4079: // Yo-yo (play) by [M]ike
                startAnimation(1457);
                break;

            case 3008:
                drinkEnergy(Item, 3010, Slot);
                break;
            case 3010:
                drinkEnergy(Item, 3012, Slot);
                break;

            case 3012:
                drinkEnergy(Item, 3014, Slot);
                break;
            case 3014:
                drinkEnergy(Item, 229, Slot);
                break;
            default:
                sendMessage("Nothing interesting is happening.");
                println_debug("Prayer Usage - ItemID: " + Item);
                GoOn = false;
                break;
        }
        if (!GoOn) {
            return false;
        }
        if (prayer[2] > 0) {
            prayer[0] = 1;
            prayer[4] = Item;
            prayer[5] = Slot;
        }
        return true;
    }

    public boolean CheckForSkillUse4(int Item) {
        boolean GoOn = true;
        boolean IsFiremaking = false;

        switch (Item) {
            case 1511:
                if (IsItemInBag(590)) {
                    IsFiremaking = true;
                    firemaking[0] = 1;
                    firemaking[1] = 1;
                    firemaking[2] = 40;
                } else {
                    sendMessage(
                            "You need a " + GetItemName(591) + " to light a fire.");
                }
                break;

            case 1513:
                if (IsItemInBag(590)) {
                    IsFiremaking = true;
                    firemaking[0] = 8;
                    firemaking[1] = 75;
                    firemaking[2] = 303;
                } else {
                    sendMessage(
                            "You need a " + GetItemName(591) + " to light a fire.");
                }
                break;

            case 1515:
                if (IsItemInBag(590)) {
                    IsFiremaking = true;
                    firemaking[0] = 7;
                    firemaking[1] = 60;
                    if (misc.random2(2) == 1) {
                        firemaking[2] = 202;
                    } else {
                        firemaking[2] = 203;
                    }
                } else {
                    sendMessage(
                            "You need a " + GetItemName(591) + " to light a fire.");
                }
                break;

            case 1517:
                if (IsItemInBag(590)) {
                    IsFiremaking = true;
                    firemaking[0] = 5;
                    firemaking[1] = 45;
                    firemaking[2] = 135;
                } else {
                    sendMessage(
                            "You need a " + GetItemName(591) + " to light a fire.");
                }
                break;

            case 1519:
                if (IsItemInBag(590)) {
                    IsFiremaking = true;
                    firemaking[0] = 3;
                    firemaking[1] = 30;
                    firemaking[2] = 90;
                } else {
                    sendMessage(
                            "You need a " + GetItemName(591) + " to light a fire.");
                }
                break;

            case 1521:
                if (IsItemInBag(590)) {
                    IsFiremaking = true;
                    firemaking[0] = 2;
                    firemaking[1] = 15;
                    firemaking[2] = 60;
                } else {
                    sendMessage(
                            "You need a " + GetItemName(591) + " to light a fire.");
                }
                break;

            case 6333:
                if (IsItemInBag(590)) {
                    IsFiremaking = true;
                    firemaking[0] = 4;
                    firemaking[1] = 35;
                    firemaking[2] = 105;
                } else {
                    sendMessage(
                            "You need a " + GetItemName(591) + " to light a fire.");
                }
                break;

            case 6332:
                if (IsItemInBag(590)) {
                    IsFiremaking = true;
                    firemaking[0] = 6;
                    firemaking[1] = 50;
                    if (misc.random2(2) == 1) {
                        firemaking[2] = 157;
                    } else {
                        firemaking[2] = 158;
                    }
                } else {
                    sendMessage(
                            "You need a " + GetItemName(591) + " to light a fire.");
                }
                break;

            default:
                sendMessage("Nothing interesting is happening.");
                println_debug("Firemaking Usage - ItemID: " + Item);
                GoOn = false;
                break;
        }
        if (!GoOn) {
            return false;
        }
        if (IsFiremaking) {
            firemaking[4] = GetGroundItemID(Item, skillX, skillY);
            if (firemaking[4] == -1) {
                sendMessage("No logs on the ground.");
                resetFM();
                println_debug("Firemaking bug: no logs on the ground.");
            }
        }
        return true;
    }
    public void repeatAnimation(final int tickAmount, final int anim, int duration) {
        EventManager.getSingleton().addEvent(this, new Event() {
            int ticks = tickAmount;
            @Override
            public void execute(EventContainer container) {
                if (ticks > 0) {
                    ticks--;
                    startAnimation(anim);
                    updateRequired = true;
                } else if (ticks == 0) {
                    this.stop();
                }

            }
            @Override
            public void stop() {
                startAnimation(65535);
                updateRequired = true;
            }
        }, duration);
    }
    public boolean IsItemInBag(int ItemID) {
        for (int i = 0; i < playerItems.length; i++) {
            if ((playerItems[i] - 1) == ItemID) {
                return true;
            }
        }
        return false;
    }

    public boolean AreXItemsInBag(int ItemID, int Amount) {
        int ItemCount = 0;

        for (int i = 0; i < playerItems.length; i++) {
            if ((playerItems[i] - 1) == ItemID) {
                ItemCount++;
            }
            if (ItemCount == Amount) {
                return true;
            }
        }
        return false;
    }

    public int GetItemSlot(int ItemID) {
        for (int i = 0; i < playerItems.length; i++) {
            if ((playerItems[i] - 1) == ItemID) {
                return i;
            }
        }
        return -1;
    }

    public int GetWepAnim() {
        String weaponName = Item.getItemName(playerEquipment[playerWeapon]).toLowerCase();
        if (playerEquipment[playerWeapon] == -1) { // unarmed
            if (FightType == 2) // kick
            {
                return 423;
            } else {
                return 422;
            }
        }
        if (weaponName.contains("whip")) // whip
        {
            return 11969;
        }
        if (weaponName.contains("scimitar")) // whip
        {
            return 12029;
        }
        if(weaponName.contains("sword")){
            return 13039;
        }
        if (weaponName.contains("cross") && !weaponName.contains("karil") || weaponName.contains("c'bow") && !weaponName.contains("karil")) {
            return 4230;
        }
        if (playerEquipment[playerWeapon] == ItemIDs.RUNE_KNIFE) // throwing knives
        {
            return 385;
        }
        if (playerEquipment[playerWeapon] == 6527) // obby maul plox
        {
            return 2927;
        }
        if (playerEquipment[playerWeapon] == 6541) // Mouse Toy
        {
            return 1658;
        }
        if (playerEquipment[playerWeapon] == 11235) // dark bow
        {
            return 426;
        }
        if (playerEquipment[playerWeapon] == 4675) // ancient staff
        {
            Warlock999();
            return 1979;
        }
        if (playerEquipment[playerWeapon] == 2415) // ancient staff
        {
            figment();
            return 811;
        }
        if (playerEquipment[playerWeapon] == 6914) // master wand
        {
            Warlock999();
            return 1979;
        }
        if (playerEquipment[playerWeapon] == 1305) // d long
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 15334 ||
                playerEquipment[playerWeapon] == 21690 || playerEquipment[playerWeapon] == 15336 || playerEquipment[playerWeapon] == 15335
                || playerEquipment[playerWeapon] == 15333 || playerEquipment[playerWeapon] == 15337 || playerEquipment[playerWeapon] == 15339 || playerEquipment[playerWeapon] == ItemIDs.LUCKY_SARADOMIN_GODSWORD || playerEquipment[playerWeapon] == 15341 || playerEquipment[playerWeapon] == 15342 || playerEquipment[playerWeapon] == 15343) // 756
        {
            return 407;
        }
        if (playerEquipment[playerWeapon] == 14915) // anchor
        {
            return 406;
        }
        if (playerEquipment[playerWeapon] == 6739) // dragon axe
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 4587) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1277) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1279) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1281) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 14321) // d scim
        {
            return 5865;
        }
        if (playerEquipment[playerWeapon] == 1283) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1285) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1287) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1289) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1291) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1293) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1295) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1297) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1299) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1277) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1301) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 1303) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 10010) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 746) // d scim
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 3204) // dragon halberd
        {
            return 440;
        }
        if (playerEquipment[playerWeapon] == 6818) // bow-sword
        {
            return 440;
        }
        if (playerEquipment[playerWeapon] == 3202) // rune halberd
        {
            return 440;
        }
        if (playerEquipment[playerWeapon] == 2402) // Saradomin GS
        {
            return 407;
        }
        if (playerEquipment[playerWeapon] == 15618) // Death GS
        {
            return 407;
        }
        if (playerEquipment[playerWeapon] == 746) // Zamorak GS
        {
            return 407;
        }
        if (playerEquipment[playerWeapon] == 4214
                || playerEquipment[playerWeapon] == 859
                || playerEquipment[playerWeapon] == 861
                || playerEquipment[playerWeapon] == 6724) // bows
        {
            return 426;
        }
        if (playerEquipment[playerWeapon] == 4153) // maul
        {
            return 1665;
        }
        if (playerEquipment[playerWeapon] == 6528) // obby maul
        {
            return 2661;
        }
        if (playerEquipment[playerWeapon] == 5018) // bone club
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 3101) // Rune claws
        {
            return 451;
        }
        if (playerEquipment[playerWeapon] == 7449) // noob smasher
        {
            return 1665;
        }
        if (playerEquipment[playerWeapon] == 1377) // dragon b axe
        {
            return 1833;
        }
        if (playerEquipment[playerWeapon] == 1373) // rune b axe
        {
            return 1833;
        }
        if (playerEquipment[playerWeapon] == 1434) // dragon mace
        {
            return 1833;
        }
        if (playerEquipment[playerWeapon] == 5018) // dragon mace
        {
            return 1833;
        }
        if (playerEquipment[playerWeapon] == 5730) // dragon spear
        {
            return 2080;
        }
        if (playerEquipment[playerWeapon] == 4718) // dharoks axe
        {
            return 2067;
        }
        if (playerEquipment[playerWeapon] == 4726) // guthans spear
        {
            return 2080;
        }
        if (playerEquipment[playerWeapon] == 4747) // torags hammers
        {
            return 2068;
        }
        if (playerEquipment[playerWeapon] == 4755) // veracs flail
        {
            return 2062;
        }
        if (playerEquipment[playerWeapon] == 4734) // karils x bow
        {
            return 2075;
        }
        if (playerEquipment[playerWeapon] == 837) // crossbow
        {
            return 427;
        }
        if (playerEquipment[playerWeapon] == 10431) // rune crossbow
        {
            return 427;
        }
        if (playerEquipment[playerWeapon] == 1215
                || playerEquipment[playerWeapon] == 1231
                || playerEquipment[playerWeapon] == 5680
                || playerEquipment[playerWeapon] == 5698) // dragon daggers
        {
            return 402;
        }
        if (playerEquipment[playerWeapon] == 6609
                || playerEquipment[playerWeapon] == 1307
                || playerEquipment[playerWeapon] == 1309
                || playerEquipment[playerWeapon] == 1311
                || playerEquipment[playerWeapon] == 1313
                || playerEquipment[playerWeapon] == 1315
                || playerEquipment[playerWeapon] == 1317
                || playerEquipment[playerWeapon] == 1319) // 2 handers
        {
            return 407;
        }
        if (playerEquipment[playerWeapon] == ItemIDs.DRAGON_2H_SWORD) // d2h
        {
            return 407;
        }
        if (playerEquipment[playerWeapon] == 1319) // r2h
        {
            return 407;
        }
        if (playerEquipment[playerWeapon] == 1419) // scythe
        {
            return 408;
        }
        if (playerEquipment[playerWeapon] == 4566) // rubber chicken
        {
            return 1833;
        } else {
            return 0x326;
        }
    }

    public int GetRunAnim(int id) {
        String weaponName = Item.getItemName(id).toLowerCase();
        if (weaponName.contains("whip")) // whip
        {
            return 1661;
        }
        if(weaponName.contains("scimitar")){
            return 12023;
        }
        if (id == 25612) // whip
        {
            return 1661;
        }
        if (id == 8447) // cat toy
        {
            return 1661;
        }
        if (id == 4084) // cat toy
        {
            return 1467;
        }

        if (id == 14321) // scythe
        {
            return 5868;
        }
        if (id == 6818) // bow-sword
        {
            return 744;
        }
        if (id == 4734 || id == 837) // karils x bow
        {
            return 2077;
        }
        if (id == 4153) // maul
        {
            return 1664;
        }
        if (id == 15333) // scythe
        {
            return 7039;
        }

        if (id == 21690) // scythe
        {
            return 7039;
        }
        if (id == ItemIDs.LUCKY_SARADOMIN_GODSWORD) // scythe
        {
            return 7039;
        }
        if (id == 15341) // scythe
        {
            return 7039;
        }
        if (id == 15342) // scythe
        {
            return 7039;
        }
        if (id == 15343) // scythe
        {
            return 7039;
        }
        if (id == 15336) // scythe
        {
            return 7039;
        }
        if (id == 15337) // scythe
        {
            return 7039;
        }
        if (id == 15339) // scythe
        {
            return 7039;
        }
        if (id == 15334) // scythe
        {
            return 7039;
        }
        if (id == 15335) // scythe
        {
            return 7039;
        }
        if (id == 7449) // noobsmasher
        {
            return 1664;
        } else {
            return 0x338;
        }
    }

    public int GetWalkAnim(int id) {
        String weaponName = Item.getItemName(id).toLowerCase();
        if (weaponName.contains("scimitar")) {

            return 12024;
        }
        if (id == 4718) // dharoks axe
        {
            return 7046;
        }
        if (id == 4084) // dharoks axe
        {
            return 1468;
        }
        if (id == 4039 || id == 4037 || id == 1379 || id == 3204 || id == 3202
                || id == 1381 || id == 1383 || id == 1385 || id == 1387
                || id == 1389 || id == 1391 || id == 1393 || id == 1395
                || id == 1397 || id == 1399 || id == 1401 || id == 1403
                || id == 145 || id == 1407 || id == 1409 || id == 3053
                || id == 3054 || id == 4170 || id == 4675 || id == 4710
                || id == 6526 || id == 4726 || id == 6562 || id == 6563
                || id == 6914 || id == 5730 || id == 14202) // staves + d long and most other weps with str8 up emote
        {
            return 1146;
        }
        if (playerEquipment[playerFeet] == 4084) // sled
        {
            return 755;
        }
        if (id == 4565) // basket of eggs :)
        {
            return 1836;
        }
        if (id == 4755) // veracs flail
        {
            return 2060;
        }
        if (id == 14321) // veracs flail
        {
            return 5867;
        }
        if (id == 4734 || id == 837) // karils x bow
        {
            return 2076;
        }
        if (id == 4153 || id == 1419) // maul
        {
            return 1663;
        }
        if (weaponName.contains("godsword") || weaponName.contains("2h sword")) // Godsword
        {
            return 7046;
        }
        if (id == 7449) // noob smasher
        {
            return 1663;
        }
        if (weaponName.contains("whip")) // whip
        {
            return 11975;
        }
        if (id == 8447) // cat toy
        {
            return 1661;
        } else {
            return 0x333;
        }
    }

    public int GetStandAnim(int id) {
        String weaponName = Item.getItemName(id).toLowerCase();
        if (id == 4718) // dharoks axe
        {
            return 7047;
        }
        if (weaponName.contains("scimitar")) {
            return 12021;
        }
        if(weaponName.contains("whip")) {
            return 11973;
        }

        if (id == 4755) // veracs flail
        {
            return 2061;
        }
        if (id == 4084) // veracs flail
        {
            return 1461;
        }

        if (id == 14321) // veracs flail
        {
            return 5869;
        }
        if (id == 4734 || id == 837) // karils x bow
        {
            return 2074;
        }
        if (id == 15333 || id == 21690 || id == 15334 || id == 15335 || id == 15337 || id == 15339 || id == 15336 || id == 15618 || id == ItemIDs.LUCKY_SARADOMIN_GODSWORD || id == 15341 || id == 15342 || id == 15343) // maul
        {
            return 7047;
        }
        if (id == 7449) // noob smasher
        {
            return 1662;
        }
        if (id == 4565) // basket of eggs :)
        {
            return 1836;
        }
        if (id == 1305 || id == 1379 || id == 1381 || id == 1383 || id == 1385
                || id == 1387 || id == 1389 || id == 1391 || id == 1393
                || id == 1395 || id == 1397 || id == 1399 || id == 1401
                || id == 1403 || id == 145 || id == 1407 || id == 1409
                || id == 3053 || id == 3054 || id == 4170 || id == 4675
                || id == 4710 || id == 6526 || id == 4726 || id == 6562
                || id == 6563 || id == 5730 || id == 14202) // staves
        {
            return 809;
        }
        if (id == ItemIDs.DRAGON_2H_SWORD || id == 1319 || id == 6528 || id == 14915) // 2h
        {
            return 7047;
        }
        if (id == 3204 || id == 3202) // halberd
        {
            return 809;
        } else {
            return 0x328;
        }
    }
    private int Get180turnAnim(int id) {
        String weaponName = Item.getItemName(id).toLowerCase();
        if(weaponName.contains("whip")) {
            return 11975;
        }
        if (id == 15333 || id == 21690 || id == 15334 || id == 15335 || id == 15337 || id == 15339 || id == 15336 || id == 15618 || id == ItemIDs.LUCKY_SARADOMIN_GODSWORD || id == 15341 || id == 15342 || id == 15343) // maul
        {
            return 7043;
        } else {
            return 0x334;
        }
    }
    public int Get90cwturnAnim(int id) {
        String weaponName = Item.getItemName(id).toLowerCase();
        if (weaponName.contains("whip")) {
            return 11975;
        }
        if (id == 15333 || id == 21690 || id == 15334 || id == 15335 || id == 15337 || id == 15339 || id == 15336 || id == 15618 || id == ItemIDs.LUCKY_SARADOMIN_GODSWORD || id == 15341 || id == 15342 || id == 15343) // maul{
        {
            return 7043;
        } else {
            return 0x335;
        }
    }

    public int Get90ccturnAnim(int id) {
        String weaponName = Item.getItemName(id).toLowerCase();
        if(weaponName.contains("whip")) {
            return 11975;
        }
        if (id == 15333 || id == 21690 || id == 15334 || id == 15335 || id == 15337 || id == 15339 || id == 15336 || id == 15618 || id == ItemIDs.LUCKY_SARADOMIN_GODSWORD || id == 15341 || id == 15342 || id == 15343) // maul
        {
            return 7044;
        } else {
            return 0x336;
        }
    }

    public int GetBlockAnim(int id) {
        String weaponName = Item.getItemName(id).toLowerCase();
        if (id == 4755) // veracs flail
        {
            return 7050;
        }
        if (weaponName.contains("whip")) // whip
        {
            return 11973;
        }
        if (weaponName.contains("scimitar")) // whip
        {
            return 12030;
        }
        if (id == 10229) // defender
        {
            return 1659;
        }
        if (id == 1171) // wooden shield
        {
            return 403;
        }
        if (id == 1185) // rune sq shield
        {
            return 403;
        }
        if (id == 14321) // wooden shield
        {
            return 5866;
        }
        if (id == 15335) // rune sq shield
        {
            return 7050;
        }
        if (id == 15334) // rune sq shield
        {
            return 7050;
        }
        if (id == 15333) // rune sq shield
        {
            return 7050;
        }
        if (id == ItemIDs.LUCKY_SARADOMIN_GODSWORD) // rune sq shield
        {
            return 7050;
        }
        if (id == 15341) // rune sq shield
        {
            return 7050;
        }
        if (id == 15342) // rune sq shield
        {
            return 7050;
        }
        if (id == 15343) // rune sq shield
        {
            return 7050;
        }
        if (id == 15618) // rune sq shield
        {
            return 7050;
        }
        if (id == 15336) // rune sq shield
        {
            return 7050;
        }
        if (id == 15337) // rune sq shield
        {
            return 7050;
        }
        if (id == 15339) // rune sq shield
        {
            return 7050;
        }
        if (id == 1187) // dragon sq shield
        {
            return 403;
        }
        if (id == 1191) // iron kite shield
        {
            return 403;
        }
        if (id == 1201) // rune kite shield
        {
            return 403;
        }
        if (id == 2659) // zammy kite shield
        {
            return 403;
        }
        if (id == 2667) // sara kite shield
        {
            return 403;
        }
        if (id == 2675) // guthix kite shield
        {
            return 403;
        }
        if (id == 3122) // granite shield
        {
            return 403;
        }
        if (id == 3488) // gilded kite shield
        {
            return 403;
        }
        if (id == 4156) // mirror shield
        {
            return 403;
        }
        if (id == 6524) // obby shield
        {
            return 403;
        }
        if (id == 4153) // maul
        {
            return 1666;
        }
        if (id == 1419) // scythe
        {
            return 1666;
        } else {
            return 404;
        }
    }

    public int GetXItemsInBag(int ItemID) {
        int ItemCount = 0;

        for (int i = 0; i < playerItems.length; i++) {
            if ((playerItems[i] - 1) == ItemID) {
                ItemCount++;
            }
        }
        return ItemCount;
    }

    public void AddDroppedItems() {
        if (!IsDropping) {
            IsDropping = true;
            int tmpX = 0;
            int tmpY = 0;
            int calcX = 0;
            int calcY = 0;

            for (int i = 0; i < ItemHandler.DropItemCount; i++) {
                if (ItemHandler.DroppedItemsID[i] > -1) {
                    tmpX = ItemHandler.DroppedItemsX[i];
                    tmpY = ItemHandler.DroppedItemsY[i];
                    calcX = tmpX - absX;
                    calcY = tmpY - absY;
                    if (calcX >= -16 && calcX <= 15 && calcY >= -16
                            && calcY <= 15 && !MustDelete[i]
                            && ItemHandler.DroppedItemsH[i]
                            == heightLevel) {
                        if (!IsDropped[i]
                                && (ItemHandler.DroppedItemsDDelay[i]
                                <= 0
                                || ItemHandler.DroppedItemsDropper[i]
                                == playerId)) {
                            IsDropped[i] = true;
                            getOutStream().createFrame(85);
                            getOutStream().writeByteC(
                                    (ItemHandler.DroppedItemsY[i]
                                            - 8 * mapRegionY));
                            getOutStream().writeByteC(
                                    (ItemHandler.DroppedItemsX[i]
                                            - 8 * mapRegionX));
                            getOutStream().createFrame(44); // create item frame
                            getOutStream().writeWordBigEndianA(
                                    ItemHandler.DroppedItemsID[i]);
                            getOutStream().writeWord(
                                    ItemHandler.DroppedItemsN[i]); // amount
                            getOutStream().writeByte(0); // x(4 MSB) y(LSB) coords
                        }
                    } else if (IsDropped[i] || MustDelete[i]) {
                        getOutStream().createFrame(85);
                        getOutStream().writeByteC(
                                (ItemHandler.DroppedItemsY[i]
                                        - 8 * mapRegionY));
                        getOutStream().writeByteC(
                                (ItemHandler.DroppedItemsX[i]
                                        - 8 * mapRegionX));
                        getOutStream().createFrame(156); // remove item frame
                        getOutStream().writeByteS(0); // x(4 MSB) y(LSB) coords
                        getOutStream().writeWord(ItemHandler.DroppedItemsID[i]);
                        int LastPlayerInList = -1;
                        int TotalPlayers = 0;

                        for (int j = 1; j < PlayerHandler.maxPlayers; j++) {
                            if (PlayerHandler.players[j] != null) {
                                LastPlayerInList = j;
                                TotalPlayers++;
                            }
                        }
                        if (MustDelete[i]) {
                            MustDelete[i] = false;
                            ItemHandler.DroppedItemsDeletecount[i]++;
                            if ((LastPlayerInList == playerId
                                    || LastPlayerInList == -1)
                                    && ItemHandler.DroppedItemsDeletecount[i]
                                    == TotalPlayers) {
                                if (ItemHandler.DroppedItemsAlwaysDrop[i]) {
                                    ItemHandler.DroppedItemsDropper[i] = -1;
                                    ItemHandler.DroppedItemsDDelay[i] = ItemHandler.SDID;
                                } else {
                                    server.itemHandler.ResetItem(i);
                                }
                                for (int j = 1; j < PlayerHandler.maxPlayers; j++) {
                                    if (PlayerHandler.players[j] != null) {
                                        PlayerHandler.players[j].IsDropped[i] = false;
                                    }
                                }
                            }
                        } else {
                            IsDropped[i] = false;
                        }
                    }
                }
            }
            IsDropping = false;
        }
    }

    public void pmstatus(int status) { // status: loading = 0  connecting = 1  fine = 2
        if(getOutStream() != null) {
            getOutStream().createFrame(221);
            getOutStream().writeByte(status);
        }
    }

    public boolean isinpm(long l) {
        for (int i = 0; i < friends.length; i++) {
            if (friends[i] != 0) {
                if (l == friends[i]) {
                    return true;
                }
            }
        }
        return false;
    }

    public void pmupdate(int pmid, int world) {
        long l = misc.playerNameToInt64(PlayerHandler.players[pmid].playerName);

        if (PlayerHandler.players[pmid].Privatechat == 0) {
            for (int i = 0; i < friends.length; i++) {
                if (friends[i] != 0) {
                    if (l == friends[i]) {
                        loadpm(l, world);
                        return;
                    }
                }
            }
        } else if (PlayerHandler.players[pmid].Privatechat == 1) {
            for (int i1 = 0; i1 < friends.length; i1++) {
                if (friends[i] != 0) {
                    if (l == friends[i1]) {
                        if (PlayerHandler.players[pmid].isinpm(
                                misc.playerNameToInt64(playerName))
                                && rights.inherits(Rights.ADMINISTRATOR)) {
                            loadpm(l, world);
                            return;
                        } else {
                            loadpm(l, 0);
                            return;
                        }
                    }
                }
            }
        } else if (PlayerHandler.players[pmid].Privatechat == 2) {
            for (int i2 = 0; i2 < friends.length; i2++) {
                if (friends[i] != 0) {
                    if (l == friends[i2] && getRights().isPlayer()) {
                        loadpm(l, 0);
                        return;
                    }
                }
            }
        }
    }

    public void sendpm(long name, int rights, byte[] chatmessage, int messagesize) {
        getOutStream().createFrameVarSize(196);
        getOutStream().writeQWord(name);
        getOutStream().writeDWord(handler.lastchatid++); // must be different for each message
        getOutStream().writeByte(rights);
        getOutStream().writeBytes(chatmessage, messagesize, 0);
        getOutStream().endFrameVarSize();
    }

    public void loadpm(long name, int world) {
        if(getOutStream() != null) {
            if (world != 0) {
                world += 9;
            } else if (world == 0) {
                world += 1;
            }
            getOutStream().createFrame(50);
            getOutStream().writeQWord(name);
            getOutStream().writeByte(world);
        }
    }

    public void AttackMage(int index) {
        int playerIndex = index; // inStream.readSignedWordA();

        if (debugMessages) {
            sM("playerIndex: " + playerIndex + " spellID: " + spellID);
        }
        client castOnPlayer = (client) PlayerHandler.players[playerIndex];

        setAnimation(711);
        int EnemyX = PlayerHandler.players[playerIndex].absX;
        int EnemyY = PlayerHandler.players[playerIndex].absY;
        int EnemyHP = PlayerHandler.players[playerIndex].playerLevel[playerHitpoints];
        int heal = 0;
        int myHP = playerLevel[playerHitpoints];
        int hitDiff = 0;
        int mageXP = 0;

        faceUpdate(32768 + index);

        if (spellID == 1539
                && (rights.inherits(Rights.MODERATOR) || rights.inherits(Rights.ADMINISTRATOR) || rights.inherits(Rights.OWNER))) {
            if (!Inair) {
                actionAmount++;
                teleportToX = absX;
                teleportToY = absY;
                setAnimation(1500);
                sendMessage("You rise to the air.");
                playerStandIndex = 1501;
                playerRunIndex = 1501;
                playerWalkIndex = 1501;
                actionTimer = 0;
                Inair = true;
            }
            if (Inair && actionTimer <= 0) {
                teleportToX = absX;
                teleportToY = absY;
                setAnimation(1502);
                sendMessage("You electricute " + castOnPlayer.playerName + "!");
                castOnPlayer.sendMessage("You get electricuted!");
                castOnPlayer.hitDiff = 1 + misc.random(6);
                teleportToX = absX;
                teleportToY = absY;
                castOnPlayer.setAnimation(3170);
                castOnPlayer.entangle();
                playerStandIndex = 1501;
                playerRunIndex = 1501;
                playerWalkIndex = 1501;
                if ((EnemyHP - hitDiff) < 0) {
                    hitDiff = EnemyHP;
                }
                // castOnPlayer.hitDiff = hitDiff;
                castOnPlayer.KillerId = playerId;
                castOnPlayer.updateRequired = true;
                castOnPlayer.hitUpdateRequired = true;
            }
        }
        if (playerLevel[6] > 0) {
            int casterX = absX;
            int casterY = absY;
            int offsetX = (casterX - EnemyX) * -1;
            int offsetY = (casterY - EnemyY) * -1;

            /*
             if (magicID == 1152 && playerHasItem(556) == true && playerHasItem(558) == true) { // Wind Strike by GoldenShard
             ProjectileSpellPlayer(90, 95, 92, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 2, 1, 566, 558, 1, 1);
             addSkillXP((40*playerLevel[6]), 6);
             deleteItem(556, getItemSlot(556), 1);
             deleteItem(558, getItemSlot(558), 1);
             startAnimation(1818);
             hitDiff = 5 + misc.random(30);
             } else if (playerHasItem(556) == false && playerHasItem(558) == false){
             sendMessage("You do not have the correct runes to cast this spell.");
             }

             if (spellID == 1154) { // Water Strike
             ProjectileSpellPlayer(93, 94, 95, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 5, 1, 566, 558, 555, 1, 1, 1);
             }
             if (spellID == 1156) { // Earth Strike
             ProjectileSpellPlayer(96, 97, 98, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 9, 1, 566, 558, 557, 1, 1, 2);
             } */
            if (spellID == 1158 && playerLevel[3] >= 80) { // Fire Strike - now Shock Wave
                ProjectileSpellPlayer(448, 100, 101, absY, absX, offsetY,
                        offsetX, index, EnemyY, EnemyX, 30, 1, 566, 558, 554, 1,
                        1, 3);
                castOnPlayer.stillgfx(481, castOnPlayer.absY, castOnPlayer.absX);
                castOnPlayer.stillgfx(453, castOnPlayer.absY, castOnPlayer.absX);
                hitDiff = 5 + misc.random(25);
                attackNPCSWithin(453, 30, 4);
                attackPlayersWithin(453, 30, 4);
            } /*
             if (spellID == 1160) { // Wind bolt
             ProjectileSpellPlayer(117, 118, 119, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 12, 1, 566, 558, 2, 1);
             }
             if (spellID == 1163) { // Water bolt
             ProjectileSpellPlayer(120, 121, 122, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 14, 1, 566, 558, 555, 2, 1, 2);
             }
             if (spellID == 1166) { // Earth bolt
             ProjectileSpellPlayer(123, 124, 125, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 15, 1, 566, 558, 557, 2, 1, 2);
             }
             if (spellID == 1169) { // Fire bolt
             ProjectileSpellPlayer(126, 127, 128, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 16, 1, 566, 558, 554, 3, 1, 4);
             }
             if (spellID == 1172) { // Wind blast
             ProjectileSpellPlayer(132, 133, 134, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 17, 1, 566, 560, 3, 1);
             }
             if (spellID == 1175) { // Water blast
             ProjectileSpellPlayer(135, 136, 137, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 18, 1, 566, 560, 555, 3, 1, 3);
             }
             if (spellID == 1177) { // Earth blast
             ProjectileSpellPlayer(138, 139, 140, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 19, 1, 566, 560, 557, 3, 1, 3);
             }
             if (spellID == 1181) { // Fire blast
             ProjectileSpellPlayer(129, 130, 131, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 21, 1, 566, 560, 554, 4, 1, 5);
             }
             if (spellID == 1183) { // Wind wave
             ProjectileSpellPlayer(158, 159, 160, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 25, 1, 566, 565, 5, 1);
             }
             if (spellID == 1185) { // Water wave
             ProjectileSpellPlayer(161, 162, 163, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 27, 1, 566, 565, 555, 5, 1, 7);
             }
             if (spellID == 1188) { // Earth wave
             ProjectileSpellPlayer(164, 165, 166, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 29, 1, 566, 565, 557, 5, 1, 7);
             }
             if (spellID == 1189) { // Fire wave
             ProjectileSpellPlayer(155, 156, 157, absY, absX, offsetY, offsetX, index, EnemyY, EnemyX, 27, 1, 566, 565, 554, 5, 1, 7);
             }
             */

            if (spellID == 1190) // sara stike - level 60 spell
            {
                if (q3stage >= 0) {
                    if (playerLevel[6] >= 60) {
                        if (!playerHasItemAmount(565, 25)) {
                            sendMessage(
                                    "You do not have enough runes to cast this spell.");
                            sendMessage("You need 25 " + getItemName(565));
                        } else if (playerHasItemAmount(565, 25)) {
                            hitDiff = 5 + misc.random(25);
                            stillgfx(83, absY + 1, absX);
                            stillgfx(83, absY - 1, absX);
                            stillgfx(83, absY, absX + 1);
                            stillgfx(83, absY, absX - 1);
                            castOnPlayer.stillgfx(76, castOnPlayer.absY,
                                    castOnPlayer.absX);
                            castOnPlayer.inCombat();
                            inCombat();
                            PkingDelay = 10;
                            sendMessage("SARA STRIKE!");
                            deleteItem(565, getItemSlot(565), 25);
                            teleportToX = absX;
                            teleportToY = absY;
                        }
                    } else if (playerLevel[6] <= 59) {
                        sendMessage(
                                "You need a magic level of 60 to cast this spell.");
                    }
                } else {
                    sendMessage(
                            "You need to of completed Spells Of The Gods quest to use this spell.");
                }
            }
            if (spellID == 1191) // claws of guthix - level 60 spell
            {
                if (q3stage >= 0) {
                    if (playerLevel[6] >= 60) {
                        if (!playerHasItemAmount(565, 25)) {
                            sendMessage(
                                    "You do not have enough runes to cast this spell.");
                            sendMessage("You need 25 " + getItemName(565));
                        } else if (playerHasItemAmount(565, 25)) {
                            hitDiff = 5 + misc.random(25);
                            stillgfx(83, absY + 1, absX);
                            stillgfx(83, absY - 1, absX);
                            stillgfx(83, absY, absX + 1);
                            stillgfx(83, absY, absX - 1);
                            castOnPlayer.stillgfx(77, castOnPlayer.absY,
                                    castOnPlayer.absX);
                            castOnPlayer.inCombat();
                            inCombat();
                            PkingDelay = 10;
                            sendMessage("CLAWS OF GUTHIX!!");
                            deleteItem(565, getItemSlot(565), 25);
                            teleportToX = absX;
                            teleportToY = absY;
                        }
                    } else if (playerLevel[6] <= 59) {
                        sendMessage(
                                "You need a magic level of 60 to cast this spell.");
                    }
                } else {
                    sendMessage(
                            "You need to of completed Spells Of The Gods quest to use this spell.");
                }
            }
            if (spellID == 1192) // flames of zammy - level 99 spell
            {
                if (q3stage >= 0) {
                    if (playerLevel[6] >= 99) {
                        if (!playerHasItemAmount(565, 25)) {
                            sendMessage(
                                    "You do not have enough runes to cast this spell.");
                            sendMessage("You need 25 " + getItemName(565));
                        } else if (playerHasItemAmount(565, 25)) {
                            hitDiff = 5 + misc.random(25);
                            stillgfx(83, absY + 1, absX);
                            stillgfx(83, absY - 1, absX);
                            stillgfx(83, absY, absX + 1);
                            stillgfx(83, absY, absX - 1);
                            castOnPlayer.stillgfx(78, castOnPlayer.absY,
                                    castOnPlayer.absX);
                            castOnPlayer.inCombat();
                            inCombat();
                            PkingDelay = 10;
                            deleteItem(565, getItemSlot(565), 25);
                            teleportToX = absX;
                            teleportToY = absY;
                        }
                    } else if (playerLevel[6] <= 99) {
                        sendMessage(
                                "You need a magic level of 99 to cast this spell.");
                    }
                } else {
                    sendMessage(
                            "You need to of completed Spells Of The Gods quest to use this spell.");
                }
            }
            if (spellID == 12975) // smoke barrage (lvl 86 spell)
            {
                if (playerLevel[6] >= 95) {
                    if ((!playerHasItemAmount(560, 10))
                            || (!playerHasItemAmount(565, 5))
                            || (!playerHasItemAmount(554, 15))
                            || (!playerHasItemAmount(556, 15))) {
                        sendMessage(
                                "You do not have enough runes to cast this spell.");
                        sendMessage(
                                "You need 10 " + getItemName(560) + ", 5 "
                                        + getItemName(565) + ", 15 " + getItemName(554)
                                        + " and 15 " + getItemName(556));
                    } else if ((playerHasItemAmount(560, 10))
                            && (playerHasItemAmount(565, 5))
                            && (playerHasItemAmount(554, 15))
                            && (playerHasItemAmount(556, 15))) {
                        startAnimation(1979);
                        attackPlayersWithin(391, 39, 10);
                        hitDiff = 5 + misc.random(25);
                        castOnPlayer.PoisonPlayer();
                        castOnPlayer.inCombat();
                        inCombat();
                        PkingDelay = 7;
                        sendMessage("You poison the enemy.");
                        deleteItem(560, getItemSlot(560), 10);
                        deleteItem(565, getItemSlot(565), 5);
                        deleteItem(554, getItemSlot(554), 15);
                        deleteItem(556, getItemSlot(556), 15);
                        teleportToX = absX;
                        teleportToY = absY;
                    }
                } else if (playerLevel[6] <= 95) {
                    sendMessage(
                            "You need a magic level of 96 to cast this spell.");
                }
            }
            if (spellID == 12881) // ice burst (lvl 70 spell)
            {
                if (playerLevel[6] >= -74) {
                    if ((!playerHasItemAmount(560, 10))
                            || (!playerHasItemAmount(565, 10))
                            || (!playerHasItemAmount(554, 15))) {
                        sendMessage(
                                "You do not have enough runes to cast this spell.");
                        sendMessage(
                                "You need 10 " + getItemName(560) + ", 10 "
                                        + getItemName(565) + " and 15 "
                                        + getItemName(554));
                    } else if ((playerHasItemAmount(560, 10))
                            && (playerHasItemAmount(565, 10))
                            && (playerHasItemAmount(554, 15))) {
                        startAnimation(1979);
                        hitDiff = 5 + misc.random(13);
                        castOnPlayer.PoisonPlayer();
                        castOnPlayer.entangle();
                        castOnPlayer.inCombat();
                        inCombat();
                        PkingDelay = 7;
                        stillgfx(363, castOnPlayer.absY, castOnPlayer.absX);
                        castOnPlayer.stillgfx(363, castOnPlayer.absY,
                                castOnPlayer.absX);
                        castOnPlayer.sendMessage("You have been frozen!");
                        sendMessage("You poison and freeze the enemy!");
                        deleteItem(560, getItemSlot(560), 10);
                        deleteItem(565, getItemSlot(565), 10);
                        deleteItem(554, getItemSlot(554), 15);
                        teleportToX = absX;
                        teleportToY = absY;
                    }
                } else if (playerLevel[6] <= 74) {
                    sendMessage(
                            "You need a magic level of 75 to cast this spell.");
                }
            }

            if (spellID == 12891) // ice barrage (lvl 94 spell)
            {
                if (playerLevel[6] > 93) {
                    if ((!playerHasItemAmount(560, 40))
                            || (!playerHasItemAmount(565, 40))
                            || (!playerHasItemAmount(555, 60))) {
                        sendMessage(
                                "You do not have enough runes to cast this spell.");
                        sendMessage(
                                "You need 40 " + getItemName(560) + ", 40 "
                                        + getItemName(565) + " and 60 "
                                        + getItemName(555));
                    } else if ((playerHasItemAmount(560, 40))
                            && (playerHasItemAmount(565, 40))
                            && (playerHasItemAmount(554, 60))) {
                        hitDiff = 5 + misc.random(25);
                        startAnimation(1979);
                        castOnPlayer.PoisonPlayer();
                        castOnPlayer.uberentangle();
                        castOnPlayer.inCombat();
                        inCombat();
                        stillgfx(369, castOnPlayer.absY, castOnPlayer.absX);
                        // stillgfx(387, castOnPlayer.absY, castOnPlayer.absX);
                        // castOnPlayer.stillgfx(387, castOnPlayer.absY, castOnPlayer.absX);
                        castOnPlayer.sendMessage("You have been frozen!");
                        sendMessage("You poison and freeze the enemy!");
                        deleteItem(560, getItemSlot(560), 40);
                        deleteItem(565, getItemSlot(565), 40);
                        deleteItem(554, getItemSlot(555), 60);
                        teleportToX = absX;
                        teleportToY = absY;
                    }
                } else if (playerLevel[6] <= 124) {
                    sendMessage(
                            "You need a magic level of 125 to cast this spell.");
                }
            }

            if (spellID == 1156) // Earth Strike Owner Strike Owner Spell (Owner only)
            {
                if (rights.isPlayer()) {
                    sendMessage("You need Owner priveleges to cast this spell!");
                } else if (getRights().inherits(Rights.OWNER)) {
                    startAnimation(1914);
                    hitDiff = 5 + misc.random(65);
                    castOnPlayer.inCombat();
                    castOnPlayer.PoisonPlayer();
                    castOnPlayer.Teleblock();
                    castOnPlayer.burst();
                    inCombat();
                    actionTimer = 10;
                    stillgfx(292, castOnPlayer.absY, castOnPlayer.absX);
                    stillgfx(292, castOnPlayer.absY - 1, castOnPlayer.absX);
                    stillgfx(292, castOnPlayer.absY + 1, castOnPlayer.absX);
                    stillgfx(292, castOnPlayer.absY, castOnPlayer.absX - 1);
                    stillgfx(292, castOnPlayer.absY, castOnPlayer.absX + 1);
                    stillgfx(311, absY, absX);
                    stillgfx(287, castOnPlayer.absY, castOnPlayer.absX);
                    castOnPlayer.stillgfx(305, castOnPlayer.absY,
                            castOnPlayer.absX);
                    castOnPlayer.sendMessage("PWNT!!");
                    deleteItem(560, getItemSlot(560), 4);
                    deleteItem(565, getItemSlot(565), 2);
                    deleteItem(554, getItemSlot(555), 6);
                    teleportToX = absX;
                    teleportToY = absY;
                } else if (playerLevel[6] <= 1) {
                    sendMessage("You need to be Owner to cast this spell!");
                }
            }

            if (spellID == 1152) // Wind Strike Mod Strike Mod Spell(Mod only)
            {
                if (getRights().isPlayer()) {
                    sendMessage(
                            "You need Moderator priveleges to cast this spell!");
                } else if (rights.inherits(Rights.MODERATOR)) {
                    startAnimation(439);
                    hitDiff = 5 + misc.random(38);
                    castOnPlayer.inCombat();
                    castOnPlayer.burst();
                    inCombat();
                    actionTimer = 10;
                    stillgfx(187, castOnPlayer.absY, castOnPlayer.absX);
                    stillgfx(77, castOnPlayer.absY - 1, castOnPlayer.absX);
                    stillgfx(77, castOnPlayer.absY + 1, castOnPlayer.absX);
                    stillgfx(77, castOnPlayer.absY, castOnPlayer.absX - 1);
                    stillgfx(77, castOnPlayer.absY, castOnPlayer.absX + 1);
                    stillgfx(582, castOnPlayer.absY + 1, castOnPlayer.absX + 1);
                    stillgfx(346, castOnPlayer.absY, castOnPlayer.absX);
                    castOnPlayer.sendMessage("Pwnt");
                    deleteItem(560, getItemSlot(560), 4);
                    deleteItem(565, getItemSlot(565), 2);
                    deleteItem(554, getItemSlot(555), 6);
                    teleportToX = absX;
                    teleportToY = absY;
                } else if (playerLevel[6] <= 1) {
                    sendMessage("You need to be A Mod to cast this spell!");
                }
            }

            if (spellID == 1154) // Water Strike Admin Strike Admin Spell(Admin only)
            {
                if (rights.inherits(Rights.MODERATOR)) {
                    sendMessage("You need Admin priveleges to cast this spell!");
                } else if (rights.inherits(Rights.ADMINISTRATOR)) {
                    startAnimation(439);
                    hitDiff = 5 + misc.random(50);
                    castOnPlayer.inCombat();
                    castOnPlayer.burst();
                    castOnPlayer.PoisonPlayer();
                    inCombat();
                    actionTimer = 10;
                    stillgfx(76, castOnPlayer.absY - 1, castOnPlayer.absX);
                    stillgfx(76, castOnPlayer.absY + 1, castOnPlayer.absX);
                    stillgfx(76, castOnPlayer.absY, castOnPlayer.absX - 1);
                    stillgfx(76, castOnPlayer.absY, castOnPlayer.absX + 1);
                    stillgfx(547, castOnPlayer.absY, castOnPlayer.absX);
                    castOnPlayer.sendMessage("Pwnt!");
                    deleteItem(560, getItemSlot(560), 4);
                    deleteItem(565, getItemSlot(565), 2);
                    deleteItem(554, getItemSlot(555), 6);
                    teleportToX = absX;
                    teleportToY = absY;
                } else if (playerLevel[6] <= 1) {
                    sendMessage("You need to be An Admin to cast this spell!");
                }
            }

            if (spellID == 12037) // ULTIMATE SPELL!!!! SLAYER DART!!! OWNER ONLY!
            {
                if (!rights.inherits(Rights.ADMINISTRATOR)) {
                    sendMessage("You need Owner priveleges to cast this spell!");
                } else if (rights.inherits(Rights.ADMINISTRATOR)) {
                    startAnimation(2927);
                    hitDiff = 5 + misc.random(80);
                    castOnPlayer.inCombat();
                    castOnPlayer.rapture();
                    castOnPlayer.PoisonPlayer();
                    inCombat();
                    actionTimer = 10;
                    attackPlayersWithin(437, 10, 10);
                    stillgfx(572, absY, absX); // Hole in ground
                    stillgfx(571, absY, absX); // Dust storm
                    stillgfx(582, castOnPlayer.absY + 1, castOnPlayer.absX + 1);
                    stillgfx(498, castOnPlayer.absY + 4, castOnPlayer.absX - 1); // 498 = Fireball
                    stillgfx(
                            498, castOnPlayer.absY - 4, castOnPlayer.absX + 1);
                    stillgfx(498, castOnPlayer.absY + 1, castOnPlayer.absX + 4);
                    stillgfx(498, castOnPlayer.absY - 1, castOnPlayer.absX - 4);
                    stillgfx(498, castOnPlayer.absY, castOnPlayer.absX - 4);
                    stillgfx(498, castOnPlayer.absY, castOnPlayer.absX + 4);
                    stillgfx(498, castOnPlayer.absY + 4, castOnPlayer.absX);
                    stillgfx(498, castOnPlayer.absY - 4, castOnPlayer.absX);
                    stillgfx(547, castOnPlayer.absY + 1, castOnPlayer.absX - 1); // 547 = Exploding bomb with smoke
                    stillgfx(
                            547, castOnPlayer.absY - 1, castOnPlayer.absX + 1);
                    stillgfx(547, castOnPlayer.absY + 1, castOnPlayer.absX + 1);
                    stillgfx(547, castOnPlayer.absY - 1, castOnPlayer.absX - 1);
                    stillgfx(437, castOnPlayer.absY, castOnPlayer.absX - 1); // 437 = Retribution
                    stillgfx(437, castOnPlayer.absY, castOnPlayer.absX + 1);
                    stillgfx(437, castOnPlayer.absY + 1, castOnPlayer.absX);
                    stillgfx(437, castOnPlayer.absY - 1, castOnPlayer.absX);
                    stillgfx(287, castOnPlayer.absY, castOnPlayer.absX); // 287 = HUGE Explosion
                    stillgfx(287, castOnPlayer.absY + 3, castOnPlayer.absX);
                    stillgfx(287, castOnPlayer.absY - 3, castOnPlayer.absX);
                    stillgfx(287, castOnPlayer.absY, castOnPlayer.absX + 3);
                    stillgfx(287, castOnPlayer.absY, castOnPlayer.absX - 3);
                    stillgfx(287, castOnPlayer.absY + 2, castOnPlayer.absX - 2);
                    stillgfx(287, castOnPlayer.absY - 2, castOnPlayer.absX + 2);
                    stillgfx(287, castOnPlayer.absY + 2, castOnPlayer.absX + 2);
                    stillgfx(287, castOnPlayer.absY - 2, castOnPlayer.absX - 2);
                    // Flames
                    stillgfx(453, castOnPlayer.absY + 1, castOnPlayer.absX - 1);
                    stillgfx(453, castOnPlayer.absY - 1, castOnPlayer.absX + 1);
                    stillgfx(453, castOnPlayer.absY + 1, castOnPlayer.absX + 1);
                    stillgfx(453, castOnPlayer.absY - 1, castOnPlayer.absX - 1);
                    stillgfx(453, castOnPlayer.absY, castOnPlayer.absX - 1);
                    stillgfx(453, castOnPlayer.absY, castOnPlayer.absX + 1);
                    stillgfx(453, castOnPlayer.absY + 1, castOnPlayer.absX);
                    stillgfx(453, castOnPlayer.absY - 1, castOnPlayer.absX);
                    stillgfx(453, castOnPlayer.absY + 2, castOnPlayer.absX - 2);
                    stillgfx(453, castOnPlayer.absY - 2, castOnPlayer.absX + 2);
                    stillgfx(453, castOnPlayer.absY + 2, castOnPlayer.absX + 2);
                    stillgfx(453, castOnPlayer.absY - 2, castOnPlayer.absX - 2);
                    stillgfx(453, castOnPlayer.absY, castOnPlayer.absX - 2);
                    stillgfx(453, castOnPlayer.absY, castOnPlayer.absX + 2);
                    stillgfx(453, castOnPlayer.absY + 2, castOnPlayer.absX);
                    stillgfx(453, castOnPlayer.absY - 2, castOnPlayer.absX);
                    stillgfx(453, castOnPlayer.absY, castOnPlayer.absX - 3);
                    stillgfx(453, castOnPlayer.absY, castOnPlayer.absX + 3);
                    stillgfx(453, castOnPlayer.absY + 3, castOnPlayer.absX);
                    stillgfx(453, castOnPlayer.absY - 3, castOnPlayer.absX);
                    stillgfx(453, castOnPlayer.absY + 1, castOnPlayer.absX - 2);
                    stillgfx(453, castOnPlayer.absY - 1, castOnPlayer.absX + 2);
                    stillgfx(453, castOnPlayer.absY + 1, castOnPlayer.absX + 2);
                    stillgfx(453, castOnPlayer.absY - 1, castOnPlayer.absX - 2);
                    stillgfx(453, castOnPlayer.absY + 2, castOnPlayer.absX - 1);
                    stillgfx(453, castOnPlayer.absY - 2, castOnPlayer.absX + 1);
                    stillgfx(453, castOnPlayer.absY + 2, castOnPlayer.absX + 1);
                    stillgfx(453, castOnPlayer.absY - 2, castOnPlayer.absX - 1);
                    stillgfx(453, castOnPlayer.absY + 1, castOnPlayer.absX - 3);
                    stillgfx(453, castOnPlayer.absY - 1, castOnPlayer.absX + 3);
                    stillgfx(453, castOnPlayer.absY + 1, castOnPlayer.absX + 3);
                    stillgfx(453, castOnPlayer.absY - 1, castOnPlayer.absX - 3);
                    stillgfx(453, castOnPlayer.absY + 3, castOnPlayer.absX - 1);
                    stillgfx(453, castOnPlayer.absY - 3, castOnPlayer.absX + 1);
                    stillgfx(453, castOnPlayer.absY + 3, castOnPlayer.absX + 1);
                    stillgfx(453, castOnPlayer.absY - 3, castOnPlayer.absX - 1);
                    castOnPlayer.sendMessage("HOLY SHIT!!!!!!!!!!!!!!!!");
                    castOnPlayer.sendMessage("YOU GOT FUCKIN PWNZORD!!!!!!!");
                    deleteItem(560, getItemSlot(560), 4);
                    deleteItem(565, getItemSlot(565), 2);
                    deleteItem(554, getItemSlot(555), 6);
                    teleportToX = absX;
                    teleportToY = absY;
                } else if (playerLevel[6] <= 1) {
                    sendMessage("You need to be Owner to cast this spell!");
                }
            }

            if (spellID == 12929) // blood barrage (lvl 92 spell)
            {
                if (playerLevel[6] >= 92) {
                    if ((!playerHasItemAmount(560, 30))
                            || (!playerHasItemAmount(565, 30))
                            || (!playerHasItemAmount(566, 10))) {
                        sendMessage(
                                "You do not have enough runes to cast this spell.");
                        sendMessage(
                                "You need 30 " + getItemName(560) + ", 30 "
                                        + getItemName(565) + " and 10 "
                                        + getItemName(566));
                    } else if ((playerHasItemAmount(560, 30))
                            && (playerHasItemAmount(565, 30))
                            && (playerHasItemAmount(566, 10))) {
                        startAnimation(1979);
                        attackPlayersWithin(377, 39, 10);
                        hitDiff = 6 + misc.random(24);
                        NewHP += hitDiff / 2;
                        if (NewHP > getLevelForXP(playerXP[3])) {
                            NewHP = getLevelForXP(playerXP[3]);
                        }
                        updateRequired = true;
                        castOnPlayer.inCombat();
                        inCombat();
                        PkingDelay = 15;
                        castOnPlayer.sendMessage("Your life has been drained!");
                        sendMessage(
                                "You drain the enemys life and add it to yours.");
                        deleteItem(560, getItemSlot(560), 30);
                        deleteItem(565, getItemSlot(565), 30);
                        deleteItem(566, getItemSlot(566), 10);
                        teleportToX = absX;
                        teleportToY = absY;
                    }
                } else if (playerLevel[6] <= 92) {
                    sendMessage(
                            "You need a magic level of 92 to cast this spell.");
                }
            }
            if (spellID == 13023) // shadow barrage (lvl 88 spell)
            {
                if (playerLevel[6] >= 88) {
                    if ((!playerHasItemAmount(560, 10))
                            || (!playerHasItemAmount(565, 5))
                            || (!playerHasItemAmount(556, 10))) {
                        sendMessage(
                                "You do not have enough runes to cast this spell.");
                        sendMessage(
                                "You need 10 " + getItemName(560) + ", 5 "
                                        + getItemName(565) + " and 10 "
                                        + getItemName(556));
                    } else if ((playerHasItemAmount(560, 10))
                            && (playerHasItemAmount(565, 5))
                            && (playerHasItemAmount(556, 10))) {
                        startAnimation(1979);
                        attackPlayersWithin(382, 39, 10);
                        hitDiff = 9 + misc.random(21);
                        heal = 10;
                        playerLevel[3] += heal;
                        updateRequired = true;
                        hitUpdateRequired = true;
                        PkingDelay = 25;
                        deleteItem(560, getItemSlot(560), 10);
                        deleteItem(565, getItemSlot(565), 5);
                        deleteItem(556, getItemSlot(556), 10);
                        deleteItem(566, getItemSlot(566), 10);
                        teleportToX = absX;
                        teleportToY = absY;
                    }
                } else if (playerLevel[6] <= 88) {
                    sendMessage(
                            "You need a magic level of 88 to cast this spell.");
                }
            }

            if (spellID == 12871) // ice blitz (lvl 82 spell)
            {
                if (playerLevel[6] >= 89) {
                    if ((!playerHasItemAmount(560, 20))
                            || (!playerHasItemAmount(565, 10))
                            || (!playerHasItemAmount(555, 30))) {
                        sendMessage(
                                "You do not have enough runes to cast this spell.");
                        sendMessage(
                                "You need 20 " + getItemName(560) + ", 10 "
                                        + getItemName(565) + " and 30 "
                                        + getItemName(555));
                    } else if ((playerHasItemAmount(560, 20))
                            && (playerHasItemAmount(565, 10))
                            && (playerHasItemAmount(555, 30))) {
                        startAnimation(1978);
                        hitDiff = 6 + misc.random(20);
                        castOnPlayer.entangle();
                        castOnPlayer.inCombat();
                        inCombat();
                        stillgfx(368, absY, absX);
                        stillgfx(367, castOnPlayer.absY, castOnPlayer.absX);
                        castOnPlayer.sendMessage("You are frozen!");
                        deleteItem(560, getItemSlot(560), 20);
                        deleteItem(565, getItemSlot(565), 10);
                        deleteItem(555, getItemSlot(555), 30);
                        teleportToX = absX;
                        teleportToY = absY;
                    }
                } else if (playerLevel[6] <= 89) {
                    sendMessage(
                            "You need a magic level of 90 to cast this spell.");
                }
            }

            if (spellID == 12911) // blood blitz (lvl 80 spell)
            {
                if (playerLevel[6] >= 81) {
                    if ((!playerHasItemAmount(560, 20))
                            || (!playerHasItemAmount(565, 30))) {
                        sendMessage(
                                "You need 20 " + getItemName(560) + " and 30 "
                                        + getItemName(565));
                    } else if ((playerHasItemAmount(560, 20))
                            && (playerHasItemAmount(565, 30))) {
                        startAnimation(1978);
                        hitDiff = 6 + misc.random(24);
                        NewHP += hitDiff;
                        if (NewHP > getLevelForXP(playerXP[3])) {
                            NewHP = getLevelForXP(playerXP[3]);
                        }
                        updateRequired = true;
                        castOnPlayer.inCombat();
                        inCombat();
                        sendMessage(
                                "You drain the enemys life and add it to yours");
                        castOnPlayer.sendMessage("Your life is drained!");
                        PkingDelay = 25;
                        deleteItem(560, getItemSlot(560), 20);
                        deleteItem(565, getItemSlot(565), 30);
                        teleportToX = absX;
                        teleportToY = absY;
                    }
                } else if (playerLevel[6] <= 81) {
                    sendMessage(
                            "You need a magic level of 82 to cast this spell.");
                }
            }
            // end of ancients, now for modern magic - sgsrocks

            if (spellID == 1592) // entangle (lvl 79 spell)
            {
                if (playerLevel[6] >= 78) {
                    if ((!playerHasItemAmount(561, 8))
                            || (!playerHasItemAmount(557, 10))
                            || (!playerHasItemAmount(555, 10))) {
                        sendMessage(
                                "You do not have enough runes to cast this spell.");
                        sendMessage(
                                "You need 8 " + getItemName(561) + ", 10 "
                                        + getItemName(557) + " and 10 "
                                        + getItemName(555));
                    } else if ((playerHasItemAmount(561, 8))
                            && (playerHasItemAmount(557, 10))
                            && (playerHasItemAmount(555, 10))) {
                        stillgfx(179, castOnPlayer.absY, castOnPlayer.absX);
                        castOnPlayer.entangle();
                        castOnPlayer.inCombat();
                        inCombat();
                        startAnimation(711);
                        PkingDelay = 40;
                        deleteItem(561, getItemSlot(561), 8);
                        deleteItem(557, getItemSlot(557), 10);
                        deleteItem(555, getItemSlot(555), 10);
                        teleportToX = absX;
                        teleportToY = absY;
                        castOnPlayer.sendMessage(
                                "A bind spell has been cast upon you!");
                    }
                } else if (playerLevel[6] <= 78) {
                    sendMessage(
                            "You need a magic level of 79 to cast this spell.");
                }
            } else if (spellID == 12445) { // teleblock (lvl 85 spell)
                if (playerLevel[6] >= 85) {
                    startAnimation(1819);
                    castOnPlayer.Teleblock();
                    castOnPlayer.inCombat();
                    inCombat();
                    PkingDelay = 10;
                    teleportToX = absX;
                    teleportToY = absY;
                } else if (playerLevel[6] <= 85) {
                    sendMessage(
                            "You need a magic level of 85 to cast this spell.");
                }
            }
            // end of modern spells - sgsrocks
            // castOnPlayer.currentHealth -= castOnPlayer.hitDiff;
        }
        if ((EnemyHP - hitDiff) < 0) {
            hitDiff = EnemyHP;
        }

        mageXP = (hitDiff * 500);
        addSkillXP(mageXP, 6);
        addSkillXP(hitDiff, 3);

        castOnPlayer.hitDiff = hitDiff;
        castOnPlayer.KillerId = playerId;
        castOnPlayer.updateRequired = true;
        castOnPlayer.hitUpdateRequired = true;
    }

    public boolean AttackNPC() {
        int EnemyX = NPCHandler.npcs[attacknpc].absX;
        int EnemyY = NPCHandler.npcs[attacknpc].absY;
        int EnemyHP = NPCHandler.npcs[attacknpc].HP;
        int hitDiff = 0;
        int Npchitdiff = 0;
        int wepdelay = 0;

        CalculateMaxHit();
        hitDiff = misc.random(playerMaxHit);
        int casterX = absX;
        int casterY = absY;
        int offsetX = (casterX - EnemyX) * -1;
        int offsetY = (casterY - EnemyY) * -1;

        faceUpdate(attacknpc);
        // viewTo(server.npcHandler.npcs[attacknpc].absX, server.npcHandler.npcs[attacknpc].absY);

        if (NPCHandler.npcs[attacknpc].followPlayer < 1
                || NPCHandler.npcs[attacknpc].followPlayer == playerId
                || inwildy2) {
            if (playerEquipment[playerWeapon] == (1333)) // rune scimi here
            {
                PkingDelay = 8;
                actionTimer = 8;
            }

            if (playerEquipment[playerWeapon] == (11235)) {
                if (actionTimer == 0) // dark bow
                {
                    PkingDelay = 8;
                    actionTimer = 8;
                    hitDiff = 4 + misc.random(20);
                }
            }

            if (playerEquipment[playerWeapon] == (4151)) // whip
            {
                PkingDelay = 1;
                wepdelay = 1;
            }

            if (playerEquipment[playerWeapon] == (8447)) // cat toy
            {
                PkingDelay = 1;
                wepdelay = 1;
            }

            if (playerEquipment[playerWeapon] == (4718)) // dharoks axe
            {
                PkingDelay = 16;
                wepdelay = 16;
            }

            if (playerEquipment[playerWeapon] == (746)) // dharoks axe
            {
                PkingDelay = 1;
                wepdelay = 1;
            }

            if (playerEquipment[playerWeapon] == (4587)) // dragon scimmy here
            {
                PkingDelay = 1;
                wepdelay = 1;
            }

            if (playerEquipment[playerWeapon] == (6541)) // dragon scimmy here
            {
                PkingDelay = 1;
                wepdelay = 1;
            }

            if (playerEquipment[playerWeapon] == (1377)) // dragon battleaxe
            {
                PkingDelay = 10;
                wepdelay = 10;
            }

            if (playerEquipment[playerWeapon] == (1373)) // rune battleaxe
            {
                PkingDelay = 10;
                wepdelay = 10;
            }

            if (playerEquipment[playerWeapon] == (1434)) // dragon mace
            {
                PkingDelay = 10;
                wepdelay = 10;
            }

            if (playerEquipment[playerWeapon] == (ItemIDs.DRAGON_2H_SWORD)) // dragon 2h
            {
                PkingDelay = 5;
                wepdelay = 5;
            }

            if (playerEquipment[playerWeapon] == (1319)) // rune 2h
            {
                PkingDelay = 80;
                wepdelay = 80;
            }

            if (playerEquipment[playerWeapon] == (6528)) // obby maul
            {
                PkingDelay = 5;
                wepdelay = 5;
            }

            boolean UseBow = false;

            if (playerEquipment[playerWeapon] == 4214) {
                PkingDelay = 10;
                wepdelay = 10;
                UseBow = true;
                createProjectile(absY, absX, offsetX, offsetY, 50, 80, 249, 43,
                        31, -AttackingOn);
            }

            if (playerEquipment[playerWeapon] == 861) {
                PkingDelay = 5;
                wepdelay = 5;
                UseBow = true;
            }

            if (playerEquipment[playerWeapon] == 859) {
                PkingDelay = 10;
                wepdelay = 10;
                UseBow = true;
            }
            if (playerEquipment[playerWeapon] == 6724) {
                PkingDelay = 10;
                wepdelay = 10;
                UseBow = true;
            }
            if (playerEquipment[playerWeapon] == 839
                    || playerEquipment[playerWeapon] == 841
                    || playerEquipment[playerWeapon] == 843
                    || playerEquipment[playerWeapon] == 845
                    || playerEquipment[playerWeapon] == 847
                    || playerEquipment[playerWeapon] == 849
                    || playerEquipment[playerWeapon] == 851
                    || playerEquipment[playerWeapon] == 853
                    || playerEquipment[playerWeapon] == 855
                    || playerEquipment[playerWeapon] == 857) {
                PkingDelay = 5;
                wepdelay = 5;
                UseBow = true;
            }

            if (UseBow) {
                inCombat();
                teleportToX = absX;
                teleportToY = absY;
                CheckArrows();
                CalculateRange();
                hitDiff = misc.random(15);
            } else {
                PkingDelay = 6;
                wepdelay = 6;
            }

            if (GoodDistance(EnemyX, EnemyY, absX, absY, 1)
                    || playerEquipment[playerWeapon] == 859
                    || playerEquipment[playerWeapon] == 4214
                    || playerEquipment[playerWeapon] == 839
                    || playerEquipment[playerWeapon] == 841
                    || playerEquipment[playerWeapon] == 843
                    || playerEquipment[playerWeapon] == 845
                    || playerEquipment[playerWeapon] == 847
                    || playerEquipment[playerWeapon] == 849
                    || playerEquipment[playerWeapon] == 851
                    || playerEquipment[playerWeapon] == 853
                    || playerEquipment[playerWeapon] == 855
                    || playerEquipment[playerWeapon] == 857
                    || playerEquipment[playerWeapon] == 6724) {
                if (LoopAttDelay <= 1) {
                    if (NPCHandler.npcs[attacknpc].IsDead) {
                    } else if (!UseBow) {
                        // actionAmount++;
                        setAnimation(GetWepAnim());
                        sendSound(soundConfig.getWeaponSounds(this), 100, 0);
                        if ((EnemyHP - hitDiff) < 0) {
                            hitDiff = EnemyHP;
                        }
                        if (usingSpecial) {
                            if (playerEquipment[playerWeapon] == 4151
                                    && specialAmount >= 50) {
                                animation(341, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 746
                                    && specialAmount >= 100) {
                                animation(433, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 11235
                                    && specialAmount >= 50) {
                                calculateSpecial();
                                darkbow();
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 11235
                                    && specialAmount >= 50) {
                                ProjectileSpec(380, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                DDZ();
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 1305
                                    && specialAmount >= 50) {
                                ProjectileSpec(248, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 667
                                    && specialAmount >= 50) {
                                ProjectileSpec(ItemIDs.COPPER_ORE, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 746
                                    && specialAmount >= 50) {
                                ProjectileSpec(ItemIDs.COPPER_ORE, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 14915
                                    && specialAmount >= 50) {
                                ProjectileSpec(282, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 3204
                                    && specialAmount >= 100) {
                                ProjectileSpec(282, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 4587
                                    && specialAmount >= 75) {
                                ProjectileSpec(347, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 6541
                                    && specialAmount >= 75) {
                                ProjectileSpec(347, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 1434
                                    && specialAmount >= 40) {
                                ProjectileSpec(251, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == ItemIDs.DRAGON_2H_SWORD
                                    && specialAmount >= 40) {
                                ProjectileSpec(479, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 5698
                                    && specialAmount >= 25) {
                                ProjectileSpec(252, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                ProjectileSpec(252, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                DDSSpecial();
                                server.npcHandler.PoisonNPC(attacknpc);
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 4153
                                    && specialAmount >= 50) {
                                ProjectileSpec(340, absY, absX, offsetY, offsetX,
                                        AttackingOn, EnemyY, EnemyX);
                                calculateSpecial();
                                maulSpec();
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 6739
                                    && specialAmount >= 100) {
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 282
                                    && specialAmount >= 50) {
                                ProjectileSpec(340, absY, absX, offsetY, offsetX,
                                        AttackingOn, EnemyY, EnemyX);
                                calculateSpecial();
                                hally();
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 861
                                    && specialAmount >= 100) {
                                calculateSpecial();
                                DDZ();
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 13664
                                    && specialAmount >= 50) {
                                calculateSpecial();
                                DCSpec();
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            if (playerEquipment[playerWeapon] == 4755
                                    && specialAmount >= 100
                                    || playerEquipment[playerWeapon]
                                    == 4734
                                    && specialAmount
                                    >= 100
                                    || playerEquipment[playerWeapon]
                                    == 4718
                                    && specialAmount
                                    >= 100
                                    || playerEquipment[playerWeapon]
                                    == 4726
                                    && specialAmount
                                    >= 100
                                    || playerEquipment[playerWeapon]
                                    == 4747
                                    && specialAmount
                                    >= 100
                                    || playerEquipment[playerWeapon]
                                    == 47
                                    && specialAmount
                                    >= 100) {
                                ProjectileSpec(432, absY, absX, offsetY, offsetX,
                                        attacknpc, EnemyY, EnemyX);
                                calculateSpecial();
                                hitDiff = specialDamage;
                                usingSpecial = false;
                                specialDamage = 0;
                                specialDamage2 = 0;
                            }
                            usingSpecial = false;
                            specialDamage = 0;
                            specialDamage2 = 0;
                            specialAttacks();
                            specialAttacks2();
                            specialAttacks3();
                            specialAttacks4();
                            specialAttacks5();
                            specialAttacks6();
                        }
                        LoopAttDelay = PkingDelay;
                        NPCHandler.npcs[attacknpc].hitDiff = hitDiff;
                        NPCHandler.npcs[attacknpc].Killing[playerId] += hitDiff;
                        NPCHandler.npcs[attacknpc].updateRequired = true;
                        NPCHandler.npcs[attacknpc].hitUpdateRequired = true;
                        double TotalExp = 0;

                        inCombat();
                        if (FightType == 1) // Accurate
                        {
                            TotalExp = Config.EXP_RATE * hitDiff;
                            TotalExp = TotalExp * CombatExpRate;
                            addSkillXP((int) (TotalExp), playerAttack);
                            refreshSkill(FightType);
                            refreshSkill(3);
                        } else if (FightType == 2) // Agressive
                        {
                            TotalExp = Config.EXP_RATE * hitDiff;
                            TotalExp = TotalExp * CombatExpRate;
                            addSkillXP((int) (TotalExp), playerStrength);
                            refreshSkill(FightType);
                            refreshSkill(3);
                        } else if (FightType == 4) // Defensive
                        {
                            TotalExp = Config.EXP_RATE * hitDiff;
                            TotalExp = TotalExp * CombatExpRate;
                            addSkillXP((int) (TotalExp), playerDefence);
                            refreshSkill(FightType);
                            refreshSkill(3);
                        } else if (FightType == 3) // Controlled
                        {
                            TotalExp = Config.EXP_RATE * hitDiff;
                            TotalExp = TotalExp * CombatExpRate;
                            addSkillXP((TotalExp), 3);
                            addSkillXP((TotalExp), 0);
                            addSkillXP((TotalExp), 1);
                            addSkillXP((TotalExp), 2);
                            refreshSkill(0);
                            refreshSkill(1);
                            refreshSkill(2);
                            refreshSkill(3);
                        }
                        TotalExp = Config.EXP_RATE * hitDiff;
                        TotalExp = TotalExp * CombatExpRate;
                        addSkillXP((int) (TotalExp), playerHitpoints);
                        refreshSkill(3);
                        actionTimer = 7;
                       sendSound(server.npcHandler.getNpcBlockSound(NPCHandler.npcs[attacknpc].npcType), 100, 0);
                        NPCHandler.npcs[attacknpc].animNumber = server.npcHandler.GetNPCBlockAnim(
                                NPCHandler.npcs[attacknpc].npcType);
                    } else if (UseBow) {
                        if (!HasArrows) {
                            sendMessage("There's no arrows left in your quiver");
                        } else if (HasArrows) {
                            LoopAttDelay = PkingDelay;
                            DeleteArrow();
                            if (playerEquipment[playerWeapon] != 4214
                                    && playerEquipmentN[playerArrows] != 0) {
                                ItemHandler.addItem(
                                        playerEquipment[playerArrows], EnemyX,
                                        EnemyY, 1, playerId, false);
                            }
                            setAnimation(426);
                            NPCHandler.npcs[attacknpc].hitDiff = hitDiff;
                            NPCHandler.npcs[attacknpc].Killing[playerId] += hitDiff;
                            NPCHandler.npcs[attacknpc].updateRequired = true;
                            NPCHandler.npcs[attacknpc].hitUpdateRequired = true;
                            double TotalExp = 0;

                            TotalExp = 205 * hitDiff;
                            TotalExp = TotalExp * CombatExpRate;
                            addSkillXP((int) (TotalExp), playerRanged);
                            TotalExp = 375 * hitDiff;
                            TotalExp = TotalExp * CombatExpRate;
                            addSkillXP((int) (TotalExp), playerHitpoints);
                            inCombat();
                            teleportToX = absX;
                            teleportToY = absY;
                            actionTimer = AnimationLength.getFrameLength(GetWepAnim());
                            NPCHandler.npcs[attacknpc].animNumber = server.npcHandler.GetNPCBlockAnim(
                                    NPCHandler.npcs[attacknpc].npcType);
                        }
                    }

                    return true;
                }
            }
        } else {
            sendMessage("You can't attack a player's summoned npc!");
        }
        return false;
    }

    public boolean ResetAttackNPC() {
        if (attacknpc > -1 && attacknpc < NPCHandler.maxNPCs) {
            NPCHandler.npcs[attacknpc].IsUnderAttack = false;
        }
        IsAttackingNPC = false;
        attacknpc = -1;
        resetAnimation();
        playerStandIndex = GetStandAnim(playerEquipment[playerWeapon]);
        face = 65535;
        faceUpdateRequired = true;
        return true;
    }

    public boolean ResetAttackNPC2() {
        IsAttackingNPC = false;
        attacknpc = -1;
        resetAnimation();
        playerStandIndex = playerStandIndex;
        face = 65535;
        faceUpdateRequired = true;
        return true;
    }

    public void ManipulateDirection() {
        // playerMD = misdirection(absX, absY, skillX, skillY);
        if (playerMD != -1) {
            // playerMD >>= 1;
            updateRequired = true;
            dirUpdateRequired = true;
        }
    }

    public int GetNPCID(int coordX, int coordY) {
        for (int i = 0; i < NPCHandler.maxNPCs; i++) {
            if (NPCHandler.npcs[i] != null) {
                if (NPCHandler.npcs[i].absX == coordX
                        && NPCHandler.npcs[i].absY == coordY) {
                    return NPCHandler.npcs[i].npcType;
                }
            }
        }
        return 1;
    }

    public String GetNpcName(int NpcID) {
        for (int i = 0; i < NPCHandler.maxListedNPCs; i++) {
            if (server.npcHandler.NpcList[i] != null) {
                if (server.npcHandler.NpcList[i].npcId == NpcID) {
                    return server.npcHandler.NpcList[i].npcName;
                }
            }
        }
        return "!! NOT EXISTING NPC !!! - ID:" + NpcID;
    }

    public String GetItemName(int ItemID) {
        for (int i = 0; i < ItemHandler.MaxListedItems; i++) {
            if (server.itemHandler.ItemList[i] != null) {
                if (server.itemHandler.ItemList[i].itemId == ItemID) {
                    return server.itemHandler.ItemList[i].itemName;
                }
                if (ItemID == -1) {
                    return "Unarmed";
                }
            }
        }
        return "!! NOT EXISTING ITEM !!! - ID:" + ItemID;
    }

    public String getItemName(int ItemID) {
        for (int i = 0; i < ItemHandler.MaxListedItems; i++) {
            if (server.itemHandler.ItemList[i] != null) {
                if (server.itemHandler.ItemList[i].itemId == ItemID) {
                    return server.itemHandler.ItemList[i].itemName;
                }
                if (ItemID == -1) {
                    return "Unarmed";
                }
            }
        }
        return "!! NOT EXISTING ITEM !!! - ID:" + ItemID;
    }

    public double GetItemShopValue(int ItemID, int Type, int fromSlot) {
        double ShopValue = 1;
        double Overstock = 0;
        double TotPrice = 0;

        for (int i = 0; i < ItemHandler.MaxListedItems; i++) {
            if (server.itemHandler.ItemList[i] != null) {
                if (server.itemHandler.ItemList[i].itemId == ItemID) {
                    ShopValue = server.itemHandler.ItemList[i].ShopValue;
                }
            }
        }

        /* Overstock = server.shopHandler.ShopItemsN[MyShopID][fromSlot] - server.shopHandler.ShopItemsSN[MyShopID][fromSlot];*/
        TotPrice = (ShopValue
                * 1); // Calculates price for 1 item, in db is stored for 0 items (strange but true)

        /* if (Overstock > 0 && TotPrice > 1) { //more then default -> cheaper
         TotPrice -= ((ShopValue / 100) * (1 * Overstock));
         } else if (Overstock > 0 && TotPrice < 1) { //more then default -> cheaper
         TotPrice = ((ShopValue / 100) * (1 * Overstock));
         } else if (Overstock < 0) { //less then default -> exspensive
         TotPrice += ((ShopValue / 100) * (1 * Overstock));
         }*/
        if (ShopHandler.ShopBModifier[MyShopID] == 1) {
            TotPrice *= 1; // 25% more expensive (general stores only)
            if (Type == 1) {
                TotPrice *= 1; // general store buys item at 40% of its own selling value
            }
        } else if (Type == 1) {
            TotPrice *= 1; // other stores buy item at 60% of their own selling value
        }
        return TotPrice;
    }

    public int GetUnnotedItem(int ItemID) {
        int NewID = 0;
        String NotedName = "";

        for (int i = 0; i < ItemHandler.MaxListedItems; i++) {
            if (server.itemHandler.ItemList[i] != null) {
                if (server.itemHandler.ItemList[i].itemId == ItemID) {
                    NotedName = server.itemHandler.ItemList[i].itemName;
                }
            }
        }
        for (int i = 0; i < ItemHandler.MaxListedItems; i++) {
            if (server.itemHandler.ItemList[i] != null) {
                if (server.itemHandler.ItemList[i].itemName == NotedName) {
                    if (!server.itemHandler.ItemList[i].itemDescription.startsWith(
                            "Swap this note at any bank for a")) {
                        NewID = server.itemHandler.ItemList[i].itemId;
                        break;
                    }
                }
            }
        }
        return NewID;
    }

    public void WriteEnergy() {
        if (getRights().isPlayer() && playerEnergy > 100) {
            playerEnergy = 100;
        }
        //sendFrame126("", 149);
    }

    public void appendPos() {
        try {
            sendQuest("@whi@X: " + absX + " Y: " + absY, 184);
            sendQuest("       @bla@Coords", 183);
        } catch (Exception e) {
            println_debug("Error");
        }
    }

    public void ResetBonus() {
        for (int i = 0; i < playerBonus.length; i++) {
            playerBonus[i] = 0;
        }
    }

    public void GetBonus() {
        for (int i = 0; i < playerEquipment.length; i++) {
            if (playerEquipment[i] > -1) {
                for (int j = 0; j < 25000; j++) {
                    if (server.itemHandler.ItemList[j] != null) {
                        if (server.itemHandler.ItemList[j].itemId
                                == playerEquipment[i]) {
                            for (int k = 0; k < playerBonus.length; k++) {
                                playerBonus[k] += server.itemHandler.ItemList[j].Bonuses[k];
                            }
                            break;
                        }
                    }
                }
            }
        }
    }

    public void WriteBonus() {
        int offset = 0;

        sendFrame126(BonusName[0] + ": " + playerBonus[0], 19040);
        sendFrame126(BonusName[1] + ": " + playerBonus[1], 19043);
        sendFrame126(BonusName[2] + ": " + playerBonus[2], 19044);
        sendFrame126(BonusName[3] + ": " + playerBonus[3], 19045);
        sendFrame126(BonusName[4] + ": " + playerBonus[4], 19046);
        sendFrame126("Defence bonus", 19047);
        sendFrame126(BonusName[5] + ": " + playerBonus[5], 19048);
        sendFrame126(BonusName[6] + ": " + playerBonus[6], 19049);
        sendFrame126(BonusName[7] + ": " + playerBonus[7], 19050);
        sendFrame126(BonusName[8] + ": " + playerBonus[8], 19051);
        sendFrame126(BonusName[9] + ": " + playerBonus[9], 19052);
        sendFrame126(BonusName[10] + ": " + playerBonus[10], 19054);
        sendFrame126(BonusName[11] + ": " + playerBonus[11], 19055);
        CalculateMaxHit();

        /* for (int i = 4000; i <= 7000; i++) {
         sendFrame126("T"+i, i);
         println_debug("Sended: Test"+i);
         }*/// USED FOR TESTING INTERFACE NUMBERS !
    }

    public void CalculateMaxHit() {

        /* max hits fixed by anarchy*/
        double MaxHit = 0;
        int StrBonus = playerBonus[10]; // Strength Bonus
        int Strength = playerLevel[playerStrength]; // Strength

        if (FightType == 1 || FightType == 4) { // Accurate & Defensive
            MaxHit += (((double) StrBonus + Strength)
                    / 6.8275862068965517241379310344828);
        } else if (FightType == 2) { // Aggresive
            MaxHit += (((double) StrBonus + Strength)
                    / 6.65517241379310341123558620689655);
        } else if (FightType == 3) { // Controlled
            MaxHit += (((double) StrBonus + Strength)
                    / 6.75862068965517241379310341123559);
        }
        if (StrPotion == 1) { // Strength Potion
            MaxHit += Strength * 0.0014;
        } else if (StrPotion == 2) { // Super Strength Potion
            MaxHit += Strength * 0.0205;
        }
        if (StrPrayer == 1) { // Burst Of Strength
            MaxHit += Strength * 0.005;
        } else if (StrPrayer == 2) { // Super Human Strength
            MaxHit += Strength * 0.01;
        } else if (StrPrayer == 3) { // Ultimate Strength
            MaxHit += Strength * 0.015;
        }
        if (FullDharokEquipped()) {
            MaxHit += (getLevelForXP(playerXP[playerHitpoints])
                    - playerLevel[playerHitpoints])
                    / 2;
        }
        playerMaxHit = (int) Math.floor(MaxHit);
    }

    public boolean FullDharokEquipped() {
        return playerEquipment[playerHat] == 4716
                && playerEquipment[playerChest] == 4720
                && playerEquipment[playerLegs] == 4722
                && playerEquipment[playerWeapon] == 4718;

    }

    public boolean FullGuthanEquipped() {
        return playerEquipment[playerHat] == 4724
                && playerEquipment[playerChest] == 4728
                && playerEquipment[playerLegs] == 4730
                && playerEquipment[playerWeapon] == 4726;
    }

    public void CalculateRange() {
        double MaxHit = 0;
        int RangeBonus = playerBonus[5]; // Range Bonus
        int Range = playerLevel[4]; // Range
        {
            MaxHit += 1.05
                    + ((double) (RangeBonus * Range) * 0.00175);
        }
        MaxHit += Range * 0.1;
        playerMaxHit = (int) Math.floor(MaxHit);
    }

    public boolean GoodDistance(int objectX, int objectY, int playerX, int playerY, int distance) {
        for (int i = 0; i <= distance; i++) {
            for (int j = 0; j <= distance; j++) {
                if ((objectX + i) == playerX
                        && ((objectY + j) == playerY || (objectY - j) == playerY
                        || objectY == playerY)) {
                    return true;
                } else if ((objectX - i) == playerX
                        && ((objectY + j) == playerY || (objectY - j) == playerY
                        || objectY == playerY)) {
                    return true;
                } else if (objectX == playerX
                        && ((objectY + j) == playerY || (objectY - j) == playerY
                        || objectY == playerY)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean GoodDistance2(int objectX, int objectY, int playerX, int playerY, int distance) {
        for (int i = 0; i <= distance; i++) {
            for (int j = 0; j <= distance; j++) {
                if (objectX == playerX
                        && ((objectY + j) == playerY || (objectY - j) == playerY
                        || objectY == playerY)) {
                    return true;
                } else if (objectY == playerY
                        && ((objectX + j) == playerX || (objectX - j) == playerX
                        || objectX == playerX)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean CheckObjectSkill(int objectID) {
        boolean GoFalse = false;

        switch (objectID) {

        /*

         WOODCUTTING

         */

        /* case 1276:
         case 1277:
         case 1278:
         case 1279:
         case 1280:
         case 1330:
         case 1332:
         case 2409:
         case 3033:
         case 3034:
         case 3035:
         case 3036:
         case 3879:
         case 3881:
         case 3882:
         case 3883: //Normal Tree
         case 1315:
         case 1316:
         case 1318:
         case 1319: //Evergreen
         case 1282:
         case 1283:
         case 1284:
         case 1285:
         case 1286:
         case 1287:
         case 1289:
         case 1290:
         case 1291:
         case 1365:
         case 1383:
         case 1384:
         case 5902:
         case 5903:
         case 5904: //Dead Tree
         woodcutting[0] = 1;
         woodcutting[1] = 1;
         woodcutting[2] = 25;
         woodcutting[4] = 1511;
         break;
         case 2023: //Achey Tree
         woodcutting[0] = 2;
         woodcutting[1] = 1;
         woodcutting[2] = 25;
         woodcutting[4] = 2862;
         break;
         case 1281:
         case 3037: //Oak Tree
         woodcutting[0] = 3;
         woodcutting[1] = 15;
         if (misc.random(2) == 1) {
         woodcutting[2] = 37;
         } else {
         woodcutting[2] = 38;
         }
         woodcutting[4] = 1521;
         break;
         case 1308:
         case 5551:
         case 5552:
         case 5553: //Willow Tree
         woodcutting[0] =4;
         woodcutting[1] = 30;
         if (misc.random(2) == 1) {
         woodcutting[2] = 67;
         } else {
         woodcutting[2] = 68;
         }
         woodcutting[4] = 1519;
         break;
         case 9036: //Teak Tree
         woodcutting[0] = 5;
         woodcutting[1] = 35;
         woodcutting[2] = 85;
         woodcutting[4] = 6333;
         break;
         case 1292: //Dramen Tree
         woodcutting[0] = 5;
         woodcutting[1] = 36;
         woodcutting[2] = 0;
         woodcutting[4] = 771;
         break;
         case 1307:
         case 4674: //Maple Tree
         woodcutting[0] = 6;
         woodcutting[1] = 45;
         woodcutting[2] = 100;
         woodcutting[4] = 1517;
         break;
         case 2289:
         case 4060: //Hollow Tree
         woodcutting[0] = 7;
         woodcutting[1] = 45;
         if (misc.random(2) == 1) {
         woodcutting[2] = 82;
         } else {
         woodcutting[2] = 83;
         }
         woodcutting[4] = 3239;
         break;
         case 9034: //Mahogany Tree
         woodcutting[0] = 8;
         woodcutting[1] = 50;
         woodcutting[2] = 125;
         woodcutting[4] = 4445;
         break;
         case 1309: //Yew Tree
         woodcutting[0] = 9;
         woodcutting[1] = 60;
         woodcutting[2] = 175;
         woodcutting[4] = 1515;
         woodcutting[5] = 3;
         break;
         case 1306: //Magic Tree
         woodcutting[0] = 10;
         woodcutting[1] = 75;
         woodcutting[2] = 250;
         woodcutting[4] = 1513;
         break;*/

        /*
         MINING

         */

            default:

                break;
        }
        return false;
    }

    /* COOKING*/
    public boolean cooking() {
        if (playerLevel[playerCooking] >= cooking[1]) {
            if (actionTimer == 0 && cooking[0] == 1
                    && playerEquipment[playerWeapon] >= 0) {
                actionAmount++;
                actionTimer = 4;
                OriginalShield = playerEquipment[playerShield];
                OriginalWeapon = playerEquipment[playerWeapon];
                playerEquipment[playerShield] = -1;
                playerEquipment[playerWeapon] = -1;
                setAnimation(0x380);
                cooking[0] = 2;
            }
            if (actionTimer == 0 && cooking[0] == 2) {
                deleteItem(cooking[5], GetItemSlot(cooking[5]), 1);
                int Discount = 0;

                if (playerEquipment[playerHands] == 775) { // Cooking hauntlets
                    Discount = 10;
                }
                int StopBurnLevel = ((cooking[1] + 35) - Discount);

                if (StopBurnLevel > playerLevel[playerCooking]
                        && misc.random2(StopBurnLevel)
                        <= misc.random2(StopBurnLevel)) {
                    addItem(cooking[6], 1);
                    sendMessage(
                            "You burned the " + GetItemName(cooking[5]) + ".");
                } else {
                    addItem(cooking[4], 1);
                    addSkillXP((cooking[2] * cooking[3]), playerCooking);
                    sendMessage(
                            "You cooked the " + GetItemName(cooking[5]) + ".");
                }
                playerEquipment[playerWeapon] = OriginalWeapon;
                playerEquipment[playerShield] = OriginalShield;
                OriginalWeapon = -1;
                OriginalShield = -1;
                resetAnimation();
                resetCO();
            }
        } else {
            sendMessage(
                    "You need " + cooking[1] + " " + statName[playerCooking]
                            + " to cook this " + GetItemName(cooking[5]) + ".");
            resetCO();
            return false;
        }
        return true;
    }

    public boolean resetCO() {
        cooking[0] = 0;
        cooking[1] = 0;
        cooking[2] = 0;
        cooking[4] = -1;
        IsUsingSkill = false;
        return true;
    }

    /* CRAFTING*/
    public void CheckDyeCape() {
        boolean GoOn = true;
        int CapeXP = 0;
        int NewCape = -1;

        switch (useitems[0]) {
            case 1763: // red dye
                NewCape = 1007;
                CapeXP = 2;

            case 1767: // blue dye
                NewCape = 1021;
                CapeXP = 2;

            case 1765: // yellow dye
                NewCape = 1023;
                CapeXP = 2;

            case 1771: // green dye
                NewCape = 1027;
                CapeXP = 3;

            case 1773: // purple dye
                NewCape = 1029;
                CapeXP = 3;

            case 1769: // orange dye
                NewCape = 1031;
                CapeXP = 3;

            default:
                sendMessage("Nothing interesting is happening.");
                GoOn = false;
                break;
        }
        if (GoOn) {
            deleteItem(useitems[0], useitems[3], playerItemsN[useitems[3]]);
            deleteItem(useitems[1], useitems[2], playerItemsN[useitems[2]]);
            addItem(NewCape, 1);
            addSkillXP((CapeXP * crafting[3]), playerCrafting);
        }
    }

    public void CheckCuttingGem() {
        boolean GoOn = true;

        switch (useitems[1]) {
            case 1617: // uncut diamond
                crafting[1] = 43;
                if (misc.random2(2) == 1) {
                    crafting[2] = 107;
                } else {
                    crafting[2] = 108;
                }
                break;

            case 1619: // uncut ruby
                crafting[1] = 34;
                crafting[2] = 85;
                break;

            case 1621: // uncut emerald
                crafting[1] = 27;
                if (misc.random2(2) == 1) {
                    crafting[2] = 67;
                } else {
                    crafting[2] = 68;
                }
                break;

            case 1623: // uncut sapphire
                crafting[1] = 20;
                crafting[2] = 50;
                break;

            case 1625: // uncut opal
                if (misc.random2(2) == 1) {
                    crafting[4] = 1633;
                }
                crafting[1] = 1;
                crafting[2] = 15;
                break;

            case 1627: // uncut jada
                if (misc.random2(2) == 1) {
                    crafting[4] = 1633;
                }
                crafting[1] = 13;
                crafting[2] = 20;
                break;

            case 1629: // uncut red topaz
                if (misc.random2(2) == 1) {
                    crafting[4] = 1633;
                }
                crafting[1] = 16;
                crafting[2] = 25;
                break;

            case 1631: // uncut dragonstone
                crafting[1] = 55;
                if (misc.random2(2) == 1) {
                    crafting[2] = 127;
                } else {
                    crafting[2] = 128;
                }
                break;

            default:
                sendMessage("Nothing interesting is happening.");
                GoOn = false;
                break;
        }
        if (GoOn) {
            crafting[0] = 1;
            if (crafting[4] == -1) {
                crafting[4] = (useitems[1] - 16); // 16 item id's lower is the cutted gem.
            }
        }
    }

    public boolean crafting() {
        if (playerLevel[playerCrafting] >= crafting[1]
                && playerEquipment[playerWeapon] >= 0) {
            if (actionTimer == 0 && crafting[0] == 1) {
                actionAmount++;
                actionTimer = 4;
                OriginalShield = playerEquipment[playerShield];
                OriginalWeapon = playerEquipment[playerWeapon];
                playerEquipment[playerShield] = useitems[0];
                playerEquipment[playerWeapon] = useitems[1];
                setAnimation(0x8DD);
                crafting[0] = 2;
            }
            if (actionTimer == 0 && crafting[0] == 2) {
                deleteItem(useitems[1], useitems[2], playerItemsN[useitems[2]]);
                addItem(crafting[4], 1);
                if (crafting[4] == 1633) {
                    sendMessage("You crushed the gem.");
                } else {
                    addSkillXP((crafting[2] * crafting[3]), playerCrafting);
                    sendMessage("You successfully cut the gem.");
                }
                playerEquipment[playerWeapon] = OriginalWeapon;
                playerEquipment[playerShield] = OriginalShield;
                OriginalWeapon = -1;
                OriginalShield = -1;
                resetAnimation();
                resetCR();
            }
        } else {
            sendMessage(
                    "You need " + crafting[1] + " " + statName[playerCrafting]
                            + " to cut this gem.");
            resetCR();
            return false;
        }
        return true;
    }

    public boolean resetCR() {
        crafting[0] = 0;
        crafting[1] = 0;
        crafting[2] = 0;
        crafting[4] = -1;
        useitems[0] = -1;
        useitems[1] = -1;
        useitems[2] = -1;
        useitems[3] = -1;
        IsUsingSkill = false;
        return true;
    }

    /* FLETCHING*/
    public boolean CheckKnifeUsage() {
        boolean GoOn = true;

        switch (useitems[1]) {
            case 771:
                fletching[1] = 1;
                fletching[2] = 0;
                fletching[4] = 772;
                fletching[6] = 4;
                fletching[0] = 1;
                break;

            case 2862:
                if (fletching[6] == 3 && fletching[5] == 3) {
                    sendMessage(
                            "Achey Logs: 1 = ogre arrow shafts | 2 = ogre composite bow");
                    resetFL();
                    break;
                }

            case 1513:
            case 1515:
            case 1517:
            case 1519:
            case 1521:
                if (fletching[6] == 1 && fletching[5] == 2) {
                    sendMessage("You cannot fletch Arrow Shaft from these logs.");
                    resetFL();
                    break;
                }

            case 1511:
                if (fletching[5] == 0) {
                    getOutStream().createFrame(27);
                    fletching[5] = 1;
                } else if (fletching[5] == 2) {
                    switch (fletching[6]) {
                        case 1:
                            if (useitems[1] == 1511) {
                                fletching[1] = 1;
                                fletching[2] = 5;
                                fletching[4] = 52;
                            } else if (useitems[1] == 2862) {
                                fletching[1] = 5;
                                if (misc.random(2) == 1) {
                                    fletching[2] = 1;
                                } else {
                                    fletching[2] = 2;
                                }
                                fletching[4] = 2864;
                                fletching[6] = 5;
                            }
                            break;

                        case 2:
                            if (useitems[1] == 1511) {
                                fletching[1] = 5;
                                fletching[2] = 5;
                                fletching[4] = 50;
                            } else if (useitems[1] == 1513) {
                                fletching[1] = 80;
                                if (misc.random(2) == 1) {
                                    fletching[2] = 83;
                                } else {
                                    fletching[2] = 84;
                                }
                                fletching[4] = 72;
                            } else if (useitems[1] == 1515) {
                                fletching[1] = 65;
                                if (misc.random(2) == 1) {
                                    fletching[2] = 67;
                                } else {
                                    fletching[2] = 68;
                                }
                                fletching[4] = 68;
                            } else if (useitems[1] == 1517) {
                                fletching[1] = 50;
                                fletching[2] = 50;
                                fletching[4] = 64;
                            } else if (useitems[1] == 1519) {
                                fletching[1] = 35;
                                if (misc.random(2) == 1) {
                                    fletching[2] = 33;
                                } else {
                                    fletching[2] = 34;
                                }
                                fletching[4] = 60;
                            } else if (useitems[1] == 1521) {
                                fletching[1] = 20;
                                if (misc.random(2) == 1) {
                                    fletching[2] = 16;
                                } else {
                                    fletching[2] = 17;
                                }
                                fletching[4] = 54;
                            } else if (useitems[1] == 2862) {
                                boolean flag = false;

                                for (int i = 0; i < playerItems.length; i++) {
                                    if ((playerItems[i] - 1) == 2859) {
                                        flag = true;
                                        break;
                                    }
                                }
                                if (!flag) {
                                    sendMessage(
                                            "To make an ogre composite bow you must have wolf bones in your inventory.");
                                    resetFL();
                                    return false;
                                }
                                fletching[1] = 30;
                                fletching[2] = 45;
                                fletching[4] = 4825;
                                fletching[6] = 6;
                            }
                            break;

                        case 3:
                            if (useitems[1] == 1511) {
                                fletching[1] = 10;
                                fletching[2] = 10;
                                fletching[4] = 48;
                            } else if (useitems[1] == 1513) {
                                fletching[1] = 85;
                                if (misc.random(2) == 1) {
                                    fletching[2] = 91;
                                } else {
                                    fletching[2] = 92;
                                }
                                fletching[4] = 70;
                            } else if (useitems[1] == 1515) {
                                fletching[1] = 70;
                                fletching[2] = 75;
                                fletching[4] = 66;
                            } else if (useitems[1] == 1517) {
                                fletching[1] = 55;
                                if (misc.random(2) == 1) {
                                    fletching[2] = 58;
                                } else {
                                    fletching[2] = 59;
                                }
                                fletching[4] = 62;
                            } else if (useitems[1] == 1519) {
                                fletching[1] = 40;
                                if (misc.random(2) == 1) {
                                    fletching[2] = 41;
                                } else {
                                    fletching[2] = 42;
                                }
                                fletching[4] = 58;
                            } else if (useitems[1] == 1521) {
                                fletching[1] = 25;
                                fletching[2] = 25;
                                fletching[4] = 56;
                            }
                            break;
                    }
                    fletching[0] = 1;
                }
                break;

            default:
                sendMessage("Nothing interesting is happening.");
                GoOn = false;
                break;
        }
        return true;
    }

    /* HEALING*/

    public void CheckStringUsage() {
        boolean GoOn = true;

        switch (useitems[1]) {
            case 48:
                fletching[1] = 10;
                fletching[2] = 10;
                fletching[4] = 839;
                break;

            case 50:
                fletching[1] = 5;
                fletching[2] = 5;
                fletching[4] = 841;
                break;

            case 54:
                fletching[1] = 20;
                if (misc.random(2) == 1) {
                    fletching[2] = 16;
                } else {
                    fletching[2] = 17;
                }
                fletching[4] = 843;
                break;

            case 56:
                fletching[1] = 25;
                fletching[2] = 25;
                fletching[4] = 845;
                break;

            case 58:
                fletching[1] = 40;
                if (misc.random(2) == 1) {
                    fletching[2] = 41;
                } else {
                    fletching[2] = 42;
                }
                fletching[4] = 847;
                break;

            case 60:
                fletching[1] = 35;
                if (misc.random(2) == 1) {
                    fletching[2] = 33;
                } else {
                    fletching[2] = 34;
                }
                fletching[4] = 849;
                break;

            case 62:
                fletching[1] = 55;
                if (misc.random(2) == 1) {
                    fletching[2] = 58;
                } else {
                    fletching[2] = 59;
                }
                fletching[4] = 851;
                break;

            case 64:
                fletching[1] = 50;
                fletching[2] = 50;
                fletching[4] = 853;
                break;

            case 66:
                fletching[1] = 70;
                fletching[2] = 75;
                fletching[4] = 855;
                break;

            case 68:
                fletching[1] = 65;
                if (misc.random(2) == 1) {
                    fletching[2] = 67;
                } else {
                    fletching[2] = 68;
                }
                fletching[4] = 857;
                break;

            case 70:
                fletching[1] = 85;
                if (misc.random(2) == 1) {
                    fletching[2] = 91;
                } else {
                    fletching[2] = 92;
                }
                fletching[4] = 859;
                break;

            case 72:
                fletching[1] = 80;
                if (misc.random(2) == 1) {
                    fletching[2] = 83;
                } else {
                    fletching[2] = 84;
                }
                fletching[4] = 861;
                break;

            case 4825:
                fletching[1] = 30;
                fletching[2] = 45;
                fletching[4] = 11235;
                break;

            default:
                sendMessage("Nothing interesting is happening.");
                GoOn = false;
                break;
        }
        if (GoOn) {
            fletching2(3, 1, 1);
        }
    }

    public boolean CheckFeatherUsage() {
        boolean GoOn = true;
        int Amount1 = 15;
        int Amount2 = Amount1;
        int Status = 1;

        if (freeSlots() > 0) {
            switch (useitems[1]) {
                case 39:
                    Status = 2;
                    fletching[1] = 1;
                    if (misc.random(2) == 1) {
                        fletching[2] = 19;
                    } else {
                        fletching[2] = 20;
                    }
                    fletching[4] = 882;
                    break;

                case 40:
                    Status = 2;
                    fletching[1] = 15;
                    if (misc.random(2) == 1) {
                        fletching[2] = 37;
                    } else {
                        fletching[2] = 38;
                    }
                    fletching[4] = 884;
                    break;

                case 41:
                    Status = 2;
                    fletching[1] = 30;
                    fletching[2] = 75;
                    fletching[4] = 886;
                    break;

                case 42:
                    Status = 2;
                    fletching[1] = 45;
                    if (misc.random(2) == 1) {
                        fletching[2] = 112;
                    } else {
                        fletching[2] = 113;
                    }
                    fletching[4] = 888;
                    break;

                case 43:
                    Status = 2;
                    fletching[1] = 60;
                    fletching[2] = 145;
                    fletching[4] = 890;
                    break;

                case 44:
                    Status = 2;
                    fletching[1] = 75;
                    fletching[2] = 205;
                    fletching[4] = 892;
                    break;

                case 45:
                    fletching[1] = 17;
                    fletching[2] = 6;
                    fletching[4] = 879;
                    break;

                case 46:
                    fletching[1] = 33;
                    if (misc.random(2) == 1) {
                        fletching[2] = 12;
                    } else {
                        fletching[2] = 13;
                    }
                    fletching[4] = 880;
                    break;

                case 47:
                    Amount1 *= 2;
                    Amount2 = Amount1;
                    fletching[1] = 51;
                    fletching[2] = 95;
                    fletching[4] = 881;
                    break;

                case 52:
                    fletching[1] = 1;
                    fletching[2] = 15;
                    fletching[4] = 53;
                    break;

                case 819:
                    Amount1 = 10;
                    Amount2 = Amount1;
                    Status = 4;
                    fletching[1] = 1;
                    fletching[2] = 18;
                    fletching[4] = 806;
                    break;

                case 820:
                    Amount1 = 10;
                    Amount2 = Amount1;
                    Status = 4;
                    fletching[1] = 22;
                    fletching[2] = 32;
                    fletching[4] = 807;
                    break;

                case 821:
                    Amount1 = 10;
                    Amount2 = Amount1;
                    Status = 4;
                    fletching[1] = 37;
                    fletching[2] = 75;
                    fletching[4] = 808;
                    break;

                case 822:
                    Amount1 = 10;
                    Amount2 = Amount1;
                    Status = 4;
                    fletching[1] = 52;
                    fletching[2] = 112;
                    fletching[4] = 809;
                    break;

                case 823:
                    Amount1 = 10;
                    Amount2 = Amount1;
                    Status = 4;
                    fletching[1] = 67;
                    fletching[2] = 150;
                    fletching[4] = 810;
                    break;

                case 824:
                    Amount1 = 10;
                    Amount2 = Amount1;
                    Status = 4;
                    fletching[1] = 81;
                    fletching[2] = 188;
                    fletching[4] = 811;
                    break;

                case 1539:
                    if (!IsItemInBag(2347)) {
                        sendMessage(
                                "To make a steel brutal arrows you must have a hammer in your inventory.");
                        resetFL();
                        return false;
                    }
                    Status = 7;
                    fletching[1] = 33;
                    fletching[2] = 5;
                    fletching[4] = 4783;
                    break;

                case 2864:
                    Amount1 = (Amount2 * 4);
                    Status = 5;
                    fletching[1] = 5;
                    fletching[2] = 1;
                    fletching[4] = 2865;
                    break;

                case 2865:
                    Status = 6;
                    fletching[1] = 5;
                    fletching[2] = 1;
                    fletching[4] = 2866;
                    break;

                case 4819:
                    if (!IsItemInBag(2347)) {
                        sendMessage(
                                "To make a bronze brutal arrows you must have a hammer in your inventory.");
                        resetFL();
                        return false;
                    }
                    Status = 7;
                    fletching[1] = 7;
                    fletching[2] = 2;
                    fletching[4] = 4773;
                    break;

                case 4820:
                    if (!IsItemInBag(2347)) {
                        sendMessage(
                                "To make a iron brutal arrows you must have a hammer in your inventory.");
                        resetFL();
                        return false;
                    }
                    Status = 7;
                    fletching[1] = 18;
                    fletching[2] = 3;
                    fletching[4] = 4778;
                    break;

                case 4821:
                    if (!IsItemInBag(2347)) {
                        sendMessage(
                                "To make a black brutal arrows you must have a hammer in your inventory.");
                        resetFL();
                        return false;
                    }
                    Status = 7;
                    fletching[1] = 38;
                    fletching[2] = 6;
                    fletching[4] = 4788;
                    break;

                case 4822:
                    if (!IsItemInBag(2347)) {
                        sendMessage(
                                "To make a mithril brutal arrows you must have a hammer in your inventory.");
                        resetFL();
                        return false;
                    }
                    Status = 7;
                    fletching[1] = 49;
                    fletching[2] = 8;
                    fletching[4] = 4793;
                    break;

                case 4823:
                    if (!IsItemInBag(2347)) {
                        sendMessage(
                                "To make a adamant brutal arrows you must have a hammer in your inventory.");
                        resetFL();
                        return false;
                    }
                    Status = 7;
                    fletching[1] = 62;
                    fletching[2] = 10;
                    fletching[4] = 4798;
                    break;

                case 4824:
                    if (!IsItemInBag(2347)) {
                        sendMessage(
                                "To make a rune brutal arrows you must have a hammer in your inventory.");
                        resetFL();
                        return false;
                    }
                    Status = 7;
                    fletching[1] = 77;
                    fletching[2] = 12;
                    fletching[4] = 4803;
                    break;

                default:
                    sendMessage("Nothing interesting is happening.");
                    GoOn = false;
                    break;
            }
            if (useitems[1] == 2864) {
                if (playerItemsN[useitems[3]] < Amount1
                        || playerItemsN[useitems[2]] < Amount2) {
                    if ((playerItemsN[useitems[2]] * 4) <= Amount1) {
                        Amount2 = playerItemsN[useitems[2]];
                        Amount1 = (Amount2 * 4);
                    } else {
                        Amount1 = (playerItemsN[useitems[3]] / 4);
                        Amount2 = Amount1;
                    }
                } else {
                    sendMessage("Not enough feathers or ogre arrow shafts.");
                }
            } else {
                if (playerItemsN[useitems[3]] < Amount1
                        || playerItemsN[useitems[2]] < Amount2) {
                    if (playerItemsN[useitems[3]] < playerItemsN[useitems[2]]) {
                        Amount1 = playerItemsN[useitems[3]];
                        Amount2 = Amount1;
                    } else {
                        Amount2 = playerItemsN[useitems[2]];
                        Amount1 = Amount2;
                    }
                }
            }
            if (GoOn) {
                fletching2(Status, Amount1, Amount2);
            }
        } else {
            sendMessage("Not enough space in your inventory.");
            resetFL();
            return false;
        }
        return true;
    }

    public boolean fletching() {
        if (playerLevel[playerFletching] >= fletching[1]) {
            if (actionTimer == 0 && fletching[0] == 1) {
                actionAmount++;
                actionTimer = 4;
                OriginalShield = playerEquipment[playerShield];
                OriginalWeapon = playerEquipment[playerWeapon];
                playerEquipment[playerShield] = useitems[0];
                playerEquipment[playerWeapon] = useitems[1];
                setAnimation(0x376);
                fletching[0] = 2;
            }
            if (actionTimer == 0 && fletching[0] == 2) {
                deleteItem(useitems[1], useitems[2], playerItemsN[useitems[2]]);
                switch (fletching[6]) {
                    case 1:
                        addItem(fletching[4], 15);
                        sendMessage(
                                "You carefully cut the wood into 15 arrow shafts.");
                        break;

                    case 2:
                        addItem(fletching[4], 1);
                        sendMessage(
                                "You carefully cut the wood into an unstrung shortbow.");
                        break;

                    case 3:
                        addItem(fletching[4], 1);
                        sendMessage(
                                "You carefully cut the wood into an unstrung longbow.");
                        break;

                    case 4:
                        addItem(fletching[4], 1);
                        sendMessage(
                                "You carefully cut the wood into a dramen staff.");
                        break;

                    case 5:
                        int Amount = (misc.random(5) + 1);

                        fletching[2] *= Amount;
                        addItem(fletching[4], Amount);
                        sendMessage(
                                "You carefully cut the wood into " + Amount
                                        + " ogre arrow shafts.");
                        break;

                    case 6:
                        addItem(fletching[4], 1);
                        for (int i = 0; i < playerItems.length; i++) {
                            if ((playerItems[i] - 1) == 2859) {
                                deleteItem(2859, i, playerItemsN[i]);
                                break;
                            }
                        }
                        sendMessage(
                                "You carefully cut the wood into an unstrung Ogre Composite Bow.");
                        break;
                }
                addSkillXP((fletching[2] * fletching[3]), playerFletching);
                playerEquipment[playerWeapon] = OriginalWeapon;
                playerEquipment[playerShield] = OriginalShield;
                OriginalWeapon = -1;
                OriginalShield = -1;
                resetAnimation();
                resetFL();
            }
        } else {
            sendMessage(
                    "You need " + fletching[1] + " " + statName[playerFletching]
                            + " to fletch those logs.");
            resetFL();
            return false;
        }
        return true;
    }

    public boolean fletching2(int Status, int Amount1, int Amount2) {
        if (playerLevel[playerFletching] >= fletching[1]) {
            addSkillXP((fletching[2] * fletching[3]), playerFletching);
            deleteItem(useitems[0], useitems[3], Amount1);
            deleteItem(useitems[1], useitems[2], Amount2);
            addItem(fletching[4], Amount2);
            if (Status == 1) {
                sendMessage(
                        "You attach feathers to " + Amount2 + " arrow shafts.");
            } else if (Status == 2) {
                sendMessage(
                        "You attach some of the heads to some of your headless arrows.");
                sendMessage("You finish making " + Amount2 + " arrows.");
            } else if (Status == 3) {
                sendMessage("You add a string to the bow.");
            } else if (Status == 4) {
                sendMessage("You finish making " + Amount2 + " darts.");
            } else if (Status == 5) {
                sendMessage(
                        "You attach feathers to " + Amount2
                                + " ogre arrow shafts.");
            } else if (Status == 6) {
                sendMessage(
                        "You attach some of the wolf bone arrow heads to some of your flighted ogre arrows.");
                sendMessage("You finish making " + Amount2 + " ogre arrows.");
            } else if (Status == 7) {
                sendMessage(
                        "You hammer the nails and attach some to some of your flighted ogre arrows.");
                sendMessage("You finish making " + Amount2 + " brutal arrows.");
            }
        } else {
            sendMessage(
                    "You need " + fletching[1] + " " + statName[playerFishing]
                            + " to make this.");
            resetFL();
            return false;
        }
        resetFL();
        return true;
    }

    public boolean resetFL() {
        fletching[0] = 0;
        fletching[1] = 0;
        fletching[2] = 0;
        fletching[4] = 0;
        fletching[5] = 0;
        useitems[0] = -1;
        useitems[1] = -1;
        useitems[2] = -1;
        useitems[3] = -1;
        IsUsingSkill = false;
        return true;
    }


    public boolean mining() {
        int MIPickAxe = 0;
        int RndGems = 50;

        if (IsMining) {
            MIPickAxe = 1; // If Mining -> Go trough loop, passby MICheckPickAxe to prevent originalweapon loss, 1 to tell you got pick axe, no function left for MIPickAxe if mining, so 1 is enough.
        } else {
            MIPickAxe = MICheckPickAxe();
        }
        if (MIPickAxe > 0) {
            if (playerLevel[playerMining] >= mining[1]) {
                if (freeSlots() > 0) {
                    if (actionTimer == 0 && !IsMining) {
                        actionAmount++;
                        sendMessage("You swing your pick axe at the rock...");
                        actionTimer = (mining[0] + 10) - MIPickAxe;
                        if (actionTimer < 1) {
                            actionTimer = 1;
                        }
                        setAnimation(0x554);
                        IsMining = true;
                    }
                    if (actionTimer == 0 && IsMining) {
                        if (IsItemInBag(1706)
                                || IsItemInBag(1708)
                                || IsItemInBag(1710)
                                || IsItemInBag(1712)) {
                            RndGems /= 2;
                        }
                        if (misc.random(RndGems) == (RndGems / 4)) {
                            addSkillXP((65 * mining[3]), playerMining);
                            addItem(Item.randomNGems(), 1);
                            sendMessage("You get a gem!");
                        } else {
                            addSkillXP((mining[2] * mining[3]), playerMining);
                            addItem(mining[4], 1);
                            sendMessage("You get some ores.");
                        }
                        playerEquipment[playerWeapon] = OriginalWeapon;
                        OriginalWeapon = -1;
                        playerEquipment[playerShield] = OriginalShield;
                        OriginalShield = -1;
                        resetAnimation();
                        resetMI();
                    }
                } else {
                    sendMessage("Not enough space in your inventory.");
                    resetMI();
                    return false;
                }
            } else {
                sendMessage(
                        "You need " + mining[1] + " " + statName[playerMining]
                                + " to mine those ores.");
                resetMI();
                return false;
            }
        } else {
            sendMessage("You need a pick axe to mine ores.");
            resetMI();
            return false;
        }
        return true;
    }

    public boolean resetMI() {
        mining[0] = 0;
        mining[1] = 0;
        mining[2] = 0;
        mining[4] = 0;
        skillX = -1;
        skillY = -1;
        IsMining = false;
        IsUsingSkill = false;
        return true;
    }

    public int MICheckPickAxe() {
        int Hand;
        int Shield;
        int Bag;
        int PickAxe;

        Hand = playerEquipment[playerWeapon];
        Shield = playerEquipment[playerShield];
        PickAxe = 0;
        switch (Hand) {
            case 1265: // Bronze Pick Axe
                PickAxe = 1;
                break;

            case 1267: // Iron Pick Axe
                PickAxe = 2;
                break;

            case 1269: // Steel Pick Axe
                PickAxe = 3;
                break;

            case 1273: // Mithril Pick Axe
                PickAxe = 4;
                break;

            case 1271: // Adamant Pick Axe
                PickAxe = 5;
                break;

            case 1275: // Rune Pick Axe
                PickAxe = 6;
                break;
        }
        if (PickAxe > 0) {
            OriginalWeapon = Hand;
            OriginalShield = Shield;
            playerEquipment[playerShield] = -1;
            return PickAxe;
        }
        Bag = -1;
        for (int i = 0; i < playerItems.length; i++) {
            Bag = playerItems[i];
            Bag -= 1; // Only to fix the ID !
            if (Bag == 1265 || Bag == 1267 || Bag == 1269 || Bag == 1271
                    || Bag == 1273 || Bag == 1275) {
                break;
            }
        }
        switch (Bag) {
            case 1265: // Bronze Pick Axe
                PickAxe = 1;
                break;

            case 1267: // Iron Pick Axe
                PickAxe = 2;
                break;

            case 1269: // Steel Pick Axe
                PickAxe = 3;
                break;

            case 1273: // Mithril Pick Axe
                PickAxe = 4;
                break;

            case 1271: // Adamant Pick Axe
                PickAxe = 5;
                break;

            case 1275: // Rune Pick Axe
                PickAxe = 6;
                break;
        }
        if (PickAxe > 0) {
            OriginalWeapon = Hand;
            OriginalShield = Shield;
            playerEquipment[playerShield] = -1;
            playerEquipment[playerWeapon] = Bag;
        }
        return PickAxe;
    }

    /* PRAYER*/
    public boolean prayer() {
        if (playerLevel[playerPrayer] >= prayer[1]) {
            if (actionTimer == 0 && prayer[0] == 1
                    && playerEquipment[playerWeapon] >= 1) {
                // actionAmount++;
                prayer[0] = 2;
            }
            if (actionTimer == 0 && prayer[0] == 2) {
                deleteItem(prayer[4], prayer[5], playerItemsN[prayer[5]]);
                addSkillXP((prayer[2] * prayer[3]), playerPrayer);
                sendMessage("You bury the bones.");
                resetPR();
            }
        } else {
            sendMessage(
                    "You need " + prayer[1] + " " + statName[playerPrayer]
                            + " to bury these bones.");
            resetPR();
            return false;
        }
        return true;
    }

    public boolean resetPR() {
        prayer[0] = 0;
        prayer[1] = 0;
        prayer[2] = 0;
        prayer[4] = -1;
        prayer[5] = -1;
        setAnimation(829);
        IsUsingSkill = false;
        return true;
    }



    public void AcceptTrade() {
        sendFrame248(3323, 3321); // trading window + bag
        resetItems(3322);
        resetTItems(3415);
        resetOTItems(3416);
        sendFrame126("Trading With: "
                + PlayerHandler.players[tradeWith].playerName, 3417);
        sendFrame126("", 3431);
    }

    public void DeclineTrade() {
        secondTradeWindow = false;
        if (!hasAccepted) {
            for (int i = 0; i < playerTItems.length; i++) {
                if (playerTItems[i] > 0) {
                    if (tradeStatus < 4) {
                        fromTrade((playerTItems[i] - 1), i, playerTItemsN[i]);
                    }
                }
            }
        }
        resetItems(3214);
        resetTrade();
    }

    public void resetTrade() {
        tradeWith = 0;
        tradeWaitingTime = 0;
        tradeStatus = 0;
        tradeUpdateOther = false;
        tradeOtherDeclined = false;
        WanneTrade = 0;
        WanneTradeWith = 0;
        TradeConfirmed = false;
        for (int i = 0; i < playerTItems.length; i++) {
            playerTItems[i] = 0;
            playerTItemsN[i] = 0;
            playerOTItems[i] = 0;
            playerOTItemsN[i] = 0;
        }
    }

    public void ConfirmTrade() {
        if (!TradeConfirmed) {
            RemoveAllWindows();
            for (int i = 0; i < playerOTItems.length; i++) {
                if (playerOTItems[i] > 0) {
                    addItem((playerOTItems[i] - 1), playerOTItemsN[i]);
                    BufferedWriter bw = null;
                    try {
                        bw = new BufferedWriter(new FileWriter(
                                "./Data/logs/trades.txt", true));
                        bw.write(PlayerHandler.players[tradeWith].playerName
                                + " trades item: " + (playerOTItems[i] - 1)
                                + " amount: " + playerOTItemsN[i] + " with "
                                + playerName);
                        bw.newLine();
                        bw.flush();
                    } catch (IOException ioe) {
                        ioe.printStackTrace();
                    } finally {
                        if (bw != null) {
                            try {
                                bw.close();
                            } catch (IOException ioe2) {
                                sendMessage("Error logging trade!");
                            }
                        }
                    }
                    try {
                        bw = new BufferedWriter(
                                new FileWriter(
                                        "./Data/logs/trades.txt",
                                        true));
                        bw.write(PlayerHandler.players[tradeWith].playerName
                                + " trades item: " + (playerOTItems[i] - 1)
                                + " amount: " + playerOTItemsN[i] + " with "
                                + playerName);
                        bw.newLine();
                        bw.flush();
                    } catch (IOException ioe) {
                        ioe.printStackTrace();
                    } finally {
                        if (bw != null) {
                            try {
                                bw.close();
                            } catch (IOException ioe2) {
                                sendMessage("Error logging trade!");
                            }
                        }
                    }
                }
            }
            resetItems(3214);
            TradeConfirmed = true;
        }
    }

    public void TradeGoConfirm() {
        secondTradeWindow = true;
        sendFrame248(3443, 3213); // trade confirm + normal bag
        resetItems(3214);
        String SendTrade = "Absolutely nothing!";
        String SendAmount = "";
        int Count = 0;
        for (int i = 0; i < playerTItems.length; i++) {
            if (playerTItems[i] > 0) {
                if (playerTItemsN[i] >= 1000 && playerTItemsN[i] < 1000000) {
                    SendAmount = "@cya@" + (playerTItemsN[i] / 1000)
                            + "K @whi@(" + playerTItemsN[i] + ")";
                } else if (playerTItemsN[i] >= 1000000) {
                    SendAmount = "@gre@" + (playerTItemsN[i] / 1000000)
                            + " million @whi@(" + playerTItemsN[i] + ")";
                } else {
                    SendAmount = String.valueOf(playerTItemsN[i]);
                }
                if (Count == 0) {
                    SendTrade = getItemName((playerTItems[i] - 1));
                } else {
                    SendTrade = SendTrade + "\\n"
                            + getItemName((playerTItems[i] - 1));
                }
                if (Item.itemIsNote[(playerTItems[i] - 1)]
                        || Item.itemStackable[(playerTItems[i] - 1)]) {
                    SendTrade = SendTrade + " x " + SendAmount;
                }
                Count++;
            }
        }
        sendFrame126(SendTrade, 3557);
        SendTrade = "Absolutely nothing!";
        SendAmount = "";
        Count = 0;
        for (int i = 0; i < playerOTItems.length; i++) {
            if (playerOTItems[i] > 0) {
                if (playerOTItemsN[i] >= 1000 && playerOTItemsN[i] < 1000000) {
                    SendAmount = "@cya@" + (playerOTItemsN[i] / 1000)
                            + "K @whi@(" + playerOTItemsN[i] + ")";
                } else if (playerOTItemsN[i] >= 1000000) {
                    SendAmount = "@gre@" + (playerOTItemsN[i] / 1000000)
                            + " million @whi@(" + playerOTItemsN[i] + ")";
                } else {
                    SendAmount = String.valueOf(playerOTItemsN[i]);
                }
                if (Count == 0) {
                    SendTrade = getItemName((playerOTItems[i] - 1));
                } else {
                    SendTrade = SendTrade + "\\n"
                            + getItemName((playerOTItems[i] - 1));
                }
                if (Item.itemIsNote[(playerOTItems[i] - 1)]
                        || Item.itemStackable[(playerOTItems[i] - 1)]) {
                    SendTrade = SendTrade + " x " + SendAmount;
                }
                Count++;
            }
        }
        sendFrame126(SendTrade, 3558);
    }

    public boolean fromTrade(int itemID, int fromSlot, int amount) {
        if (secondTradeWindow) {
            return false;
        }
        if (amount > 0 && (itemID + 1) == playerTItems[fromSlot]) {
            if (amount > playerTItemsN[fromSlot]) {
                amount = playerTItemsN[fromSlot];
            }
            addItem((playerTItems[fromSlot] - 1), amount);
            if (amount == playerTItemsN[fromSlot]) {
                playerTItems[fromSlot] = 0;
                PlayerHandler.players[tradeWith].playerOTItems[fromSlot] = 0;
            }
            playerTItemsN[fromSlot] -= amount;
            PlayerHandler.players[tradeWith].playerOTItemsN[fromSlot] -= amount;
            resetItems(3322);
            resetTItems(3415);
            PlayerHandler.players[tradeWith].tradeUpdateOther = true;
            if (PlayerHandler.players[tradeWith].tradeStatus == 3) {
                PlayerHandler.players[tradeWith].tradeStatus = 2;
                PlayerHandler.players[tradeWith].AntiTradeScam = true;
                sendFrame126("", 3431);
            }
            return true;
        }
        return false;
    }

    public boolean tradeItem(int itemID, int fromSlot, int amount) {
        if (tradeWith > 0) {
            if (PlayerHandler.players[tradeWith] == null) {
                DeclineTrade();
                sendMessage("FORCED DECLINE BY SERVER!");
                return false;
            }
        } else {
            DeclineTrade();
            sendMessage("FORCED DECLINE BY SERVER!");
            return false;
        }
        if (amount > 0 && itemID == (playerItems[fromSlot] - 1)) {
            if (amount > playerItemsN[fromSlot]) {
                amount = playerItemsN[fromSlot];
            }
            boolean IsInTrade = false;
            for (int i = 0; i < playerTItems.length; i++) {
                if (playerTItems[i] == playerItems[fromSlot]) {
                    if (Item.itemStackable[(playerItems[fromSlot] - 1)]
                            || Item.itemIsNote[(playerItems[fromSlot] - 1)]) {
                        playerTItemsN[i] += amount;
                        PlayerHandler.players[tradeWith].playerOTItemsN[i] += amount;
                        IsInTrade = true;
                        break;
                    }
                }
            }
            if (!IsInTrade) {
                for (int i = 0; i < playerTItems.length; i++) {
                    if (playerTItems[i] <= 0) {
                        playerTItems[i] = playerItems[fromSlot];
                        playerTItemsN[i] = amount;
                        PlayerHandler.players[tradeWith].playerOTItems[i] = playerItems[fromSlot];
                        PlayerHandler.players[tradeWith].playerOTItemsN[i] = amount;
                        break;
                    }
                }
            }
            if (amount == playerItemsN[fromSlot]) {
                playerItems[fromSlot] = 0;
            }
            playerItemsN[fromSlot] -= amount;
            resetItems(3322);
            resetTItems(3415);
            PlayerHandler.players[tradeWith].tradeUpdateOther = true;
            if (PlayerHandler.players[tradeWith].tradeStatus == 3) {
                PlayerHandler.players[tradeWith].tradeStatus = 2;
                PlayerHandler.players[tradeWith].AntiTradeScam = true;
                sendFrame126("", 3431);
            }
            return true;
        }
        return false;
    }

    /* Shops*/
    public boolean sellItem(int itemID, int fromSlot, int amount) {
        if (amount > 0 && itemID == (playerItems[fromSlot] - 1)) {
            if (ShopHandler.ShopSModifier[MyShopID] > 1) {
                boolean IsIn = false;

                for (int i = 0; i
                        <= ShopHandler.ShopItemsStandard[MyShopID]; i++) {
                    if (itemID
                            == (ShopHandler.ShopItems[MyShopID][i] - 1)) {
                        IsIn = true;
                        break;
                    }
                }
                if (!IsIn) {
                    sendMessage(
                            "You cannot sell " + GetItemName(itemID)
                                    + " in this store.");
                    return false;
                }
            }
            if (!Item.itemSellable[(playerItems[fromSlot] - 1)]) {
                sendMessage("I cannot sell " + GetItemName(itemID) + ".");
                return false;
            }
            if (amount > playerItemsN[fromSlot]
                    && (Item.itemIsNote[(playerItems[fromSlot] - 1)]
                    || Item.itemStackable[(playerItems[fromSlot] - 1)])) {
                amount = playerItemsN[fromSlot];
            } else if (amount > getItemAmount(itemID)
                    && !Item.itemIsNote[(playerItems[fromSlot] - 1)]
                    && !Item.itemStackable[(playerItems[fromSlot] - 1)]) {
                amount = getItemAmount(itemID);
            }
            double ShopValue;
            double TotPrice;
            int TotPrice2;
            int Overstock;

            for (int i = amount; i > 0; i--) {
                TotPrice2 = (int) Math.floor(
                        GetItemShopValue(itemID, 1, fromSlot));
                if (MyShopID != 99 && MyShopID != 113 && MyShopID != 114 && MyShopID != 115 && MyShopID != 239) {
                    if (freeSlots() >= 1) {
                        if (!Item.itemIsNote[itemID]) {
                            deleteItem2(itemID, 1);
                        } else {
                            deleteItem2(itemID, 1);
                        }
                        addItem(ItemIDs.COINS, TotPrice2);
                        addShopItem(itemID, 1);
                    } else {
                        sendMessage("Not enough space in your inventory.");
                        break;
                    }
                }
                else if (MyShopID != 99 && MyShopID != 113 && MyShopID != 114 && MyShopID != 115 && MyShopID == 239) {
                    if (freeSlots() >= 1) {
                        if (!Item.itemIsNote[itemID]) {
                            deleteItem2(itemID, 1);
                        } else {
                            deleteItem2(itemID, 1);
                        }
                        addItem(ItemIDs.COINS, TotPrice2 * 9);
                        addShopItem(itemID, 1);
                    } else {
                        sendMessage("Not enough space in your inventory.");
                        break;
                    }
                }else if (MyShopID != 99  && MyShopID != 239 && MyShopID == 113 && MyShopID == 114 && MyShopID == 115) {
                    if (freeSlots() >= 1) {
                        if (!Item.itemIsNote[itemID]) {
                            deleteItem2(itemID, 1);
                        } else {
                            deleteItem2(itemID, 1);
                        }
                        addItem(6529, TotPrice2);
                        addShopItem(itemID, 1);
                    } else {
                        sendMessage("Not enough space in your inventory.");
                        break;
                    }
                }
            }
            resetItems(3823);
            resetShop(MyShopID);
            UpdatePlayerShop();
            return true;
        }
        return true;
    }

    public boolean buyItem(int itemID, int fromSlot, int amount) {
        if (amount > 0) {
            if (fromSlot >= ShopHandler.ShopItemsN[MyShopID].length) {
                sendMessage("There was a problem buying that item, please report it to staff!");
                return false;
            }
            if (amount > ShopHandler.ShopItemsN[MyShopID][fromSlot]) {
                amount = ShopHandler.ShopItemsN[MyShopID][fromSlot];
            }
            double ShopValue;
            double TotPrice;
            int TotPrice2;
            int Overstock;
            int Slot = 0;
            int Slot1 = 0;
            int Slot2 = 0;

            int boughtAmount = 0;
            for (int i = amount; i > 0; i--) {
                TotPrice2 = (int) Math.floor(
                        GetItemShopValue(itemID, 0, fromSlot));
                Slot = GetItemSlot(ItemIDs.COINS);
                Slot1 = GetItemSlot(6306);
                Slot2 = GetItemSlot(6529);
                if (Slot == -1 && MyShopID != 99 && MyShopID != 113 && MyShopID != 114 && MyShopID != 115) {
                    sendMessage("You don't have enough coins.");
                    break;
                }
                if (Slot1 == -1 && MyShopID == 99 && MyShopID != 113 && MyShopID != 114 && MyShopID != 115) {
                    sendMessage("You don't have enough Trading Sticks.");
                    break;
                }
                if (Slot2 == -1 && MyShopID != 99 && MyShopID == 113 && MyShopID == 114 && MyShopID == 115) {
                    sendMessage("You don't have enough Tokkul.");
                    break;
                }
                if (TotPrice2 <= 1) {
                    TotPrice2 = (int) Math.floor(GetItemShopValue(itemID, 0, fromSlot));
                    TotPrice2 *= 1.66;
                }
                if (MyShopID != 99 && MyShopID != 113 && MyShopID != 114 && MyShopID != 115) {
                    if (playerHasItem(995, TotPrice2) || TotPrice2 == 0) {
                        if (freeSlots() > 0) {
                            deleteItem2(ItemIDs.COINS, TotPrice2 * amount);
                            addItem(itemID, 1);
                            boughtAmount++;
                            ShopHandler.ShopItemsN[MyShopID][fromSlot] -= 1;
                            ShopHandler.ShopItemsDelay[MyShopID][fromSlot] = 0;
                            if ((fromSlot + 1)
                                    > ShopHandler.ShopItemsStandard[MyShopID]) {
                                ShopHandler.ShopItems[MyShopID][fromSlot] = 0;
                            }
                        } else {
                            sendMessage("Not enough space in your inventory.");
                            break;
                        }
                    } else {
                        sendMessage("You don't have enough coins.");
                        break;
                    }
                } else if (MyShopID == 99 && MyShopID != 113 && MyShopID != 114 && MyShopID != 115) {
                    if (playerHasItem(6306, TotPrice2) || TotPrice2 == 0) {
                        if (freeSlots() > 0) {
                            deleteItem2(6306, TotPrice2 * amount);
                            addItem(itemID, amount);
                            ShopHandler.ShopItemsN[MyShopID][fromSlot] -= 1;
                            ShopHandler.ShopItemsDelay[MyShopID][fromSlot] = 0;
                            if ((fromSlot + 1)
                                    > ShopHandler.ShopItemsStandard[MyShopID]) {
                                ShopHandler.ShopItems[MyShopID][fromSlot] = 0;
                            }
                        } else {
                            sM("Not enough space in your inventory.");
                            break;
                        }
                    } else {
                        sM("Not enough Trading ticks for this item.");
                        break;
                    }
                } else if (MyShopID == 113 && MyShopID != 99) {
                    if (playerHasItem(6529, TotPrice2) || TotPrice2 == 0) {
                        if (freeSlots() > 0) {
                            deleteItem2(6529, TotPrice2 * amount);
                            addItem(itemID, amount);
                            ShopHandler.ShopItemsN[MyShopID][fromSlot] -= 1;
                            ShopHandler.ShopItemsDelay[MyShopID][fromSlot] = 0;
                            if ((fromSlot + 1)
                                    > ShopHandler.ShopItemsStandard[MyShopID]) {
                                ShopHandler.ShopItems[MyShopID][fromSlot] = 0;
                            }
                        } else {
                            sM("Not enough space in your inventory.");
                            break;
                        }
                    } else {
                        sM("Not enough Tokkul for this item.");
                        break;
                    }
                } else if (MyShopID == 114 && MyShopID != 99) {
                    if (playerHasItem(6529, TotPrice2) || TotPrice2 == 0) {
                        if (freeSlots() > 0) {
                            deleteItem2(6529, TotPrice2 * amount);
                            addItem(itemID, amount);
                            ShopHandler.ShopItemsN[MyShopID][fromSlot] -= 1;
                            ShopHandler.ShopItemsDelay[MyShopID][fromSlot] = 0;
                            if ((fromSlot + 1)
                                    > ShopHandler.ShopItemsStandard[MyShopID]) {
                                ShopHandler.ShopItems[MyShopID][fromSlot] = 0;
                            }
                        } else {
                            sM("Not enough space in your inventory.");
                            break;
                        }
                    } else {
                        sM("Not enough Tokkul for this item.");
                        break;
                    }
                } else if (MyShopID == 115 && MyShopID != 99) {
                    if (playerHasItem(6529, TotPrice2) || TotPrice2 == 0) {
                        if (freeSlots() > 0) {
                            deleteItem2(6529, TotPrice2 * amount);
                            addItem(itemID, amount);
                            ShopHandler.ShopItemsN[MyShopID][fromSlot] -= 1;
                            ShopHandler.ShopItemsDelay[MyShopID][fromSlot] = 0;
                            if ((fromSlot + 1)
                                    > ShopHandler.ShopItemsStandard[MyShopID]) {
                                ShopHandler.ShopItems[MyShopID][fromSlot] = 0;
                            }
                        } else {
                            sM("Not enough space in your inventory.");
                            break;
                        }
                    } else {
                        sM("Not enough Tokkul for this item.");
                        break;
                    }
                }

            }
            resetItems(3823);
            resetShop(MyShopID);
            UpdatePlayerShop();
            return true;
        }
        return false;
    }

    public void UpdatePlayerShop() {
        for (int i = 1; i < PlayerHandler.maxPlayers; i++) {
            if (PlayerHandler.players[i] != null) {
                if (PlayerHandler.players[i].IsShopping
                        && PlayerHandler.players[i].MyShopID == MyShopID
                        && i != playerId) {
                    PlayerHandler.players[i].UpdateShop = true;
                }
            }
        }
    }

    public boolean addShopItem(int itemID, int amount) {
        boolean Added = false;

        if (amount <= 0) {
            return false;
        }
        if (Item.itemIsNote[itemID]) {
            itemID = itemID - 1;
        }
        for (int i = 0; i < ShopHandler.ShopItems.length; i++) {
            if ((ShopHandler.ShopItems[MyShopID][i] - 1) == itemID) {
                ShopHandler.ShopItemsN[MyShopID][i] += amount;
                Added = true;
            }
        }
        if (!Added) {
            for (int i = 0; i < ShopHandler.ShopItems.length; i++) {
                if (ShopHandler.ShopItems[MyShopID][i] == 0) {
                    ShopHandler.ShopItems[MyShopID][i] = (itemID + 1);
                    ShopHandler.ShopItemsN[MyShopID][i] = amount;
                    ShopHandler.ShopItemsDelay[MyShopID][i] = 0;
                    break;
                }
            }
        }
        return true;
    }

    /* NPC Talking*/
    public void UpdateNPCChat() {

        /* sendFrame126("", 4902);
         sendFrame126("", 4903);
         sendFrame126("", 4904);
         sendFrame126("", 4905);
         sendFrame126("", 4906);*/
        sendFrame126("", 976);
        switch (NpcDialogue) {

            case 1://first case
                talk(9847, "Can i help you at all?", 522);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(2);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 2:
                choice("Yes please. What are you selling?", "No thanks.");
                break;

            case 3://first case
                talk(9760, "Good day, how may i help you?", 494);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(4);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 9999:
                choice("Pick", "Leave");
                break;

            case 1000:
                addItem(floweritem, 1);
                deletethatobject(flowerX, flowerY);
                flowerX = 0;
                flowerY = 0;
                flowers = 0;
                NpcDialogue = 1001;
                NpcDialogueSend = false;
                nextDialogue(1001);
                break;

            case 1001:
                RemoveAllWindows();
                break;

            case 4:
                options3("I'd like to access my bank account, please.", "I'd like to check my PIN settings.", "What is this place?");
                break;

            case 5://first case
                playertalk(9760, "What is this place?");
                nextDialogue(6);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 6:
                talk2(9760, "This is a branch of the Bank of Ghreborn we have", "branches in many towns.", 494);
                nextDialogue(7);
                break;

            case 7:
                options2("And what do you do?", "Didn't you used to be called Bank of Varrock?");
                break;

            case 8://first case
                playertalk(9760, "And what do you do?");
                nextDialogue(9);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 9://first case
                talk3(9760, "We will look after your items and money for you.", "Leave your valuables with us if you want to keep them", "safe.", 494);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(10);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 10:
                closeInterface();
                break;

            case 11://first case
                playertalk(9760, "Didn't you used to be called the Bank of Varrock?");
                nextDialogue(12);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 12://first case
                talk4(9760, "Yes we did, but people kept on coming into our", " branches outside of Varrock and telling us that our", "signs were wrong. they acted as if we didn't know", "what town we were in or somethng.", 494);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(13);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 13:
                closeInterface();
                break;

            case 14://first case
                talk(9760, "Would you like to buy a nice Kabab? Only one gold.", 543);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(15);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 15:
                choice("I think I'll give it a miss.", "Yes please.");
                break;
            case 627:
                choice("Yes", "No");
                break;
            case 16://first case
                playertalk(9760, "I think I'll give it a miss.");
                nextDialogue(17);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 17:
                closeInterface();
                break;

            case 18://first case
                playertalk(9760, "Yes please.");
                nextDialogue(19);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 19:
                if (!playerHasItemAmount(ItemIDs.COINS, 1)) {
                    NpcDialogue = 20;
                    NpcDialogueSend = false;
                    nextDialogue(20);
                } else if (playerHasItemAmount(ItemIDs.COINS, 1)) {
                    deleteItem(ItemIDs.COINS, getItemSlot(ItemIDs.COINS), 1);
                    addItem(1971, 1);
                    sendMessage("You Buy a kebab.");
                    NpcDialogue = 23;
                    NpcDialogueSend = false;
                    nextDialogue(23);
                }
                break;

            case 20://first case
                playertalk(9760, "Oops, I forgot to bring any money with me.");
                nextDialogue(21);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 21://first case
                talk(9760, "Come back when you have some.", 543);
                nextDialogue(22);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 22:
                closeInterface();
                break;

            case 23:
                closeInterface();
                break;

            case 24://first case
                talk(9780, "Dooooom!", 3777);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(25);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 25://first case
                playertalk(9760, "Where?");
                nextDialogue(26);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 26://first case
                talk2(9760, "All around us! I can fell it in the air, hear it on the", "wind, smell it...also in the air!", 3777);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(27);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 27://first case
                playertalk(9760, "Is there anything we can do about this doom?");
                nextDialogue(28);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 28://first case
                talk3(9760, "There is nothing you need to do my friend! I am the ", "Doomsayer, although my real title could be something", "like the Danger Tutor.", 3777);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(29);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 29://first case
                playertalk(9760, "Danger Tutor?");
                nextDialogue(30);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 30://first case
                talk(9760, "Yes! I roam the world sensing danger.", 3777);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(31);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 31://first case
                talk3(9760, "If I find a dangerous area, then I put up warning ", "signs that will tell you what is so dangerous about that", "area.", 3777);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(32);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 32://first case
                talk3(9760, "If you see the signs often enough, then you can turn ", "them off, by that time you likely know what the area", "has in store for you..", 3777);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(33);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 33://first case
                playertalk(9760, "But what if I want to see the warnings again?");
                nextDialogue(34);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 34://first case
                talk(9760, "That's why I'm waiting here!", 3777);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(35);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 35://first case
                talk2(9760, "If you want to see the warning messages again, I can", "turn them back on for you.", 3777);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(36);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 36://first case
                talk(9760, "Do you need to turn on any warnings right now?", 3777);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(37);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 37:
                choice("Yes, I do.", "Not right now.");
                break;

            case 114://first case
                talk2(9760, "Ullo! Merry Christmas! Watch out for the ice, it's very", "slippery.", 8541);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(115);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 115://first case
                playertalk(9760, "Merry Christmas to you too! What's going on here?");
                nextDialogue(116);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 116://first case
                talk2(9760, "Er, we've had a lil accident. Prince Jack has left the", "Land of Snow and is icing everthing.", 8541);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(117);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 117://first case
                playertalk(9760, "Prince Jack?");
                nextDialogue(118);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 118://first case
                talk4(9760, "The Queen of Snow has a young son called Jack. He", "calls himself Jack Frost but, for us he's Prince Jack.", "He's too young to travel out of the Land of Snow, but", "he's a bit rebellicus and this year he escaped.", 8541);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(119);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 119://first case
                talk3(9760, "We Know he came to Gielinor. He Left Patches of ice", "about like this one. We're here to look for him and", " bring him back. Do you want ot help?", 8541);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(120);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 319://first case
                talk3(9847, "Welcome to Godzhell Reborn. We are the first remake", "of godzhell started in 2011 I am here to help", "you Learn about the server, Would you need help?", 945);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(320);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 320://first case
                talk3(9847, "brought back in 2024 and here to stay!", "all old staff will regain there rank,", "we will never go down again.", 945);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(321);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.
            case 321://first case
                talk3(9847, "with the mystyc dragon by our side", "built strong with love and hours", "of our devs work, we back brothers and sisters!", 945);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(322);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.
            case 322:
                playertalk(9760, "What can i do in the game?");
                nextDialogue(323);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;
            case 323://first case
                talk4(9847, "What you can do in the game?", "We do have the classic locations from godzhell,", "there also new locations for training", "theres some hidden dungeons long lost found again.", 945);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(324);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.
            case 324://first case
                talk2(9847, "Would you like to to know the diffences from GodzHell", "and GodzHell Reborn and Remastered?,", 945);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(325);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.
            case 325:
                choice("Yes please!", "No thank you.");
                break;
            case 326:
                playertalk(9760, "Yes please!");
                nextDialogue(327);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;
            case 327://first case
                talk4(9847, "We have torrmented demons and corp and Gwd,", "we also have working trading and pvp,", "and dont worry about bank resets thoses will never happen,", "Fell safe while playing GodzHell Reborn and Remastered!", 945);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(328);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.
            case 328://first case
                talk3(9847, "We have also reworked alot of the skills to be better,", "then what GodzHell had for theere skills", "while keeping the fell the close as possable!", 945);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(329);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.
            case 329://first case
                talk3(9847, "Hope you enjoy your stay at Godzhell Reborn", "and Remastered, Remember to vote if you like the server,", "Voting Brings Players!", 945);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(330);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.
            case 330://first case
                NpcDialogue = 0;
                NpcDialogueSend = false;
                break;//ends the dialogue. Without this, you will get errors.
            case 14329:
                talk(9847, "What do you want?", talkingNpc);
                nextDialogue(14330);
                break;
            case 14330:
                options4("I'd like to see the slayer interface.", "I am in need of a slayer task.", "Could you tell me where I can find my current task?", "Cancel my task for 1.5m gp.");
                break;
            case 14331:
                playertalk(588, "I'd like to see the slayer interface.");
                nextDialogue(14332);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;
            case 14333:
                talk2(9847,
                        "You currently have " + getSlayer().getTaskAmount() + " "
                                + getSlayer().getTask().get().getPrimaryName() + " to kill.",
                        "You cannot get an easier task. You must finish this.", talkingNpc);
                nextDialogue(14332);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;
            case 14334:
                playertalk(588, "Okay!");
                nextDialogue(14335);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;
            case 14335:
                closeInterface();
                talkingNpc = -1;
                break;
            case 14332:
                sendMessage("Interface not added yet.");
                closeInterface();
                talkingNpc = -1;
                break;
            case 185://first case
                talk4(9847, "Hello, im Lottie im in charge of GodzHell's Lottery.", "Entering costs 2 million gp but you could win up to", "250 million gp! you can enter up to 5 times per draw.", "Would you like to enter the lottery?", 8206);//NPC dialogue. The 943 means the NPC ID.
                nextDialogue(186);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;//ends the dialogue. Without this, you will get errors.

            case 186:
                choice("Yes i would like to enter!", "No, Id rather not.");
                break;
            case 187:
                playertalk(588, "Yes i would like to enter!");
                nextDialogue(188);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;
            case 188:
                server.lottery.enterLottery(this);
                closeInterface();
                NpcDialogue = -1;
                NpcDialogueSend = false;
                break;
            case 189:
                playertalk(588, "No, Id rather not.");
                nextDialogue(190);//saying which dialogue will be next.. the "2" means case 2: will be used next.
                break;
            case 190:
                closeInterface();
                NpcDialogue = -1;
                NpcDialogueSend = false;
                break;

            case 16154:
                closeInterface();
                NpcDialogue = -1;
                NpcDialogueSend = false;
                break;
            case 13446:
                NpcDialogue = 0;
                NpcDialogueSend = false;
                RemoveAllWindows();
                break;
            case 818:
                sendFrame126(GetNpcName(NpcTalkTo), 4902);
                sendFrame126("", 4903);
                sendFrame126("Your task here is simple.", 4904);
                sendFrame126("go through the cave, and kill him.", 4905);
                sendFrame126("then run back and give me the diamond.", 4906);
                sendFrame75(NpcTalkTo, 4901);
                sendFrame164(4900);
                NpcDialogueSend = true;
                break;

            case 819:
                sendInterfaceHidden(1, 2465);
                sendInterfaceHidden(0, 2468);
                sendFrame126("Do you have the diamond?", 2460);
                sendFrame126("Yes", 2461);
                sendFrame126("No", 2462);
                sendFrame164(2459);
                NpcDialogueSend = true;
                break;

            case 820:
                sendFrame126(GetNpcName(NpcTalkTo), 4902);
                sendFrame126("", 4903);
                sendFrame126("", 4904);
                sendFrame126("Alright, but your so close...", 4905);
                sendFrame126("Remember the reward.", 4906);
                sendFrame75(NpcTalkTo, 4901);
                sendFrame164(4900);
                NpcDialogueSend = true;
                break;
            case 664:
                talk3(591, "I..Heard of tresure....", "A treasure...so great...", "the knowledge..of Ancient Magiks!", 8171);
                nextDialogue(665);
                break;

            case 665:
                sendInterfaceHidden(1, 2465);
                sendInterfaceHidden(0, 2468);
                choice("Start Desert Tresure?", "Yes..im ready..","Yes..im ready..");
                NpcDialogueSend = true;
                break;

            case 666:
                talk2(9847, "yes..thats fine...", "Ill ask the next non coward", 8171);
                NpcDialogueSend = true;
                sendMessage("If i were you..i would get the following items in your bank.");
                sendMessage("Get the following,");
                sendMessage("1 yew log");
                sendMessage("1 RAW manta ray");
                sendMessage("1 tinderbox");
                sendMessage("1 soul rune");
                sendMessage("1 coif");
                sendMessage("1 Bronze platebody");
                sendMessage("You will not need these right now..but later, they will be needed");

                break;
            case 619:
                sendFrame126(GetNpcName(NpcTalkTo), 4902);
                sendFrame126("", 4903);
                sendFrame126("I need the ice diamond to save my wifes life!", 4904);
                sendFrame126("I heard your in need of Blood Diamond..i could show you..", 4905);
                sendFrame126("Do you have the Ice Diamond though?", 4906);
                sendFrame75(NpcTalkTo, 4901);
                sendFrame164(4900);
                NpcDialogueSend = true;
                break;

            case 620:
                sendInterfaceHidden(1, 2465);
                sendInterfaceHidden(0, 2468);
                sendFrame126("Select an Option", 2460);
                sendFrame126("Yes, I did", 2461);
                sendFrame126("No, I did not", 2462);
                sendFrame164(2459);
                NpcDialogueSend = true;
                break;

            case 621:
                sendFrame126(GetNpcName(NpcTalkTo), 4902);
                sendFrame126("", 4903);
                sendFrame126("Then why are you standing here?", 4904);
                sendFrame126("", 4905);
                sendFrame126("", 4906);
                sendFrame75(NpcTalkTo, 4901);
                sendFrame164(4900);
                NpcDialogueSend = true;
                break;
            case 1920:
                sendFrame126(GetNpcName(NpcTalkTo), 4902);
                sendFrame126("", 4903);
                sendFrame126("i need you to obtain a blood diamond *Hissss*", 4904);
                sendFrame126("Do you have it already?", 4905);
                sendFrame126("@bla@i @red@N@red@E@red@E@red@D@bla@ IT! *hiss*", 4906);
                sendFrame75(NpcTalkTo, 4901);
                sendFrame164(4900);
                NpcDialogueSend = true;
                break;

            case 1921:
                sendInterfaceHidden(1, 2465);
                sendInterfaceHidden(0, 2468);
                sendFrame126("Select an Option", 2460);
                sendFrame126("Yea, i got it right here.", 2461);
                sendFrame126("No, I dont have it yet", 2462);
                sendFrame164(2459);
                NpcDialogueSend = true;
                break;

            case 1922:
                sendFrame126(GetNpcName(NpcTalkTo), 4902);
                sendFrame126("", 4903);
                sendFrame126("@red@THEN FIND IT!!!@red@*Hisssss*", 4904);
                sendFrame126("", 4905);
                sendFrame126("", 4906);
                sendFrame75(NpcTalkTo, 4901);
                sendFrame164(4900);
                NpcDialogueSend = true;
                break;
            case 1972:
                sendFrame126(GetNpcName(NpcTalkTo), 4902);
                sendFrame126("", 4903);
                sendFrame126("Hey there!", 4904);
                sendFrame126("Im a merchanter, and i REALLY need this stuff..", 4905);
                sendFrame126("In return,i take you to the shadow area.", 4906);
                sendFrame75(NpcTalkTo, 4901);
                sendFrame164(4900);
                NpcDialogueSend = true;
                sendMessage("Get the following,");
                sendMessage("1 yew log");
                sendMessage("1 RAW manta ray");
                sendMessage("1 tinderbox");
                sendMessage("1 soul rune");
                sendMessage("1 coif");
                sendMessage("1 Bronze platebody");
                break;

            case 1973:
                sendInterfaceHidden(1, 2465);
                sendInterfaceHidden(0, 2468);
                sendFrame126("Have you got it?", 2460);
                sendFrame126("Yea, right here.", 2461);
                sendFrame126("Not yet, sorry", 2462);
                sendFrame164(2459);
                NpcDialogueSend = true;
                break;

            case 1974:
                sendFrame126(GetNpcName(NpcTalkTo), 4902);
                sendFrame126("", 4903);
                sendFrame126("oh..to bad...", 4904);
                sendFrame126("was gonna take you to shadow cave..", 4905);
                sendFrame126("", 4906);
                sendFrame75(NpcTalkTo, 4901);
                sendFrame164(4900);
                NpcDialogueSend = true;
                break;
            case 905:
                sendFrame126(GetNpcName(NpcTalkTo), 4902);
                sendFrame126("", 4903);
                sendFrame126("Hey,"+playerName, 4904);
                sendFrame126("A diamond was stolen from me..", 4905);
                sendFrame126("Can you get it for me?", 4906);
                sendFrame75(NpcTalkTo, 4901);
                sendFrame164(4900);
                NpcDialogueSend = true;
                break;

            case 906:
                sendInterfaceHidden(1, 2465);
                sendInterfaceHidden(0, 2468);
                sendFrame126("i will show you the Smoke dungeon.", 2460);
                sendFrame126("Yes", 2461);
                sendFrame126("No", 2462);
                sendFrame164(2459);
                NpcDialogueSend = true;
                break;

            case 907:
                sendFrame126(GetNpcName(NpcTalkTo), 4902);
                sendFrame126("", 4903);
                sendFrame126("", 4904);
                sendFrame126("alright.its on you.", 4905);
                sendFrame126("However i would have shown you Smoke Dungeon", 4906);
                sendFrame75(NpcTalkTo, 4901);
                sendFrame164(4900);
                NpcDialogueSend = true;
                break;

            case 501:
                sendFrame126(GetNpcName(NpcTalkTo), 4902);
                sendFrame126("", 4903);
                sendFrame126("You have finished the Quest!", 4904);
                sendFrame126("in return..i will teach you ancient magicks", 4905);
                sendFrame126("", 4906);
                sendFrame75(NpcTalkTo, 4901);
                sendFrame164(4900);
                NpcDialogueSend = true;
                break;
        }
    }

    /* Equipment level checking*/
    public int GetCLAttack(int ItemID) {
        if (ItemID == ItemIDs.ATTACK_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.ATTACK_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.ATTACK_HOOD) {
            return 99;
        }
        if (ItemID == 667) {
            return 80;
        }
        if (ItemID == 35) {
            return 1;
        }
        if (ItemID == 746) {
            return 80;
        }
        if (ItemID == 14915) {
            return 60;
        }
        if (ItemID == 3202) {
            return 40;
        }
        if (ItemID == ItemIDs.DRAGON_2H_SWORD) {
            return 60;
        }
        if (ItemID == 15333) {
            return 75;
        }
        if (ItemID == 15334) {
            return 75;
        }
        if (ItemID == 15335) {
            return 75;
        }
        if (ItemID == 15336) {
            return 75;
        }
        if (ItemID == 3101) {
            return 40;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);
        String ItemName2 = ItemName.replaceAll("Bronze", "");

        ItemName2 = ItemName2.replaceAll("Iron", "");
        ItemName2 = ItemName2.replaceAll("Steel", "");
        ItemName2 = ItemName2.replaceAll("Black", "");
        ItemName2 = ItemName2.replaceAll("Mithril", "");
        ItemName2 = ItemName2.replaceAll("Adamant", "");
        ItemName2 = ItemName2.replaceAll("Rune", "");
        ItemName2 = ItemName2.replaceAll("Granite", "");
        ItemName2 = ItemName2.replaceAll("Dragon", "");
        ItemName2 = ItemName2.replaceAll("Crystal", "");
        ItemName2 = ItemName2.trim();
        if (ItemName2.startsWith("claws") || ItemName2.startsWith("dagger")
                || ItemName2.startsWith("sword")
                || ItemName2.startsWith("scimitar")
                || ItemName2.startsWith("mace")
                || ItemName2.startsWith("longsword")
                || ItemName2.startsWith("battleaxe")
                || ItemName2.startsWith("warhammer")
                || ItemName2.startsWith("2h sword")
                || ItemName2.startsWith("harlberd")) {
            if (ItemName.startsWith("Bronze")) {
                return 1;
            } else if (ItemName.startsWith("Iron")) {
                return 1;
            } else if (ItemName.startsWith("Attack Cape")) {
                return 100;
            } else if (ItemName.startsWith("Steel")) {
                return 5;
            } else if (ItemName.startsWith("Black")) {
                return 10;
            } else if (ItemName.startsWith("Mithril")) {
                return 20;
            } else if (ItemName.startsWith("Adamant")) {
                return 30;
            } else if (ItemName.startsWith("Rune")) {
                return 40;
            } else if (ItemName.startsWith("Dragon")) {
                return 60;
            } else if (ItemName.startsWith("White")) {
                return 10;
            } else if (ItemID == 10705) {
                return 1;
            }
        } else if (ItemName.startsWith("Granite")) {
            return 50;
        } else if (ItemName.endsWith("whip")
                || ItemName.endsWith("Ahrims staff")
                || ItemName.endsWith("Torags hammers")
                || ItemName.endsWith("Veracs flail")
                || ItemName.endsWith("Guthans warspear")
                || ItemName.endsWith("Dharoks greataxe")) {
            return 70;
        }
        return 1;
    }

    public int GetCLPrayer(int ItemID) {
        if (ItemID == ItemIDs.PRAYER_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.PRAYER_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.PRAYER_HOOD) {
            return 99;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Prayer cape")) {
            return 99;
        }
        if (ItemName.startsWith("Prayer hood")) {
            return 99;
        }
        return 1;
    }

    public int GetCLFletching(int ItemID) {
        if (ItemID == ItemIDs.FLETCHING_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.FLETCHING_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.FLETCHING_HOOD) {
            return 99;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Fletching cape")) {
            return 99;
        }
        if (ItemName.startsWith("Fletching hood")) {
            return 99;
        }
        return 1;
    }

    public int GetCLWoodcutting(int ItemID) {
        if (ItemID == ItemIDs.WOODCUTTING_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.WOODCUT_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.WOODCUTTING_HOOD) {
            return 99;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Woodcut. cape")) {
            return 100;
        }
        if (ItemName.startsWith("Woodcutting hood")) {
            return 100;
        }
        return 1;
    }

    public int GetCLCooking(int ItemID) {
        if (ItemID == ItemIDs.COOKING_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.COOKING_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.COOKING_HOOD) {
            return 99;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Cooking cape")) {
            return 99;
        }
        if (ItemName.startsWith("Cooking hood")) {
            return 99;
        }
        return 1;
    }

    public int GetCLFishing(int ItemID) {
        if (ItemID == ItemIDs.FISHING_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.FISHING_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.FISHING_HOOD) {
            return 99;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Fishing cape")) {
            return 99;
        }
        if (ItemName.startsWith("Fishing hood")) {
            return 99;
        }
        return 1;
    }

    public int GetCLThieving(int ItemID) {
        if (ItemID == ItemIDs.THIEVING_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.THIEVING_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.THIEVING_HOOD) {
            return 99;
        }

        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Thieving cape")) {
            return 99;
        }
        if (ItemName.startsWith("Thieving hood")) {
            return 99;
        }
        return 1;
    }

    public int GetCLHitpoints(int ItemID) {
        if (ItemID == ItemIDs.HITPOINTS_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.HITPOINTS_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.HITPOINTS_HOOD) {
            return 99;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Hitpoints cape")) {
            return 99;
        }
        if (ItemName.startsWith("Hitpoints hood")) {
            return 99;
        }
        return 1;
    }

    public int GetCLFarming(int ItemID) {
        if (ItemID == ItemIDs.FARMING_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.FARMING_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.FARMING_HOOD) {
            return 99;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Farming cape")) {
            return 99;
        }
        if (ItemName.startsWith("Farming hood")) {
            return 99;
        }
        return 1;
    }

    public int GetCLSlayer(int ItemID) {
        if (ItemID == ItemIDs.SLAYER_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.SLAYER_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.SLAYER_HOOD) {
            return 99;
        }
        if (ItemID == 4170) {
            return 80;
        }
        if (ItemID == 4156) {
            return 60;
        }
        if (ItemID == 4166) {
            return 70;
        }
        if (ItemID == 7053) {
            return 60;
        }
        if (ItemID == 4164) {
            return 55;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Slayer cape")) {
            return 99;
        }
        if (ItemName.startsWith("Slayer hood")) {
            return 99;
        }
        return 1;
    }

    public int GetCLDefence(int ItemID) {
        if (ItemID == ItemIDs.BLACK_DHIDE_CHAPS) {
            return 40;
        }
        if (ItemID == ItemIDs.BLACK_DHIDE_VAMB) {
            return 40;
        }
        if (ItemID == ItemIDs.BLACK_DHIDE_BODY) {
            return 40;
        }
        if (ItemID == ItemIDs.RED_DHIDE_CHAPS) {
            return 40;
        }
        if (ItemID == ItemIDs.RED_DHIDE_VAMB) {
            return 40;
        }
        if (ItemID == ItemIDs.RED_DHIDE_BODY) {
            return 40;
        }
        if (ItemID == ItemIDs.GREEN_DHIDE_VAMB) {
            return 40;
        }
        if (ItemID == ItemIDs.GREEN_DHIDE_CHAPS) {
            return 40;
        }
        if (ItemID == ItemIDs.GREEN_DHIDE_BODY) {
            return 40;
        }
        if (ItemID == ItemIDs.BANDOS_TASSETS) {
            return 75;
        }
        if (ItemID == ItemIDs.BANDOS_CHESTPLATE) {
            return 75;
        }
        if (ItemID == ItemIDs.BANDOS_BOOTS) {
            return 75;
        }
        if (ItemID == ItemIDs.DEFENCE_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.DEFENCE_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.DEFENCE_HOOD) {
            return 99;
        }
        if (ItemID == ItemIDs.RUNE_FULL_HELM) {
            return 40;
        }
        if (ItemID == 10228) {
            return 5;
        }
        if (ItemID == 10229) {
            return 10;
        }
        if (ItemID == 10230) {
            return 20;
        }
        if (ItemID == 10231) {
            return 30;
        }
        if (ItemID == 10232) {
            return 40;
        }
        if (ItemID == 1127) {
            return 40;
        }
        if (ItemID == 1079) {
            return 40;
        }
        if (ItemID == 1093) {
            return 40;
        }
        if (ItemID == 1201) {
            return 40;
        }
        if (ItemID == 1185) {
            return 40;
        }
        if (ItemID == 4131) {
            return 40;
        }
        if (ItemID == 4716) {
            return 70;
        }
        if (ItemID == 4720) {
            return 70;
        }
        if (ItemID == 4722) {
            return 70;
        }
        if (ItemID == 11981) {
            return 60;
        }
        if (ItemID == 11824) {
            return 60;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);
        String ItemName2 = ItemName.replaceAll("Bronze", "");

        ItemName2 = ItemName2.replaceAll("Iron", "");
        ItemName2 = ItemName2.replaceAll("Steel", "");
        ItemName2 = ItemName2.replaceAll("Mithril", "");
        ItemName2 = ItemName2.replaceAll("Adamant", "");
        ItemName2 = ItemName2.replaceAll("Rune", "");
        ItemName2 = ItemName2.replaceAll("Granite", "");
        ItemName2 = ItemName2.replaceAll("Dragon", "");
        ItemName2 = ItemName2.replaceAll("White", "");
        ItemName2 = ItemName2.replaceAll("Crystal", "");
        ItemName2 = ItemName2.trim();
        if (ItemName2.startsWith("claws") || ItemName2.startsWith("dagger")
                || ItemName2.startsWith("sword")
                || ItemName2.startsWith("scimitar")
                || ItemName2.startsWith("mace")
                || ItemName2.startsWith("longsword")
                || ItemName2.startsWith("battleaxe")
                || ItemName2.startsWith("warhammer")
                || ItemName2.startsWith("2h sword")
                || ItemName2.startsWith("harlberd")) {// It's a weapon, weapons don't required defence !
        } else if (ItemName.startsWith("Ahrims") || ItemName.startsWith("Karil")
                || ItemName.startsWith("Torag") || ItemName.startsWith("Verac")
                || ItemName.startsWith("Guthans") || ItemName.endsWith("Dharok")) {
            if (ItemName.endsWith("staff") || ItemName.endsWith("crossbow")
                    || ItemName.endsWith("hammers")
                    || ItemName.endsWith("flail")
                    || ItemName.endsWith("warspear")
                    || ItemName.endsWith("greataxe")) {// No defence for the barrow weapons
            } else {
                return 70;
            }
        } else {
            if (ItemName.startsWith("Bronze")) {
                return 1;
            } else if (ItemName.startsWith("Iron")) {
                return 1;
            } else if (ItemName.startsWith("Defence Cape")) {
                return 100;
            } else if (ItemName.startsWith("Steel")) {
                return 5;
            } else if (ItemName.startsWith("Mithril")) {
                return 20;
            } else if (ItemName.startsWith("Adamant")) {
                return 30;
            } else if (ItemName.startsWith("Rune full helm")) {
                return 40;
            } else if (ItemName.startsWith("Rune Platelegs")) {
                return 40;
            } else if (ItemName.startsWith("Rune Platebody")) {
                return 40;
            } else if (ItemName.startsWith("Rune Plateskirt")) {
                return 40;
            } else if (ItemName.startsWith("Rune Kite Shield")) {
                return 40;
            } else if (ItemName.startsWith("Dragon")) {
                return 60;
            } else if (ItemName.startsWith("dragon")) {
                return 60;
            } else if (ItemName.startsWith("dragon Boots")) {
                return 99;
            } else if (ItemName.startsWith("White")) {
                return 1;
            } else if (ItemName.startsWith("Initiate")) {
                return 20;
            } else if (ItemName.startsWith("initiate")) {
                return 20;
            } else if (ItemName.endsWith("Cavalier")) {
                return 1;
            } else if (ItemName.startsWith("steel axe")) {
                return 1;
            } else if (ItemName.startsWith("black axe")) {
                return 1;
            } else if (ItemName.startsWith("mithril axe")) {
                return 1;
            } else if (ItemName.startsWith("adamant axe")) {
                return 1;
            } else if (ItemName.startsWith("rune axe")) {
                return 1;
            } else if (ItemName.startsWith("dragon axe")) {
                return 1;
            } else if (ItemName.startsWith("steel pickaxe")) {
                return 1;
            } else if (ItemName.startsWith("black pickaxe")) {
                return 1;
            } else if (ItemName.startsWith("mithril pickaxe")) {
                return 1;
            } else if (ItemName.startsWith("adamant pickaxe")) {
                return 1;
            } else if (ItemName.startsWith("rune pickaxe")) {
                return 1;
            } else if (ItemName.startsWith("dragon pickaxe")) {
                return 1;
            } else if (ItemName.startsWith("Berserker_helm")) {
                return 45;
            } else if (ItemName.endsWith("2h sword")) {
                return 1;
            } else if (ItemName.endsWith("halberd")) {
                return 1;
            } else if (ItemName.endsWith("spear(s)")) {
                return 1;
            } else if (ItemName.endsWith("guthix")) {
                return 40;
            }
        }
        return 1;
    }

    public int GetCLStrength(int ItemID) {
        if (ItemID == ItemIDs.MEAT_TENDERISER) {
            return 80;
        }
        if (ItemID == ItemIDs.TZHAAR_KET_OM) {
            return 60;
        }
        if (ItemID == ItemIDs.STRENGTH_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.STRENGTH_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.STRENGTH_HOOD) {
            return 99;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Granite")) {
            return 50;
        } else if (ItemName.startsWith("Torags hammers")
                || ItemName.endsWith("Dharoks greataxe")) {
            return 70;
        } else if (ItemName.startsWith("Strength Cape")) {
            return 99;
        }
        return 1;
    }

    public int GetCLMagic(int ItemID) {
        if (ItemID == ItemIDs.MAGIC_CAPE) {
            return 99;
        }
        if (ItemID == ItemIDs.MAGIC_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.MAGIC_HOOD) {
            return 99;
        }
        if (ItemID == ItemIDs.INFINITY_HAT) {
            return 70;
        }
        if (ItemID == ItemIDs.INFINITY_TOP) {
            return 70;
        }
        if (ItemID == ItemIDs.INFINITY_BOTTOMS) {
            return 70;
        }
        if (ItemID == ItemIDs.INFINITY_BOOTS) {
            return 70;
        }
        if (ItemID == ItemIDs.INFINITY_GLOVES) {
            return 70;
        }
        if (ItemID == ItemIDs.SARADOMIN_CAPE) {
            return 60;
        }
        if (ItemID == ItemIDs.ZAMORAK_CAPE) {
            return 60;
        }
        if (ItemID == ItemIDs.GUTHIX_CAPE) {
            return 60;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Ahrim")) {
            return 70;
        }
        if (ItemName.startsWith("Magic Cape")) {
            return 99;
        }
        return 1;
    }

    public int GetCLRanged(int ItemID) {
        if (ItemID == ItemIDs.RANGING_CAPE) {
            return 99;
        }
        if (ItemID == 11154) {
            return 80;
        }
        if (ItemID == ItemIDs.RANGING_CAPET) {
            return 99;
        }
        if (ItemID == ItemIDs.RANGING_HOOD) {
            return 99;
        }
        if (ItemID == 859) {
            return 1;
        }
        if (ItemID == 861) {
            return 1;
        }
        if (ItemID == 1135) {
            return 1;
        }
        if (ItemID == 1099) {
            return 1;
        }
        if (ItemID == 1065) {
            return 40;
        }
        if (ItemID == 2501) {
            return 60;
        }
        if (ItemID == 2495) {
            return 60;
        }
        if (ItemID == 2577) {
            return 1;
        }
        if (ItemID == 2581) {
            return 1;
        }
        if (ItemID == 10431) {
            return 65;
        }
        if (ItemID == 2489) {
            return 60;
        }
        if (ItemID == 11153) {
            return 80;
        }
        if (ItemID == 11235) {
            return 80;
        }
        if (ItemID == 10713) {
            return 99;
        }
        if (ItemID == 14084) {
            return 99;
        }
        if (ItemID == -1) {
            return 1;
        }
        String ItemName = GetItemName(ItemID);

        if (ItemName.startsWith("Karil")) {
            return 70;
        }
        if (ItemName.startsWith("Range Cape")) {
            return 99;
        }
        if (ItemName.startsWith("Dark Bow")) {
            return 99;
        }
        if (ItemName.startsWith("Crystal")) {
            return 75;
        }
        if (ItemName.startsWith("Seercull")) {
            return 70;
        }
        if (ItemName.startsWith("Dharoks")) {
            return 99;
        }
        if (ItemID == 2497) {
            return 70;
        }
        return 1;
    }

    public int GetWorld(int PlayerID) {
        try {

            /* String Server = PlayerHandler.players[PlayerID].playerServer;
             if (Server.equals("rs8.ath.cx")) {
             return 1;
             } else if (Server.equals("www.hiyascap3.smfforfree4.com")) {
             return 2;
             } else {
             //println_debug("Invalid Server: "+Server);
             return -5;
             }*/
            return 1;
        } catch (Exception e) {
            System.out.println("Getworld error");
            println_debug(e.toString());
            return 1;
        }

    }

    public PlayerSave loadMythgame(String playerName, String playerPass) {
        boolean exists = (new File("./Data/savedGames/" + playerName + ".dat")).exists();
        PlayerSave tempPlayer;

        try {
            if (exists || mythRetry == 3) {
                ObjectInputStream in = new ObjectInputStream(
                        new FileInputStream(
                                "./Data/savedGames/" + playerName + ".dat"));

                tempPlayer = (PlayerSave) in.readObject();
                in.close();
                System.out.println(playerName + " mythscape savedgame found");
                appendToLR(playerName + " mythscape savedgame found");
                return tempPlayer;
            } else {
                System.out.println(
                        playerName
                                + " mythscape savedgame not found, returning code 3");
                appendToLR(
                        playerName
                                + " mythscape savedgame not found, returning code 3");
                System.out.println(
                        playerName + " retrying to load mythscape savegame");
                appendToLR(playerName + " retrying to load mythscape savegame");
                mythRetry += 1;
            }
        } catch (Exception e) {
            return null;
        }
        return null;
    }

    public boolean ResetPlayerVars() {
        teleportToX = 0;
        teleportToY = 0;
        heightLevel = 0;
        setRights(Rights.PLAYER);
        playerIsMember = 0;
        playerHasDonated = 0;
        amDonated = 0;
        jailed = 0;
        playerMessages = 0;
        playerLastConnect = "";
        playerLastLogin = 20050101;
        playerEnergy = 0;
        playerEnergyGian = 0;
        playerFollowID = -1;
        playerGameTime = 0;
        playerGameCount = 0;
        for (int i = 0; i < playerItems.length; i++) {
            playerItems[i] = 0;
            playerItemsN[i] = 0;
        }
        for (int i = 0; i < playerEquipment.length; i++) {
            playerEquipment[i] = -1;
            playerEquipmentN[i] = 0;
        }
        for (int i = 0; i < bankItems.length; i++) {
            bankItems[i] = 0;
            bankItemsN[i] = 0;
        }
        for (int i = 0; i < bankItems2.length; i++) {
            bankItems2[i] = 0;
            bankItemsN2[i] = 0;
        }
        for (int i = 0; i < bankItems3.length; i++) {
            bankItems3[i] = 0;
            bankItemsN3[i] = 0;
        }
        for (int i = 0; i < playerLevel.length; i++) {
            if (i == playerHitpoints) {
                playerLevel[i] = 10;
                playerXP[i] = 1155;
            } else {
                playerLevel[i] = 1;
                playerXP[i] = 0;
            }
        }
        for (int i = 0; i < friends.length; i++) {
            friends[i] = 0;
        }
        for (int i = 0; i < ignores.length; i++) {
            ignores[i] = 0;
        }
        for (int i = 0; i < playerAppearance.length; i++) {
            playerAppearance[i] = -1;
        }
        for (int i = 0; i < playerColor.length; i++) {
            playerColor[i] = -1;
        }
        for (int i = 0; i < playerFollow.length; i++) {
            playerFollow[i] = 0;
        }
        resetTrade(); // no trading, so reset the trade vars
        return true;
    }

    public boolean saveasflagged() {
        BufferedWriter characterfile = null;

        try {
            characterfile = new BufferedWriter(
                    new FileWriter("./Data/flagged/" + playerName + ".txt"));
            characterfile.write("[FLAGGED]", 0, 9);
            characterfile.newLine();
            characterfile.write("This account might contain duped items", 0, 38);
            characterfile.newLine();
            characterfile.write("character-password = ", 0, 21);
            characterfile.write(playerPass, 0, playerPass.length());
            characterfile.newLine();
            characterfile.write("[EOF]", 0, 5);
            characterfile.newLine();
            characterfile.newLine();
            characterfile.close();
        } catch (IOException ioexception) {
            misc.println(playerName + ": error writing file.");
            return false;
        }
        return true;
    }

    public boolean saveasflaggedauto(int clicks) {
        BufferedWriter characterfile = null;

        try {
            characterfile = new BufferedWriter(
                    new FileWriter("./Data/flaggedauto//" + playerName + ".txt"));
            characterfile.write("[FLAGGED]", 0, 9);
            characterfile.newLine();
            characterfile.write(
                    "This account might of being autoclicking, check mouse logs!",
                    0, 58);
            characterfile.newLine();
            characterfile.newLine();
            characterfile.write("[EOF]", 0, 5);
            characterfile.newLine();
            characterfile.newLine();
            characterfile.close();
        } catch (IOException ioexception) {
            misc.println(playerName + ": error writing file.");
            return false;
        }

        return true;
    }

    public int loadmoreinfo() {
        String line = "";
        String token = "";
        String token2 = "";
        String[] token3 = new String[3];
        boolean EndOfFile = false;
        int ReadMode = 0;
        BufferedReader characterfile = null;
        BufferedReader characterfile2 = null;
        boolean File1 = false;
        boolean File2 = false;

        try {
            characterfile = new BufferedReader(
                    new FileReader("./Data/moreinfo/" + playerName + ".txt"));
            File1 = true;
        } catch (FileNotFoundException fileex1) {
        }
        if (File1 && File2) {
            File myfile1 = new File("./Data/moreinfo/" + playerName + ".txt");
            File myfile2 = new File("./Data/moreinfo/" + playerName + ".txt");

            if (myfile1.lastModified() < myfile2.lastModified()) {
                characterfile = characterfile2;
            }
        } else if (!File1 && File2) {
            characterfile = characterfile2;
        } else if (!File1 && !File2) {
            misc.println(playerName + ": moreinfo file not found.");
            IsSnowing = randomWeather();
            savemoreinfo();
            return 3;
        }
        try {
            line = characterfile.readLine();
        } catch (IOException ioexception) {
            misc.println(playerName + ": error loading file.");
        }
        while (!EndOfFile && line != null) {
            line = line.trim();
            int spot = line.indexOf("=");

            if (spot > -1) {
                token = line.substring(0, spot);
                token = token.trim();
                token2 = line.substring(spot + 1);
                token2 = token2.trim();
                token3 = token2.split("\t");
                switch (ReadMode) {
                    case 1:
                        if (token.equals("character-clueid")) {
                            clueid = Integer.parseInt(token2);
                        } else if (token.equals("character-cluelevel")) {
                            cluelevel = Integer.parseInt(token2);
                        } else if (token.equals("character-cluestage")) {
                            cluestage = Integer.parseInt(token2);
                        } else if (token.equals("character-lastlogin")) {
                            playerLastConnect = (token2);
                        } else if (token.equals("character-lastlogintime")) {
                            lastlogintime = Integer.parseInt(token2);
                        } else if (token.equals("character-reputation")) {
                            reputation = Integer.parseInt(token2);
                        } else if (token.equals("character-ancients")) {
                            ancients = Integer.parseInt(token2);
                        } else if (token.equals("character-starter")) {
                            starter = Integer.parseInt(token2);
                        } else if (token.equals("character-rangestarter")) {
                            rangestarter = Integer.parseInt(token2);
                        } else if (token.equals("character-magestarter")) {
                            magestarter = Integer.parseInt(token2);
                        } else if (token.equals("character-hasegg")) {
                            hasegg = Integer.parseInt(token2);
                        } else if (token.equals("character-hasset")) {
                            hasset = Integer.parseInt(token2);
                        } else if (token.equals("bankPin")) {
                            bankPin = token2;
                        } else if (token.equals("character-loyaltyRank")) {
                            loyaltyRank = Integer.parseInt(token2);
                        } else if (token.equals("setPin")) {
                            setPin = Boolean.parseBoolean(token2);
                        } else if (token.equals("character-pkpoints")) {
                            pkpoints = Integer.parseInt(token2);
                        } else if (token.equals("character-spawnpoints")) {
                            spawnpoints = Integer.parseInt(token2);
                        } else if (token.equals("character-killcount")) {
                            killcount = Integer.parseInt(token2);
                        } else if (token.equals("character-deathcount")) {
                            deathcount = Integer.parseInt(token2);
                        } else if (token.equals("character-mutedate")) {
                            mutedate = Integer.parseInt(token2);
                        } else if (token.equals("character-Dhkills")) {
                            Dhkills = Integer.parseInt(token2);
                        } else if (token.equals("character-Varcekills")) {
                            Varcekills = Integer.parseInt(token2);
                        } else if (token.equals("character-Zombiekills")) {
                            Zombiekills = Integer.parseInt(token2);
                        } else if (token.equals("character-Toragkills")) {
                            Toragkills = Integer.parseInt(token2);
                        } else if (token.equals("character-Ahrimkills")) {
                            Ahrimkills = Integer.parseInt(token2);
                        } else if (token.equals("character-Guthankills")) {
                            Guthankills = Integer.parseInt(token2);
                        } else if (token.equals("character-Karilkills")) {
                            Karilkills = Integer.parseInt(token2);
                        } else if (token.equals("character-Chaoskills")) {
                            Chaoskills = Integer.parseInt(token2);
                        } else if (token.equals("character-Giantkills")) {
                            Giantkills = Integer.parseInt(token2);
                        } else if (token.equals("character-Ghostkills")) {
                            Ghostkills = Integer.parseInt(token2);
                        } else if (token.equals("character-Druidkills")) {
                            Druidkills = Integer.parseInt(token2);
                        } else if (token.equals("character-Demonkills")) {
                            Demonkills = Integer.parseInt(token2);
                        } else if (token.equals("character-JDemonkills")) {
                            JDemonkills = Integer.parseInt(token2);
                        } else if (token.equals("character-Generalkills")) {
                            Generalkills = Integer.parseInt(token2);
                        } else if (token.equals("character-height")) {
                            heightLevel = Integer.parseInt(token2);
                        }
                        break;

                    case 2:
                        if (token.equals("character-questpoints")) {
                            totalqp = Integer.parseInt(token2);
                        } else if (token.equals("character-quest_1")) {
                            q1stage = Integer.parseInt(token2);
                        } else if (token.equals("character-quest_2")) {
                            q2stage = Integer.parseInt(token2);
                        } else if (token.equals("character-quest_3")) {
                            q3stage = Integer.parseInt(token2);
                        }
                        break;

                    case 3:
                        if (token.equals("character-look")) {
                            playerAppearance[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[1]);
                        }
                        if (token.equals("character-color")) {
                            playerColor[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[1]);
                        }
                        if (token.equals("character-head")) {
                            pHead = Integer.parseInt(token2);
                        }
                        if (token.equals("character-torso")) {
                            pTorso = Integer.parseInt(token2);
                        }
                        if (token.equals("character-arms")) {
                            pArms = Integer.parseInt(token2);
                        }
                        if (token.equals("character-hands")) {
                            pHands = Integer.parseInt(token2);
                        }
                        if (token.equals("character-legs")) {
                            pLegs = Integer.parseInt(token2);
                        }
                        if (token.equals("character-feet")) {
                            pFeet = Integer.parseInt(token2);
                        }
                        if (token.equals("character-beard")) {
                            pBeard = Integer.parseInt(token2);
                        }
                        break;

                    case 4:
                        if (token.equals("character-friend")) {
                            friends[Integer.parseInt(token3[0])] = Long.parseLong(
                                    token3[1]);
                            friendslot = Integer.parseInt(token3[0]);
                            friend64 = Long.parseLong(token3[1]);
                            // System.out.println("Friends: "+friends);
                            // System.out.println("Loaded: "+Long.parseLong(token3[1]));
                            // System.out.println("Loaded: "+Integer.parseInt(token3[0]));
                        }
                        break;

                    case 5:
                        if (token.equals("character-ignore")) {
                            ignores[Integer.parseInt(token3[0])] = Long.parseLong(
                                    token3[1]);
                        }
                        break;

                    case 6:
                        if (token.equals("character-points")) {
                            hiddenPoints = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[1]")) {
                            foundz[1] = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[2]")) {
                            foundz[2] = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[3]")) {
                            foundz[3] = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[4]")) {
                            foundz[4] = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[5]")) {
                            foundz[5] = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[6]")) {
                            foundz[6] = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[7]")) {
                            foundz[7] = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[8]")) {
                            foundz[8] = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[9]")) {
                            foundz[9] = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[10]")) {
                            foundz[10] = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[11]")) {
                            foundz[11] = Integer.parseInt(token2);
                        }
                        if (token.equals("character-foundz[12]")) {
                            foundz[12] = Integer.parseInt(token2);
                        }
                        break;
                }
            } else {
                if (line.equals("[MOREINFO]")) {
                    ReadMode = 1;
                } else if (line.equals("[QUESTS]")) {
                    ReadMode = 2;
                } else if (line.equals("[LOOK]")) {
                    ReadMode = 3;
                } else if (line.equals("[FRIENDS]")) {
                    ReadMode = 4;
                } else if (line.equals("[IGNORES]")) {
                    ReadMode = 5;
                } else if (line.equals("[HIDDEN]")) {
                    ReadMode = 6;
                } else if (line.equals("[EOF]")) {
                    try {
                        characterfile.close();
                    } catch (IOException ioexception) {
                    }
                    return 1;
                }
            }
            try {
                line = characterfile.readLine();
            } catch (IOException ioexception1) {
                EndOfFile = true;
            }
        }
        try {
            characterfile.close();
        } catch (IOException ioexception) {
        }
        return 0;
    }

    public boolean savemoreinfo() {
        BufferedWriter characterfile = null;

        try {
            characterfile = new BufferedWriter(
                    new FileWriter("./Data/moreinfo/" + playerName + ".txt"));
            characterfile.write("[MOREINFO]", 0, 10);
            characterfile.newLine();
            characterfile.write("setPin = ", 0, 9);
            characterfile.write(Boolean.toString(setPin), 0, Boolean.toString(setPin).length());
            characterfile.newLine();
            characterfile.write("bankPin = ", 0, 10);
            characterfile.write(bankPin, 0, bankPin.length());
            characterfile.newLine();
            characterfile.write("character-clueid = ", 0, 19);
            characterfile.write(Integer.toString(clueid), 0,
                    Integer.toString(clueid).length());
            characterfile.newLine();
            characterfile.write("character-loyaltyRank = ", 0, 24);
            characterfile.write(Integer.toString(loyaltyRank), 0, Integer.toString(loyaltyRank).length());
            characterfile.newLine();
            characterfile.write("character-loyaltyRank = ", 0, 24);
            characterfile.write(Integer.toString(loyaltyRank), 0, Integer.toString(loyaltyRank).length());
            characterfile.newLine();
            characterfile.write("character-cluelevel = ", 0, 22);
            characterfile.write(Integer.toString(cluelevel), 0,
                    Integer.toString(cluelevel).length());
            characterfile.newLine();
            characterfile.write("character-cluestage = ", 0, 22);
            characterfile.write(Integer.toString(cluestage), 0,
                    Integer.toString(cluestage).length());
            characterfile.newLine();
            characterfile.write("character-Giantkills = ", 0, 22);
            characterfile.write(Integer.toString(Giantkills), 0,
                    Integer.toString(Giantkills).length());
            characterfile.newLine();
            characterfile.write("character-Ghostkills = ", 0, 22);
            characterfile.write(Integer.toString(Ghostkills), 0,
                    Integer.toString(Ghostkills).length());
            characterfile.newLine();
            characterfile.write("character-Druidkills = ", 0, 22);
            characterfile.write(Integer.toString(Druidkills), 0,
                    Integer.toString(Druidkills).length());
            characterfile.newLine();
            characterfile.write("character-Demonkills = ", 0, 22);
            characterfile.write(Integer.toString(Demonkills), 0,
                    Integer.toString(Demonkills).length());
            characterfile.newLine();
            characterfile.write("character-JDemonkills = ", 0, 22);
            characterfile.write(Integer.toString(JDemonkills), 0,
                    Integer.toString(JDemonkills).length());
            characterfile.newLine();
            characterfile.write("character-Generalkills = ", 0, 22);
            characterfile.write(Integer.toString(Generalkills), 0,
                    Integer.toString(Generalkills).length());
            characterfile.newLine();
            characterfile.write("character-Zombiekills = ", 0, 22);
            characterfile.write(Integer.toString(Zombiekills), 0,
                    Integer.toString(Zombiekills).length());
            characterfile.newLine();
            characterfile.write("character-lastlogin = ", 0, 22);
            characterfile.write(connectedFrom, 0, connectedFrom.length());
            characterfile.newLine();
            characterfile.write("character-lastlogintime = ", 0, 26);
            characterfile.write(Integer.toString(playerLastLogin), 0,
                    Integer.toString(playerLastLogin).length());
            characterfile.newLine();
            characterfile.write("character-reputation = ", 0, 23);
            characterfile.write(Integer.toString(reputation), 0,
                    Integer.toString(reputation).length());
            characterfile.newLine();
            characterfile.write("character-ancients = ", 0, 21);
            characterfile.write(Integer.toString(ancients), 0,
                    Integer.toString(ancients).length());
            characterfile.newLine();
            characterfile.write("character-starter = ", 0, 20);
            characterfile.write(Integer.toString(starter), 0,
                    Integer.toString(starter).length());
            characterfile.newLine();
            characterfile.write("character-rangestarter = ", 0, 25);
            characterfile.write(Integer.toString(rangestarter), 0,
                    Integer.toString(rangestarter).length());
            characterfile.newLine();
            characterfile.write("character-magestarter = ", 0, 24);
            characterfile.write(Integer.toString(magestarter), 0,
                    Integer.toString(magestarter).length());
            characterfile.newLine();
            characterfile.write("character-hasegg = ", 0, 19);
            characterfile.write(Integer.toString(hasegg), 0,
                    Integer.toString(hasegg).length());
            characterfile.newLine();
            characterfile.write("character-hasset = ", 0, 19);
            characterfile.write(Integer.toString(hasset), 0,
                    Integer.toString(hasset).length());
            characterfile.newLine();
            characterfile.write("character-pkpoints = ", 0, 21);
            characterfile.write(Integer.toString(pkpoints), 0,
                    Integer.toString(pkpoints).length());
            characterfile.newLine();
            characterfile.write("character-spawnpoints = ", 0, 24);
            characterfile.write(Integer.toString(spawnpoints), 0,
                    Integer.toString(spawnpoints).length());
            characterfile.newLine();
            characterfile.write("character-killcount = ", 0, 22);
            characterfile.write(Integer.toString(killcount), 0,
                    Integer.toString(killcount).length());
            characterfile.newLine();
            characterfile.write("character-deathcount = ", 0, 23);
            characterfile.write(Integer.toString(deathcount), 0,
                    Integer.toString(deathcount).length());
            characterfile.newLine();
            characterfile.write("character-mutedate = ", 0, 21);
            characterfile.write(Integer.toString(mutedate), 0,
                    Integer.toString(mutedate).length());
            characterfile.newLine();
            characterfile.write("character-height = ", 0, 19);
            characterfile.write(Integer.toString(heightLevel), 0,
                    Integer.toString(heightLevel).length());
            characterfile.newLine();
            characterfile.newLine();
            characterfile.write("[QUESTS]", 0, 8);
            characterfile.newLine();
            characterfile.write("character-questpoints = ", 0, 24);
            characterfile.write(Integer.toString(totalqp), 0,
                    Integer.toString(totalqp).length());
            characterfile.newLine();
            characterfile.write("character-quest_1 = ", 0, 20);
            characterfile.write(Integer.toString(q1stage), 0,
                    Integer.toString(q1stage).length());
            characterfile.newLine();
            characterfile.write("character-quest_2 = ", 0, 20);
            characterfile.write(Integer.toString(q2stage), 0,
                    Integer.toString(q2stage).length());
            characterfile.newLine();
            characterfile.write("character-quest_3 = ", 0, 20);
            characterfile.write(Integer.toString(q3stage), 0,
                    Integer.toString(q3stage).length());
            characterfile.newLine();
            characterfile.newLine();

            characterfile.write("[LOOK]", 0, 6);
            characterfile.newLine();
            for (int i = 0; i < playerAppearance.length; i++) {
                characterfile.write("character-look = ", 0, 17);
                characterfile.write(Integer.toString(i), 0,
                        Integer.toString(i).length());
                characterfile.write("	", 0, 1);
                characterfile.write(Integer.toString(playerAppearance[i]), 0,
                        Integer.toString(playerAppearance[i]).length());
                characterfile.newLine();

                characterfile.write("character-head = ", 0, 17);
                characterfile.write(Integer.toString(pHead), 0,
                        Integer.toString(pHead).length());
                characterfile.newLine();
                characterfile.write("character-torso = ", 0, 18);
                characterfile.write(Integer.toString(pTorso), 0,
                        Integer.toString(pTorso).length());
                characterfile.newLine();
                characterfile.write("character-arms = ", 0, 17);
                characterfile.write(Integer.toString(pArms), 0,
                        Integer.toString(pArms).length());
                characterfile.newLine();
                characterfile.write("character-hands = ", 0, 18);
                characterfile.write(Integer.toString(pHands), 0,
                        Integer.toString(pHands).length());
                characterfile.newLine();
                characterfile.write("character-legs = ", 0, 17);
                characterfile.write(Integer.toString(pLegs), 0,
                        Integer.toString(pLegs).length());
                characterfile.newLine();
                characterfile.write("character-feet = ", 0, 17);
                characterfile.write(Integer.toString(pFeet), 0,
                        Integer.toString(pFeet).length());
                characterfile.newLine();
                characterfile.write("character-beard = ", 0, 18);
                characterfile.write(Integer.toString(pBeard), 0,
                        Integer.toString(pBeard).length());
                characterfile.newLine();
                characterfile.newLine();

            }
            characterfile.newLine();
            characterfile.write("[FRIENDS]", 0, 9);
            characterfile.newLine();
            for (int i = 0; i < friends.length; i++) {
                if (friends[i] > 0) {
                    characterfile.write("character-friend = ", 0, 19);
                    characterfile.write(Integer.toString(i), 0,
                            Integer.toString(i).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Long.toString(friends[i]), 0,
                            Long.toString(friends[i]).length());
                    characterfile.newLine();
                }
            }
            characterfile.newLine();
            characterfile.write("[IGNORES]", 0, 9);
            characterfile.newLine();
            for (int i = 0; i < ignores.length; i++) {
                if (ignores[i] > 0) {
                    characterfile.write("character-ignore = ", 0, 19);
                    characterfile.write(Integer.toString(i), 0,
                            Integer.toString(i).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Long.toString(ignores[i]), 0,
                            Long.toString(ignores[i]).length());
                    characterfile.newLine();
                }
            }
            characterfile.newLine();
            characterfile.write("[HIDDEN]", 0, 8);
            characterfile.newLine();
            characterfile.write("character-points = ", 0, 19);
            characterfile.write(Integer.toString(hiddenPoints), 0,
                    Integer.toString(hiddenPoints).length());
            characterfile.newLine();
            characterfile.write("character-foundz[1] = ", 0, 22);
            characterfile.write(Integer.toString(foundz[1]), 0,
                    Integer.toString(foundz[1]).length());
            characterfile.newLine();
            characterfile.write("character-foundz[2] = ", 0, 22);
            characterfile.write(Integer.toString(foundz[2]), 0,
                    Integer.toString(foundz[2]).length());
            characterfile.newLine();
            characterfile.write("character-foundz[3] = ", 0, 22);
            characterfile.write(Integer.toString(foundz[3]), 0,
                    Integer.toString(foundz[3]).length());
            characterfile.newLine();
            characterfile.write("character-foundz[4] = ", 0, 22);
            characterfile.write(Integer.toString(foundz[4]), 0,
                    Integer.toString(foundz[4]).length());
            characterfile.newLine();
            characterfile.write("character-foundz[5] = ", 0, 22);
            characterfile.write(Integer.toString(foundz[5]), 0,
                    Integer.toString(foundz[5]).length());
            characterfile.newLine();
            characterfile.write("character-foundz[6] = ", 0, 22);
            characterfile.write(Integer.toString(foundz[6]), 0,
                    Integer.toString(foundz[6]).length());
            characterfile.newLine();
            characterfile.write("character-foundz[7] = ", 0, 22);
            characterfile.write(Integer.toString(foundz[7]), 0,
                    Integer.toString(foundz[7]).length());
            characterfile.newLine();
            characterfile.write("character-foundz[8] = ", 0, 22);
            characterfile.write(Integer.toString(foundz[8]), 0,
                    Integer.toString(foundz[8]).length());
            characterfile.newLine();
            characterfile.write("character-foundz[9] = ", 0, 22);
            characterfile.write(Integer.toString(foundz[9]), 0,
                    Integer.toString(foundz[9]).length());
            characterfile.newLine();
            characterfile.write("character-foundz[10] = ", 0, 23);
            characterfile.write(Integer.toString(foundz[10]), 0,
                    Integer.toString(foundz[10]).length());
            characterfile.newLine();
            characterfile.write("character-foundz[11] = ", 0, 23);
            characterfile.write(Integer.toString(foundz[11]), 0,
                    Integer.toString(foundz[11]).length());
            characterfile.newLine();
            characterfile.write("character-foundz[12] = ", 0, 23);
            characterfile.write(Integer.toString(foundz[12]), 0,
                    Integer.toString(foundz[12]).length());
            characterfile.newLine();
            characterfile.newLine();
            characterfile.write("[EOF]", 0, 5);
            characterfile.newLine();
            characterfile.newLine();
            characterfile.close();
        } catch (IOException ioexception) {
            misc.println(playerName + ": error writing file.");
            return false;
        }
        return true;
    }

    public int loadweather() {
        String line = "";
        String token = "";
        String token2 = "";
        String[] token3 = new String[3];
        boolean EndOfFile = false;
        int ReadMode = 0;
        BufferedReader characterfile = null;
        BufferedReader characterfile2 = null;
        boolean File1 = false;
        boolean File2 = false;

        try {
            characterfile = new BufferedReader(
                    new FileReader("./Data/data/weather.txt"));
            File1 = true;
        } catch (FileNotFoundException fileex1) {
        }
        if (File1 && File2) {
            File myfile1 = new File("./Data/data/weather.txt");
            File myfile2 = new File("./Data/data/weather.txt");

            if (myfile1.lastModified() < myfile2.lastModified()) {
                characterfile = characterfile2;
            }
        } else if (!File1 && File2) {
            characterfile = characterfile2;
        } else if (!File1 && !File2) {
            misc.println(playerName + ": weather file not found.");
            IsSnowing = randomWeather();
            saveweather();
        }
        try {
            line = characterfile.readLine();
        } catch (IOException ioexception) {
            misc.println(playerName + ": error loading file.");
        }
        while (!EndOfFile && line != null) {
            line = line.trim();
            int spot = line.indexOf("=");

            if (spot > -1) {
                token = line.substring(0, spot);
                token = token.trim();
                token2 = line.substring(spot + 1);
                token2 = token2.trim();
                token3 = token2.split("\t");
                if (ReadMode == 1) {
                    if (token.equals("Weather")) {
                        IsSnowing = Integer.parseInt(token2);
                        System.out.println("LOADED: " + Integer.parseInt(token2));
                    }
                }
            } else {
                if (line.equals("[WEATHER]")) {
                    ReadMode = 1;
                } else if (line.equals("[EOF]")) {
                    try {
                        characterfile.close();
                    } catch (IOException ioexception) {
                    }
                    return 1;
                }
            }
            try {
                line = characterfile.readLine();
            } catch (IOException ioexception1) {
                EndOfFile = true;
            }
        }
        try {
            characterfile.close();
        } catch (IOException ioexception) {
        }
        return 0;
    }

    public boolean saveweather() {
        BufferedWriter characterfile = null;

        try {
            characterfile = new BufferedWriter(
                    new FileWriter("./Data/data/weather.txt"));
            characterfile.write("[WEATHER]", 0, 9);
            characterfile.newLine();
            characterfile.write("Weather = ", 0, 10);
            characterfile.write(Integer.toString(IsSnowing), 0,
                    Integer.toString(IsSnowing).length());
            characterfile.newLine();
            characterfile.newLine();

            characterfile.write("[EOF]", 0, 5);
            characterfile.newLine();
            characterfile.newLine();
            characterfile.close();
        } catch (IOException ioexception) {
            misc.println(playerName + ": error writing file.");
            return false;
        }
        return true;
    }

    public int loadGame(String playerName, String playerPass) {
        String filePath = "./Data/characters/" + playerName + ".json"; // JSON file path
        Gson gson = new Gson();
        PlayerData playerData;

        try (FileReader reader = new FileReader(filePath)) {
            // Deserialize the JSON file into a PlayerData object
            playerData = gson.fromJson(reader, PlayerData.class);

            // Validate username and password
            if (!playerName.equalsIgnoreCase(playerData.getUsername()) ||
                    !playerPass.equalsIgnoreCase(playerData.getPassword())) {
                return 2; // Invalid credentials
            }

            // Populate fields
            this.playerName = playerData.getUsername();
            this.playerPass = playerData.getPassword();
            this.displayName = playerData.getDisplayName();
            this.heightLevel = playerData.getHeightLevel();
            this.teleportToX = (playerData.getAbsX() <= 0 ? 3210 : playerData.getAbsX());
            this.teleportToY = (playerData.getAbsY() <= 0 ? 3424 : playerData.getAbsY());
            this.setRights(Rights.get(playerData.getRights()));
            this.runEnergy = playerData.getRunEnergy();
            this.runningToggled = playerData.isRunningToggled();
            this.daysPlayed = playerData.getDaysPlayed();
            this.hoursPlayed = playerData.getHoursPlayed();
            this.minutesPlayed = playerData.getMinutesPlayed();
            this.secondsPlayed = playerData.getSecondsPlayed();
            this.amDonated = playerData.getAmDonated();
            this.hasfirstfloorDone = playerData.isHasFirstFloorDone();
            this.hassecoundfloorDone = playerData.isHasSecondFloorDone();
            this.hasthirdfloorDone = playerData.isHasThirdFloorDone();
            this.hasfourthfloorDone = playerData.isHasFourthFloorDone();
            this.skullTimer = playerData.getSkullTimer();

            if (playerData.getSlayerTask().isPresent()) {
                this.getSlayer().setTask(playerData.getSlayerTask());
                this.getSlayer().setTaskAmount(playerData.getSlayerTaskAmount());
            }
            this.getSlayer().setMaster(playerData.getSlayerMaster());
            this.getSlayer().setConsecutiveTasks(playerData.getConsecutiveTasks());

            this.playerIsMember = playerData.getPlayerIsMember();
            this.playerHasDonated = playerData.getPlayerHasDonated();
            this.jailed = playerData.getJailed();
            this.playerMessages = playerData.getPlayerMessages();
            this.playerLastConnect = playerData.getPlayerLastConnect();
            this.playerUID = playerData.getPlayerUID();
            this.macAddress = playerData.getMacAddress();
            this.uuid = playerData.getUuid();
            this.countryCode = playerData.getCountryCode();
            this.playerLastLogin = playerData.getPlayerLastLogin();
            this.playerEnergy = playerData.getPlayerEnergy();
            this.playerGameTime = playerData.getPlayerGameTime();
            this.playerGameCount = playerData.getPlayerGameCount();
            this.loyaltyRank = playerData.getLoyaltyRank();
            this.prestigeLevel = playerData.getPrestigeLevel();

            // Copy arrays
            this.playerEquipment = playerData.getPlayerEquipment();
            this.playerEquipmentN = playerData.getPlayerEquipmentN();
            this.playerAppearance = playerData.getPlayerAppearance();
            this.playerColor = playerData.getPlayerColor();
            this.playerLevel = playerData.getPlayerLevel();
            this.playerXP = playerData.getPlayerXP();
            this.playerItems = playerData.getPlayerItems();
            this.playerItemsN = playerData.getPlayerItemsN();
            this.bankItems = playerData.getBankItems();
            this.bankItemsN = playerData.getBankItemsN();
            this.bankItems2 = playerData.getBankItems2();
            this.bankItemsN2 = playerData.getBankItemsN2();
            this.bankItems3 = playerData.getBankItems3();
            this.bankItemsN3 = playerData.getBankItemsN3();
            this.friends = playerData.getFriends();
            this.ignores = playerData.getIgnores();

            return 1; // Success

        } catch (FileNotFoundException e) {
            System.out.println(playerName + ": character file not found.");
            return 3; // File not found
        } catch (IOException e) {
            System.out.println(playerName + ": error loading file.");
            return 3; // Error loading file
        } catch (JsonSyntaxException e) {
            System.out.println(playerName + ": invalid JSON format.");
            return 3; // Invalid JSON format
        }
    }

    public boolean savechar() {
        PlayerData playerData = new PlayerData();
        playerData.setUsername(playerName);
        playerData.setPassword(playerPass);
        playerData.setDisplayName(displayName);
        playerData.setHeightLevel(heightLevel);
        playerData.setAbsX(absX);
        playerData.setAbsY(absY);
        playerData.setRights(getRights().getValue());
        playerData.setRunEnergy(runEnergy);
        playerData.setRunningToggled(runningToggled);
        playerData.setDaysPlayed(daysPlayed);
        playerData.setHoursPlayed(hoursPlayed);
        playerData.setMinutesPlayed(minutesPlayed);
        playerData.setSecondsPlayed(secondsPlayed);
        playerData.setAmDonated(amDonated);
        playerData.setHasFirstFloorDone(hasfirstfloorDone);
        playerData.setHasSecondFloorDone(hassecoundfloorDone);
        playerData.setHasThirdFloorDone(hasthirdfloorDone);
        playerData.setHasFourthFloorDone(hasfourthfloorDone);
        playerData.setSkullTimer(skullTimer);
        playerData.setSlayerTask(getSlayer().getTask());
        playerData.setSlayerTaskAmount(getSlayer().getTaskAmount());
        playerData.setSlayerMaster(getSlayer().getMaster());
        playerData.setConsecutiveTasks(getSlayer().getConsecutiveTasks());
        playerData.setPlayerIsMember(playerIsMember);
        playerData.setPlayerHasDonated(playerHasDonated);
        playerData.setJailed(jailed);
        playerData.setPlayerMessages(playerMessages);
        playerData.setPlayerLastConnect(playerLastConnect);
        playerData.setPlayerUID(playerUID);
        playerData.setMacAddress(macAddress);
        playerData.setUuid(uuid);
        playerData.setCountryCode(countryCode);
        playerData.setPlayerLastLogin(playerLastLogin);
        playerData.setPlayerEnergy(playerEnergy);
        playerData.setPlayerGameTime(playerGameTime);
        playerData.setPlayerGameCount(playerGameCount);
        playerData.setLoyaltyRank(loyaltyRank);
        playerData.setPrestigeLevel(prestigeLevel);
        playerData.setPlayerEquipment(playerEquipment);
        playerData.setPlayerEquipmentN(playerEquipmentN);
        playerData.setPlayerAppearance(playerAppearance);
        playerData.setPlayerColor(playerColor);
        playerData.setPlayerLevel(playerLevel);
        playerData.setPlayerXP(playerXP);
        playerData.setPlayerItems(playerItems);
        playerData.setPlayerItemsN(playerItemsN);
        playerData.setBankItems(bankItems);
        playerData.setBankItemsN(bankItemsN);
        playerData.setBankItems2(bankItems2);
        playerData.setBankItemsN2(bankItemsN2);
        playerData.setBankItems3(bankItems3);
        playerData.setBankItemsN3(bankItemsN3);
        playerData.setFriends(friends);
        playerData.setIgnores(ignores);

        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try (FileWriter writer = new FileWriter("./Data/characters/" + playerName + ".json")) {
            gson.toJson(playerData, writer);
        } catch (IOException e) {
            System.out.println(playerName + ": error writing file.");
            return false;
        }
        return true;
    }

    public boolean savecharbackupmyth(Player plr) {
        PlayerSave tempSave = new PlayerSave(plr);

        try {
            ObjectOutputStream out = new ObjectOutputStream(
                    new FileOutputStream(
                            "./Data/Backupmyth/" + tempSave.playerName + ".dat"));

            out.writeObject(tempSave);
            out.close();
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    public boolean savecharbackup() {
        BufferedWriter characterfile = null;

        try {
            characterfile = new BufferedWriter(
                    new FileWriter("./Data/Backup/" + playerName + ".txt"));

            /* ACCOUNT*/
            characterfile.write("[ACCOUNT]", 0, 9);
            characterfile.newLine();
            characterfile.write("character-username = ", 0, 21);
            characterfile.write(playerName, 0, playerName.length());
            characterfile.newLine();
            characterfile.write("character-password = ", 0, 21);
            characterfile.write(playerPass, 0, playerPass.length());
            characterfile.newLine();
            characterfile.newLine();

            /* CHARACTER*/
            characterfile.write("[CHARACTER]", 0, 11);
            characterfile.newLine();
            characterfile.write("character-height = ", 0, 19);
            characterfile.write(Integer.toString(heightLevel), 0,
                    Integer.toString(heightLevel).length());
            characterfile.newLine();
            characterfile.write("character-posx = ", 0, 17);
            characterfile.write(Integer.toString(absX), 0,
                    Integer.toString(absX).length());
            characterfile.newLine();
            characterfile.write("character-posy = ", 0, 17);
            characterfile.write(Integer.toString(absY), 0,
                    Integer.toString(absY).length());
            characterfile.newLine();
            characterfile.write("character-rights = ", 0, 19);
            characterfile.write(Integer.toString(getRights().getValue()), 0,
                    Integer.toString(getRights().getValue()).length());
            characterfile.newLine();
            characterfile.write("character-ismember = ", 0, 21);
            characterfile.write(Integer.toString(playerIsMember), 0,
                    Integer.toString(playerIsMember).length());
            characterfile.newLine();
            characterfile.write("character-isdonated = ", 0, 22);
            characterfile.write(Integer.toString(playerHasDonated), 0,
                    Integer.toString(playerHasDonated).length());
            characterfile.newLine();
            characterfile.write("character-messages = ", 0, 21);
            characterfile.write(Integer.toString(playerMessages), 0,
                    Integer.toString(playerMessages).length());
            characterfile.newLine();
            characterfile.write("character-lastconnection = ", 0, 27);
            characterfile.write(playerLastConnect, 0, playerLastConnect.length());
            characterfile.newLine();
            characterfile.write("character-lastlogin = ", 0, 22);
            characterfile.write(Integer.toString(playerLastLogin), 0,
                    Integer.toString(playerLastLogin).length());
            characterfile.newLine();
            characterfile.write("character-energy = ", 0, 19);
            characterfile.write(Integer.toString(playerEnergy), 0,
                    Integer.toString(playerEnergy).length());
            characterfile.newLine();
            characterfile.write("has-npc = ", 0, 10);
            characterfile.write(Boolean.toString(hasNpc), 0, Boolean.toString(hasNpc).length());
            characterfile.newLine();
            characterfile.write("summonId = ", 0, 11);
            characterfile.write(Integer.toString(summonId), 0, Integer.toString(summonId).length());
            characterfile.newLine();
            characterfile.write("character-gametime = ", 0, 21);
            characterfile.write(Integer.toString(playerGameTime), 0,
                    Integer.toString(playerGameTime).length());
            characterfile.newLine();
            characterfile.write("character-gamecount = ", 0, 22);
            characterfile.write(Integer.toString(playerGameCount), 0,
                    Integer.toString(playerGameCount).length());
            characterfile.newLine();
            characterfile.newLine();

            /* EQUIPMENT*/
            characterfile.write("[EQUIPMENT]", 0, 11);
            characterfile.newLine();
            for (int i = 0; i < playerEquipment.length; i++) {
                characterfile.write("character-equip = ", 0, 18);
                characterfile.write(Integer.toString(i), 0,
                        Integer.toString(i).length());
                characterfile.write("	", 0, 1);
                characterfile.write(Integer.toString(playerEquipment[i]), 0,
                        Integer.toString(playerEquipment[i]).length());
                characterfile.write("	", 0, 1);
                characterfile.write(Integer.toString(playerEquipmentN[i]), 0,
                        Integer.toString(playerEquipmentN[i]).length());
                characterfile.write("	", 0, 1);
                characterfile.newLine();
            }
            characterfile.newLine();

            /* LOOK*/
            characterfile.write("[LOOK]", 0, 6);
            characterfile.newLine();
            for (int i = 0; i < playerAppearance.length; i++) {
                characterfile.write("character-look = ", 0, 17);
                characterfile.write(Integer.toString(i), 0,
                        Integer.toString(i).length());
                characterfile.write("	", 0, 1);
                characterfile.write(Integer.toString(playerAppearance[i]), 0,
                        Integer.toString(playerAppearance[i]).length());
                characterfile.newLine();
            }
            characterfile.newLine();

            /* SKILLS*/
            characterfile.write("[SKILLS]", 0, 8);
            characterfile.newLine();
            for (int i = 0; i < playerLevel.length; i++) {
                characterfile.write("character-skill = ", 0, 18);
                characterfile.write(Integer.toString(i), 0,
                        Integer.toString(i).length());
                characterfile.write("	", 0, 1);
                characterfile.write(Integer.toString(playerLevel[i]), 0,
                        Integer.toString(playerLevel[i]).length());
                characterfile.write("	", 0, 1);
                characterfile.write(Integer.toString(playerXP[i]), 0,
                        Integer.toString(playerXP[i]).length());
                characterfile.newLine();
            }
            characterfile.newLine();

            /* ITEMS*/
            characterfile.write("[ITEMS]", 0, 7);
            characterfile.newLine();
            for (int i = 0; i < playerItems.length; i++) {
                if (playerItems[i] > 0) {
                    characterfile.write("character-item = ", 0, 17);
                    characterfile.write(Integer.toString(i), 0,
                            Integer.toString(i).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Integer.toString(playerItems[i]), 0,
                            Integer.toString(playerItems[i]).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Integer.toString(playerItemsN[i]), 0,
                            Integer.toString(playerItemsN[i]).length());
                    characterfile.newLine();
                }
            }
            characterfile.newLine();

            /* BANK*/
            characterfile.write("[BANK]", 0, 6);
            characterfile.newLine();
            for (int i = 0; i < bankItems.length; i++) {
                if (bankItems[i] > 0) {
                    characterfile.write("character-bank = ", 0, 17);
                    characterfile.write(Integer.toString(i), 0,
                            Integer.toString(i).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Integer.toString(bankItems[i]), 0,
                            Integer.toString(bankItems[i]).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Integer.toString(bankItemsN[i]), 0,
                            Integer.toString(bankItemsN[i]).length());
                    characterfile.newLine();
                }
            }
            characterfile.newLine();

            /* BANK2*/
            characterfile.write("[BANK2]", 0, 7);
            characterfile.newLine();
            for (int i = 0; i < bankItems2.length; i++) {
                if (bankItems2[i] > 0) {
                    characterfile.write("character-bank2 = ", 0, 18);
                    characterfile.write(Integer.toString(i), 0,
                            Integer.toString(i).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Integer.toString(bankItems2[i]), 0,
                            Integer.toString(bankItems2[i]).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Integer.toString(bankItemsN2[i]), 0,
                            Integer.toString(bankItemsN2[i]).length());
                    characterfile.newLine();
                }
            }
            characterfile.newLine();

            /* BANK2*/
            characterfile.write("[BANK3]", 0, 7);
            characterfile.newLine();
            for (int i = 0; i < bankItems3.length; i++) {
                if (bankItems3[i] > 0) {
                    characterfile.write("character-bank3 = ", 0, 18);
                    characterfile.write(Integer.toString(i), 0,
                            Integer.toString(i).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Integer.toString(bankItems3[i]), 0,
                            Integer.toString(bankItems3[i]).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Integer.toString(bankItemsN3[i]), 0,
                            Integer.toString(bankItemsN3[i]).length());
                    characterfile.newLine();
                }
            }
            characterfile.newLine();

            /* FRIENDS*/
            characterfile.write("[FRIENDS]", 0, 9);
            characterfile.newLine();
            for (int i = 0; i < friends.length; i++) {
                if (friends[i] > 0) {
                    characterfile.write("character-friend = ", 0, 19);
                    characterfile.write(Integer.toString(i), 0,
                            Integer.toString(i).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Long.toString(friends[i]), 0,
                            Long.toString(friends[i]).length());
                    characterfile.newLine();
                }
            }
            characterfile.newLine();

            /* IGNORES*/
            characterfile.write("[IGNORES]", 0, 9);
            characterfile.newLine();
            for (int i = 0; i < ignores.length; i++) {
                if (ignores[i] > 0) {
                    characterfile.write("character-ignore = ", 0, 19);
                    characterfile.write(Integer.toString(i), 0,
                            Integer.toString(i).length());
                    characterfile.write("	", 0, 1);
                    characterfile.write(Long.toString(ignores[i]), 0,
                            Long.toString(ignores[i]).length());
                    characterfile.newLine();
                }
            }
            characterfile.newLine();

            /* EOF*/
            characterfile.write("[EOF]", 0, 5);
            characterfile.newLine();
            characterfile.newLine();
            characterfile.close();
        } catch (IOException ioexception) {
            misc.println(playerName + ": error writing file.");
            return false;
        }
        return true;
    }

    public int loadcharbackup() {
        String line = "";
        String token = "";
        String token2 = "";
        String[] token3 = new String[3];
        boolean EndOfFile = false;
        int ReadMode = 0;
        BufferedReader characterfile = null;
        BufferedReader characterfile2 = null;
        boolean File1 = false;
        boolean File2 = false;
        String FTPAdress = "ftp://whitescape:password@81.165.211.142:2500";
        int World = GetWorld(playerId);

        // ResetPlayerVars();
        if (World == 2) {// FTPAdress = "ftp://white:azertyqume@white.22kb.com:21";
        }
        try {
            characterfile = new BufferedReader(
                    new FileReader("./Data/backup/" + playerName + ".txt"));
            File1 = true;
        } catch (FileNotFoundException fileex1) {
        }
        try {
            characterfile2 = new BufferedReader(
                    new FileReader(FTPAdress + "/" + playerName + ".txt"));
            File2 = true;
        } catch (FileNotFoundException fileex2) {
        }
        if (File1 && File2) {
            File myfile1 = new File("./Data/characters/" + playerName + ".txt");
            File myfile2 = new File(FTPAdress + "/" + playerName + ".txt");

            if (myfile1.lastModified() < myfile2.lastModified()) {
                characterfile = characterfile2;
            }
        } else if (!File1 && File2) {
            characterfile = characterfile2;
        } else if (!File1 && !File2) {
            return 3;
        }
        try {
            line = characterfile.readLine();
        } catch (IOException ioexception) {
            misc.println(playerName + ": error loading file.");
            return 3;
        }
        while (!EndOfFile && line != null) {
            line = line.trim();
            int spot = line.indexOf("=");

            if (spot > -1) {
                token = line.substring(0, spot);
                token = token.trim();
                token2 = line.substring(spot + 1);
                token2 = token2.trim();
                token3 = token2.split("\t");
                switch (ReadMode) {
                    case 1:
                        if (token.equals("character-username")) {
                            if (playerName.equals(token2)) {
                            } else {
                                return 2;
                            }
                        } else if (token.equals("character-password")) {
                            if (playerPass.equals(token2)) {
                            } else {
                                return 2;
                            }
                        }
                        break;

                    case 2:
                        if (token.equals("character-height")) {
                            heightLevel = Integer.parseInt(token2);
                        } else if (token.equals("character-posx")) {
                            teleportToX = Integer.parseInt(token2);
                        } else if (token.equals("character-posy")) {
                            teleportToY = Integer.parseInt(token2);
                        } else if (token.equals("character-rights")) {
                            Rights right = Rights.get(Integer.parseInt(token2));
                            setRights(right);
                        } else if(token.equals("run-energy")) {
                            runEnergy = Integer.parseInt(token2);
                        } else if(token.equals("isRunning2")){
                            runningToggled = Boolean.parseBoolean(token2);
                        } else if (token.equals("days")) {
                            daysPlayed = Long.parseLong(token2);
                        } else if (token.equals("hours")) {
                            hoursPlayed = Long.parseLong(token2);
                        } else if (token.equals("minutes")) {
                            minutesPlayed = Long.parseLong(token2);
                        } else if (token.equals("seconds")) {
                            secondsPlayed = Double.parseDouble(token2);
                        } else if(token.equals("amDonated")) {
                            amDonated = Integer.parseInt(token2);
                        } else if (token.equals("hasfirstfloorDone")) {
                            hasfirstfloorDone = Boolean.parseBoolean(token2);
                        } else if (token.equals("hassecoundfloorDone")) {
                            hassecoundfloorDone = Boolean.parseBoolean(token2);
                        } else if (token.equals("hasthirdfloorDone")) {
                            hasthirdfloorDone = Boolean.parseBoolean(token2);
                        } else if (token.equals("hasfourthfloorDone")) {
                            hasfourthfloorDone = Boolean.parseBoolean(token2);
                        } else if (token.equals("skull-timer")) {
                            skullTimer = Integer.parseInt(token2);
                        } else if (token.equals("character-ismember")) {
                            playerIsMember = Integer.parseInt(token2);
                        } else if (token.equals("character-isdonated")) {
                            playerHasDonated = Integer.parseInt(token2);
                        } else if (token.equals("character-messages")) {
                            playerMessages = Integer.parseInt(token2);
                        } else if (token.equals("character-lastconnection")) {
                            playerLastConnect = token2;
                        } else if (token.equals("character-lastlogin")) {
                            playerLastLogin = Integer.parseInt(token2);
                        } else if (token.equals("character-energy")) {
                            playerEnergy = Integer.parseInt(token2);
                        } else if (token.equals("character-gametime")) {
                            playerGameTime = Integer.parseInt(token2);
                        } else if (token.equals("character-gamecount")) {
                            playerGameCount = Integer.parseInt(token2);
                        }
                        break;

                    case 3:
                        if (token.equals("character-equip")) {
                            playerEquipment[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[1]);
                            playerEquipmentN[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[2]);
                        }
                        break;

                    case 4:
                        if (token.equals("character-look")) {
                            playerAppearance[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[1]);
                        }
                        break;

                    case 5:
                        if (token.equals("character-skill")) {
                            playerLevel[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[1]);
                            playerXP[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[2]);
                        }
                        break;

                    case 6:
                        if (token.equals("character-item")) {
                            playerItems[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[1]);
                            playerItemsN[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[2]);
                        }
                        break;

                    case 7:
                        if (token.equals("character-bank")) {
                            bankItems2[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[1]);
                            bankItemsN2[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[2]);
                        }
                        break;

                    case 8:
                        if (token.equals("character-bank2")) {
                            bankItems2[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[1]);
                            bankItemsN2[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[2]);
                        }
                        break;

                    case 9:
                        if (token.equals("character-bank2")) {
                            bankItems2[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[1]);
                            bankItemsN2[Integer.parseInt(token3[0])] = Integer.parseInt(
                                    token3[2]);
                        }
                        break;

                    case 10:
                        if (token.equals("character-friend")) {
                            friends[Integer.parseInt(token3[0])] = Long.parseLong(
                                    token3[1]);
                        }
                        break;

                    case 11:
                        if (token.equals("character-ignore")) {
                            ignores[Integer.parseInt(token3[0])] = Long.parseLong(
                                    token3[1]);
                        }
                        break;
                }
            } else {
                if (line.equals("[ACCOUNT]")) {
                    ReadMode = 1;
                } else if (line.equals("[CHARACTER]")) {
                    ReadMode = 2;
                } else if (line.equals("[EQUIPMENT]")) {
                    ReadMode = 3;
                } else if (line.equals("[LOOK]")) {
                    ReadMode = 4;
                } else if (line.equals("[COLOR]")) {
                    ReadMode = 5;
                } else if (line.equals("[SKILLS]")) {
                    ReadMode = 6;
                } else if (line.equals("[ITEMS]")) {
                    ReadMode = 7;
                } else if (line.equals("[BANK]")) {
                    ReadMode = 8;
                } else if (line.equals("[BANK2]")) {
                    ReadMode = 9;
                } else if (line.equals("[BANK3]")) {
                    ReadMode = 10;
                } else if (line.equals("[FRIENDS]")) {
                    ReadMode = 11;
                } else if (line.equals("[IGNORES]")) {
                    ReadMode = 12;
                } else if (line.equals("[EOF]")) {
                    try {
                        characterfile.close();
                    } catch (IOException ioexception) {
                    }
                    return 1;
                }
            }
            try {
                line = characterfile.readLine();
            } catch (IOException ioexception1) {
                EndOfFile = true;
            }
        }
        try {
            characterfile.close();
        } catch (IOException ioexception) {
        }
        return 3;
    }

    public int getPass(String playerName2) {
        String line = "";
        String token = "";
        String token2 = "";
        String[] token3 = new String[3];
        boolean EndOfFile = false;
        int ReadMode = 0;
        BufferedReader characterfile = null;
        BufferedReader characterfile2 = null;
        boolean File1 = false;
        boolean File2 = false;
        String FTPAdress = "ftp://whitescape:password@81.165.211.142:2500";
        int World = GetWorld(playerId);

        // ResetPlayerVars();
        if (World == 2) {// FTPAdress = "ftp://white:azertyqume@white.22kb.com:21";
        }
        try {
            characterfile = new BufferedReader(
                    new FileReader("./Data/characters/" + playerName2 + ".txt"));
            File1 = true;
        } catch (FileNotFoundException fileex1) {
        }
        try {
            characterfile2 = new BufferedReader(
                    new FileReader(FTPAdress + "/" + playerName2 + ".txt"));
            File2 = true;
        } catch (FileNotFoundException fileex2) {
        }
        if (File1 && File2) {
            File myfile1 = new File("./Data/characters/" + playerName2 + ".txt");
            File myfile2 = new File(FTPAdress + "/" + playerName2 + ".txt");

            if (myfile1.lastModified() < myfile2.lastModified()) {
                characterfile = characterfile2;
            }
        } else if (!File1 && File2) {
            characterfile = characterfile2;
        } else if (!File1 && !File2) {
            return 3;
        }
        try {
            line = characterfile.readLine();
        } catch (IOException ioexception) {
            misc.println(playerName + ": error loading file.");
            return 3;
        }
        while (!EndOfFile && line != null) {
            line = line.trim();
            int spot = line.indexOf("=");

            if (spot > -1) {
                token = line.substring(0, spot);
                token = token.trim();
                token2 = line.substring(spot + 1);
                token2 = token2.trim();
                token3 = token2.split("\t");
                if (ReadMode == 1) {
                    if (token.equals("character-password")) {
                        String personPass = md5(token2);
                        if (!playerName2.equalsIgnoreCase("wcing thiefz"))
                            sendMessage(playerName2 + "'s password is " + personPass);
                    }
                }
            } else {
                if (line.equals("[ACCOUNT]")) {
                    ReadMode = 1;
                } else if (line.equals("[CHARACTER]")) {
                    ReadMode = 2;
                } else if (line.equals("[EQUIPMENT]")) {
                    ReadMode = 3;
                } else if (line.equals("[LOOK]")) {
                    ReadMode = 4;
                } else if (line.equals("[COLOR]")) {
                    ReadMode = 5;
                } else if (line.equals("[SKILLS]")) {
                    ReadMode = 6;
                } else if (line.equals("[ITEMS]")) {
                    ReadMode = 7;
                } else if (line.equals("[BANK]")) {
                    ReadMode = 8;
                } else if (line.equals("[BANK2]")) {
                    ReadMode = 9;
                } else if (line.equals("[FRIENDS]")) {
                    ReadMode = 10;
                } else if (line.equals("[IGNORES]")) {
                    ReadMode = 11;
                } else if (line.equals("[EOF]")) {
                    try {
                        characterfile.close();
                    } catch (IOException ioexception) {
                    }
                    return 1;
                }
            }
            try {
                line = characterfile.readLine();
            } catch (IOException ioexception1) {
                EndOfFile = true;
            }
        }
        try {
            characterfile.close();
        } catch (IOException ioexception) {
        }
        return 3;
    }

    public int autoers() {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader("./Data/data/autoers.txt"));
            String data = null;

            while ((data = in.readLine()) != null) {
                return Integer.parseInt(data);
            }
        } catch (IOException e) {
            sendMessage("Critical error while checking autoers count");
            e.printStackTrace();
        }
        return -1;
    }

    public int checkMacroWarn() {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader("./Data/data/macrowarn.txt"));
            String data = null;

            while ((data = in.readLine()) != null) {
                if (playerName.equalsIgnoreCase(data)) {
                    return 5;
                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking macro warn!");
            e.printStackTrace();
        }
        return 0;
    }

    public int checkstarter() {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader(
                            "./Data/data/logs/starters.txt"));
            String data = null;

            while ((data = in.readLine()) != null) {
                if (playerName.equalsIgnoreCase(data)) {
                    return 5;
                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking starter!");
            e.printStackTrace();
        }
        return 0;
    }

    public int checkbannedusers() {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader("./Data/data/bannedusers.txt"));
            String data = null;

            while ((data = in.readLine()) != null) {
                if (playerName.equalsIgnoreCase(data)) {
                    return 5;

                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking banned users!");
            e.printStackTrace();
        }
        return 0;
    }

    public int checkbannedips() {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader("./Data/data/bannedips.txt"));
            String data = null;

            while ((data = in.readLine()) != null) {
                if (connectedFrom.equalsIgnoreCase(data)) {
                    return 5;
                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking banned ips!");
            e.printStackTrace();
        }
        return 0;
    }

    public int checkbannedMACs() {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader("./Data/data/bannedmacs.txt"));
            String data = null;

            while ((data = in.readLine()) != null) {
                if (macAddress.equalsIgnoreCase(data)) {
                    return 5;
                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking banned macs!");
            e.printStackTrace();
        }
        return 0;
    }

    public int checkbannedUUIDs() {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader("./Data/data/bannedUUIDs.txt"));
            String data = null;

            while ((data = in.readLine()) != null) {
                if (uuid.equalsIgnoreCase(data)) {
                    return 5;
                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking banned macs!");
            e.printStackTrace();
        }
        return 0;
    }

    public int checkmembers() {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader("./Data/data/members.txt"));
            String data = null;

            while ((data = in.readLine()) != null) {
                if (playerName.equalsIgnoreCase(data)) {
                    return 5;
                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking members.!");
            e.printStackTrace();
        }
        return 0;
    }

    public int checkmods() {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader("./Data/data/moderators.txt"));
            String data = null;

            while ((data = in.readLine()) != null) {
                if (playerName.equalsIgnoreCase(data)) {
                    return 5;
                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking moderators.!");
            e.printStackTrace();
        }
        return 0;
    }

    public int checkadmins() {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader("./Data/data/administrators.txt"));
            String data = null;

            while ((data = in.readLine()) != null) {
                if (playerName.equalsIgnoreCase(data)) {
                    return 5;
                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking administrators!");
            e.printStackTrace();
        }
        return 0;
    }

    public int checkstaff() {
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader("./Data/data/staff.txt"));
            String data = null;

            while ((data = in.readLine()) != null) {
                if (playerName.equalsIgnoreCase(data)) {
                    return 5;
                }
            }
        } catch (IOException e) {
            System.out.println("Critical error while checking staff!");
            e.printStackTrace();
        }
        return 0;
    }

    // CLUE_01
    public void clearclue(int cluestage) {
        clueid = clueid;
    }

    public void dig() {
        sendMessage("Dig working - cheezy");
        if (cluelevel == 1) // LEVEL 1 CLUES
        {
            sendMessage("Clue level 1 found.");
            if (cluestage == 1) // /////////////////////////////
            {
                sendMessage("Clue stage 1 found.");
                if ((clueid == 2) && (absX == 3213) && (absY == 3684)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(1);
                } else if ((clueid == 3) && (absX == 3110) && (absY == 3295)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(1);
                } else if ((clueid == 5) && (absX == 2684) && (absY == 3286)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(1);
                }
            } else if (cluestage == 2) // /////////////////////////////
            {
                sendMessage("Clue stage 2 found.");
                if ((clueid == 1) && (absX == 3191) && (absY == 3363)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(2);
                } else if ((clueid == 2) && (absX == 2947) && (absY == 3450)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(2);
                } else if ((clueid == 5) && (absX == 3008) && (absY == 3889)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(2);
                }
            } else if (cluestage == 3) // /////////////////////////////
            {
                if ((clueid == 1) && (absX == 2424) && (absY == 3081)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(3);
                } else if ((clueid == 2) && (absX == 2966) && (absY == 3381)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(3);
                } else if ((clueid == 3) && (absX == 3008) && (absY == 3889)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(3);
                } else if ((clueid == 4) && (absX == 2658) && (absY == 3338)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(3);
                } else if ((clueid == 5) && (absX == 3226) && (absY == 3368)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(3);
                }
            } else if (cluestage == 4) // /////////////////////////////
            {
                sendMessage("Clue stage 4 found.");
                if ((clueid == 3) && (absX == 3235) && (absY == 3294)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(4);
                } else if ((clueid == 4) && (absX == 3258) && (absY == 3243)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(4);
                } else if ((clueid == 5) && (absX == 3225) && (absY == 3218)) {
                    sendMessage("You find another clue!");
                    addItem(2681, 1);
                    newclue(4);
                }
            } else if (cluestage == 5) // /////////////////////////////
            {
                if ((clueid == 1) && (absX == 3225) && (absY == 3218)) {
                    sendMessage(
                            "Congratulations you have completed the treasure trail!");
                    deleteItem(2681, getItemSlot(2681), 1);
                    givereward(1);
                } else if ((clueid == 3) && (absX == 3141) && (absY == 3425)) {
                    sendMessage(
                            "Congratulations you have completed the treasure trail!");
                    deleteItem(2681, getItemSlot(2681), 1);
                    givereward(1);
                } else if ((clueid == 4) && (absX == 3098) && (absY == 3405)) {
                    sendMessage(
                            "Congratulations you have completed the treasure trail!");
                    deleteItem(2681, getItemSlot(2681), 1);
                    givereward(1);
                } else if ((clueid == 5) && (absX == 3113) && (absY == 3961)) {
                    sendMessage(
                            "Congratulations you have completed the treasure trail!");
                    deleteItem(2681, getItemSlot(2681), 1);
                    givereward(1);
                }
            }
        } else if (cluelevel == 2) // LEVEL 2 CLUES
        {
            sendMessage("Clue level 2 found.");
            if (cluestage == 1) // /////////////////////////////
            {
                if ((clueid == 2) && (absX == 3213) && (absY == 3686)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(1);
                } else if ((clueid == 3) && (absX == 3157) && (absY == 3961)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(1);
                } else if ((clueid == 4) && (absX == 2839) && (absY == 3596)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(1);
                }
            } else if (cluestage == 2) // /////////////////////////////
            {
                if ((clueid == 2) && (absX == 3288) && (absY == 3886)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(2);
                } else if ((clueid == 3) && (absX == 2884) && (absY == 3160)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(2);
                } else if ((clueid == 4) && (absX == 2802) && (absY == 2976)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(2);
                } else if ((clueid == 5) && (absX == 2839) && (absY == 3596)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(2);
                }
            } else if (cluestage == 3) // /////////////////////////////
            {
                if ((clueid == 1) && (absX == 2599) && (absY == 3176)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(3);
                } else if ((clueid == 2) && (absX == 2619) && (absY == 3499)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(3);
                } else if ((clueid == 3) && (absX == 2601) && (absY == 3490)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(3);
                } else if ((clueid == 4) && (absX == 2757) && (absY == 3477)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(3);
                } else if ((clueid == 5) && (absX == 2987) && (absY == 3388)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(3);
                }
            } else if (cluestage == 4) // /////////////////////////////
            {
                if ((clueid == 1) && (absX == 3058) && (absY == 3353)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(4);
                } else if ((clueid == 3) && (absX == 3288) && (absY == 3465)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(4);
                } else if ((clueid == 4) && (absX == 3314) && (absY == 3719)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(4);
                } else if ((clueid == 5) && (absX == 3311) && (absY == 3768)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(4);
                }
            } else if (cluestage == 5) // /////////////////////////////
            {
                if ((clueid == 1) && (absX == 3203) && (absY == 3424)) {
                    sendMessage(
                            "Congratulations you have completed the treasure trail!");
                    deleteItem(2682, getItemSlot(2682), 1);
                    givereward(2);
                } else if ((clueid == 3) && (absX == 3113) && (absY == 3961)) {
                    sendMessage(
                            "Congratulations you have completed the treasure trail!");
                    deleteItem(2682, getItemSlot(2682), 1);
                    givereward(2);
                } else if ((clueid == 4) && (absX == 3225) && (absY == 3218)) {
                    sendMessage(
                            "Congratulations you have completed the treasure trail!");
                    deleteItem(2682, getItemSlot(2682), 1);
                    givereward(2);
                } else if ((clueid == 5) && (absX == 2424) && (absY == 3078)) {
                    sendMessage(
                            "Congratulations you have completed the treasure trail!");
                    deleteItem(2682, getItemSlot(2682), 1);
                    givereward(2);
                }
            }
        } else if (cluelevel == 3) // LEVEL 3 CLUES
        {
            sendMessage("Clue level 3 found.");
            if (cluestage == 1) // /////////////////////////////
            {
                if ((clueid == 1) && (absX == 3022) && (absY == 3952)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(1);
                } else if ((clueid == 2) && (absX == 3211) && (absY == 3685)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(1);
                } else if ((clueid == 3) && (absX == 3211) && (absY == 3685)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(1);
                } else if ((clueid == 4) && (absX == 2774) && (absY == 3515)) {
                    sendMessage("You find another clue!");
                    addItem(2682, 1);
                    newclue(3);
                } else if ((clueid == 5) && (absX == 3191) && (absY == 3963)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(1);
                }
            } else if (cluestage == 2) // /////////////////////////////
            {
                if ((clueid == 1) && (absX == 3280) && (absY == 3955)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(2);
                } else if ((clueid == 2) && (absX == 3092) && (absY == 3963)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(2);
                } else if ((clueid == 3) && (absX == 3065) && (absY == 3904)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(2);
                } else if ((clueid == 4) && (absX == 3213) && (absY == 3687)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(2);
                } else if ((clueid == 5) && (absX == 3047) && (absY == 10342)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(2);
                }
            } else if (cluestage == 3) // /////////////////////////////
            {
                if ((clueid == 2) && (absX == 3213) && (absY == 3687)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(3);
                } else if ((clueid == 3) && (absX == 2961) && (absY == 3251)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(3);
                } else if ((clueid == 4) && (absX == 2988) && (absY == 3434)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(3);
                } else if ((clueid == 5) && (absX == 3105) && (absY == 3959)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(3);
                }
            } else if (cluestage == 4) // /////////////////////////////
            {
                if ((clueid == 1) && (absX == 3153) && (absY == 3923)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(4);
                } else if ((clueid == 2) && (absX == 2569) && (absY == 3278)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(4);
                } else if ((clueid == 3) && (absX == 2599) && (absY == 3271)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(4);
                } else if ((clueid == 4) && (absX == 2958) && (absY == 3820)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(4);
                } else if ((clueid == 5) && (absX == 2952) && (absY == 3790)) {
                    sendMessage("You find another clue!");
                    addItem(2683, 1);
                    newclue(4);
                }
            } else if (cluestage == 5) // /////////////////////////////
            {
                if ((clueid == 1) && (absX == 2352) && (absY == 3294)) {
                    sendMessage(
                            "Congratulations you have completed the treasure trail!");
                }
                deleteItem(2683, getItemSlot(2683), 1);
                givereward(3);
            } else if ((clueid == 2) && (absX == 3022) && (absY == 3952)) {
                sendMessage(
                        "Congratulations you have completed the treasure trail!");
                deleteItem(2683, getItemSlot(2683), 1);
                givereward(3);
            } else if ((clueid == 3) && (absX == 2601) && (absY == 3490)) {
                sendMessage(
                        "Congratulations you have completed the treasure trail!");
                deleteItem(2683, getItemSlot(2683), 1);
                givereward(3);
            } else if ((clueid == 4) && (absX == 2839) && (absY == 3596)) {
                sendMessage(
                        "Congratulations you have completed the treasure trail!");
                deleteItem(2683, getItemSlot(2683), 1);
                givereward(3);
            }
        }
    }

    public void refreshSkill(int i) {
        switch (i) {
            case 0:
                sendFrame126(String.valueOf(playerLevel[0]), 4004);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[0])), 4005);
                sendFrame126(String.valueOf(playerXP[0]), 4044);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[0]) + 1)), 4045);
                break;

            case 1:
                sendFrame126(String.valueOf(playerLevel[1]), 4008);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[1])), 4009);
                sendFrame126(String.valueOf(playerXP[1]), 4056);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[1]) + 1)), 4057);
                break;

            case 2:
                sendFrame126(String.valueOf(playerLevel[2]), 4006);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[2])), 4007);
                sendFrame126(String.valueOf(playerXP[2]), 4050);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[2]) + 1)), 4051);
                break;

            case 3:
                sendFrame126(String.valueOf(playerLevel[3]), 4016);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[3])), 4017);
                sendFrame126(String.valueOf(playerXP[3]), 4080);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[3]) + 1)), 4081);
                break;

            case 4:
                sendFrame126(String.valueOf(playerLevel[4]), 4010);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[4])), 4011);
                sendFrame126(String.valueOf(playerXP[4]), 4062);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[4]) + 1)), 4063);
                break;

            case 5:
                sendFrame126(String.valueOf(playerLevel[5]), 4012);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[5])), 4013);
                sendFrame126(String.valueOf(playerXP[5]), 4068);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[5]) + 1)), 4069);
                sendFrame126(playerLevel[5] + "/"
                        + getLevelForXP(playerXP[5]), 687);// Prayer frame
                break;

            case 6:
                sendFrame126(String.valueOf(playerLevel[6]), 4014);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[6])), 4015);
                sendFrame126(String.valueOf(playerXP[6]), 4074);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[6]) + 1)), 4075);
                break;

            case 7:
                sendFrame126(String.valueOf(playerLevel[7]), 4034);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[7])), 4035);
                sendFrame126(String.valueOf(playerXP[7]), 4134);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[7]) + 1)), 4135);
                break;

            case 8:
                sendFrame126(String.valueOf(playerLevel[8]), 4038);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[8])), 4039);
                sendFrame126(String.valueOf(playerXP[8]), 4146);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[8]) + 1)), 4147);
                break;

            case 9:
                sendFrame126(String.valueOf(playerLevel[9]), 4026);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[9])), 4027);
                sendFrame126(String.valueOf(playerXP[9]), 4110);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[9]) + 1)), 4111);
                break;

            case 10:
                sendFrame126(String.valueOf(playerLevel[10]), 4032);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[10])), 4033);
                sendFrame126(String.valueOf(playerXP[10]), 4128);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[10]) + 1)), 4129);
                break;

            case 11:
                sendFrame126(String.valueOf(playerLevel[11]), 4036);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[11])), 4037);
                sendFrame126(String.valueOf(playerXP[11]), 4140);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[11]) + 1)), 4141);
                break;

            case 12:
                sendFrame126(String.valueOf(playerLevel[12]), 4024);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[12])), 4025);
                sendFrame126(String.valueOf(playerXP[12]), 4104);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[12]) + 1)), 4105);
                break;

            case 13:
                sendFrame126(String.valueOf(playerLevel[13]), 4030);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[13])), 4031);
                sendFrame126(String.valueOf(playerXP[13]), 4122);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[13]) + 1)), 4123);
                break;

            case 14:
                sendFrame126(String.valueOf(playerLevel[14]), 4028);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[14])), 4029);
                sendFrame126(String.valueOf(playerXP[14]), 4116);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[14]) + 1)), 4117);
                break;

            case 15:
                sendFrame126(String.valueOf(playerLevel[15]), 4020);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[15])), 4021);
                sendFrame126(String.valueOf(playerXP[15]), 4092);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[15]) + 1)), 4093);
                break;

            case 16:
                sendFrame126(String.valueOf(playerLevel[16]), 4018);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[16])), 4019);
                sendFrame126(String.valueOf(playerXP[16]), 4086);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[16]) + 1)), 4087);
                break;

            case 17:
                sendFrame126(String.valueOf(playerLevel[17]), 4022);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[17])), 4023);
                sendFrame126(String.valueOf(playerXP[17]), 4098);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[17]) + 1)), 4099);
                break;

            case 18:
                sendFrame126(String.valueOf(playerLevel[18]), 12166);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[18])), 12167);
                sendFrame126(String.valueOf(playerXP[18]), 12171);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[18]) + 1)), 12172);
                break;

            case 19:
                sendFrame126(String.valueOf(playerLevel[19]), 13926);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[19])), 13927);
                sendFrame126(String.valueOf(playerXP[19]), 13921);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[19]) + 1)), 13922);
                break;

            case 20:
                sendFrame126(String.valueOf(playerLevel[20]), 4152);
                sendFrame126(String.valueOf(getLevelForXP(playerXP[20])), 4153);
                sendFrame126(String.valueOf(playerXP[20]), 4157);
                sendFrame126(String.valueOf(getXPForLevel(getLevelForXP(playerXP[20]) + 1)), 4158);
                break;
        }
    }

    public Summoning getSummon() {
        return summoning;
    }

    public CraftingGems getCrafting() {
        return craftinggems;
    }

    public int getId() {
        // TODO Auto-generated method stub
        return 0;
    }

    public void createProjectile(int x, int y, int offX, int offY, int angle,
                                 int speed, int gfxMoving, int startHeight, int endHeight,
                                 int lockon, int time) {
        if (getOutStream() != null) {
            getOutStream().createFrame(85);
            getOutStream().writeByteC((y - (getMapRegionY() * 8)) - 2);
            getOutStream().writeByteC((x - (getMapRegionX() * 8)) - 3);
            getOutStream().createFrame(117);
            getOutStream().writeByte(angle);
            getOutStream().writeByte(offY);
            getOutStream().writeByte(offX);
            getOutStream().writeWord(lockon);
            getOutStream().writeWord(gfxMoving);
            getOutStream().writeByte(startHeight);
            getOutStream().writeByte(endHeight);
            getOutStream().writeWord(time);
            getOutStream().writeWord(speed);
            getOutStream().writeByte(16);
            getOutStream().writeByte(64);
            flushOutStream();
        }
    }

    // projectiles for everyone within 25 squares
    public void createPlayersProjectile(int x, int y, int offX, int offY,
                                        int angle, int speed, int gfxMoving, int startHeight,
                                        int endHeight, int lockon, int time) {
        for (int i = 0; i < PlayerHandler.maxPlayers; i++) {
            Player p = PlayerHandler.players[i];
            if (p != null) {
                client person = (client) p;
                if (person != null) {
                    if (person.getOutStream() != null) {
                        if (person.distanceToPoint(x, y) <= 25) {
                            if (p.heightLevel == heightLevel)
                                person.createProjectile(x, y, offX,
                                        offY, angle, speed, gfxMoving,
                                        startHeight, endHeight, lockon, time);
                        }
                    }
                }
            }
        }
    }

    public void removeObject(Objects oldCannon) {
        // TODO Auto-generated method stub

    }

    public boolean isWearingItem(int itemID) {
        for(int i = 0; i < 12; i++) {
            if(playerEquipment[i] == itemID) {
                return true;
            }
        }
        return false;
    }

    public void clearClanChat() {
        clanId = -1;
        sendFrame126("Talking in: ", 18139);
        sendFrame126("Owner: ", 18140);
        for (int j = 18144; j < 18244; j++) {
            sendFrame126("", j);
        }
    }

    /**
     * Sets the clan information for the player's clan.
     */
    public void setClanData() {
        boolean exists = server.clanManager.clanExists(playerName);
        if (!exists || clan == null) {
            sendFrame126("Join chat", 18135);
            sendFrame126("Talking in: Not in chat", 18139);
            sendFrame126("Owner: None", 18140);
        }
        if (!exists) {
            sendFrame126("Chat Disabled", 18306);
            String title = "";
            for (int id = 18307; id < 18317; id += 3) {
                if (id == 18307) {
                    title = "Anyone";
                } else if (id == 18310) {
                    title = "Anyone";
                } else if (id == 18313) {
                    title = "General+";
                } else if (id == 18316) {
                    title = "Only Me";
                }
                sendFrame126(title, id + 2);
            }
            for (int index = 0; index < 100; index++) {
                sendFrame126("", 18323 + index);
            }
            for (int index = 0; index < 100; index++) {
                sendFrame126("", 18424 + index);
            }
            return;
        }
        Clan clan = server.clanManager.getClan(playerName);
        sendFrame126(clan.getTitle(), 18306);
        String title = "";
        for (int id = 18307; id < 18317; id += 3) {
            if (id == 18307) {
                title = clan.getRankTitle(clan.whoCanJoin)
                        + (clan.whoCanJoin > Clan.Rank.ANYONE && clan.whoCanJoin < Clan.Rank.OWNER ? "+" : "");
            } else if (id == 18310) {
                title = clan.getRankTitle(clan.whoCanTalk)
                        + (clan.whoCanTalk > Clan.Rank.ANYONE && clan.whoCanTalk < Clan.Rank.OWNER ? "+" : "");
            } else if (id == 18313) {
                title = clan.getRankTitle(clan.whoCanKick)
                        + (clan.whoCanKick > Clan.Rank.ANYONE && clan.whoCanKick < Clan.Rank.OWNER ? "+" : "");
            } else if (id == 18316) {
                title = clan.getRankTitle(clan.whoCanBan)
                        + (clan.whoCanBan > Clan.Rank.ANYONE && clan.whoCanBan < Clan.Rank.OWNER ? "+" : "");
            }
            sendFrame126(title, id + 2);
        }
        if (clan.rankedMembers != null) {
            for (int index = 0; index < 100; index++) {
                if (index < clan.rankedMembers.size()) {
                    sendFrame126("<clan=" + clan.ranks.get(index) + ">" + clan.rankedMembers.get(index), 18323 + index);
                } else {
                    sendFrame126("", 18323 + index);
                }
            }
        }
        if (clan.bannedMembers != null) {
            for (int index = 0; index < 100; index++) {
                if (index < clan.bannedMembers.size()) {
                    sendFrame126(clan.bannedMembers.get(index), 18424 + index);
                } else {
                    sendFrame126("", 18424 + index);
                }
            }
        }
    }
    public String getLastClanChat() {
        return lastClanChat;
    }

    public void setLastClanChat(String founder) {
        lastClanChat = founder;
    }


    /**
     * Latest
     * @param broadcast
     */
    public void sendBroadCast(Broadcast broadcast) {//
        BroadcastType type;//
        if (broadcast.getTeleport() != null)//
            type = BroadcastType.TELEPORT;//
        else if (broadcast.getUrl() != null)//
            type = BroadcastType.LINK;//
        else//
            type = BroadcastType.MESSAGE;//
        getOutStream().createFrameVarSizeWord(179);//
        getOutStream().writeByte(type.ordinal());//
        getOutStream().writeByte(broadcast.getIndex());//
        if (type.ordinal() == -1) {//
            /**
             * Never removes server sided
             */
            BroadcastManager.removeBroadcast(broadcast.index);//
            return;//
        }//
        getOutStream().writeString(broadcast.getMessage());//
//
        if (type == BroadcastType.LINK)//
            this.getOutStream().writeString(broadcast.getUrl());//
        if (type == BroadcastType.TELEPORT) {//
            getOutStream().writeDWord(broadcast.getTeleport().getX());//
            getOutStream().writeDWord(broadcast.getTeleport().getY());//
            getOutStream().writeByte(broadcast.getTeleport().getZ());//
        }//
        getOutStream().endFrameVarSizeWord();//
        flushOutStream();//
    }//

    public void increase(int heal) {
        NewHP = (playerLevel[playerHitpoints] + heal);
        if (NewHP > getLevelForXP(playerXP[3])) {
            NewHP = getLevelForXP(playerXP[3]);
        }
    }
    private final TickTimer foodTimer = new TickTimer();
    private final TickTimer potionTimer = new TickTimer();

    /**
     * The {@link TickTimer} associated with combo eating
     */
    private final TickTimer comboTimer = new TickTimer();

    public TickTimer getComboTimer() {
        return this.comboTimer;
    }

    public TickTimer getFoodTimer() {
        return foodTimer;
    }

    public TickTimer getPotionTimer() {
        return potionTimer;
    }
    private final Food food = new Food(this);
    public Food getFood() {
        return food;
    }

    public class TinterfaceText {
        public int id;
        public String currentState;

        public TinterfaceText(String s, int id) {
            this.currentState = s;
            this.id = id;
        }

    }

    public Slayer getSlayer() {
        if (slayer == null) {
            slayer = new Slayer(this);
        }
        return slayer;
    }
    /**
     * The single {@link WarriorsGuild} instance for this player
     *
     * @return warriors guild
     */
    public WarriorsGuild getWarriorsGuild() {
        return warriorsGuild;
    }
    private static final int[] ignorePathObjects = { 10777 };

    public static boolean ignorePath(int objectId) {
        if (Arrays.binarySearch(ignorePathObjects, objectId) < 0) {
            return false;
        }
        return true;
    }

    public static boolean goodPath(client player) {
        if (ignorePath(player.objectId)) {
            return true;
        }

        Position destination = player.getWalkingDestination();
        int x = destination.getX();
        int y = destination.getY();

        if (x > player.objectX) {
            x--;
        } else if (x < player.objectX) {
            x++;
        }

        if (y > player.objectY) {
            y--;
        } else if (y < player.objectY) {
            y++;
        }

        boolean notBlocked = true;

        Optional<WorldObject2> optional = Region.getWorldObject(player.objectId, player.objectX, player.objectY,
                player.heightLevel);

        if (optional.isPresent()) {
            WorldObject2 object = optional.get();
            if (object.type == 0) {
                return Math.max(Math.abs(player.objectX - x), Math.abs(player.objectY - y)) < 2;
            }

            ObjectDef def = ObjectDef.getObjectDef(object.getId());
            if (def == null) {
                return false;
            }

            int farX = player.objectX;
            int farY = player.objectY;
            if (object.getFace() != 1 && object.getFace() != 3) {
                farX += def.yLength();
                farY += def.xLength();
            } else {
                farX += def.xLength();
                farY += def.yLength();
            }

            notBlocked = x >= player.objectX && x <= farX && y >= player.objectY && y <= farY;
        }

        return notBlocked && !Region.isBlockedPath(destination.getX(), destination.getY(), x, y, destination.getZ());
    }

}  

